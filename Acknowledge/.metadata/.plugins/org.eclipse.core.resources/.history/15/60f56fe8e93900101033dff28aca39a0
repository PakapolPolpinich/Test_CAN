/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>

#define NODE_B

FDCAN_HandleTypeDef hfdcan1;
UART_HandleTypeDef huart3;

/* Private function prototypes -----------------------------------------------*/
static void MX_FDCAN1_Init(void);
void SetFilter(uint16_t ID ,uint16_t msk);
void TX_Send_CAN();
void Print_CAN_Error();
void Print_CAN_Filter(FDCAN_FilterTypeDef* config);

volatile uint8_t counter = 0;

typedef struct {
    FDCAN_TxHeaderTypeDef TxHeader;
    FDCAN_RxHeaderTypeDef RxHeader;
    uint32_t msgID;
    uint8_t dataTx[2];
    uint8_t dataRx[2];
} CAN_SET;

CAN_SET CAN_Payload;

/* Declare filter struct globally */
FDCAN_FilterTypeDef sFilterConfig;

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_FDCAN1_Init();
    MX_USART3_UART_Init();

    CAN_Payload.dataTx[0] = 0x0;

    while (1)
    {
        // Main loop
    }
}

/**
  * @brief FDCAN1 Initialization Function
  */
static void MX_FDCAN1_Init(void)
{
    hfdcan1.Instance = FDCAN1;
    hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
    hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
    hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
    hfdcan1.Init.AutoRetransmission = DISABLE;
    hfdcan1.Init.TransmitPause = DISABLE;
    hfdcan1.Init.ProtocolException = DISABLE;
    hfdcan1.Init.NominalPrescaler = 25;
    hfdcan1.Init.NominalSyncJumpWidth = 1;
    hfdcan1.Init.NominalTimeSeg1 = 13;
    hfdcan1.Init.NominalTimeSeg2 = 2;
    hfdcan1.Init.DataPrescaler = 1;
    hfdcan1.Init.DataSyncJumpWidth = 1;
    hfdcan1.Init.DataTimeSeg1 = 1;
    hfdcan1.Init.DataTimeSeg2 = 1;
    hfdcan1.Init.StdFiltersNbr = 1;
    hfdcan1.Init.ExtFiltersNbr = 0;
    hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;

    if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
        Error_Handler();

    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,
        FDCAN_REJECT,
        FDCAN_REJECT,
        FDCAN_REJECT_REMOTE,
        FDCAN_REJECT_REMOTE
    );

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
    sFilterConfig.FilterIndex = 0;
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
    sFilterConfig.FilterID1 = 0x22;
    sFilterConfig.FilterID2 = 0x7FF;

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
        Error_Handler();

    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
        Error_Handler();

    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
        Error_Handler();
}

/* Print filter configuration */
void Print_CAN_Filter(FDCAN_FilterTypeDef* config) {
    printf("\r\n=== FDCAN Filter Config ===\r\n");
    printf("FilterIndex : %lu\r\n", (uint32_t)config->FilterIndex);
    printf("ID Type     : %s\r\n", config->IdType == FDCAN_STANDARD_ID ? "STANDARD" : "EXTENDED");
    printf("Filter Type : %s\r\n", config->FilterType == FDCAN_FILTER_MASK ? "MASK" : "OTHER");
    printf("Match ID    : 0x%03lX\r\n", config->FilterID1);
    printf("Mask        : 0x%03lX\r\n", config->FilterID2);

    const char* action = "UNKNOWN";
    if (config->FilterConfig == FDCAN_FILTER_TO_RXFIFO0) action = "TO_RXFIFO0";
    else if (config->FilterConfig == FDCAN_FILTER_TO_RXFIFO1) action = "TO_RXFIFO1";
    else if (config->FilterConfig == FDCAN_FILTER_REJECT)    action = "REJECT";

    printf("Action      : %s\r\n", action);
    printf("===========================\r\n");
}

/* Print CAN errors if any */
void Print_CAN_Error(void) {
    uint32_t lec = (FDCAN1->PSR >> 0) & 0x7;

    switch (lec) {
        case 0b000: printf("No CAN error occurred\r\n"); break;
        case 0b001: printf("Stuff error: More than 5 equal bits in a row\r\n"); break;
        case 0b010: printf("Form error: Wrong format in received frame\r\n"); break;
        case 0b011: printf("Ack error: No ACK from other node\r\n"); break;
        case 0b100: printf("Bit1 error: Sent recessive, bus was dominant\r\n"); break;
        case 0b101: printf("Bit0 error: Sent dominant, bus was recessive\r\n"); break;
        case 0b110: printf("CRC error: CRC mismatch on received frame\r\n"); break;
        case 0b111: printf("LEC unchanged: No event since last read\r\n"); break;
    }
}

void TX_Send_CAN(void) {
    CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
    CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID;
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
    CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
    CAN_Payload.TxHeader.MessageMarker = 0;

    CAN_Payload.dataTx[0] ^= 1;

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader, CAN_Payload.dataTx) != HAL_OK)
        Error_Handler();
}

/* RX Callback */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader, CAN_Payload.dataRx) != HAL_OK)
            Error_Handler();

        if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
            Error_Handler();

        printf("Received ID: 0x%03lX\r\n", CAN_Payload.RxHeader.Identifier);
        Print_CAN_Filter(&sFilterConfig);

        if (CAN_Payload.dataRx[0] == 0x1) {
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
        }
    }
}

/* Required for printf */
int __io_putchar(int ch)
{
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
    return ch;
}

/* Error Handler */
void Error_Handler(void)
{
    __disable_irq();
    while (1) {}
}
