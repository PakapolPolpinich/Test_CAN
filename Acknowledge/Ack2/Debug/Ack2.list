
Ack2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007394  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080075ec  080075ec  000085ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000087d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000087e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077e4  080077e4  000087e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080077e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  08007850  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08007850  00009328  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126df  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bf  00000000  00000000  0001b77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0001dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ef  00000000  00000000  0001e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021078  00000000  00000000  0001f33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b3e  00000000  00000000  000403b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8875  00000000  00000000  00051ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a76a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  0011a7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0011e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000068 	.word	0x20000068
 8000274:	00000000 	.word	0x00000000
 8000278:	080075d4 	.word	0x080075d4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000006c 	.word	0x2000006c
 8000294:	080075d4 	.word	0x080075d4

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SystemClock_Config>:
 */
#include "RCC_clock.h"


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	@ 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2250      	movs	r2, #80	@ 0x50
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 fa72 	bl	8006aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <SystemClock_Config+0xdc>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005de:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xdc>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xdc>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xdc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d1f9      	bne.n	80005f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000626:	230c      	movs	r3, #12
 8000628:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062a:	2300      	movs	r3, #0
 800062c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f001 ff46 	bl	80024c8 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    //Error_Handler();
	while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <SystemClock_Config+0x92>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fb67 	bl	8002d38 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    //Error_Handler();
	while(1);
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <SystemClock_Config+0xc0>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <SystemClock_Config+0xe0>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	44020800 	.word	0x44020800
 8000690:	40022000 	.word	0x40022000

08000694 <MX_GPIO_Init>:
 *      Author: Admin
 */
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b47      	ldr	r3, [pc, #284]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a45      	ldr	r2, [pc, #276]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b43      	ldr	r3, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c8:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a3e      	ldr	r2, [pc, #248]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0x134>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000714:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000728:	f001 fe6a 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	4827      	ldr	r0, [pc, #156]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000732:	f001 fe65 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0x144>)
 800074c:	f001 fd06 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000768:	f001 fcf8 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076c:	2308      	movs	r3, #8
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000784:	f001 fcea 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000788:	2320      	movs	r3, #32
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 800079c:	f001 fcde 	bl	800215c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2010      	movs	r0, #16
 80007a6:	f000 fd7b 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 fd92 	bl	80012d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2018      	movs	r0, #24
 80007b6:	f000 fd73 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80007ba:	2018      	movs	r0, #24
 80007bc:	f000 fd8a 	bl	80012d4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	@ 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	44020c00 	.word	0x44020c00
 80007cc:	42020000 	.word	0x42020000
 80007d0:	42020400 	.word	0x42020400
 80007d4:	10210000 	.word	0x10210000
 80007d8:	42020800 	.word	0x42020800

080007dc <main>:
CAN_SET CAN_Payload;



int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fbe8 	bl	8000fb4 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f7ff fee4 	bl	80005b0 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff54 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007ec:	f000 f80a 	bl	8000804 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 fb6a 	bl	8000ec8 <MX_USART3_UART_Init>

  CAN_Payload.dataTx[0] = 0x0;
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <main+0x24>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <main+0x20>
 8000800:	20000180 	.word	0x20000180

08000804 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000808:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 800080a:	4a2c      	ldr	r2, [pc, #176]	@ (80008bc <MX_FDCAN1_Init+0xb8>)
 800080c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800080e:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000814:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000820:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000822:	2200      	movs	r2, #0
 8000824:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000828:	2200      	movs	r2, #0
 800082a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800082c:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 800082e:	2200      	movs	r2, #0
 8000830:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 8000832:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000834:	2219      	movs	r2, #25
 8000836:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 800083a:	2201      	movs	r2, #1
 800083c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000840:	220d      	movs	r2, #13
 8000842:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000846:	2202      	movs	r2, #2
 8000848:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 800084c:	2201      	movs	r2, #1
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000852:	2201      	movs	r2, #1
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 800085e:	2201      	movs	r2, #1
 8000860:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000864:	2201      	movs	r2, #1
 8000866:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000874:	4810      	ldr	r0, [pc, #64]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000876:	f000 fe91 	bl	800159c <HAL_FDCAN_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000880:	f000 f8cc 	bl	8000a1c <Error_Handler>
  }


  SetFilter(0x105,0x7FF);
 8000884:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000888:	f240 1005 	movw	r0, #261	@ 0x105
 800088c:	f000 f818 	bl	80008c0 <SetFilter>
//  sFilterConfig.FilterID2 = 0x7FF;    // Mask ทุกบิตต้องตรง

  // ตั้งค่าให้ reject ทุกอย่างนอกจากตรง filter


  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000890:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 8000892:	f001 f868 	bl	8001966 <HAL_FDCAN_Start>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_FDCAN1_Init+0x9c>
  	 /* Notification Error */
  	Error_Handler();
 800089c:	f000 f8be 	bl	8000a1c <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_FDCAN1_Init+0xb4>)
 80008a6:	f001 f98f 	bl	8001bc8 <HAL_FDCAN_ActivateNotification>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_FDCAN1_Init+0xb0>
  {
	/* Notification Error */
	Error_Handler();
 80008b0:	f000 f8b4 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000084 	.word	0x20000084
 80008bc:	4000a400 	.word	0x4000a400

080008c0 <SetFilter>:



/* USER CODE BEGIN 4 */
void SetFilter(uint16_t ID ,uint16_t msk){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	4613      	mov	r3, r2
 80008ce:	80bb      	strh	r3, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = ID;
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = msk;
 80008e4:	88bb      	ldrh	r3, [r7, #4]
 80008e6:	61fb      	str	r3, [r7, #28]

	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2301      	movs	r3, #1
 80008ee:	2202      	movs	r2, #2
 80008f0:	2102      	movs	r1, #2
 80008f2:	4809      	ldr	r0, [pc, #36]	@ (8000918 <SetFilter+0x58>)
 80008f4:	f001 f806 	bl	8001904 <HAL_FDCAN_ConfigGlobalFilter>
	      FDCAN_REJECT,
	      FDCAN_REJECT_REMOTE,
	      FDCAN_REJECT_REMOTE
	  );

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <SetFilter+0x58>)
 8000900:	f000 ffa6 	bl	8001850 <HAL_FDCAN_ConfigFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SetFilter+0x4e>
	{
	  /* Filter configuration Error */
	  Error_Handler();
 800090a:	f000 f887 	bl	8000a1c <Error_Handler>
	}
}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000084 	.word	0x20000084

0800091c <HAL_GPIO_EXTI_Falling_Callback>:
    {
    	Error_Handler();
    }
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	#ifdef NODE_A
		Test_Ack();
		Print_CAN_Error();
	#endif
	}
	if(GPIO_Pin == B1_BLUE_USER_BUTTON_Pin){
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092c:	d120      	bne.n	8000970 <HAL_GPIO_EXTI_Falling_Callback+0x54>

	#ifdef NODE_B
			if (counter == 1){
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10d      	bne.n	8000954 <HAL_GPIO_EXTI_Falling_Callback+0x38>
				 SetFilter(0x1AA,0x7FF);
 8000938:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800093c:	f44f 70d5 	mov.w	r0, #426	@ 0x1aa
 8000940:	f7ff ffbe 	bl	80008c0 <SetFilter>
				 value++;
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	3301      	adds	r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e005      	b.n	8000960 <HAL_GPIO_EXTI_Falling_Callback+0x44>
			}else{
				 SetFilter(0x105,0x7FF);
 8000954:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000958:	f240 1005 	movw	r0, #261	@ 0x105
 800095c:	f7ff ffb0 	bl	80008c0 <SetFilter>
			}
			counter ^= 1;
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f083 0301 	eor.w	r3, r3, #1
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b02      	ldr	r3, [pc, #8]	@ (8000978 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800096e:	701a      	strb	r2, [r3, #0]
	#endif
	}
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000017c 	.word	0x2000017c
 800097c:	2000017d 	.word	0x2000017d

08000980 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d023      	beq.n	80009dc <HAL_FDCAN_RxFifo0Callback+0x5c>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000996:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f001 f80c 	bl	80019b8 <HAL_FDCAN_GetRxMessage>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 80009a6:	f000 f839 	bl	8000a1c <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f001 f90a 	bl	8001bc8 <HAL_FDCAN_ActivateNotification>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 80009ba:	f000 f82f 	bl	8000a1c <Error_Handler>
		}
		printf("Received ID: 0x%03lX\n", CAN_Payload.RxHeader.Identifier);
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80009c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	480a      	ldr	r0, [pc, #40]	@ (80009f0 <HAL_FDCAN_RxFifo0Callback+0x70>)
 80009c6:	f005 ff85 	bl	80068d4 <iprintf>
		if(CAN_Payload.dataRx[0] == 0x1){
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80009cc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d103      	bne.n	80009dc <HAL_FDCAN_RxFifo0Callback+0x5c>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009d4:	2120      	movs	r1, #32
 80009d6:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <HAL_FDCAN_RxFifo0Callback+0x74>)
 80009d8:	f001 fd2a 	bl	8002430 <HAL_GPIO_TogglePin>
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200001d2 	.word	0x200001d2
 80009e8:	200001a4 	.word	0x200001a4
 80009ec:	20000180 	.word	0x20000180
 80009f0:	080075ec 	.word	0x080075ec
 80009f4:	42020000 	.word	0x42020000

080009f8 <__io_putchar>:
            printf("LEC unchanged: No event since last read\r\n");
            break;
    }
}
int __io_putchar(int ch)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1,1000);
 8000a00:	1d39      	adds	r1, r7, #4
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	2201      	movs	r2, #1
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <__io_putchar+0x20>)
 8000a0a:	f004 fdf9 	bl	8005600 <HAL_UART_Transmit>
    return ch;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000e8 	.word	0x200000e8

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	2288      	movs	r2, #136	@ 0x88
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 f825 	bl	8006aa8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a2a      	ldr	r2, [pc, #168]	@ (8000b0c <HAL_FDCAN_MspInit+0xd4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d14d      	bne.n	8000b04 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	f04f 0304 	mov.w	r3, #4
 8000a70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fc9c 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000a8a:	f7ff ffc7 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <HAL_FDCAN_MspInit+0xd8>)
 8000a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a94:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <HAL_FDCAN_MspInit+0xd8>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a9a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_FDCAN_MspInit+0xd8>)
 8000aa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_FDCAN_MspInit+0xd8>)
 8000aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_FDCAN_MspInit+0xd8>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <HAL_FDCAN_MspInit+0xd8>)
 8000abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aca:	23c0      	movs	r3, #192	@ 0xc0
 8000acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ae2:	2309      	movs	r3, #9
 8000ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aec:	4619      	mov	r1, r3
 8000aee:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <HAL_FDCAN_MspInit+0xdc>)
 8000af0:	f001 fb34 	bl	800215c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2027      	movs	r0, #39	@ 0x27
 8000afa:	f000 fbd1 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000afe:	2027      	movs	r0, #39	@ 0x27
 8000b00:	f000 fbe8 	bl	80012d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000b04:	bf00      	nop
 8000b06:	37b0      	adds	r7, #176	@ 0xb0
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	4000a400 	.word	0x4000a400
 8000b10:	44020c00 	.word	0x44020c00
 8000b14:	42020800 	.word	0x42020800

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2288      	movs	r2, #136	@ 0x88
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 ffb5 	bl	8006aa8 <memset>
  if(huart->Instance==USART3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2a      	ldr	r2, [pc, #168]	@ (8000bec <HAL_UART_MspInit+0xd4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d14c      	bne.n	8000be2 <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b48:	f04f 0204 	mov.w	r2, #4
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 fc2d 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b68:	f7ff ff58 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b78:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b90:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000ba8:	2318      	movs	r3, #24
 8000baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000bc0:	230d      	movs	r3, #13
 8000bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <HAL_UART_MspInit+0xdc>)
 8000bce:	f001 fac5 	bl	800215c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	203c      	movs	r0, #60	@ 0x3c
 8000bd8:	f000 fb62 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bdc:	203c      	movs	r0, #60	@ 0x3c
 8000bde:	f000 fb79 	bl	80012d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000be2:	bf00      	nop
 8000be4:	37b0      	adds	r7, #176	@ 0xb0
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004800 	.word	0x40004800
 8000bf0:	44020c00 	.word	0x44020c00
 8000bf4:	42020000 	.word	0x42020000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 fa4f 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c5a:	2020      	movs	r0, #32
 8000c5c:	f001 fc02 	bl	8002464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000c68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c6c:	f001 fbfa 	bl	8002464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c7a:	f001 f88b 	bl	8001d94 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000084 	.word	0x20000084

08000c88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <USART3_IRQHandler+0x10>)
 8000c8e:	f004 fd55 	bl	800573c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000e8 	.word	0x200000e8

08000c9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
  }

  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e009      	b.n	8000cfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe81 	bl	80009f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf1      	blt.n	8000ce8 <_write+0x12>
  }
  return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_close>:

int _close(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d36:	605a      	str	r2, [r3, #4]
  return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_isatty>:

int _isatty(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f005 fecc 	bl	8006b44 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20008000 	.word	0x20008000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	200001d4 	.word	0x200001d4
 8000de0:	20000328 	.word	0x20000328

08000de4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dea:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <SystemInit+0xc8>)
 8000dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df0:	4a2e      	ldr	r2, [pc, #184]	@ (8000eac <SystemInit+0xc8>)
 8000df2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <SystemInit+0xcc>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <SystemInit+0xcc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <SystemInit+0xcc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000e0c:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <SystemInit+0xcc>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4927      	ldr	r1, [pc, #156]	@ (8000eb0 <SystemInit+0xcc>)
 8000e12:	4b28      	ldr	r3, [pc, #160]	@ (8000eb4 <SystemInit+0xd0>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e18:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <SystemInit+0xcc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000e1e:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <SystemInit+0xcc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <SystemInit+0xcc>)
 8000e26:	4a24      	ldr	r2, [pc, #144]	@ (8000eb8 <SystemInit+0xd4>)
 8000e28:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <SystemInit+0xcc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <SystemInit+0xcc>)
 8000e32:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <SystemInit+0xd4>)
 8000e34:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <SystemInit+0xcc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <SystemInit+0xcc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <SystemInit+0xcc>)
 8000e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <SystemInit+0xcc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <SystemInit+0xc8>)
 8000e50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e54:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <SystemInit+0xd8>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000e5e:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000e66:	d003      	beq.n	8000e70 <SystemInit+0x8c>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000e6e:	d117      	bne.n	8000ea0 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <SystemInit+0xd8>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d005      	beq.n	8000e88 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <SystemInit+0xd8>)
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <SystemInit+0xdc>)
 8000e80:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <SystemInit+0xd8>)
 8000e84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <SystemInit+0xe0>)
 8000e86:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <SystemInit+0xd8>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <SystemInit+0xd8>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <SystemInit+0xd8>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <SystemInit+0xd8>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	61d3      	str	r3, [r2, #28]
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00
 8000eb0:	44020c00 	.word	0x44020c00
 8000eb4:	fae2eae3 	.word	0xfae2eae3
 8000eb8:	01010280 	.word	0x01010280
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	08192a3b 	.word	0x08192a3b
 8000ec4:	4c5d6e7f 	.word	0x4c5d6e7f

08000ec8 <MX_USART3_UART_Init>:
#include "uart.h"

extern UART_HandleTypeDef huart3;

void MX_USART3_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000ece:	4a23      	ldr	r2, [pc, #140]	@ (8000f5c <MX_USART3_UART_Init+0x94>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f10:	4811      	ldr	r0, [pc, #68]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000f12:	f004 fb25 	bl	8005560 <HAL_UART_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART3_UART_Init+0x58>
  {
	  //Error_Handler();
	  	while(1);
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MX_USART3_UART_Init+0x54>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000f24:	f005 fb49 	bl	80065ba <HAL_UARTEx_SetTxFifoThreshold>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART3_UART_Init+0x6a>
  {
	  //Error_Handler();
	  	while(1);
 8000f2e:	bf00      	nop
 8000f30:	e7fd      	b.n	8000f2e <MX_USART3_UART_Init+0x66>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000f36:	f005 fb7e 	bl	8006636 <HAL_UARTEx_SetRxFifoThreshold>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART3_UART_Init+0x7c>
  {
	  //Error_Handler();
	  	while(1);
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MX_USART3_UART_Init+0x78>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_USART3_UART_Init+0x90>)
 8000f46:	f005 faff 	bl	8006548 <HAL_UARTEx_DisableFifoMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART3_UART_Init+0x8c>
  {
	  //Error_Handler();
	  	while(1);
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MX_USART3_UART_Init+0x88>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000e8 	.word	0x200000e8
 8000f5c:	40004800 	.word	0x40004800

08000f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f66:	e003      	b.n	8000f70 <LoopCopyDataInit>

08000f68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f6e:	3104      	adds	r1, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f78:	d3f6      	bcc.n	8000f68 <CopyDataInit>
	ldr	r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f7c:	e002      	b.n	8000f84 <LoopFillZerobss>

08000f7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f80:	f842 3b04 	str.w	r3, [r2], #4

08000f84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <LoopForever+0x16>)
	cmp	r2, r3
 8000f86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f88:	d3f9      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f8a:	f7ff ff2b 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f005 fddf 	bl	8006b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f92:	f7ff fc23 	bl	80007dc <main>

08000f96 <LoopForever>:

LoopForever:
    b LoopForever
 8000f96:	e7fe      	b.n	8000f96 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f98:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000f9c:	080077e8 	.word	0x080077e8
	ldr	r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fa4:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000fa8:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000fac:	20000328 	.word	0x20000328

08000fb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f966 	bl	800128a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000fbe:	f002 f873 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_Init+0x44>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	490b      	ldr	r1, [pc, #44]	@ (8000ffc <HAL_Init+0x48>)
 8000fce:	5ccb      	ldrb	r3, [r1, r3]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <HAL_Init+0x4c>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f000 f9ab 	bl	8001334 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f810 	bl	8001004 <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e002      	b.n	8000ff4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fee:	f7ff fd1b 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	44020c00 	.word	0x44020c00
 8000ffc:	08007754 	.word	0x08007754
 8001000:	20000000 	.word	0x20000000

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001010:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HAL_InitTick+0xdc>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e05c      	b.n	80010d6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800101c:	4b31      	ldr	r3, [pc, #196]	@ (80010e4 <HAL_InitTick+0xe0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b04      	cmp	r3, #4
 8001026:	d10c      	bne.n	8001042 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001028:	4b2f      	ldr	r3, [pc, #188]	@ (80010e8 <HAL_InitTick+0xe4>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b2c      	ldr	r3, [pc, #176]	@ (80010e0 <HAL_InitTick+0xdc>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e037      	b.n	80010b2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001042:	f000 f9cf 	bl	80013e4 <HAL_SYSTICK_GetCLKSourceConfig>
 8001046:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d023      	beq.n	8001096 <HAL_InitTick+0x92>
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d82d      	bhi.n	80010b0 <HAL_InitTick+0xac>
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_InitTick+0x5e>
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d00d      	beq.n	800107c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001060:	e026      	b.n	80010b0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_InitTick+0xe4>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <HAL_InitTick+0xdc>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001070:	fbb3 f3f1 	udiv	r3, r3, r1
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	60fb      	str	r3, [r7, #12]
        break;
 800107a:	e01a      	b.n	80010b2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_InitTick+0xdc>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	fbb3 f3f2 	udiv	r3, r3, r2
 800108a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	60fb      	str	r3, [r7, #12]
        break;
 8001094:	e00d      	b.n	80010b2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0xdc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80010a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	60fb      	str	r3, [r7, #12]
        break;
 80010ae:	e000      	b.n	80010b2 <HAL_InitTick+0xae>
        break;
 80010b0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f91c 	bl	80012f0 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e009      	b.n	80010d6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c2:	2200      	movs	r2, #0
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ca:	f000 f8e9 	bl	80012a0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80010ce:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <HAL_InitTick+0xe8>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	e000e010 	.word	0xe000e010
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	200001d8 	.word	0x200001d8

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200001d8 	.word	0x200001d8

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff4c 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ae:	f7ff ff63 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	6978      	ldr	r0, [r7, #20]
 80012ba:	f7ff ffb3 	bl	8001224 <NVIC_EncodePriority>
 80012be:	4602      	mov	r2, r0
 80012c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff82 	bl	80011d0 <__NVIC_SetPriority>
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff56 	bl	8001194 <__NVIC_EnableIRQ>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001302:	2301      	movs	r3, #1
 8001304:	e00d      	b.n	8001322 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_SYSTICK_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_SYSTICK_Config+0x40>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_SYSTICK_Config+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <HAL_SYSTICK_Config+0x40>)
 800131a:	f043 0303 	orr.w	r3, r3, #3
 800131e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d844      	bhi.n	80013cc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001342:	a201      	add	r2, pc, #4	@ (adr r2, 8001348 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	0800136b 	.word	0x0800136b
 800134c:	08001389 	.word	0x08001389
 8001350:	080013ab 	.word	0x080013ab
 8001354:	080013cd 	.word	0x080013cd
 8001358:	0800135d 	.word	0x0800135d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800135c:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6013      	str	r3, [r2, #0]
      break;
 8001368:	e031      	b.n	80013ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800137c:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800137e:	f023 030c 	bic.w	r3, r3, #12
 8001382:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001386:	e022      	b.n	80013ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a13      	ldr	r2, [pc, #76]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800138e:	f023 0304 	bic.w	r3, r3, #4
 8001392:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001396:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800139a:	f023 030c 	bic.w	r3, r3, #12
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013a8:	e011      	b.n	80013ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80013bc:	f023 030c 	bic.w	r3, r3, #12
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013ca:	e000      	b.n	80013ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80013cc:	bf00      	nop
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010
 80013e0:	44020c00 	.word	0x44020c00

080013e4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80013ea:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80013f6:	2304      	movs	r3, #4
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	e01e      	b.n	800143a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80013fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b08      	cmp	r3, #8
 800140c:	d00f      	beq.n	800142e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b08      	cmp	r3, #8
 8001412:	d80f      	bhi.n	8001434 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d003      	beq.n	8001428 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001420:	e008      	b.n	8001434 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
        break;
 8001426:	e008      	b.n	800143a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001428:	2301      	movs	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
        break;
 800142c:	e005      	b.n	800143a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800142e:	2302      	movs	r3, #2
 8001430:	607b      	str	r3, [r7, #4]
        break;
 8001432:	e002      	b.n	800143a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
        break;
 8001438:	bf00      	nop
    }
  }
  return systick_source;
 800143a:	687b      	ldr	r3, [r7, #4]
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e010 	.word	0xe000e010
 800144c:	44020c00 	.word	0x44020c00

08001450 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001458:	f7ff fe5e 	bl	8001118 <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e06b      	b.n	8001540 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d008      	beq.n	8001486 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2220      	movs	r2, #32
 8001478:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e05c      	b.n	8001540 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0204 	orr.w	r2, r2, #4
 8001494:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2205      	movs	r2, #5
 800149a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800149e:	e020      	b.n	80014e2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80014a0:	f7ff fe3a 	bl	8001118 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d919      	bls.n	80014e2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b2:	f043 0210 	orr.w	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2203      	movs	r2, #3
 80014be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d2:	2201      	movs	r2, #1
 80014d4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e02e      	b.n	8001540 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0d7      	beq.n	80014a0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0202 	orr.w	r2, r2, #2
 80014fe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2204      	movs	r2, #4
 8001504:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001510:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152a:	2201      	movs	r2, #1
 800152c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e019      	b.n	800158e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d004      	beq.n	8001570 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2220      	movs	r2, #32
 800156a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e00e      	b.n	800158e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e147      	b.n	800183e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fa38 	bl	8000a38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0210 	bic.w	r2, r2, #16
 80015d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d8:	f7ff fd9e 	bl	8001118 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015de:	e012      	b.n	8001606 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015e0:	f7ff fd9a 	bl	8001118 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	d90b      	bls.n	8001606 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e11b      	b.n	800183e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b08      	cmp	r3, #8
 8001612:	d0e5      	beq.n	80015e0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001624:	f7ff fd78 	bl	8001118 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800162a:	e012      	b.n	8001652 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800162c:	f7ff fd74 	bl	8001118 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b0a      	cmp	r3, #10
 8001638:	d90b      	bls.n	8001652 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2203      	movs	r2, #3
 800164a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0f5      	b.n	800183e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0e5      	beq.n	800162c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0202 	orr.w	r2, r2, #2
 800166e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a74      	ldr	r2, [pc, #464]	@ (8001848 <HAL_FDCAN_Init+0x2ac>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d103      	bne.n	8001682 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800167a:	4a74      	ldr	r2, [pc, #464]	@ (800184c <HAL_FDCAN_Init+0x2b0>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7c1b      	ldrb	r3, [r3, #16]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001698:	619a      	str	r2, [r3, #24]
 800169a:	e007      	b.n	80016ac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7c5b      	ldrb	r3, [r3, #17]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	e007      	b.n	80016d6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699a      	ldr	r2, [r3, #24]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80016d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7c9b      	ldrb	r3, [r3, #18]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699a      	ldr	r2, [r3, #24]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016ec:	619a      	str	r2, [r3, #24]
 80016ee:	e007      	b.n	8001700 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80016fe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001724:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0210 	bic.w	r2, r2, #16
 8001734:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0204 	orr.w	r2, r2, #4
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	e02c      	b.n	80017aa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d028      	beq.n	80017aa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d01c      	beq.n	800179a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800176e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0210 	orr.w	r2, r2, #16
 800177e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d110      	bne.n	80017aa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	619a      	str	r2, [r3, #24]
 8001798:	e007      	b.n	80017aa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0220 	orr.w	r2, r2, #32
 80017a8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017ba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017c2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017d2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017d4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80017de:	d115      	bne.n	800180c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	3b01      	subs	r3, #1
 80017ec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017ee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	3b01      	subs	r3, #1
 80017f6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017f8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	3b01      	subs	r3, #1
 8001802:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001808:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800180a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fc44 	bl	80020b0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	4000a400 	.word	0x4000a400
 800184c:	4000a500 	.word	0x4000a500

08001850 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001860:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d002      	beq.n	800186e <HAL_FDCAN_ConfigFilter+0x1e>
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d13d      	bne.n	80018ea <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d119      	bne.n	80018aa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001882:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800188a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e01d      	b.n	80018e6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	075a      	lsls	r2, r3, #29
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	079a      	lsls	r2, r3, #30
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3304      	adds	r3, #4
 80018de:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e006      	b.n	80018f8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	f043 0202 	orr.w	r2, r3, #2
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d116      	bne.n	800194c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001926:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011a      	lsls	r2, r3, #4
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	431a      	orrs	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	431a      	orrs	r2, r3
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	431a      	orrs	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e006      	b.n	800195a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001950:	f043 0204 	orr.w	r2, r3, #4
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d110      	bne.n	800199c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e006      	b.n	80019aa <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a0:	f043 0204 	orr.w	r2, r3, #4
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b08b      	sub	sp, #44	@ 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019d0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80019d2:	7efb      	ldrb	r3, [r7, #27]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 80e8 	bne.w	8001baa <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b40      	cmp	r3, #64	@ 0x40
 80019de:	d137      	bne.n	8001a50 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0db      	b.n	8001bb8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a08:	0e1b      	lsrs	r3, r3, #24
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10a      	bne.n	8001a28 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a1a:	0a5b      	lsrs	r3, r3, #9
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4e:	e036      	b.n	8001abe <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d107      	bne.n	8001a70 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0a3      	b.n	8001bb8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a78:	0e1b      	lsrs	r3, r3, #24
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10a      	bne.n	8001a98 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d107      	bne.n	8001ae2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e005      	b.n	8001aee <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	3304      	adds	r3, #4
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0c1b      	lsrs	r3, r3, #16
 8001b1c:	f003 020f 	and.w	r2, r3, #15
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e1b      	lsrs	r3, r3, #24
 8001b42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0fda      	lsrs	r2, r3, #31
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	3304      	adds	r3, #4
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	e00a      	b.n	8001b7a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	441a      	add	r2, r3
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	440b      	add	r3, r1
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	3301      	adds	r3, #1
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	461a      	mov	r2, r3
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d3ec      	bcc.n	8001b64 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b40      	cmp	r3, #64	@ 0x40
 8001b8e:	d105      	bne.n	8001b9c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001b9a:	e004      	b.n	8001ba6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e006      	b.n	8001bb8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bae:	f043 0208 	orr.w	r2, r3, #8
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	372c      	adds	r7, #44	@ 0x2c
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	0800776c 	.word	0x0800776c

08001bc8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bda:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d003      	beq.n	8001bea <HAL_FDCAN_ActivateNotification+0x22>
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f040 80c8 	bne.w	8001d7a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03b      	beq.n	8001c7e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d031      	beq.n	8001c7e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d027      	beq.n	8001c7e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01d      	beq.n	8001c7e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d013      	beq.n	8001c7e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d13b      	bne.n	8001d1a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d131      	bne.n	8001d1a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d127      	bne.n	8001d1a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11d      	bne.n	8001d1a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00c      	beq.n	8001d2a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0202 	orr.w	r2, r2, #2
 8001d28:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e006      	b.n	8001d88 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
  }
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	@ 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001da2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001db0:	4013      	ands	r3, r2
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dc8:	4013      	ands	r3, r2
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de0:	4013      	ands	r3, r2
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dea:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001dee:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df6:	6a3a      	ldr	r2, [r7, #32]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e06:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e22:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2240      	movs	r2, #64	@ 0x40
 8001e3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f916 	bl	8002072 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d019      	beq.n	8001e84 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d014      	beq.n	8001e84 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e62:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8d8 	bl	8002034 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e90:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8a2 	bl	8001fde <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ea6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fd68 	bl	8000980 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ebc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001ebe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f897 	bl	8001ff4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00c      	beq.n	8001eea <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f890 	bl	800200a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d018      	beq.n	8001f26 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d013      	beq.n	8001f26 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f06:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2280      	movs	r2, #128	@ 0x80
 8001f1c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f87c 	bl	800201e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00c      	beq.n	8001f4a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f880 	bl	800204a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00c      	beq.n	8001f6e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f66:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f878 	bl	800205e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00f      	beq.n	8001f98 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001fa6:	69f9      	ldr	r1, [r7, #28]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f876 	bl	800209a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d009      	beq.n	8001fc8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f858 	bl	8002086 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3730      	adds	r7, #48	@ 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80020b8:	4b27      	ldr	r3, [pc, #156]	@ (8002158 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80020ba:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ca:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020f0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f8:	061a      	lsls	r2, r3, #24
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e005      	b.n	800213e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3304      	adds	r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3f3      	bcc.n	8002132 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800214a:	bf00      	nop
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	4000ac00 	.word	0x4000ac00

0800215c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800216a:	e136      	b.n	80023da <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8128 	beq.w	80023d4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x38>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d125      	bne.n	80021e0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	6979      	ldr	r1, [r7, #20]
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4013      	ands	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d00b      	beq.n	8002234 <HAL_GPIO_Init+0xd8>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002228:	2b11      	cmp	r3, #17
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b12      	cmp	r3, #18
 8002232:	d130      	bne.n	8002296 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226a:	2201      	movs	r2, #1
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4013      	ands	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0201 	and.w	r2, r3, #1
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d017      	beq.n	80022ce <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4013      	ands	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d07c      	beq.n	80023d4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022da:	4a47      	ldr	r2, [pc, #284]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3318      	adds	r3, #24
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4013      	ands	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0a9a      	lsrs	r2, r3, #10
 8002302:	4b3e      	ldr	r3, [pc, #248]	@ (80023fc <HAL_GPIO_Init+0x2a0>)
 8002304:	4013      	ands	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	f002 0203 	and.w	r2, r2, #3
 800230c:	00d2      	lsls	r2, r2, #3
 800230e:	4093      	lsls	r3, r2
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002316:	4938      	ldr	r1, [pc, #224]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3318      	adds	r3, #24
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002324:	4b34      	ldr	r3, [pc, #208]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4013      	ands	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002348:	4a2b      	ldr	r2, [pc, #172]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800234e:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4013      	ands	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002372:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43db      	mvns	r3, r3
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4013      	ands	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800239e:	4a16      	ldr	r2, [pc, #88]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80023a6:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 80023a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80023cc:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <HAL_GPIO_Init+0x29c>)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	3301      	adds	r3, #1
 80023d8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f aec1 	bne.w	800216c <HAL_GPIO_Init+0x10>
  }
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	44022000 	.word	0x44022000
 80023fc:	002f7f7f 	.word	0x002f7f7f

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241c:	e002      	b.n	8002424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43d9      	mvns	r1, r3
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	400b      	ands	r3, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800247a:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f814 	bl	80024b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d006      	beq.n	80024a2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002494:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fa3d 	bl	800091c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	44022000 	.word	0x44022000

080024b0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f000 bc28 	b.w	8002d2c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024dc:	4b94      	ldr	r3, [pc, #592]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f003 0318 	and.w	r3, r3, #24
 80024e4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80024e6:	4b92      	ldr	r3, [pc, #584]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x46>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	2b18      	cmp	r3, #24
 8002506:	d114      	bne.n	8002532 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d111      	bne.n	8002532 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f000 bc08 	b.w	8002d2c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800251c:	4b84      	ldr	r3, [pc, #528]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	4981      	ldr	r1, [pc, #516]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800252c:	4313      	orrs	r3, r2
 800252e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002530:	e040      	b.n	80025b4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d023      	beq.n	8002582 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800253a:	4b7d      	ldr	r3, [pc, #500]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7c      	ldr	r2, [pc, #496]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fde7 	bl	8001118 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800254e:	f7fe fde3 	bl	8001118 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e3e5      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002560:	4b73      	ldr	r3, [pc, #460]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800256c:	4b70      	ldr	r3, [pc, #448]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	496d      	ldr	r1, [pc, #436]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800257c:	4313      	orrs	r3, r2
 800257e:	618b      	str	r3, [r1, #24]
 8002580:	e018      	b.n	80025b4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002582:	4b6b      	ldr	r3, [pc, #428]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6a      	ldr	r2, [pc, #424]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fdc3 	bl	8001118 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002596:	f7fe fdbf 	bl	8001118 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e3c1      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80025a8:	4b61      	ldr	r3, [pc, #388]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a0 	beq.w	8002702 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_OscConfig+0x10c>
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b18      	cmp	r3, #24
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 8092 	bne.w	8002702 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e3a4      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x132>
 80025ec:	4b50      	ldr	r3, [pc, #320]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e058      	b.n	80026ac <HAL_RCC_OscConfig+0x1e4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x160>
 8002602:	4b4b      	ldr	r3, [pc, #300]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4a      	ldr	r2, [pc, #296]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b48      	ldr	r3, [pc, #288]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a47      	ldr	r2, [pc, #284]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002614:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b45      	ldr	r3, [pc, #276]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a44      	ldr	r2, [pc, #272]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e041      	b.n	80026ac <HAL_RCC_OscConfig+0x1e4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002630:	d112      	bne.n	8002658 <HAL_RCC_OscConfig+0x190>
 8002632:	4b3f      	ldr	r3, [pc, #252]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3e      	ldr	r2, [pc, #248]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b3c      	ldr	r3, [pc, #240]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a3b      	ldr	r2, [pc, #236]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b39      	ldr	r3, [pc, #228]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a38      	ldr	r2, [pc, #224]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e029      	b.n	80026ac <HAL_RCC_OscConfig+0x1e4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
 8002662:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a32      	ldr	r2, [pc, #200]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b30      	ldr	r3, [pc, #192]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2f      	ldr	r2, [pc, #188]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2c      	ldr	r2, [pc, #176]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e011      	b.n	80026ac <HAL_RCC_OscConfig+0x1e4>
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a28      	ldr	r2, [pc, #160]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a22      	ldr	r2, [pc, #136]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80026a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd30 	bl	8001118 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fd2c 	bl	8001118 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e32e      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ce:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x1f4>
 80026da:	e012      	b.n	8002702 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fd1c 	bl	8001118 <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fd18 	bl	8001118 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e31a      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 809a 	beq.w	8002844 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x25a>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b18      	cmp	r3, #24
 800271a:	d149      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d146      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e2fe      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
 800272e:	bf00      	nop
 8002730:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800273a:	4b9a      	ldr	r3, [pc, #616]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0218 	and.w	r2, r3, #24
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	429a      	cmp	r2, r3
 8002748:	d014      	beq.n	8002774 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800274a:	4b96      	ldr	r3, [pc, #600]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0218 	bic.w	r2, r3, #24
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	4993      	ldr	r1, [pc, #588]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800275c:	f000 fdd0 	bl	8003300 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002760:	4b91      	ldr	r3, [pc, #580]	@ (80029a8 <HAL_RCC_OscConfig+0x4e0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fc4d 	bl	8001004 <HAL_InitTick>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e2db      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fcd0 	bl	8001118 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800277c:	f7fe fccc 	bl	8001118 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e2ce      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278e:	4b85      	ldr	r3, [pc, #532]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800279a:	4b82      	ldr	r3, [pc, #520]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	497e      	ldr	r1, [pc, #504]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80027ae:	e049      	b.n	8002844 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d02c      	beq.n	8002812 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80027b8:	4b7a      	ldr	r3, [pc, #488]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 0218 	bic.w	r2, r3, #24
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4977      	ldr	r1, [pc, #476]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80027ca:	4b76      	ldr	r3, [pc, #472]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a75      	ldr	r2, [pc, #468]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fc9f 	bl	8001118 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80027de:	f7fe fc9b 	bl	8001118 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e29d      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f0:	4b6c      	ldr	r3, [pc, #432]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80027fc:	4b69      	ldr	r3, [pc, #420]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	4966      	ldr	r1, [pc, #408]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	610b      	str	r3, [r1, #16]
 8002810:	e018      	b.n	8002844 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b64      	ldr	r3, [pc, #400]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a63      	ldr	r2, [pc, #396]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fc7b 	bl	8001118 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002826:	f7fe fc77 	bl	8001118 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e279      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002838:	4b5a      	ldr	r3, [pc, #360]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d03c      	beq.n	80028ca <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01c      	beq.n	8002892 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002858:	4b52      	ldr	r3, [pc, #328]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800285a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800285e:	4a51      	ldr	r2, [pc, #324]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002860:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002864:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fc56 	bl	8001118 <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002870:	f7fe fc52 	bl	8001118 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e254      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002882:	4b48      	ldr	r3, [pc, #288]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ef      	beq.n	8002870 <HAL_RCC_OscConfig+0x3a8>
 8002890:	e01b      	b.n	80028ca <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002892:	4b44      	ldr	r3, [pc, #272]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002898:	4a42      	ldr	r2, [pc, #264]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800289a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800289e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe fc39 	bl	8001118 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80028aa:	f7fe fc35 	bl	8001118 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e237      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028bc:	4b39      	ldr	r3, [pc, #228]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80028be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ef      	bne.n	80028aa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80d2 	beq.w	8002a7c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028d8:	4b34      	ldr	r3, [pc, #208]	@ (80029ac <HAL_RCC_OscConfig+0x4e4>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d118      	bne.n	8002916 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <HAL_RCC_OscConfig+0x4e4>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	4a30      	ldr	r2, [pc, #192]	@ (80029ac <HAL_RCC_OscConfig+0x4e4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f0:	f7fe fc12 	bl	8001118 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fc0e 	bl	8001118 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e210      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800290a:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <HAL_RCC_OscConfig+0x4e4>)
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0x468>
 800291e:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002924:	4a1f      	ldr	r2, [pc, #124]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800292e:	e074      	b.n	8002a1a <HAL_RCC_OscConfig+0x552>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d118      	bne.n	800296a <HAL_RCC_OscConfig+0x4a2>
 8002938:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800293a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800293e:	4a19      	ldr	r2, [pc, #100]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800294a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800294e:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002954:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002958:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800295a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800295e:	4a11      	ldr	r2, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002968:	e057      	b.n	8002a1a <HAL_RCC_OscConfig+0x552>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d11e      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4e8>
 8002972:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002978:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002988:	4a06      	ldr	r2, [pc, #24]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800298a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800298e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002992:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002998:	4a02      	ldr	r2, [pc, #8]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x552>
 80029a4:	44020c00 	.word	0x44020c00
 80029a8:	20000004 	.word	0x20000004
 80029ac:	44020800 	.word	0x44020800
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b85      	cmp	r3, #133	@ 0x85
 80029b6:	d118      	bne.n	80029ea <HAL_RCC_OscConfig+0x522>
 80029b8:	4ba2      	ldr	r3, [pc, #648]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029be:	4aa1      	ldr	r2, [pc, #644]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029c8:	4b9e      	ldr	r3, [pc, #632]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029d8:	4b9a      	ldr	r3, [pc, #616]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029de:	4a99      	ldr	r2, [pc, #612]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029e8:	e017      	b.n	8002a1a <HAL_RCC_OscConfig+0x552>
 80029ea:	4b96      	ldr	r3, [pc, #600]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029f0:	4a94      	ldr	r2, [pc, #592]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029fa:	4b92      	ldr	r3, [pc, #584]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 80029fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a00:	4a90      	ldr	r2, [pc, #576]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a10:	4a8c      	ldr	r2, [pc, #560]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe fb79 	bl	8001118 <HAL_GetTick>
 8002a26:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe fb75 	bl	8001118 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e175      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a40:	4b80      	ldr	r3, [pc, #512]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ed      	beq.n	8002a2a <HAL_RCC_OscConfig+0x562>
 8002a4e:	e015      	b.n	8002a7c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fb62 	bl	8001118 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fb5e 	bl	8001118 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e15e      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a6e:	4b75      	ldr	r3, [pc, #468]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ed      	bne.n	8002a58 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d036      	beq.n	8002af6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a90:	4b6c      	ldr	r3, [pc, #432]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6b      	ldr	r2, [pc, #428]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002a96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fb3c 	bl	8001118 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002aa4:	f7fe fb38 	bl	8001118 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e13a      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x5dc>
 8002ac2:	e018      	b.n	8002af6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fb22 	bl	8001118 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002ad8:	f7fe fb1e 	bl	8001118 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e120      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002aea:	4b56      	ldr	r3, [pc, #344]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8115 	beq.w	8002d2a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b18      	cmp	r3, #24
 8002b04:	f000 80af 	beq.w	8002c66 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	f040 8086 	bne.w	8002c1e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002b12:	4b4c      	ldr	r3, [pc, #304]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4b      	ldr	r2, [pc, #300]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fafb 	bl	8001118 <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b26:	f7fe faf7 	bl	8001118 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e0f9      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b38:	4b42      	ldr	r3, [pc, #264]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002b44:	4b3f      	ldr	r3, [pc, #252]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b58:	0212      	lsls	r2, r2, #8
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	4939      	ldr	r1, [pc, #228]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b70:	3b01      	subs	r3, #1
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b92:	492c      	ldr	r1, [pc, #176]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002b98:	4b2a      	ldr	r3, [pc, #168]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002b9e:	f023 0310 	bic.w	r3, r3, #16
 8002ba2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba8:	4a26      	ldr	r2, [pc, #152]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002bae:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bb4:	f043 0310 	orr.w	r3, r3, #16
 8002bb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002bba:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbe:	f023 020c 	bic.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	491f      	ldr	r1, [pc, #124]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	f023 0220 	bic.w	r2, r3, #32
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd8:	491a      	ldr	r1, [pc, #104]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bde:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002bea:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002bf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fa8f 	bl	8001118 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fa8b 	bl	8001118 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e08d      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x736>
 8002c1c:	e085      	b.n	8002d2a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <HAL_RCC_OscConfig+0x77c>)
 8002c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fa75 	bl	8001118 <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002c32:	f7fe fa71 	bl	8001118 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d903      	bls.n	8002c48 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e073      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
 8002c44:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c48:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ee      	bne.n	8002c32 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002c54:	4b37      	ldr	r3, [pc, #220]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	4a36      	ldr	r2, [pc, #216]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002c5a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	6293      	str	r3, [r2, #40]	@ 0x28
 8002c64:	e061      	b.n	8002d2a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002c66:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c6c:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c70:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d031      	beq.n	8002cde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d12a      	bne.n	8002cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d122      	bne.n	8002cde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d11a      	bne.n	8002cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	0a5b      	lsrs	r3, r3, #9
 8002cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d111      	bne.n	8002cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d108      	bne.n	8002cde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0e1b      	lsrs	r3, r3, #24
 8002cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e024      	b.n	8002d2c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ce2:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	08db      	lsrs	r3, r3, #3
 8002ce8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d01a      	beq.n	8002d2a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002cfa:	f023 0310 	bic.w	r3, r3, #16
 8002cfe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fa0a 	bl	8001118 <HAL_GetTick>
 8002d04:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002d06:	bf00      	nop
 8002d08:	f7fe fa06 	bl	8001118 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d0f9      	beq.n	8002d08 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d18:	4a06      	ldr	r2, [pc, #24]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002d1e:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	4a04      	ldr	r2, [pc, #16]	@ (8002d34 <HAL_RCC_OscConfig+0x86c>)
 8002d24:	f043 0310 	orr.w	r3, r3, #16
 8002d28:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	44020c00 	.word	0x44020c00

08002d38 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e19e      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b83      	ldr	r3, [pc, #524]	@ (8002f5c <HAL_RCC_ClockConfig+0x224>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b80      	ldr	r3, [pc, #512]	@ (8002f5c <HAL_RCC_ClockConfig+0x224>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	497e      	ldr	r1, [pc, #504]	@ (8002f5c <HAL_RCC_ClockConfig+0x224>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f5c <HAL_RCC_ClockConfig+0x224>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e186      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	4b74      	ldr	r3, [pc, #464]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d909      	bls.n	8002dae <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002d9a:	4b71      	ldr	r3, [pc, #452]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	496d      	ldr	r1, [pc, #436]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	4b68      	ldr	r3, [pc, #416]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d909      	bls.n	8002de0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002dcc:	4b64      	ldr	r3, [pc, #400]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4961      	ldr	r1, [pc, #388]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d908      	bls.n	8002e0e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002dfc:	4b58      	ldr	r3, [pc, #352]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4955      	ldr	r1, [pc, #340]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d010      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	4b50      	ldr	r3, [pc, #320]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d908      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 020f 	bic.w	r2, r3, #15
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	494a      	ldr	r1, [pc, #296]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8093 	beq.w	8002f70 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e52:	4b43      	ldr	r3, [pc, #268]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e113      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e107      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002e82:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0fb      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e92:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0f3      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	492c      	ldr	r1, [pc, #176]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe f930 	bl	8001118 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d112      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fe f928 	bl	8001118 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0d7      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eda:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0318 	and.w	r3, r3, #24
 8002ee2:	2b18      	cmp	r3, #24
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x18c>
 8002ee6:	e043      	b.n	8002f70 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d112      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef2:	f7fe f911 	bl	8001118 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0c0      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f08:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f003 0318 	and.w	r3, r3, #24
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ba>
 8002f14:	e02c      	b.n	8002f70 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d122      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe f8fa 	bl	8001118 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0a9      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f36:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <HAL_RCC_ClockConfig+0x228>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 0318 	and.w	r3, r3, #24
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d1ee      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x1e8>
 8002f42:	e015      	b.n	8002f70 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe f8e8 	bl	8001118 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d906      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e097      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
 8002f5a:	bf00      	nop
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f64:	4b4b      	ldr	r3, [pc, #300]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 0318 	and.w	r3, r3, #24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e9      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	4b44      	ldr	r3, [pc, #272]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d208      	bcs.n	8002f9e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002f8c:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 020f 	bic.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	493e      	ldr	r1, [pc, #248]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003098 <HAL_RCC_ClockConfig+0x360>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d210      	bcs.n	8002fce <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fac:	4b3a      	ldr	r3, [pc, #232]	@ (8003098 <HAL_RCC_ClockConfig+0x360>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 020f 	bic.w	r2, r3, #15
 8002fb4:	4938      	ldr	r1, [pc, #224]	@ (8003098 <HAL_RCC_ClockConfig+0x360>)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbc:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_RCC_ClockConfig+0x360>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e05d      	b.n	800308a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d208      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002fea:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4927      	ldr	r1, [pc, #156]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d012      	beq.n	800302e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003016:	429a      	cmp	r2, r3
 8003018:	d209      	bcs.n	800302e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	491a      	ldr	r1, [pc, #104]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003048:	429a      	cmp	r2, r3
 800304a:	d209      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	490e      	ldr	r1, [pc, #56]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800305c:	4313      	orrs	r3, r2
 800305e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003060:	f000 f822 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490b      	ldr	r1, [pc, #44]	@ (800309c <HAL_RCC_ClockConfig+0x364>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <HAL_RCC_ClockConfig+0x368>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <HAL_RCC_ClockConfig+0x36c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd ffc0 	bl	8001004 <HAL_InitTick>
 8003084:	4603      	mov	r3, r0
 8003086:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003088:	7afb      	ldrb	r3, [r7, #11]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	44020c00 	.word	0x44020c00
 8003098:	40022000 	.word	0x40022000
 800309c:	08007754 	.word	0x08007754
 80030a0:	20000000 	.word	0x20000000
 80030a4:	20000004 	.word	0x20000004

080030a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	@ 0x24
 80030ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80030ae:	4b8c      	ldr	r3, [pc, #560]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0318 	and.w	r3, r3, #24
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d102      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030ba:	4b8a      	ldr	r3, [pc, #552]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x23c>)
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e107      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030c0:	4b87      	ldr	r3, [pc, #540]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 0318 	and.w	r3, r3, #24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d112      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80030cc:	4b84      	ldr	r3, [pc, #528]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80030d8:	4b81      	ldr	r3, [pc, #516]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	4a81      	ldr	r2, [pc, #516]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e0f1      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80030ec:	4b7e      	ldr	r3, [pc, #504]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	e0ee      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f2:	4b7b      	ldr	r3, [pc, #492]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0318 	and.w	r3, r3, #24
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d102      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030fe:	4b7b      	ldr	r3, [pc, #492]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x244>)
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e0e5      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003104:	4b76      	ldr	r3, [pc, #472]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 0318 	and.w	r3, r3, #24
 800310c:	2b18      	cmp	r3, #24
 800310e:	f040 80dd 	bne.w	80032cc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003112:	4b73      	ldr	r3, [pc, #460]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800311c:	4b70      	ldr	r3, [pc, #448]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003126:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003128:	4b6d      	ldr	r3, [pc, #436]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003134:	4b6a      	ldr	r3, [pc, #424]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003138:	08db      	lsrs	r3, r3, #3
 800313a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80b7 	beq.w	80032c6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0xbe>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d056      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x16a>
 8003164:	e077      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003166:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d02d      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003172:	4b5b      	ldr	r3, [pc, #364]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	08db      	lsrs	r3, r3, #3
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	4a5a      	ldr	r2, [pc, #360]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x240>)
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319c:	4b50      	ldr	r3, [pc, #320]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800319e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x248>
 80031b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80031bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80031cc:	e065      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x24c>
 80031dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e0:	4b3f      	ldr	r3, [pc, #252]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80031e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x248>
 80031f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003200:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003204:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003210:	e043      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80032f8 <HAL_RCC_GetSysClockFreq+0x250>
 8003220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003224:	4b2e      	ldr	r3, [pc, #184]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003234:	ed97 6a02 	vldr	s12, [r7, #8]
 8003238:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x248>
 800323c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003240:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003248:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800324c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003250:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003254:	e021      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003260:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x254>
 8003264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800326a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003278:	ed97 6a02 	vldr	s12, [r7, #8]
 800327c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x248>
 8003280:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003284:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800328c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003298:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800329a:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329e:	0a5b      	lsrs	r3, r3, #9
 80032a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032a4:	3301      	adds	r3, #1
 80032a6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80032b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032be:	ee17 3a90 	vmov	r3, s15
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	e004      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e001      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80032ce:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80032d0:	69fb      	ldr	r3, [r7, #28]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	@ 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	44020c00 	.word	0x44020c00
 80032e4:	003d0900 	.word	0x003d0900
 80032e8:	03d09000 	.word	0x03d09000
 80032ec:	016e3600 	.word	0x016e3600
 80032f0:	46000000 	.word	0x46000000
 80032f4:	4c742400 	.word	0x4c742400
 80032f8:	4bb71b00 	.word	0x4bb71b00
 80032fc:	4a742400 	.word	0x4a742400

08003300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003304:	f7ff fed0 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_RCC_GetHCLKFreq+0x2c>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800330e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003312:	4907      	ldr	r1, [pc, #28]	@ (8003330 <HAL_RCC_GetHCLKFreq+0x30>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003316:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	4a05      	ldr	r2, [pc, #20]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x34>)
 8003320:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003322:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x34>)
 8003324:	681b      	ldr	r3, [r3, #0]
}
 8003326:	4618      	mov	r0, r3
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	44020c00 	.word	0x44020c00
 8003330:	08007754 	.word	0x08007754
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800333c:	f7ff ffe0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4904      	ldr	r1, [pc, #16]	@ (8003360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	44020c00 	.word	0x44020c00
 8003360:	08007764 	.word	0x08007764

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003368:	f7ff ffca 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4904      	ldr	r1, [pc, #16]	@ (800338c <HAL_RCC_GetPCLK2Freq+0x28>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	44020c00 	.word	0x44020c00
 800338c:	08007764 	.word	0x08007764

08003390 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003394:	f7ff ffb4 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	0b1b      	lsrs	r3, r3, #12
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4904      	ldr	r1, [pc, #16]	@ (80033b8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	44020c00 	.word	0x44020c00
 80033b8:	08007764 	.word	0x08007764

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b0aa      	sub	sp, #168	@ 0xa8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80033e0:	2500      	movs	r5, #0
 80033e2:	ea54 0305 	orrs.w	r3, r4, r5
 80033e6:	d00b      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80033e8:	4bb8      	ldr	r3, [pc, #736]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ee:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80033f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	4ab4      	ldr	r2, [pc, #720]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033fa:	430b      	orrs	r3, r1
 80033fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003400:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f002 0801 	and.w	r8, r2, #1
 800340c:	f04f 0900 	mov.w	r9, #0
 8003410:	ea58 0309 	orrs.w	r3, r8, r9
 8003414:	d038      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003416:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341c:	2b05      	cmp	r3, #5
 800341e:	d819      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003420:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800345d 	.word	0x0800345d
 800342c:	08003441 	.word	0x08003441
 8003430:	08003455 	.word	0x08003455
 8003434:	0800345d 	.word	0x0800345d
 8003438:	0800345d 	.word	0x0800345d
 800343c:	0800345d 	.word	0x0800345d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003440:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003444:	3308      	adds	r3, #8
 8003446:	4618      	mov	r0, r3
 8003448:	f001 fff2 	bl	8005430 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003466:	4b99      	ldr	r3, [pc, #612]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800346c:	f023 0107 	bic.w	r1, r3, #7
 8003470:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003476:	4a95      	ldr	r2, [pc, #596]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003478:	430b      	orrs	r3, r1
 800347a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800347e:	e003      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003484:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f002 0a02 	and.w	sl, r2, #2
 8003494:	f04f 0b00 	mov.w	fp, #0
 8003498:	ea5a 030b 	orrs.w	r3, sl, fp
 800349c:	d03c      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800349e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	2b28      	cmp	r3, #40	@ 0x28
 80034a6:	d01b      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80034a8:	2b28      	cmp	r3, #40	@ 0x28
 80034aa:	d815      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d019      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d811      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80034b4:	2b18      	cmp	r3, #24
 80034b6:	d017      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80034b8:	2b18      	cmp	r3, #24
 80034ba:	d80d      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034c8:	3308      	adds	r3, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 ffb0 	bl	8005430 <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80034d6:	e00a      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034de:	e006      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034e0:	bf00      	nop
 80034e2:	e004      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80034f6:	4b75      	ldr	r3, [pc, #468]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034fc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003500:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003506:	4a71      	ldr	r2, [pc, #452]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003508:	430b      	orrs	r3, r1
 800350a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800350e:	e003      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003514:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003518:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f002 0304 	and.w	r3, r2, #4
 8003524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800352e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003532:	460b      	mov	r3, r1
 8003534:	4313      	orrs	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003542:	d01e      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003544:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003548:	d817      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800354a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354e:	d01a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003554:	d811      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003556:	2bc0      	cmp	r3, #192	@ 0xc0
 8003558:	d017      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800355a:	2bc0      	cmp	r3, #192	@ 0xc0
 800355c:	d80d      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d015      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003562:	2b40      	cmp	r3, #64	@ 0x40
 8003564:	d109      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003566:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800356a:	3308      	adds	r3, #8
 800356c:	4618      	mov	r0, r3
 800356e:	f001 ff5f 	bl	8005430 <RCCEx_PLL2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003578:	e00a      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003582:	bf00      	nop
 8003584:	e004      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003598:	4b4c      	ldr	r3, [pc, #304]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800359a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800359e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	4a48      	ldr	r2, [pc, #288]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035b6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80035c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d043      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80035da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035e4:	d021      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035ea:	d81a      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80035ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f0:	d01d      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x272>
 80035f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f6:	d814      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80035f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035fc:	d019      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80035fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003602:	d80e      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d016      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800360c:	d109      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800360e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003612:	3308      	adds	r3, #8
 8003614:	4618      	mov	r0, r3
 8003616:	f001 ff0b 	bl	8005430 <RCCEx_PLL2_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003620:	e00a      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003628:	e006      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800362a:	bf00      	nop
 800362c:	e004      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800362e:	bf00      	nop
 8003630:	e002      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003638:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10c      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003640:	4b22      	ldr	r3, [pc, #136]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003646:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800364a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	4a1e      	ldr	r2, [pc, #120]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003652:	430b      	orrs	r3, r1
 8003654:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800365e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003662:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800366e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003670:	2300      	movs	r3, #0
 8003672:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003674:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003678:	460b      	mov	r3, r1
 800367a:	4313      	orrs	r3, r2
 800367c:	d03e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800367e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003688:	d01b      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800368a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800368e:	d814      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003694:	d017      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800369a:	d80e      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a4:	d109      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036aa:	3308      	adds	r3, #8
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 febf 	bl	8005430 <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80036b8:	e00b      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036c0:	e007      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80036c2:	bf00      	nop
 80036c4:	e005      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80036c6:	bf00      	nop
 80036c8:	e003      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80036ca:	bf00      	nop
 80036cc:	44020c00 	.word	0x44020c00
        break;
 80036d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80036da:	4ba5      	ldr	r3, [pc, #660]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036e0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80036e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	4aa1      	ldr	r2, [pc, #644]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80036f2:	e003      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036f8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003708:	673b      	str	r3, [r7, #112]	@ 0x70
 800370a:	2300      	movs	r3, #0
 800370c:	677b      	str	r3, [r7, #116]	@ 0x74
 800370e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d03b      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800371c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003722:	d01b      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003724:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003728:	d814      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800372a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800372e:	d017      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003730:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003734:	d80e      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d014      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800373a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373e:	d109      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003740:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003744:	3308      	adds	r3, #8
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fe72 	bl	8005430 <RCCEx_PLL2_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003752:	e008      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800375c:	bf00      	nop
 800375e:	e002      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003766:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800376e:	4b80      	ldr	r3, [pc, #512]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003770:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003774:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003778:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800377c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377e:	4a7c      	ldr	r2, [pc, #496]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003780:	430b      	orrs	r3, r1
 8003782:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003786:	e003      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800378c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003790:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800379c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800379e:	2300      	movs	r3, #0
 80037a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	d033      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80037ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037b6:	d015      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80037b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037bc:	d80e      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80037c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037c6:	d109      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037cc:	3308      	adds	r3, #8
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fe2e 	bl	8005430 <RCCEx_PLL2_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80037da:	e006      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037e2:	e002      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80037e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80037f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037f8:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80037fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	4a5b      	ldr	r2, [pc, #364]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003804:	430b      	orrs	r3, r1
 8003806:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003810:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003814:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	2100      	movs	r1, #0
 800381e:	6639      	str	r1, [r7, #96]	@ 0x60
 8003820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003824:	667b      	str	r3, [r7, #100]	@ 0x64
 8003826:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	d033      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003830:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800383a:	d015      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003840:	d80e      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d012      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800384a:	d109      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800384c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003850:	3308      	adds	r3, #8
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fdec 	bl	8005430 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800385e:	e006      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003866:	e002      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800386c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800386e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10c      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003876:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003878:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800387c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003880:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003886:	4a3a      	ldr	r2, [pc, #232]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003888:	430b      	orrs	r3, r1
 800388a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800388e:	e003      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003894:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003898:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	2100      	movs	r1, #0
 80038a2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80038ae:	460b      	mov	r3, r1
 80038b0:	4313      	orrs	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80038b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038be:	61d3      	str	r3, [r2, #28]
 80038c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038cc:	4a28      	ldr	r2, [pc, #160]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80038de:	653b      	str	r3, [r7, #80]	@ 0x50
 80038e0:	2300      	movs	r3, #0
 80038e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80038e4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80038e8:	460b      	mov	r3, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	d046      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80038ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80038f8:	d021      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80038fa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80038fe:	d81a      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003904:	d01d      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390a:	d814      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800390c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003910:	d019      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003916:	d80e      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 800391c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003920:	d109      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003922:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003926:	3308      	adds	r3, #8
 8003928:	4618      	mov	r0, r3
 800392a:	f001 fd81 	bl	8005430 <RCCEx_PLL2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003934:	e00a      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800393e:	bf00      	nop
 8003940:	e004      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800394a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10f      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003954:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003956:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800395a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800395e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	4a02      	ldr	r2, [pc, #8]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003966:	430b      	orrs	r3, r1
 8003968:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800396c:	e006      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800396e:	bf00      	nop
 8003970:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003978:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800397c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800398a:	2300      	movs	r3, #0
 800398c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800398e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d043      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003998:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80039a2:	d021      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80039a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80039a8:	d81a      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80039aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ae:	d01d      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x630>
 80039b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b4:	d814      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80039b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ba:	d019      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80039bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c0:	d80e      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ca:	d109      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d0:	3308      	adds	r3, #8
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fd2c 	bl	8005430 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80039de:	e00a      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039e6:	e006      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039e8:	bf00      	nop
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039ec:	bf00      	nop
 80039ee:	e002      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80039fe:	4bb6      	ldr	r3, [pc, #728]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003a04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	4ab2      	ldr	r2, [pc, #712]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a10:	430b      	orrs	r3, r1
 8003a12:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a2e:	2300      	movs	r3, #0
 8003a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a32:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d030      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003a3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d80f      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d211      	bcs.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d911      	bls.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d109      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a56:	3308      	adds	r3, #8
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fce9 	bl	8005430 <RCCEx_PLL2_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a6c:	e002      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a74:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10c      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a7c:	4b96      	ldr	r3, [pc, #600]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a82:	f023 0107 	bic.w	r1, r3, #7
 8003a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8c:	4a92      	ldr	r2, [pc, #584]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a9a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ab0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003ade:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ae4:	f023 0108 	bic.w	r1, r3, #8
 8003ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aee:	4a7a      	ldr	r2, [pc, #488]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003afc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f000 80b0 	beq.w	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	4a6e      	ldr	r2, [pc, #440]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b2a:	f7fd faf5 	bl	8001118 <HAL_GetTick>
 8003b2e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b32:	e00b      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b34:	f7fd faf0 	bl	8001118 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d903      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b4a:	e005      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b4c:	4b63      	ldr	r3, [pc, #396]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ed      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003b58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 808a 	bne.w	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b62:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003b70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d022      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b7e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d01b      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b86:	4b54      	ldr	r3, [pc, #336]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b50      	ldr	r3, [pc, #320]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9a:	4a4f      	ldr	r2, [pc, #316]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003baa:	4a4b      	ldr	r2, [pc, #300]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb4:	4a48      	ldr	r2, [pc, #288]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d019      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd faa5 	bl	8001118 <HAL_GetTick>
 8003bce:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd2:	e00d      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fd faa0 	bl	8001118 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d903      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003bee:	e006      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ea      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003bfe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d132      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003c16:	4b30      	ldr	r3, [pc, #192]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c2a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	61d3      	str	r3, [r2, #28]
 8003c34:	e005      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003c36:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c40:	61d3      	str	r3, [r2, #28]
 8003c42:	4b25      	ldr	r3, [pc, #148]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c48:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c52:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c54:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c62:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c64:	430b      	orrs	r3, r1
 8003c66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c6a:	e008      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c6c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c70:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c7a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d038      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003c9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca0:	2b30      	cmp	r3, #48	@ 0x30
 8003ca2:	d014      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003ca4:	2b30      	cmp	r3, #48	@ 0x30
 8003ca6:	d80e      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d012      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d80a      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	4a06      	ldr	r2, [pc, #24]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cc4:	e00d      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ccc:	e009      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e007      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e005      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003cd6:	bf00      	nop
 8003cd8:	44020c00 	.word	0x44020c00
 8003cdc:	44020800 	.word	0x44020800
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003cea:	4bb5      	ldr	r3, [pc, #724]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cf0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfa:	49b1      	ldr	r1, [pc, #708]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d08:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	d03c      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003d28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d81d      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003d32:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d5b 	.word	0x08003d5b
 8003d40:	08003d6f 	.word	0x08003d6f
 8003d44:	08003d77 	.word	0x08003d77
 8003d48:	08003d77 	.word	0x08003d77
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	4a9b      	ldr	r2, [pc, #620]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d56:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d58:	e00e      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d5e:	3308      	adds	r3, #8
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 fb65 	bl	8005430 <RCCEx_PLL2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e004      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d78:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003d80:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d90:	498b      	ldr	r1, [pc, #556]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d9e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003db8:	460b      	mov	r3, r1
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	d03c      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003dbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d01f      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d819      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003dcc:	2b18      	cmp	r3, #24
 8003dce:	d01d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003dd0:	2b18      	cmp	r3, #24
 8003dd2:	d815      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d007      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ddc:	e010      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dde:	4b78      	ldr	r3, [pc, #480]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	4a77      	ldr	r2, [pc, #476]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003dea:	e010      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003df0:	3308      	adds	r3, #8
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 fb1c 	bl	8005430 <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003dfe:	e006      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e06:	e002      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003e16:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e1c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	4966      	ldr	r1, [pc, #408]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e34:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d03e      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e64:	d819      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e68:	d01d      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e6c:	d815      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d007      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003e76:	e010      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e78:	4b51      	ldr	r3, [pc, #324]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	4a50      	ldr	r2, [pc, #320]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e82:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e84:	e010      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 facf 	bl	8005430 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10c      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003eb0:	4b43      	ldr	r3, [pc, #268]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003eb6:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003eba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec0:	493f      	ldr	r1, [pc, #252]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ece:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	2100      	movs	r1, #0
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d038      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003eee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef8:	d00e      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003efe:	d815      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f08:	d110      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f14:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003f16:	e00e      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 fa86 	bl	8005430 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003f3e:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	491c      	ldr	r1, [pc, #112]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003f56:	e003      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f5c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	2100      	movs	r1, #0
 8003f6a:	6039      	str	r1, [r7, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	d039      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f82:	2b30      	cmp	r3, #48	@ 0x30
 8003f84:	d01e      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003f86:	2b30      	cmp	r3, #48	@ 0x30
 8003f88:	d815      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d002      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d007      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003f92:	e010      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	4a09      	ldr	r2, [pc, #36]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fa0:	e011      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fa41 	bl	8005430 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003fb4:	e007      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003fbe:	bf00      	nop
 8003fc0:	44020c00 	.word	0x44020c00
        break;
 8003fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003fce:	4b0c      	ldr	r3, [pc, #48]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fde:	4908      	ldr	r1, [pc, #32]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003ff0:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	37a8      	adds	r7, #168	@ 0xa8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffe:	bf00      	nop
 8004000:	44020c00 	.word	0x44020c00

08004004 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004004:	b480      	push	{r7}
 8004006:	b08b      	sub	sp, #44	@ 0x2c
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800400c:	4bae      	ldr	r3, [pc, #696]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800400e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004014:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004016:	4bac      	ldr	r3, [pc, #688]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004020:	4ba9      	ldr	r3, [pc, #676]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800402a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800402c:	4ba6      	ldr	r3, [pc, #664]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004038:	4ba3      	ldr	r3, [pc, #652]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	08db      	lsrs	r3, r3, #3
 800403e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004050:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8126 	beq.w	80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d053      	beq.n	800410a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b03      	cmp	r3, #3
 8004066:	d86f      	bhi.n	8004148 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d02b      	beq.n	80040cc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004074:	e068      	b.n	8004148 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004076:	4b94      	ldr	r3, [pc, #592]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	4a92      	ldr	r2, [pc, #584]	@ (80042cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80040ae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80042d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80040ca:	e068      	b.n	800419e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80042d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80040ec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80040f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004104:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004108:	e049      	b.n	800419e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004114:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	ed97 6a04 	vldr	s12, [r7, #16]
 800412a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80042d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004146:	e02a      	b.n	800419e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004148:	4b5f      	ldr	r3, [pc, #380]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	08db      	lsrs	r3, r3, #3
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	4a5e      	ldr	r2, [pc, #376]	@ (80042cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004180:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80042d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800419c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800419e:	4b4a      	ldr	r3, [pc, #296]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041aa:	d121      	bne.n	80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80041ac:	4b46      	ldr	r3, [pc, #280]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d017      	beq.n	80041e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041b8:	4b43      	ldr	r3, [pc, #268]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041bc:	0a5b      	lsrs	r3, r3, #9
 80041be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80041ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80041d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80041f6:	4b34      	ldr	r3, [pc, #208]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004202:	d121      	bne.n	8004248 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004204:	4b30      	ldr	r3, [pc, #192]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004210:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004226:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800422a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800422e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004236:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	e006      	b.n	800424e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	e002      	b.n	800424e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800424e:	4b1e      	ldr	r3, [pc, #120]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004256:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800425a:	d121      	bne.n	80042a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800425c:	4b1a      	ldr	r3, [pc, #104]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d017      	beq.n	8004298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004268:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	0e1b      	lsrs	r3, r3, #24
 800426e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800427a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800427e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004282:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800428a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004296:	e010      	b.n	80042ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	609a      	str	r2, [r3, #8]
}
 800429e:	e00c      	b.n	80042ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
}
 80042a6:	e008      	b.n	80042ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
}
 80042ba:	bf00      	nop
 80042bc:	372c      	adds	r7, #44	@ 0x2c
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	44020c00 	.word	0x44020c00
 80042cc:	03d09000 	.word	0x03d09000
 80042d0:	46000000 	.word	0x46000000
 80042d4:	4a742400 	.word	0x4a742400
 80042d8:	4bb71b00 	.word	0x4bb71b00

080042dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80042dc:	b480      	push	{r7}
 80042de:	b08b      	sub	sp, #44	@ 0x2c
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80042e4:	4bae      	ldr	r3, [pc, #696]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ec:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80042ee:	4bac      	ldr	r3, [pc, #688]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80042f8:	4ba9      	ldr	r3, [pc, #676]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004302:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004304:	4ba6      	ldr	r3, [pc, #664]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004310:	4ba3      	ldr	r3, [pc, #652]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004328:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8126 	beq.w	8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d053      	beq.n	80043e2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d86f      	bhi.n	8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d003      	beq.n	800434e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d02b      	beq.n	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800434c:	e068      	b.n	8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800434e:	4b94      	ldr	r3, [pc, #592]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	08db      	lsrs	r3, r3, #3
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	4a92      	ldr	r2, [pc, #584]	@ (80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a04 	vldr	s12, [r7, #16]
 8004386:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80043a2:	e068      	b.n	8004476 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80043b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80043c4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80043c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80043e0:	e049      	b.n	8004476 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80043f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8004402:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800441e:	e02a      	b.n	8004476 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004420:	4b5f      	ldr	r3, [pc, #380]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	4a5e      	ldr	r2, [pc, #376]	@ (80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004454:	ed97 6a04 	vldr	s12, [r7, #16]
 8004458:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800445c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004464:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004470:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004474:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004476:	4b4a      	ldr	r3, [pc, #296]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800447e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004482:	d121      	bne.n	80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004484:	4b46      	ldr	r3, [pc, #280]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004490:	4b43      	ldr	r3, [pc, #268]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	0a5b      	lsrs	r3, r3, #9
 8004496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80044a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80044aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80044ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044ce:	4b34      	ldr	r3, [pc, #208]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044da:	d121      	bne.n	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80044dc:	4b30      	ldr	r3, [pc, #192]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d017      	beq.n	8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80044e8:	4b2d      	ldr	r3, [pc, #180]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80044fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004502:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	e006      	b.n	8004526 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	e002      	b.n	8004526 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004526:	4b1e      	ldr	r3, [pc, #120]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800452e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004532:	d121      	bne.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004534:	4b1a      	ldr	r3, [pc, #104]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d017      	beq.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004540:	4b17      	ldr	r3, [pc, #92]	@ (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004544:	0e1b      	lsrs	r3, r3, #24
 8004546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004556:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800455a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800455e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004566:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800456e:	e010      	b.n	8004592 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]
}
 8004576:	e00c      	b.n	8004592 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
}
 800457e:	e008      	b.n	8004592 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
}
 8004592:	bf00      	nop
 8004594:	372c      	adds	r7, #44	@ 0x2c
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	44020c00 	.word	0x44020c00
 80045a4:	03d09000 	.word	0x03d09000
 80045a8:	46000000 	.word	0x46000000
 80045ac:	4a742400 	.word	0x4a742400
 80045b0:	4bb71b00 	.word	0x4bb71b00

080045b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08c      	sub	sp, #48	@ 0x30
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80045be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80045c6:	430b      	orrs	r3, r1
 80045c8:	d14b      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80045ca:	4bc4      	ldr	r3, [pc, #784]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80045d6:	4bc1      	ldr	r3, [pc, #772]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d108      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ea:	d104      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80045ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f2:	f000 bf14 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80045f6:	4bb9      	ldr	r3, [pc, #740]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004604:	d108      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800460c:	d104      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800460e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004614:	f000 bf03 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004618:	4bb0      	ldr	r3, [pc, #704]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004624:	d119      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800462c:	d115      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800462e:	4bab      	ldr	r3, [pc, #684]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463a:	d30a      	bcc.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800463c:	4ba7      	ldr	r3, [pc, #668]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004646:	4aa6      	ldr	r2, [pc, #664]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800464e:	f000 bee6 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004656:	f000 bee2 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800465e:	f000 bede 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004666:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 800466a:	ea52 0301 	orrs.w	r3, r2, r1
 800466e:	f000 838e 	beq.w	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004676:	2a01      	cmp	r2, #1
 8004678:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 800467c:	f080 86cc 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004684:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004688:	ea52 0301 	orrs.w	r3, r2, r1
 800468c:	f000 82aa 	beq.w	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004694:	2a01      	cmp	r2, #1
 8004696:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 800469a:	f080 86bd 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800469e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a2:	f1a3 0110 	sub.w	r1, r3, #16
 80046a6:	ea52 0301 	orrs.w	r3, r2, r1
 80046aa:	f000 8681 	beq.w	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80046ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b2:	2a01      	cmp	r2, #1
 80046b4:	f173 0310 	sbcs.w	r3, r3, #16
 80046b8:	f080 86ae 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c0:	1f19      	subs	r1, r3, #4
 80046c2:	ea52 0301 	orrs.w	r3, r2, r1
 80046c6:	f000 84b1 	beq.w	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80046ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ce:	2a01      	cmp	r2, #1
 80046d0:	f173 0304 	sbcs.w	r3, r3, #4
 80046d4:	f080 86a0 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046dc:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80046e0:	430b      	orrs	r3, r1
 80046e2:	f000 85aa 	beq.w	800523a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80046e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ea:	497e      	ldr	r1, [pc, #504]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80046ec:	428a      	cmp	r2, r1
 80046ee:	f173 0300 	sbcs.w	r3, r3, #0
 80046f2:	f080 8691 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046fa:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80046fe:	430b      	orrs	r3, r1
 8004700:	f000 8532 	beq.w	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004708:	4977      	ldr	r1, [pc, #476]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800470a:	428a      	cmp	r2, r1
 800470c:	f173 0300 	sbcs.w	r3, r3, #0
 8004710:	f080 8682 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004718:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800471c:	430b      	orrs	r3, r1
 800471e:	f000 84bc 	beq.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004726:	4971      	ldr	r1, [pc, #452]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004728:	428a      	cmp	r2, r1
 800472a:	f173 0300 	sbcs.w	r3, r3, #0
 800472e:	f080 8673 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004736:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800473a:	430b      	orrs	r3, r1
 800473c:	f000 85f2 	beq.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004744:	496a      	ldr	r1, [pc, #424]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004746:	428a      	cmp	r2, r1
 8004748:	f173 0300 	sbcs.w	r3, r3, #0
 800474c:	f080 8664 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004754:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004758:	430b      	orrs	r3, r1
 800475a:	f000 81e5 	beq.w	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800475e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004762:	4964      	ldr	r1, [pc, #400]	@ (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004764:	428a      	cmp	r2, r1
 8004766:	f173 0300 	sbcs.w	r3, r3, #0
 800476a:	f080 8655 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800476e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004772:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004776:	430b      	orrs	r3, r1
 8004778:	f000 83cc 	beq.w	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800477c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004780:	495d      	ldr	r1, [pc, #372]	@ (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004782:	428a      	cmp	r2, r1
 8004784:	f173 0300 	sbcs.w	r3, r3, #0
 8004788:	f080 8646 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800478c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004790:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004794:	430b      	orrs	r3, r1
 8004796:	f000 8331 	beq.w	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800479a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800479e:	4957      	ldr	r1, [pc, #348]	@ (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80047a0:	428a      	cmp	r2, r1
 80047a2:	f173 0300 	sbcs.w	r3, r3, #0
 80047a6:	f080 8637 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ae:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80047b2:	430b      	orrs	r3, r1
 80047b4:	f000 82bb 	beq.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80047b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047bc:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80047c0:	f173 0300 	sbcs.w	r3, r3, #0
 80047c4:	f080 8628 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047cc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80047d0:	430b      	orrs	r3, r1
 80047d2:	f000 826d 	beq.w	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80047d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047da:	f244 0101 	movw	r1, #16385	@ 0x4001
 80047de:	428a      	cmp	r2, r1
 80047e0:	f173 0300 	sbcs.w	r3, r3, #0
 80047e4:	f080 8618 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80047f0:	430b      	orrs	r3, r1
 80047f2:	f000 821e 	beq.w	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80047f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047fa:	f242 0101 	movw	r1, #8193	@ 0x2001
 80047fe:	428a      	cmp	r2, r1
 8004800:	f173 0300 	sbcs.w	r3, r3, #0
 8004804:	f080 8608 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800480c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004810:	430b      	orrs	r3, r1
 8004812:	f000 8137 	beq.w	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800481a:	f241 0101 	movw	r1, #4097	@ 0x1001
 800481e:	428a      	cmp	r2, r1
 8004820:	f173 0300 	sbcs.w	r3, r3, #0
 8004824:	f080 85f8 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800482c:	1f11      	subs	r1, r2, #4
 800482e:	430b      	orrs	r3, r1
 8004830:	f000 80d2 	beq.w	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004838:	2a05      	cmp	r2, #5
 800483a:	f173 0300 	sbcs.w	r3, r3, #0
 800483e:	f080 85eb 	bcs.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004846:	1e51      	subs	r1, r2, #1
 8004848:	430b      	orrs	r3, r1
 800484a:	d006      	beq.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800484c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004850:	1e91      	subs	r1, r2, #2
 8004852:	430b      	orrs	r3, r1
 8004854:	d06c      	beq.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004856:	f000 bddf 	b.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800485a:	4b20      	ldr	r3, [pc, #128]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800485c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fe fd7a 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 8004870:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004872:	f000 bdd4 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004876:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800487e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004882:	d10a      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800488a:	f107 030c 	add.w	r3, r7, #12
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fd24 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004898:	e048      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d109      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	4a12      	ldr	r2, [pc, #72]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048be:	e035      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048cc:	d11c      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d119      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d8:	e028      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80048da:	bf00      	nop
 80048dc:	44020c00 	.word	0x44020c00
 80048e0:	016e3600 	.word	0x016e3600
 80048e4:	20000001 	.word	0x20000001
 80048e8:	10000001 	.word	0x10000001
 80048ec:	08000001 	.word	0x08000001
 80048f0:	04000001 	.word	0x04000001
 80048f4:	00200001 	.word	0x00200001
 80048f8:	00040001 	.word	0x00040001
 80048fc:	00020001 	.word	0x00020001
 8004900:	03d09000 	.word	0x03d09000
 8004904:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004908:	4b9f      	ldr	r3, [pc, #636]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800490a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d106      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	2b05      	cmp	r3, #5
 800491a:	d103      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 800491c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004922:	e003      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004928:	f000 bd79 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800492c:	f000 bd77 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004930:	4b95      	ldr	r3, [pc, #596]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004932:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800493a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004942:	f7fe fcf9 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004946:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004948:	f000 bd69 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800494c:	4b8e      	ldr	r3, [pc, #568]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004958:	d10a      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	2b08      	cmp	r3, #8
 800495e:	d107      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004960:	f107 030c 	add.w	r3, r7, #12
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fcb9 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496e:	e031      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004970:	4b85      	ldr	r3, [pc, #532]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d10c      	bne.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	2b18      	cmp	r3, #24
 8004980:	d109      	bne.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004982:	4b81      	ldr	r3, [pc, #516]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	08db      	lsrs	r3, r3, #3
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	4a7f      	ldr	r2, [pc, #508]	@ (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800498e:	fa22 f303 	lsr.w	r3, r2, r3
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004994:	e01e      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004996:	4b7c      	ldr	r3, [pc, #496]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800499e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a2:	d105      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d102      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80049aa:	4b79      	ldr	r3, [pc, #484]	@ (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ae:	e011      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80049b0:	4b75      	ldr	r3, [pc, #468]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d106      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	2b28      	cmp	r3, #40	@ 0x28
 80049c2:	d103      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80049c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ca:	e003      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049d0:	f000 bd25 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80049d4:	f000 bd23 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80049d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049de:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80049e2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80049ea:	f7fe fca5 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 80049ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80049f0:	f000 bd15 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80049f4:	4b64      	ldr	r3, [pc, #400]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a00:	d10a      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	2b40      	cmp	r3, #64	@ 0x40
 8004a06:	d107      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fc65 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a16:	e033      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004a18:	4b5b      	ldr	r3, [pc, #364]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a28:	d109      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a2a:	4b57      	ldr	r3, [pc, #348]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	4a55      	ldr	r2, [pc, #340]	@ (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3c:	e020      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004a3e:	4b52      	ldr	r3, [pc, #328]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a52:	d102      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004a54:	4b4e      	ldr	r3, [pc, #312]	@ (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a58:	e012      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d107      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a6e:	d103      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a7c:	f000 bccf 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a80:	f000 bccd 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a84:	4b40      	ldr	r3, [pc, #256]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004a8e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d104      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004a96:	f7fe fc7b 	bl	8003390 <HAL_RCC_GetPCLK3Freq>
 8004a9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a9c:	f000 bcbf 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa6:	d108      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aa8:	f107 030c 	add.w	r3, r7, #12
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fc15 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ab6:	f000 bcb2 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004aba:	4b33      	ldr	r3, [pc, #204]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ace:	4b2e      	ldr	r3, [pc, #184]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	08db      	lsrs	r3, r3, #3
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae0:	e020      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004ae2:	4b29      	ldr	r3, [pc, #164]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aee:	d106      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004af6:	d102      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004af8:	4b25      	ldr	r3, [pc, #148]	@ (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afc:	e012      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004afe:	4b22      	ldr	r3, [pc, #136]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b12:	d103      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004b14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b20:	f000 bc7d 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b24:	f000 bc7b 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004b28:	4b17      	ldr	r3, [pc, #92]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004b3a:	f7fe fbe1 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8004b3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004b40:	f000 bc6d 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d104      	bne.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fe faad 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8004b4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004b50:	f000 bc65 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d108      	bne.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fbbc 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b68:	f000 bc59 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b78:	d10e      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d10b      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004b80:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b84:	e02c      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004b86:	bf00      	nop
 8004b88:	44020c00 	.word	0x44020c00
 8004b8c:	03d09000 	.word	0x03d09000
 8004b90:	003d0900 	.word	0x003d0900
 8004b94:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004b98:	4b95      	ldr	r3, [pc, #596]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004baa:	4b91      	ldr	r3, [pc, #580]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	08db      	lsrs	r3, r3, #3
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	4a8f      	ldr	r2, [pc, #572]	@ (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bbc:	e010      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004bbe:	4b8c      	ldr	r3, [pc, #560]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d102      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004bd2:	4b89      	ldr	r3, [pc, #548]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd6:	e003      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bdc:	f000 bc1f 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004be0:	f000 bc1d 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004be4:	4b82      	ldr	r3, [pc, #520]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004bf0:	4b7f      	ldr	r3, [pc, #508]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d106      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0a:	e011      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004c0c:	4b78      	ldr	r3, [pc, #480]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d103      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004c22:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c28:	e002      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004c2e:	e3f6      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c30:	e3f5      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c32:	4b6f      	ldr	r3, [pc, #444]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c44:	f7fe fb78 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004c48:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c4a:	e3e8      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c52:	d107      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fb3f 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c62:	e3dc      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004c64:	4b62      	ldr	r3, [pc, #392]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c76:	d109      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c78:	4b5d      	ldr	r3, [pc, #372]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	4a5c      	ldr	r2, [pc, #368]	@ (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c8a:	e010      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004c8c:	4b58      	ldr	r3, [pc, #352]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c98:	d106      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ca0:	d102      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004ca2:	4b55      	ldr	r3, [pc, #340]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cac:	e3b7      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004cae:	e3b6      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cb6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cc2:	f7fe fb39 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004cc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004cc8:	e3a9      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd2:	f107 030c 	add.w	r3, r7, #12
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fb00 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ce0:	e39d      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004ce2:	4b43      	ldr	r3, [pc, #268]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d10d      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	08db      	lsrs	r3, r3, #3
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	4a3c      	ldr	r2, [pc, #240]	@ (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d02:	fa22 f303 	lsr.w	r3, r2, r3
 8004d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d08:	e010      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004d0a:	4b39      	ldr	r3, [pc, #228]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d16:	d106      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d1e:	d102      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004d20:	4b35      	ldr	r3, [pc, #212]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d24:	e002      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d2a:	e378      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d2c:	e377      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004d2e:	4b30      	ldr	r3, [pc, #192]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d34:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d40:	f7fe fafa 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004d44:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d46:	e36a      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d50:	f107 030c 	add.w	r3, r7, #12
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fac1 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d5e:	e35e      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004d60:	4b23      	ldr	r3, [pc, #140]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d10d      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d72:	d109      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d74:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d86:	e34a      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d8c:	e347      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004d8e:	4b18      	ldr	r3, [pc, #96]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d94:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d103      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004da0:	f7fe faf6 	bl	8003390 <HAL_RCC_GetPCLK3Freq>
 8004da4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004da6:	e33a      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fa91 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004dbe:	e32e      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	08db      	lsrs	r3, r3, #3
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	4a05      	ldr	r2, [pc, #20]	@ (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004de6:	e31a      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004dec:	e317      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004dee:	bf00      	nop
 8004df0:	44020c00 	.word	0x44020c00
 8004df4:	03d09000 	.word	0x03d09000
 8004df8:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e02:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004e0e:	d044      	beq.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004e16:	d879      	bhi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1e:	d02d      	beq.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e26:	d871      	bhi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e2e:	d017      	beq.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e36:	d869      	bhi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e44:	d004      	beq.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004e46:	e061      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004e48:	f7fe faa2 	bl	8003390 <HAL_RCC_GetPCLK3Freq>
 8004e4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004e4e:	e060      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e50:	f107 030c 	add.w	r3, r7, #12
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fa41 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e5e:	e058      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e60:	4b82      	ldr	r3, [pc, #520]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d103      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e74:	e04d      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e7a:	e04a      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004e7c:	4b7b      	ldr	r3, [pc, #492]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8a:	d103      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004e8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e92:	e03e      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e98:	e03b      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e9a:	4b74      	ldr	r3, [pc, #464]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ea0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ea6:	4b71      	ldr	r3, [pc, #452]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a6b      	ldr	r2, [pc, #428]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eca:	e01e      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ecc:	4b67      	ldr	r3, [pc, #412]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ee2:	4b64      	ldr	r3, [pc, #400]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee6:	e010      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ee8:	4b60      	ldr	r3, [pc, #384]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004efc:	d102      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004efe:	4b5e      	ldr	r3, [pc, #376]	@ (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004f0a:	e002      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f10:	bf00      	nop
          }
        }
        break;
 8004f12:	e284      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004f14:	4b55      	ldr	r3, [pc, #340]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f1a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f26:	d044      	beq.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f2e:	d879      	bhi.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f36:	d02d      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f3e:	d871      	bhi.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f46:	d017      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f4e:	d869      	bhi.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5c:	d004      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004f5e:	e061      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004f60:	f7fe f9ea 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004f64:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004f66:	e060      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f68:	f107 030c 	add.w	r3, r7, #12
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f9b5 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f76:	e058      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f78:	4b3c      	ldr	r3, [pc, #240]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d103      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f8c:	e04d      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f92:	e04a      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004f94:	4b35      	ldr	r3, [pc, #212]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fa2:	d103      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004fa4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004faa:	e03e      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fb0:	e03b      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fb8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fd0:	4b26      	ldr	r3, [pc, #152]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	4a25      	ldr	r2, [pc, #148]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe2:	e01e      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fe4:	4b21      	ldr	r3, [pc, #132]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff0:	d106      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff8:	d102      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffe:	e010      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005000:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005008:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800500c:	d106      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005014:	d102      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005016:	4b18      	ldr	r3, [pc, #96]	@ (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800501a:	e002      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005020:	e003      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8005022:	e002      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005028:	bf00      	nop
          }
        }
        break;
 800502a:	e1f8      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800502c:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800502e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005038:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005044:	d105      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 800504c:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005050:	e1e5      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005058:	d110      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800505a:	f107 0318 	add.w	r3, r7, #24
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe ffd0 	bl	8004004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005068:	e1d9      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800506a:	bf00      	nop
 800506c:	44020c00 	.word	0x44020c00
 8005070:	03d09000 	.word	0x03d09000
 8005074:	003d0900 	.word	0x003d0900
 8005078:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005082:	d107      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff f927 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005092:	e1c4      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005098:	e1c1      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800509a:	4b9d      	ldr	r3, [pc, #628]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800509c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d859      	bhi.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80050ac:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c9 	.word	0x080050c9
 80050b8:	080050d9 	.word	0x080050d9
 80050bc:	08005161 	.word	0x08005161
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050ef 	.word	0x080050ef
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050c8:	f107 0318 	add.w	r3, r7, #24
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe ff99 	bl	8004004 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050d6:	e046      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050d8:	f107 030c 	add.w	r3, r7, #12
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff f8fd 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050e6:	e03e      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80050e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80050ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050ec:	e03b      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050ee:	4b88      	ldr	r3, [pc, #544]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050fa:	4b85      	ldr	r3, [pc, #532]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	d10c      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800510c:	4b80      	ldr	r3, [pc, #512]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	08db      	lsrs	r3, r3, #3
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	4a80      	ldr	r2, [pc, #512]	@ (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511e:	e01e      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005120:	4b7b      	ldr	r3, [pc, #492]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800512c:	d106      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005134:	d102      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005136:	4b79      	ldr	r3, [pc, #484]	@ (800531c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800513a:	e010      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800513c:	4b74      	ldr	r3, [pc, #464]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005148:	d106      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005150:	d102      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005152:	4b73      	ldr	r3, [pc, #460]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005156:	e002      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800515e:	e002      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005164:	bf00      	nop
          }
        }
        break;
 8005166:	e15a      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005168:	4b69      	ldr	r3, [pc, #420]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800516e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005176:	2b20      	cmp	r3, #32
 8005178:	d022      	beq.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517c:	2b20      	cmp	r3, #32
 800517e:	d858      	bhi.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	2b18      	cmp	r3, #24
 8005184:	d019      	beq.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	2b18      	cmp	r3, #24
 800518a:	d852      	bhi.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	2b08      	cmp	r3, #8
 8005196:	d008      	beq.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005198:	e04b      	b.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800519a:	f107 0318 	add.w	r3, r7, #24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ff30 	bl	8004004 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051a8:	e046      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051aa:	f107 030c 	add.w	r3, r7, #12
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff f894 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051b8:	e03e      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80051ba:	4b56      	ldr	r3, [pc, #344]	@ (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80051bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051be:	e03b      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051c0:	4b53      	ldr	r3, [pc, #332]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051cc:	4b50      	ldr	r3, [pc, #320]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051de:	4b4c      	ldr	r3, [pc, #304]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	08db      	lsrs	r3, r3, #3
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f0:	e01e      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051f2:	4b47      	ldr	r3, [pc, #284]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d102      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005208:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520c:	e010      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800520e:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800521a:	d106      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005222:	d102      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005224:	4b3e      	ldr	r3, [pc, #248]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800522e:	e003      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005236:	bf00      	nop
          }
        }
        break;
 8005238:	e0f1      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800523a:	4b35      	ldr	r3, [pc, #212]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800523c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005240:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524c:	d023      	beq.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005254:	d858      	bhi.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005258:	2bc0      	cmp	r3, #192	@ 0xc0
 800525a:	d019      	beq.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005260:	d852      	bhi.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d008      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800526e:	e04b      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005270:	f107 0318 	add.w	r3, r7, #24
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fec5 	bl	8004004 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800527e:	e046      	b.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005280:	f107 030c 	add.w	r3, r7, #12
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff f829 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800528e:	e03e      	b.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005290:	4b20      	ldr	r3, [pc, #128]	@ (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005294:	e03b      	b.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005296:	4b1e      	ldr	r3, [pc, #120]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800529c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80052a0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052b4:	4b16      	ldr	r3, [pc, #88]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c6:	e01e      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052c8:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d4:	d106      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d102      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80052de:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e2:	e010      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052f0:	d106      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052f8:	d102      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80052fa:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80052fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052fe:	e002      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005304:	e003      	b.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005306:	e002      	b.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800530c:	bf00      	nop
          }
        }
        break;
 800530e:	e086      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005310:	44020c00 	.word	0x44020c00
 8005314:	00bb8000 	.word	0x00bb8000
 8005318:	03d09000 	.word	0x03d09000
 800531c:	003d0900 	.word	0x003d0900
 8005320:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005324:	4b40      	ldr	r3, [pc, #256]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800532a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005330:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800533c:	d105      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005344:	4b39      	ldr	r3, [pc, #228]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005348:	e031      	b.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800534a:	4b37      	ldr	r3, [pc, #220]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005356:	d10a      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	2b10      	cmp	r3, #16
 800535c:	d107      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800535e:	f107 0318 	add.w	r3, r7, #24
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fe4e 	bl	8004004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800536c:	e01f      	b.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800536e:	4b2e      	ldr	r3, [pc, #184]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d106      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	2b20      	cmp	r3, #32
 8005380:	d103      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8005382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005388:	e011      	b.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800538a:	4b27      	ldr	r3, [pc, #156]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800538c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005398:	d106      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	2b30      	cmp	r3, #48	@ 0x30
 800539e:	d103      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80053a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053a6:	e002      	b.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80053ac:	e037      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80053ae:	e036      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80053b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80053b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d107      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053c2:	f107 0318 	add.w	r3, r7, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fe1c 	bl	8004004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80053d0:	e025      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80053d2:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053de:	d10a      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d107      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053e6:	f107 030c 	add.w	r3, r7, #12
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe ff76 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f4:	e00f      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005402:	d105      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	2b30      	cmp	r3, #48	@ 0x30
 8005408:	d102      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800540a:	4b08      	ldr	r3, [pc, #32]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800540e:	e002      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8005414:	e003      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005416:	e002      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800541c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005420:	4618      	mov	r0, r3
 8005422:	3730      	adds	r7, #48	@ 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	44020c00 	.word	0x44020c00
 800542c:	02dc6c00 	.word	0x02dc6c00

08005430 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005438:	4b48      	ldr	r3, [pc, #288]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a47      	ldr	r2, [pc, #284]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 800543e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005442:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005444:	f7fb fe68 	bl	8001118 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800544a:	e008      	b.n	800545e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800544c:	f7fb fe64 	bl	8001118 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e07a      	b.n	8005554 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800545e:	4b3f      	ldr	r3, [pc, #252]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800546a:	4b3c      	ldr	r3, [pc, #240]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6811      	ldr	r1, [r2, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6852      	ldr	r2, [r2, #4]
 800547e:	0212      	lsls	r2, r2, #8
 8005480:	430a      	orrs	r2, r1
 8005482:	4936      	ldr	r1, [pc, #216]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	3b01      	subs	r3, #1
 800548e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	3b01      	subs	r3, #1
 8005498:	025b      	lsls	r3, r3, #9
 800549a:	b29b      	uxth	r3, r3
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	061b      	lsls	r3, r3, #24
 80054b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054b8:	4928      	ldr	r1, [pc, #160]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80054be:	4b27      	ldr	r3, [pc, #156]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	f023 020c 	bic.w	r2, r3, #12
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	4924      	ldr	r1, [pc, #144]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80054d0:	4b22      	ldr	r3, [pc, #136]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	f023 0220 	bic.w	r2, r3, #32
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	491f      	ldr	r1, [pc, #124]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80054e2:	4b1e      	ldr	r3, [pc, #120]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	491c      	ldr	r1, [pc, #112]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80054f0:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	4a19      	ldr	r2, [pc, #100]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054f6:	f023 0310 	bic.w	r3, r3, #16
 80054fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80054fc:	4b17      	ldr	r3, [pc, #92]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 80054fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005500:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005504:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6a12      	ldr	r2, [r2, #32]
 800550c:	00d2      	lsls	r2, r2, #3
 800550e:	4913      	ldr	r1, [pc, #76]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005514:	4b11      	ldr	r3, [pc, #68]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	4a10      	ldr	r2, [pc, #64]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 800551a:	f043 0310 	orr.w	r3, r3, #16
 800551e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005520:	4b0e      	ldr	r3, [pc, #56]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a0d      	ldr	r2, [pc, #52]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 8005526:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800552a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800552c:	f7fb fdf4 	bl	8001118 <HAL_GetTick>
 8005530:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005532:	e008      	b.n	8005546 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005534:	f7fb fdf0 	bl	8001118 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e006      	b.n	8005554 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005546:	4b05      	ldr	r3, [pc, #20]	@ (800555c <RCCEx_PLL2_Config+0x12c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0

}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	44020c00 	.word	0x44020c00

08005560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e042      	b.n	80055f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7fb fac7 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2224      	movs	r2, #36	@ 0x24
 800558e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fd52 	bl	8006054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fbd1 	bl	8005d58 <UART_SetConfig>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e01b      	b.n	80055f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fdd1 	bl	8006198 <UART_CheckIdleState>
 80055f6:	4603      	mov	r3, r0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	@ 0x28
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	2b20      	cmp	r3, #32
 8005618:	f040 808b 	bne.w	8005732 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Transmit+0x28>
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e083      	b.n	8005734 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b80      	cmp	r3, #128	@ 0x80
 8005638:	d107      	bne.n	800564a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005648:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2221      	movs	r2, #33	@ 0x21
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800565a:	f7fb fd5d 	bl	8001118 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005678:	d108      	bne.n	800568c <HAL_UART_Transmit+0x8c>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d104      	bne.n	800568c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	e003      	b.n	8005694 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005690:	2300      	movs	r3, #0
 8005692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005694:	e030      	b.n	80056f8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2180      	movs	r1, #128	@ 0x80
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fe23 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e03d      	b.n	8005734 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	3302      	adds	r3, #2
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	e007      	b.n	80056e6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	3301      	adds	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1c8      	bne.n	8005696 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2200      	movs	r2, #0
 800570c:	2140      	movs	r1, #64	@ 0x40
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fdec 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e006      	b.n	8005734 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e000      	b.n	8005734 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005732:	2302      	movs	r3, #2
  }
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b0ae      	sub	sp, #184	@ 0xb8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005766:	f640 030f 	movw	r3, #2063	@ 0x80f
 800576a:	4013      	ands	r3, r2
 800576c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11b      	bne.n	80057b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 82ac 	beq.w	8005cfe <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
      }
      return;
 80057ae:	e2a6      	b.n	8005cfe <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80fd 	beq.w	80059b4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057be:	4b7a      	ldr	r3, [pc, #488]	@ (80059a8 <HAL_UART_IRQHandler+0x26c>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057ca:	4b78      	ldr	r3, [pc, #480]	@ (80059ac <HAL_UART_IRQHandler+0x270>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80f0 	beq.w	80059b4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d011      	beq.n	8005804 <HAL_UART_IRQHandler+0xc8>
 80057e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2201      	movs	r2, #1
 80057f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fa:	f043 0201 	orr.w	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d011      	beq.n	8005834 <HAL_UART_IRQHandler+0xf8>
 8005810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00b      	beq.n	8005834 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2202      	movs	r2, #2
 8005822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582a:	f043 0204 	orr.w	r2, r3, #4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d011      	beq.n	8005864 <HAL_UART_IRQHandler+0x128>
 8005840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2204      	movs	r2, #4
 8005852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585a:	f043 0202 	orr.w	r2, r3, #2
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d017      	beq.n	80058a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d105      	bne.n	8005888 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800587c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005880:	4b49      	ldr	r3, [pc, #292]	@ (80059a8 <HAL_UART_IRQHandler+0x26c>)
 8005882:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2208      	movs	r2, #8
 800588e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005896:	f043 0208 	orr.w	r2, r3, #8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d012      	beq.n	80058d2 <HAL_UART_IRQHandler+0x196>
 80058ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00c      	beq.n	80058d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c8:	f043 0220 	orr.w	r2, r3, #32
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8212 	beq.w	8005d02 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d013      	beq.n	8005912 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d105      	bne.n	8005902 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b40      	cmp	r3, #64	@ 0x40
 8005928:	d005      	beq.n	8005936 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800592a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800592e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02e      	beq.n	8005994 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fd45 	bl	80063c6 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005946:	2b40      	cmp	r3, #64	@ 0x40
 8005948:	d120      	bne.n	800598c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d017      	beq.n	8005984 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800595a:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <HAL_UART_IRQHandler+0x274>)
 800595c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005964:	4618      	mov	r0, r3
 8005966:	f7fb fdef 	bl	8001548 <HAL_DMA_Abort_IT>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d019      	beq.n	80059a4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800597e:	4610      	mov	r0, r2
 8005980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005982:	e00f      	b.n	80059a4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f9d1 	bl	8005d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	e00b      	b.n	80059a4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f9cd 	bl	8005d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005992:	e007      	b.n	80059a4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f9c9 	bl	8005d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80059a2:	e1ae      	b.n	8005d02 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	bf00      	nop
    return;
 80059a6:	e1ac      	b.n	8005d02 <HAL_UART_IRQHandler+0x5c6>
 80059a8:	10000001 	.word	0x10000001
 80059ac:	04000120 	.word	0x04000120
 80059b0:	08006493 	.word	0x08006493

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f040 8142 	bne.w	8005c42 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 813b 	beq.w	8005c42 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8134 	beq.w	8005c42 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2210      	movs	r2, #16
 80059e0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	f040 80aa 	bne.w	8005b46 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059fc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8005a00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8084 	beq.w	8005b12 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a10:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d27c      	bcs.n	8005b12 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005a1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a2a:	2b81      	cmp	r3, #129	@ 0x81
 8005a2c:	d060      	beq.n	8005af0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a54:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e2      	bne.n	8005a2e <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005a8c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e3      	bne.n	8005a68 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005abe:	f023 0310 	bic.w	r3, r3, #16
 8005ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ad2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ad6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e4      	bne.n	8005aae <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fb fcb0 	bl	8001450 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f918 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b10:	e0f9      	b.n	8005d06 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b18:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	f040 80f2 	bne.w	8005d06 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2a:	2b81      	cmp	r3, #129	@ 0x81
 8005b2c:	f040 80eb 	bne.w	8005d06 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8fe 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
      return;
 8005b44:	e0df      	b.n	8005d06 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80d1 	beq.w	8005d0a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8005b68:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80cc 	beq.w	8005d0a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e4      	bne.n	8005b72 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3308      	adds	r3, #8
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3308      	adds	r3, #8
 8005bcc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005bd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e1      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f023 0310 	bic.w	r3, r3, #16
 8005c0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c1a:	61fb      	str	r3, [r7, #28]
 8005c1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	69b9      	ldr	r1, [r7, #24]
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	617b      	str	r3, [r7, #20]
   return(result);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e4      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c34:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f880 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c40:	e063      	b.n	8005d0a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <HAL_UART_IRQHandler+0x530>
 8005c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fc51 	bl	800650c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c6a:	e051      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d014      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d03a      	beq.n	8005d0e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4798      	blx	r3
    }
    return;
 8005ca0:	e035      	b.n	8005d0e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x586>
 8005cae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fbfb 	bl	80064b6 <UART_EndTransmit_IT>
    return;
 8005cc0:	e026      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x5a6>
 8005cce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fc2a 	bl	8006534 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ce0:	e016      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ce6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d010      	beq.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
 8005cee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da0c      	bge.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fc12 	bl	8006520 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cfc:	e008      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005cfe:	bf00      	nop
 8005d00:	e006      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005d0e:	bf00      	nop
  }
}
 8005d10:	37b8      	adds	r7, #184	@ 0xb8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop

08005d18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d5c:	b094      	sub	sp, #80	@ 0x50
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	498a      	ldr	r1, [pc, #552]	@ (8005fb0 <UART_SetConfig+0x258>)
 8005d88:	4019      	ands	r1, r3
 8005d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d90:	430b      	orrs	r3, r1
 8005d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	68d9      	ldr	r1, [r3, #12]
 8005da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	ea40 0301 	orr.w	r3, r0, r1
 8005daa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b7f      	ldr	r3, [pc, #508]	@ (8005fb4 <UART_SetConfig+0x25c>)
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d004      	beq.n	8005dc6 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005dd0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	f023 000f 	bic.w	r0, r3, #15
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	ea40 0301 	orr.w	r3, r0, r1
 8005df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8005fb8 <UART_SetConfig+0x260>)
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d102      	bne.n	8005e06 <UART_SetConfig+0xae>
 8005e00:	2301      	movs	r3, #1
 8005e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e04:	e01a      	b.n	8005e3c <UART_SetConfig+0xe4>
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8005fbc <UART_SetConfig+0x264>)
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d102      	bne.n	8005e16 <UART_SetConfig+0xbe>
 8005e10:	2302      	movs	r3, #2
 8005e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e14:	e012      	b.n	8005e3c <UART_SetConfig+0xe4>
 8005e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b69      	ldr	r3, [pc, #420]	@ (8005fc0 <UART_SetConfig+0x268>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d102      	bne.n	8005e26 <UART_SetConfig+0xce>
 8005e20:	2304      	movs	r3, #4
 8005e22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e24:	e00a      	b.n	8005e3c <UART_SetConfig+0xe4>
 8005e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b62      	ldr	r3, [pc, #392]	@ (8005fb4 <UART_SetConfig+0x25c>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d103      	bne.n	8005e38 <UART_SetConfig+0xe0>
 8005e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e36:	e001      	b.n	8005e3c <UART_SetConfig+0xe4>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b5c      	ldr	r3, [pc, #368]	@ (8005fb4 <UART_SetConfig+0x25c>)
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d171      	bne.n	8005f2a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e48:	2200      	movs	r2, #0
 8005e4a:	623b      	str	r3, [r7, #32]
 8005e4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e52:	f7fe fbaf 	bl	80045b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e56:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80e2 	beq.w	8006024 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	4a57      	ldr	r2, [pc, #348]	@ (8005fc4 <UART_SetConfig+0x26c>)
 8005e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e72:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d305      	bcc.n	8005e90 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d903      	bls.n	8005e98 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e96:	e0c5      	b.n	8006024 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	61fa      	str	r2, [r7, #28]
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	4a47      	ldr	r2, [pc, #284]	@ (8005fc4 <UART_SetConfig+0x26c>)
 8005ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2200      	movs	r2, #0
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	617a      	str	r2, [r7, #20]
 8005eb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005eb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005eba:	f7fa f9ed 	bl	8000298 <__aeabi_uldivmod>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	020b      	lsls	r3, r1, #8
 8005ed0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ed4:	0202      	lsls	r2, r0, #8
 8005ed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ed8:	6849      	ldr	r1, [r1, #4]
 8005eda:	0849      	lsrs	r1, r1, #1
 8005edc:	2000      	movs	r0, #0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	eb12 0804 	adds.w	r8, r2, r4
 8005ee6:	eb43 0905 	adc.w	r9, r3, r5
 8005eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	60fa      	str	r2, [r7, #12]
 8005ef4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4649      	mov	r1, r9
 8005efc:	f7fa f9cc 	bl	8000298 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4613      	mov	r3, r2
 8005f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f0e:	d308      	bcc.n	8005f22 <UART_SetConfig+0x1ca>
 8005f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f16:	d204      	bcs.n	8005f22 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	e080      	b.n	8006024 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f28:	e07c      	b.n	8006024 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f32:	d149      	bne.n	8005fc8 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f36:	2200      	movs	r2, #0
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f40:	f7fe fb38 	bl	80045b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f44:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d06b      	beq.n	8006024 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc4 <UART_SetConfig+0x26c>)
 8005f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5e:	005a      	lsls	r2, r3, #1
 8005f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	441a      	add	r2, r3
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f74:	2b0f      	cmp	r3, #15
 8005f76:	d916      	bls.n	8005fa6 <UART_SetConfig+0x24e>
 8005f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7e:	d212      	bcs.n	8005fa6 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f023 030f 	bic.w	r3, r3, #15
 8005f88:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005fa2:	60da      	str	r2, [r3, #12]
 8005fa4:	e03e      	b.n	8006024 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005fac:	e03a      	b.n	8006024 <UART_SetConfig+0x2cc>
 8005fae:	bf00      	nop
 8005fb0:	cfff69f3 	.word	0xcfff69f3
 8005fb4:	44002400 	.word	0x44002400
 8005fb8:	40013800 	.word	0x40013800
 8005fbc:	40004400 	.word	0x40004400
 8005fc0:	40004800 	.word	0x40004800
 8005fc4:	0800777c 	.word	0x0800777c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fca:	2200      	movs	r2, #0
 8005fcc:	469a      	mov	sl, r3
 8005fce:	4693      	mov	fp, r2
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	f7fe faee 	bl	80045b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fd8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d021      	beq.n	8006024 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8006050 <UART_SetConfig+0x2f8>)
 8005fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fee:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	441a      	add	r2, r3
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006006:	2b0f      	cmp	r3, #15
 8006008:	d909      	bls.n	800601e <UART_SetConfig+0x2c6>
 800600a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006010:	d205      	bcs.n	800601e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006014:	b29a      	uxth	r2, r3
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60da      	str	r2, [r3, #12]
 800601c:	e002      	b.n	8006024 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006026:	2201      	movs	r2, #1
 8006028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006036:	2200      	movs	r2, #0
 8006038:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603c:	2200      	movs	r2, #0
 800603e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006040:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006044:	4618      	mov	r0, r3
 8006046:	3750      	adds	r7, #80	@ 0x50
 8006048:	46bd      	mov	sp, r7
 800604a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800604e:	bf00      	nop
 8006050:	0800777c 	.word	0x0800777c

08006054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01a      	beq.n	800616a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006152:	d10a      	bne.n	800616a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b098      	sub	sp, #96	@ 0x60
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a8:	f7fa ffb6 	bl	8001118 <HAL_GetTick>
 80061ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d12f      	bne.n	800621c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c4:	2200      	movs	r2, #0
 80061c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f88e 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d022      	beq.n	800621c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e063      	b.n	80062e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d149      	bne.n	80062be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006232:	2200      	movs	r2, #0
 8006234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f857 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d03c      	beq.n	80062be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	623b      	str	r3, [r7, #32]
   return(result);
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30
 8006264:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e6      	bne.n	8006244 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	60fb      	str	r3, [r7, #12]
   return(result);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3308      	adds	r3, #8
 8006294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006296:	61fa      	str	r2, [r7, #28]
 8006298:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	69b9      	ldr	r1, [r7, #24]
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	617b      	str	r3, [r7, #20]
   return(result);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e5      	bne.n	8006276 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e012      	b.n	80062e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3758      	adds	r7, #88	@ 0x58
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fc:	e04f      	b.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d04b      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006306:	f7fa ff07 	bl	8001118 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <UART_WaitOnFlagUntilTimeout+0x30>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e04e      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d037      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b80      	cmp	r3, #128	@ 0x80
 8006332:	d034      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b40      	cmp	r3, #64	@ 0x40
 8006338:	d031      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b08      	cmp	r3, #8
 8006346:	d110      	bne.n	800636a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2208      	movs	r2, #8
 800634e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f838 	bl	80063c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2208      	movs	r2, #8
 800635a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e029      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006378:	d111      	bne.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f81e 	bl	80063c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e00f      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4013      	ands	r3, r2
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	bf0c      	ite	eq
 80063ae:	2301      	moveq	r3, #1
 80063b0:	2300      	movne	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d0a0      	beq.n	80062fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b095      	sub	sp, #84	@ 0x54
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e6      	bne.n	80063ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3308      	adds	r3, #8
 8006406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3308      	adds	r3, #8
 8006422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006424:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800642a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e3      	bne.n	8006400 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d118      	bne.n	8006472 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	60bb      	str	r3, [r7, #8]
   return(result);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	647b      	str	r3, [r7, #68]	@ 0x44
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006486:	bf00      	nop
 8006488:	3754      	adds	r7, #84	@ 0x54
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff fc3f 	bl	8005d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b088      	sub	sp, #32
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6979      	ldr	r1, [r7, #20]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fc0a 	bl	8005d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006504:	bf00      	nop
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_UARTEx_DisableFifoMode+0x16>
 800655a:	2302      	movs	r3, #2
 800655c:	e027      	b.n	80065ae <HAL_UARTEx_DisableFifoMode+0x66>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2224      	movs	r2, #36	@ 0x24
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800658c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e02d      	b.n	800662e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2224      	movs	r2, #36	@ 0x24
 80065de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0201 	bic.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f850 	bl	80066b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800664a:	2302      	movs	r3, #2
 800664c:	e02d      	b.n	80066aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2224      	movs	r2, #36	@ 0x24
 800665a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f812 	bl	80066b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d108      	bne.n	80066d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066d4:	e031      	b.n	800673a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066d6:	2308      	movs	r3, #8
 80066d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066da:	2308      	movs	r3, #8
 80066dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	0e5b      	lsrs	r3, r3, #25
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	0f5b      	lsrs	r3, r3, #29
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	7b3a      	ldrb	r2, [r7, #12]
 8006702:	4911      	ldr	r1, [pc, #68]	@ (8006748 <UARTEx_SetNbDataToProcess+0x94>)
 8006704:	5c8a      	ldrb	r2, [r1, r2]
 8006706:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800670a:	7b3a      	ldrb	r2, [r7, #12]
 800670c:	490f      	ldr	r1, [pc, #60]	@ (800674c <UARTEx_SetNbDataToProcess+0x98>)
 800670e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006710:	fb93 f3f2 	sdiv	r3, r3, r2
 8006714:	b29a      	uxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	7b7a      	ldrb	r2, [r7, #13]
 8006720:	4909      	ldr	r1, [pc, #36]	@ (8006748 <UARTEx_SetNbDataToProcess+0x94>)
 8006722:	5c8a      	ldrb	r2, [r1, r2]
 8006724:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006728:	7b7a      	ldrb	r2, [r7, #13]
 800672a:	4908      	ldr	r1, [pc, #32]	@ (800674c <UARTEx_SetNbDataToProcess+0x98>)
 800672c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800672e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006732:	b29a      	uxth	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	08007794 	.word	0x08007794
 800674c:	0800779c 	.word	0x0800779c

08006750 <std>:
 8006750:	2300      	movs	r3, #0
 8006752:	b510      	push	{r4, lr}
 8006754:	4604      	mov	r4, r0
 8006756:	6083      	str	r3, [r0, #8]
 8006758:	8181      	strh	r1, [r0, #12]
 800675a:	4619      	mov	r1, r3
 800675c:	6643      	str	r3, [r0, #100]	@ 0x64
 800675e:	81c2      	strh	r2, [r0, #14]
 8006760:	2208      	movs	r2, #8
 8006762:	6183      	str	r3, [r0, #24]
 8006764:	e9c0 3300 	strd	r3, r3, [r0]
 8006768:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800676c:	305c      	adds	r0, #92	@ 0x5c
 800676e:	f000 f99b 	bl	8006aa8 <memset>
 8006772:	4b0d      	ldr	r3, [pc, #52]	@ (80067a8 <std+0x58>)
 8006774:	6224      	str	r4, [r4, #32]
 8006776:	6263      	str	r3, [r4, #36]	@ 0x24
 8006778:	4b0c      	ldr	r3, [pc, #48]	@ (80067ac <std+0x5c>)
 800677a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800677c:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <std+0x60>)
 800677e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006780:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <std+0x64>)
 8006782:	6323      	str	r3, [r4, #48]	@ 0x30
 8006784:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <std+0x68>)
 8006786:	429c      	cmp	r4, r3
 8006788:	d006      	beq.n	8006798 <std+0x48>
 800678a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800678e:	4294      	cmp	r4, r2
 8006790:	d002      	beq.n	8006798 <std+0x48>
 8006792:	33d0      	adds	r3, #208	@ 0xd0
 8006794:	429c      	cmp	r4, r3
 8006796:	d105      	bne.n	80067a4 <std+0x54>
 8006798:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a0:	f000 b9fa 	b.w	8006b98 <__retarget_lock_init_recursive>
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	bf00      	nop
 80067a8:	080068f9 	.word	0x080068f9
 80067ac:	0800691b 	.word	0x0800691b
 80067b0:	08006953 	.word	0x08006953
 80067b4:	08006977 	.word	0x08006977
 80067b8:	200001dc 	.word	0x200001dc

080067bc <stdio_exit_handler>:
 80067bc:	4a02      	ldr	r2, [pc, #8]	@ (80067c8 <stdio_exit_handler+0xc>)
 80067be:	4903      	ldr	r1, [pc, #12]	@ (80067cc <stdio_exit_handler+0x10>)
 80067c0:	4803      	ldr	r0, [pc, #12]	@ (80067d0 <stdio_exit_handler+0x14>)
 80067c2:	f000 b869 	b.w	8006898 <_fwalk_sglue>
 80067c6:	bf00      	nop
 80067c8:	2000000c 	.word	0x2000000c
 80067cc:	08007441 	.word	0x08007441
 80067d0:	2000001c 	.word	0x2000001c

080067d4 <cleanup_stdio>:
 80067d4:	6841      	ldr	r1, [r0, #4]
 80067d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006808 <cleanup_stdio+0x34>)
 80067d8:	4299      	cmp	r1, r3
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	d001      	beq.n	80067e4 <cleanup_stdio+0x10>
 80067e0:	f000 fe2e 	bl	8007440 <_fflush_r>
 80067e4:	68a1      	ldr	r1, [r4, #8]
 80067e6:	4b09      	ldr	r3, [pc, #36]	@ (800680c <cleanup_stdio+0x38>)
 80067e8:	4299      	cmp	r1, r3
 80067ea:	d002      	beq.n	80067f2 <cleanup_stdio+0x1e>
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fe27 	bl	8007440 <_fflush_r>
 80067f2:	68e1      	ldr	r1, [r4, #12]
 80067f4:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <cleanup_stdio+0x3c>)
 80067f6:	4299      	cmp	r1, r3
 80067f8:	d004      	beq.n	8006804 <cleanup_stdio+0x30>
 80067fa:	4620      	mov	r0, r4
 80067fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006800:	f000 be1e 	b.w	8007440 <_fflush_r>
 8006804:	bd10      	pop	{r4, pc}
 8006806:	bf00      	nop
 8006808:	200001dc 	.word	0x200001dc
 800680c:	20000244 	.word	0x20000244
 8006810:	200002ac 	.word	0x200002ac

08006814 <global_stdio_init.part.0>:
 8006814:	b510      	push	{r4, lr}
 8006816:	4b0b      	ldr	r3, [pc, #44]	@ (8006844 <global_stdio_init.part.0+0x30>)
 8006818:	2104      	movs	r1, #4
 800681a:	4c0b      	ldr	r4, [pc, #44]	@ (8006848 <global_stdio_init.part.0+0x34>)
 800681c:	4a0b      	ldr	r2, [pc, #44]	@ (800684c <global_stdio_init.part.0+0x38>)
 800681e:	4620      	mov	r0, r4
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	2200      	movs	r2, #0
 8006824:	f7ff ff94 	bl	8006750 <std>
 8006828:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800682c:	2201      	movs	r2, #1
 800682e:	2109      	movs	r1, #9
 8006830:	f7ff ff8e 	bl	8006750 <std>
 8006834:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006838:	2202      	movs	r2, #2
 800683a:	2112      	movs	r1, #18
 800683c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006840:	f7ff bf86 	b.w	8006750 <std>
 8006844:	20000314 	.word	0x20000314
 8006848:	200001dc 	.word	0x200001dc
 800684c:	080067bd 	.word	0x080067bd

08006850 <__sfp_lock_acquire>:
 8006850:	4801      	ldr	r0, [pc, #4]	@ (8006858 <__sfp_lock_acquire+0x8>)
 8006852:	f000 b9a2 	b.w	8006b9a <__retarget_lock_acquire_recursive>
 8006856:	bf00      	nop
 8006858:	2000031d 	.word	0x2000031d

0800685c <__sfp_lock_release>:
 800685c:	4801      	ldr	r0, [pc, #4]	@ (8006864 <__sfp_lock_release+0x8>)
 800685e:	f000 b99d 	b.w	8006b9c <__retarget_lock_release_recursive>
 8006862:	bf00      	nop
 8006864:	2000031d 	.word	0x2000031d

08006868 <__sinit>:
 8006868:	b510      	push	{r4, lr}
 800686a:	4604      	mov	r4, r0
 800686c:	f7ff fff0 	bl	8006850 <__sfp_lock_acquire>
 8006870:	6a23      	ldr	r3, [r4, #32]
 8006872:	b11b      	cbz	r3, 800687c <__sinit+0x14>
 8006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006878:	f7ff bff0 	b.w	800685c <__sfp_lock_release>
 800687c:	4b04      	ldr	r3, [pc, #16]	@ (8006890 <__sinit+0x28>)
 800687e:	6223      	str	r3, [r4, #32]
 8006880:	4b04      	ldr	r3, [pc, #16]	@ (8006894 <__sinit+0x2c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f5      	bne.n	8006874 <__sinit+0xc>
 8006888:	f7ff ffc4 	bl	8006814 <global_stdio_init.part.0>
 800688c:	e7f2      	b.n	8006874 <__sinit+0xc>
 800688e:	bf00      	nop
 8006890:	080067d5 	.word	0x080067d5
 8006894:	20000314 	.word	0x20000314

08006898 <_fwalk_sglue>:
 8006898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800689c:	4607      	mov	r7, r0
 800689e:	4688      	mov	r8, r1
 80068a0:	4614      	mov	r4, r2
 80068a2:	2600      	movs	r6, #0
 80068a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068a8:	f1b9 0901 	subs.w	r9, r9, #1
 80068ac:	d505      	bpl.n	80068ba <_fwalk_sglue+0x22>
 80068ae:	6824      	ldr	r4, [r4, #0]
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	d1f7      	bne.n	80068a4 <_fwalk_sglue+0xc>
 80068b4:	4630      	mov	r0, r6
 80068b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ba:	89ab      	ldrh	r3, [r5, #12]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d907      	bls.n	80068d0 <_fwalk_sglue+0x38>
 80068c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068c4:	3301      	adds	r3, #1
 80068c6:	d003      	beq.n	80068d0 <_fwalk_sglue+0x38>
 80068c8:	4629      	mov	r1, r5
 80068ca:	4638      	mov	r0, r7
 80068cc:	47c0      	blx	r8
 80068ce:	4306      	orrs	r6, r0
 80068d0:	3568      	adds	r5, #104	@ 0x68
 80068d2:	e7e9      	b.n	80068a8 <_fwalk_sglue+0x10>

080068d4 <iprintf>:
 80068d4:	b40f      	push	{r0, r1, r2, r3}
 80068d6:	b507      	push	{r0, r1, r2, lr}
 80068d8:	4906      	ldr	r1, [pc, #24]	@ (80068f4 <iprintf+0x20>)
 80068da:	ab04      	add	r3, sp, #16
 80068dc:	6808      	ldr	r0, [r1, #0]
 80068de:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e2:	6881      	ldr	r1, [r0, #8]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	f000 fa7d 	bl	8006de4 <_vfiprintf_r>
 80068ea:	b003      	add	sp, #12
 80068ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f0:	b004      	add	sp, #16
 80068f2:	4770      	bx	lr
 80068f4:	20000018 	.word	0x20000018

080068f8 <__sread>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	460c      	mov	r4, r1
 80068fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006900:	f000 f8fc 	bl	8006afc <_read_r>
 8006904:	2800      	cmp	r0, #0
 8006906:	bfab      	itete	ge
 8006908:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800690a:	89a3      	ldrhlt	r3, [r4, #12]
 800690c:	181b      	addge	r3, r3, r0
 800690e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006912:	bfac      	ite	ge
 8006914:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006916:	81a3      	strhlt	r3, [r4, #12]
 8006918:	bd10      	pop	{r4, pc}

0800691a <__swrite>:
 800691a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691e:	461f      	mov	r7, r3
 8006920:	898b      	ldrh	r3, [r1, #12]
 8006922:	4605      	mov	r5, r0
 8006924:	460c      	mov	r4, r1
 8006926:	05db      	lsls	r3, r3, #23
 8006928:	4616      	mov	r6, r2
 800692a:	d505      	bpl.n	8006938 <__swrite+0x1e>
 800692c:	2302      	movs	r3, #2
 800692e:	2200      	movs	r2, #0
 8006930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006934:	f000 f8d0 	bl	8006ad8 <_lseek_r>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	4632      	mov	r2, r6
 800693c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006940:	4628      	mov	r0, r5
 8006942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	463b      	mov	r3, r7
 800694a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	f000 b8e7 	b.w	8006b20 <_write_r>

08006952 <__sseek>:
 8006952:	b510      	push	{r4, lr}
 8006954:	460c      	mov	r4, r1
 8006956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695a:	f000 f8bd 	bl	8006ad8 <_lseek_r>
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	bf15      	itete	ne
 8006964:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006966:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800696a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800696e:	81a3      	strheq	r3, [r4, #12]
 8006970:	bf18      	it	ne
 8006972:	81a3      	strhne	r3, [r4, #12]
 8006974:	bd10      	pop	{r4, pc}

08006976 <__sclose>:
 8006976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697a:	f000 b89d 	b.w	8006ab8 <_close_r>

0800697e <__swbuf_r>:
 800697e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006980:	460e      	mov	r6, r1
 8006982:	4614      	mov	r4, r2
 8006984:	4605      	mov	r5, r0
 8006986:	b118      	cbz	r0, 8006990 <__swbuf_r+0x12>
 8006988:	6a03      	ldr	r3, [r0, #32]
 800698a:	b90b      	cbnz	r3, 8006990 <__swbuf_r+0x12>
 800698c:	f7ff ff6c 	bl	8006868 <__sinit>
 8006990:	69a3      	ldr	r3, [r4, #24]
 8006992:	60a3      	str	r3, [r4, #8]
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	071a      	lsls	r2, r3, #28
 8006998:	d501      	bpl.n	800699e <__swbuf_r+0x20>
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	b943      	cbnz	r3, 80069b0 <__swbuf_r+0x32>
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 f82b 	bl	80069fc <__swsetup_r>
 80069a6:	b118      	cbz	r0, 80069b0 <__swbuf_r+0x32>
 80069a8:	f04f 37ff 	mov.w	r7, #4294967295
 80069ac:	4638      	mov	r0, r7
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	b2f6      	uxtb	r6, r6
 80069b4:	6922      	ldr	r2, [r4, #16]
 80069b6:	4637      	mov	r7, r6
 80069b8:	1a98      	subs	r0, r3, r2
 80069ba:	6963      	ldr	r3, [r4, #20]
 80069bc:	4283      	cmp	r3, r0
 80069be:	dc05      	bgt.n	80069cc <__swbuf_r+0x4e>
 80069c0:	4621      	mov	r1, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 fd3c 	bl	8007440 <_fflush_r>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d1ed      	bne.n	80069a8 <__swbuf_r+0x2a>
 80069cc:	68a3      	ldr	r3, [r4, #8]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	6022      	str	r2, [r4, #0]
 80069d8:	701e      	strb	r6, [r3, #0]
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	6962      	ldr	r2, [r4, #20]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d004      	beq.n	80069ec <__swbuf_r+0x6e>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	07db      	lsls	r3, r3, #31
 80069e6:	d5e1      	bpl.n	80069ac <__swbuf_r+0x2e>
 80069e8:	2e0a      	cmp	r6, #10
 80069ea:	d1df      	bne.n	80069ac <__swbuf_r+0x2e>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 fd26 	bl	8007440 <_fflush_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d0d9      	beq.n	80069ac <__swbuf_r+0x2e>
 80069f8:	e7d6      	b.n	80069a8 <__swbuf_r+0x2a>
	...

080069fc <__swsetup_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4b29      	ldr	r3, [pc, #164]	@ (8006aa4 <__swsetup_r+0xa8>)
 8006a00:	4605      	mov	r5, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	b118      	cbz	r0, 8006a10 <__swsetup_r+0x14>
 8006a08:	6a03      	ldr	r3, [r0, #32]
 8006a0a:	b90b      	cbnz	r3, 8006a10 <__swsetup_r+0x14>
 8006a0c:	f7ff ff2c 	bl	8006868 <__sinit>
 8006a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a14:	0719      	lsls	r1, r3, #28
 8006a16:	d422      	bmi.n	8006a5e <__swsetup_r+0x62>
 8006a18:	06da      	lsls	r2, r3, #27
 8006a1a:	d407      	bmi.n	8006a2c <__swsetup_r+0x30>
 8006a1c:	2209      	movs	r2, #9
 8006a1e:	602a      	str	r2, [r5, #0]
 8006a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	81a3      	strh	r3, [r4, #12]
 8006a2a:	e033      	b.n	8006a94 <__swsetup_r+0x98>
 8006a2c:	0758      	lsls	r0, r3, #29
 8006a2e:	d512      	bpl.n	8006a56 <__swsetup_r+0x5a>
 8006a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a32:	b141      	cbz	r1, 8006a46 <__swsetup_r+0x4a>
 8006a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	d002      	beq.n	8006a42 <__swsetup_r+0x46>
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f000 f8af 	bl	8006ba0 <_free_r>
 8006a42:	2300      	movs	r3, #0
 8006a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	b94b      	cbnz	r3, 8006a76 <__swsetup_r+0x7a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a6c:	d003      	beq.n	8006a76 <__swsetup_r+0x7a>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 fd32 	bl	80074da <__smakebuf_r>
 8006a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7a:	f013 0201 	ands.w	r2, r3, #1
 8006a7e:	d00a      	beq.n	8006a96 <__swsetup_r+0x9a>
 8006a80:	2200      	movs	r2, #0
 8006a82:	60a2      	str	r2, [r4, #8]
 8006a84:	6962      	ldr	r2, [r4, #20]
 8006a86:	4252      	negs	r2, r2
 8006a88:	61a2      	str	r2, [r4, #24]
 8006a8a:	6922      	ldr	r2, [r4, #16]
 8006a8c:	b942      	cbnz	r2, 8006aa0 <__swsetup_r+0xa4>
 8006a8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a92:	d1c5      	bne.n	8006a20 <__swsetup_r+0x24>
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
 8006a96:	0799      	lsls	r1, r3, #30
 8006a98:	bf58      	it	pl
 8006a9a:	6962      	ldrpl	r2, [r4, #20]
 8006a9c:	60a2      	str	r2, [r4, #8]
 8006a9e:	e7f4      	b.n	8006a8a <__swsetup_r+0x8e>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e7f7      	b.n	8006a94 <__swsetup_r+0x98>
 8006aa4:	20000018 	.word	0x20000018

08006aa8 <memset>:
 8006aa8:	4402      	add	r2, r0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d100      	bne.n	8006ab2 <memset+0xa>
 8006ab0:	4770      	bx	lr
 8006ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab6:	e7f9      	b.n	8006aac <memset+0x4>

08006ab8 <_close_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	2300      	movs	r3, #0
 8006abc:	4d05      	ldr	r5, [pc, #20]	@ (8006ad4 <_close_r+0x1c>)
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fa f923 	bl	8000d0e <_close>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_close_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_close_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	20000318 	.word	0x20000318

08006ad8 <_lseek_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4604      	mov	r4, r0
 8006adc:	4d06      	ldr	r5, [pc, #24]	@ (8006af8 <_lseek_r+0x20>)
 8006ade:	4608      	mov	r0, r1
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f7fa f938 	bl	8000d5c <_lseek>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_lseek_r+0x1e>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_lseek_r+0x1e>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20000318 	.word	0x20000318

08006afc <_read_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4604      	mov	r4, r0
 8006b00:	4d06      	ldr	r5, [pc, #24]	@ (8006b1c <_read_r+0x20>)
 8006b02:	4608      	mov	r0, r1
 8006b04:	4611      	mov	r1, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	602a      	str	r2, [r5, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f7fa f8c6 	bl	8000c9c <_read>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_read_r+0x1e>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_read_r+0x1e>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20000318 	.word	0x20000318

08006b20 <_write_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4604      	mov	r4, r0
 8006b24:	4d06      	ldr	r5, [pc, #24]	@ (8006b40 <_write_r+0x20>)
 8006b26:	4608      	mov	r0, r1
 8006b28:	4611      	mov	r1, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	602a      	str	r2, [r5, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f7fa f8d1 	bl	8000cd6 <_write>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_write_r+0x1e>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_write_r+0x1e>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20000318 	.word	0x20000318

08006b44 <__errno>:
 8006b44:	4b01      	ldr	r3, [pc, #4]	@ (8006b4c <__errno+0x8>)
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000018 	.word	0x20000018

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4d0d      	ldr	r5, [pc, #52]	@ (8006b88 <__libc_init_array+0x38>)
 8006b54:	2600      	movs	r6, #0
 8006b56:	4c0d      	ldr	r4, [pc, #52]	@ (8006b8c <__libc_init_array+0x3c>)
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	42a6      	cmp	r6, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	4d0b      	ldr	r5, [pc, #44]	@ (8006b90 <__libc_init_array+0x40>)
 8006b62:	2600      	movs	r6, #0
 8006b64:	4c0b      	ldr	r4, [pc, #44]	@ (8006b94 <__libc_init_array+0x44>)
 8006b66:	f000 fd35 	bl	80075d4 <_init>
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	42a6      	cmp	r6, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b78:	3601      	adds	r6, #1
 8006b7a:	4798      	blx	r3
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b82:	3601      	adds	r6, #1
 8006b84:	4798      	blx	r3
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	080077e0 	.word	0x080077e0
 8006b8c:	080077e0 	.word	0x080077e0
 8006b90:	080077e0 	.word	0x080077e0
 8006b94:	080077e4 	.word	0x080077e4

08006b98 <__retarget_lock_init_recursive>:
 8006b98:	4770      	bx	lr

08006b9a <__retarget_lock_acquire_recursive>:
 8006b9a:	4770      	bx	lr

08006b9c <__retarget_lock_release_recursive>:
 8006b9c:	4770      	bx	lr
	...

08006ba0 <_free_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	d041      	beq.n	8006c2c <_free_r+0x8c>
 8006ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bac:	1f0c      	subs	r4, r1, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bfb8      	it	lt
 8006bb2:	18e4      	addlt	r4, r4, r3
 8006bb4:	f000 f8e0 	bl	8006d78 <__malloc_lock>
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <_free_r+0x90>)
 8006bba:	6813      	ldr	r3, [r2, #0]
 8006bbc:	b933      	cbnz	r3, 8006bcc <_free_r+0x2c>
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	6014      	str	r4, [r2, #0]
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc8:	f000 b8dc 	b.w	8006d84 <__malloc_unlock>
 8006bcc:	42a3      	cmp	r3, r4
 8006bce:	d908      	bls.n	8006be2 <_free_r+0x42>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	1821      	adds	r1, r4, r0
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	bf01      	itttt	eq
 8006bd8:	6819      	ldreq	r1, [r3, #0]
 8006bda:	685b      	ldreq	r3, [r3, #4]
 8006bdc:	1809      	addeq	r1, r1, r0
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	e7ed      	b.n	8006bbe <_free_r+0x1e>
 8006be2:	461a      	mov	r2, r3
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b10b      	cbz	r3, 8006bec <_free_r+0x4c>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d9fa      	bls.n	8006be2 <_free_r+0x42>
 8006bec:	6811      	ldr	r1, [r2, #0]
 8006bee:	1850      	adds	r0, r2, r1
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d10b      	bne.n	8006c0c <_free_r+0x6c>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	4401      	add	r1, r0
 8006bf8:	1850      	adds	r0, r2, r1
 8006bfa:	6011      	str	r1, [r2, #0]
 8006bfc:	4283      	cmp	r3, r0
 8006bfe:	d1e0      	bne.n	8006bc2 <_free_r+0x22>
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4408      	add	r0, r1
 8006c06:	6053      	str	r3, [r2, #4]
 8006c08:	6010      	str	r0, [r2, #0]
 8006c0a:	e7da      	b.n	8006bc2 <_free_r+0x22>
 8006c0c:	d902      	bls.n	8006c14 <_free_r+0x74>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	602b      	str	r3, [r5, #0]
 8006c12:	e7d6      	b.n	8006bc2 <_free_r+0x22>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	1821      	adds	r1, r4, r0
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf02      	ittt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	1809      	addeq	r1, r1, r0
 8006c22:	6063      	str	r3, [r4, #4]
 8006c24:	bf08      	it	eq
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	6054      	str	r4, [r2, #4]
 8006c2a:	e7ca      	b.n	8006bc2 <_free_r+0x22>
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000324 	.word	0x20000324

08006c34 <sbrk_aligned>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4e0f      	ldr	r6, [pc, #60]	@ (8006c74 <sbrk_aligned+0x40>)
 8006c38:	460c      	mov	r4, r1
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	6831      	ldr	r1, [r6, #0]
 8006c3e:	b911      	cbnz	r1, 8006c46 <sbrk_aligned+0x12>
 8006c40:	f000 fcaa 	bl	8007598 <_sbrk_r>
 8006c44:	6030      	str	r0, [r6, #0]
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fca5 	bl	8007598 <_sbrk_r>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d103      	bne.n	8006c5a <sbrk_aligned+0x26>
 8006c52:	f04f 34ff 	mov.w	r4, #4294967295
 8006c56:	4620      	mov	r0, r4
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
 8006c5a:	1cc4      	adds	r4, r0, #3
 8006c5c:	f024 0403 	bic.w	r4, r4, #3
 8006c60:	42a0      	cmp	r0, r4
 8006c62:	d0f8      	beq.n	8006c56 <sbrk_aligned+0x22>
 8006c64:	1a21      	subs	r1, r4, r0
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 fc96 	bl	8007598 <_sbrk_r>
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d1f2      	bne.n	8006c56 <sbrk_aligned+0x22>
 8006c70:	e7ef      	b.n	8006c52 <sbrk_aligned+0x1e>
 8006c72:	bf00      	nop
 8006c74:	20000320 	.word	0x20000320

08006c78 <_malloc_r>:
 8006c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	1ccd      	adds	r5, r1, #3
 8006c7e:	4606      	mov	r6, r0
 8006c80:	f025 0503 	bic.w	r5, r5, #3
 8006c84:	3508      	adds	r5, #8
 8006c86:	2d0c      	cmp	r5, #12
 8006c88:	bf38      	it	cc
 8006c8a:	250c      	movcc	r5, #12
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	db01      	blt.n	8006c94 <_malloc_r+0x1c>
 8006c90:	42a9      	cmp	r1, r5
 8006c92:	d904      	bls.n	8006c9e <_malloc_r+0x26>
 8006c94:	230c      	movs	r3, #12
 8006c96:	6033      	str	r3, [r6, #0]
 8006c98:	2000      	movs	r0, #0
 8006c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d74 <_malloc_r+0xfc>
 8006ca2:	f000 f869 	bl	8006d78 <__malloc_lock>
 8006ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8006caa:	461c      	mov	r4, r3
 8006cac:	bb44      	cbnz	r4, 8006d00 <_malloc_r+0x88>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff ffbf 	bl	8006c34 <sbrk_aligned>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	4604      	mov	r4, r0
 8006cba:	d158      	bne.n	8006d6e <_malloc_r+0xf6>
 8006cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8006cc0:	4627      	mov	r7, r4
 8006cc2:	2f00      	cmp	r7, #0
 8006cc4:	d143      	bne.n	8006d4e <_malloc_r+0xd6>
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	d04b      	beq.n	8006d62 <_malloc_r+0xea>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	4639      	mov	r1, r7
 8006cce:	4630      	mov	r0, r6
 8006cd0:	eb04 0903 	add.w	r9, r4, r3
 8006cd4:	f000 fc60 	bl	8007598 <_sbrk_r>
 8006cd8:	4581      	cmp	r9, r0
 8006cda:	d142      	bne.n	8006d62 <_malloc_r+0xea>
 8006cdc:	6821      	ldr	r1, [r4, #0]
 8006cde:	4630      	mov	r0, r6
 8006ce0:	1a6d      	subs	r5, r5, r1
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	f7ff ffa6 	bl	8006c34 <sbrk_aligned>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d03a      	beq.n	8006d62 <_malloc_r+0xea>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	442b      	add	r3, r5
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	bb62      	cbnz	r2, 8006d54 <_malloc_r+0xdc>
 8006cfa:	f8c8 7000 	str.w	r7, [r8]
 8006cfe:	e00f      	b.n	8006d20 <_malloc_r+0xa8>
 8006d00:	6822      	ldr	r2, [r4, #0]
 8006d02:	1b52      	subs	r2, r2, r5
 8006d04:	d420      	bmi.n	8006d48 <_malloc_r+0xd0>
 8006d06:	2a0b      	cmp	r2, #11
 8006d08:	d917      	bls.n	8006d3a <_malloc_r+0xc2>
 8006d0a:	1961      	adds	r1, r4, r5
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	6025      	str	r5, [r4, #0]
 8006d10:	bf18      	it	ne
 8006d12:	6059      	strne	r1, [r3, #4]
 8006d14:	6863      	ldr	r3, [r4, #4]
 8006d16:	bf08      	it	eq
 8006d18:	f8c8 1000 	streq.w	r1, [r8]
 8006d1c:	5162      	str	r2, [r4, r5]
 8006d1e:	604b      	str	r3, [r1, #4]
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 f82f 	bl	8006d84 <__malloc_unlock>
 8006d26:	f104 000b 	add.w	r0, r4, #11
 8006d2a:	1d23      	adds	r3, r4, #4
 8006d2c:	f020 0007 	bic.w	r0, r0, #7
 8006d30:	1ac2      	subs	r2, r0, r3
 8006d32:	bf1c      	itt	ne
 8006d34:	1a1b      	subne	r3, r3, r0
 8006d36:	50a3      	strne	r3, [r4, r2]
 8006d38:	e7af      	b.n	8006c9a <_malloc_r+0x22>
 8006d3a:	6862      	ldr	r2, [r4, #4]
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	bf0c      	ite	eq
 8006d40:	f8c8 2000 	streq.w	r2, [r8]
 8006d44:	605a      	strne	r2, [r3, #4]
 8006d46:	e7eb      	b.n	8006d20 <_malloc_r+0xa8>
 8006d48:	4623      	mov	r3, r4
 8006d4a:	6864      	ldr	r4, [r4, #4]
 8006d4c:	e7ae      	b.n	8006cac <_malloc_r+0x34>
 8006d4e:	463c      	mov	r4, r7
 8006d50:	687f      	ldr	r7, [r7, #4]
 8006d52:	e7b6      	b.n	8006cc2 <_malloc_r+0x4a>
 8006d54:	461a      	mov	r2, r3
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d1fb      	bne.n	8006d54 <_malloc_r+0xdc>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	6053      	str	r3, [r2, #4]
 8006d60:	e7de      	b.n	8006d20 <_malloc_r+0xa8>
 8006d62:	230c      	movs	r3, #12
 8006d64:	4630      	mov	r0, r6
 8006d66:	6033      	str	r3, [r6, #0]
 8006d68:	f000 f80c 	bl	8006d84 <__malloc_unlock>
 8006d6c:	e794      	b.n	8006c98 <_malloc_r+0x20>
 8006d6e:	6005      	str	r5, [r0, #0]
 8006d70:	e7d6      	b.n	8006d20 <_malloc_r+0xa8>
 8006d72:	bf00      	nop
 8006d74:	20000324 	.word	0x20000324

08006d78 <__malloc_lock>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__malloc_lock+0x8>)
 8006d7a:	f7ff bf0e 	b.w	8006b9a <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	2000031c 	.word	0x2000031c

08006d84 <__malloc_unlock>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__malloc_unlock+0x8>)
 8006d86:	f7ff bf09 	b.w	8006b9c <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	2000031c 	.word	0x2000031c

08006d90 <__sfputc_r>:
 8006d90:	6893      	ldr	r3, [r2, #8]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	6093      	str	r3, [r2, #8]
 8006d98:	b410      	push	{r4}
 8006d9a:	da08      	bge.n	8006dae <__sfputc_r+0x1e>
 8006d9c:	6994      	ldr	r4, [r2, #24]
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	db01      	blt.n	8006da6 <__sfputc_r+0x16>
 8006da2:	290a      	cmp	r1, #10
 8006da4:	d103      	bne.n	8006dae <__sfputc_r+0x1e>
 8006da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006daa:	f7ff bde8 	b.w	800697e <__swbuf_r>
 8006dae:	6813      	ldr	r3, [r2, #0]
 8006db0:	1c58      	adds	r0, r3, #1
 8006db2:	6010      	str	r0, [r2, #0]
 8006db4:	4608      	mov	r0, r1
 8006db6:	7019      	strb	r1, [r3, #0]
 8006db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <__sfputs_r>:
 8006dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	460f      	mov	r7, r1
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	18d5      	adds	r5, r2, r3
 8006dc8:	42ac      	cmp	r4, r5
 8006dca:	d101      	bne.n	8006dd0 <__sfputs_r+0x12>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e007      	b.n	8006de0 <__sfputs_r+0x22>
 8006dd0:	463a      	mov	r2, r7
 8006dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff ffda 	bl	8006d90 <__sfputc_r>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d1f3      	bne.n	8006dc8 <__sfputs_r+0xa>
 8006de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006de4 <_vfiprintf_r>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	460d      	mov	r5, r1
 8006dea:	b09d      	sub	sp, #116	@ 0x74
 8006dec:	4614      	mov	r4, r2
 8006dee:	4698      	mov	r8, r3
 8006df0:	4606      	mov	r6, r0
 8006df2:	b118      	cbz	r0, 8006dfc <_vfiprintf_r+0x18>
 8006df4:	6a03      	ldr	r3, [r0, #32]
 8006df6:	b90b      	cbnz	r3, 8006dfc <_vfiprintf_r+0x18>
 8006df8:	f7ff fd36 	bl	8006868 <__sinit>
 8006dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dfe:	07d9      	lsls	r1, r3, #31
 8006e00:	d405      	bmi.n	8006e0e <_vfiprintf_r+0x2a>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	059a      	lsls	r2, r3, #22
 8006e06:	d402      	bmi.n	8006e0e <_vfiprintf_r+0x2a>
 8006e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e0a:	f7ff fec6 	bl	8006b9a <__retarget_lock_acquire_recursive>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	071b      	lsls	r3, r3, #28
 8006e12:	d501      	bpl.n	8006e18 <_vfiprintf_r+0x34>
 8006e14:	692b      	ldr	r3, [r5, #16]
 8006e16:	b99b      	cbnz	r3, 8006e40 <_vfiprintf_r+0x5c>
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff fdee 	bl	80069fc <__swsetup_r>
 8006e20:	b170      	cbz	r0, 8006e40 <_vfiprintf_r+0x5c>
 8006e22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e24:	07dc      	lsls	r4, r3, #31
 8006e26:	d504      	bpl.n	8006e32 <_vfiprintf_r+0x4e>
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2c:	b01d      	add	sp, #116	@ 0x74
 8006e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	0598      	lsls	r0, r3, #22
 8006e36:	d4f7      	bmi.n	8006e28 <_vfiprintf_r+0x44>
 8006e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e3a:	f7ff feaf 	bl	8006b9c <__retarget_lock_release_recursive>
 8006e3e:	e7f3      	b.n	8006e28 <_vfiprintf_r+0x44>
 8006e40:	2300      	movs	r3, #0
 8006e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e46:	f04f 0901 	mov.w	r9, #1
 8006e4a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8007000 <_vfiprintf_r+0x21c>
 8006e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e50:	2320      	movs	r3, #32
 8006e52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e56:	2330      	movs	r3, #48	@ 0x30
 8006e58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	469a      	mov	sl, r3
 8006e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e64:	b10a      	cbz	r2, 8006e6a <_vfiprintf_r+0x86>
 8006e66:	2a25      	cmp	r2, #37	@ 0x25
 8006e68:	d1f9      	bne.n	8006e5e <_vfiprintf_r+0x7a>
 8006e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e6e:	d00b      	beq.n	8006e88 <_vfiprintf_r+0xa4>
 8006e70:	465b      	mov	r3, fp
 8006e72:	4622      	mov	r2, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff ffa1 	bl	8006dbe <__sfputs_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f000 80a7 	beq.w	8006fd0 <_vfiprintf_r+0x1ec>
 8006e82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e84:	445a      	add	r2, fp
 8006e86:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e88:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 809f 	beq.w	8006fd0 <_vfiprintf_r+0x1ec>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f04f 32ff 	mov.w	r2, #4294967295
 8006e98:	f10a 0a01 	add.w	sl, sl, #1
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eaa:	4654      	mov	r4, sl
 8006eac:	2205      	movs	r2, #5
 8006eae:	4854      	ldr	r0, [pc, #336]	@ (8007000 <_vfiprintf_r+0x21c>)
 8006eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb4:	f000 fb80 	bl	80075b8 <memchr>
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	b9d8      	cbnz	r0, 8006ef4 <_vfiprintf_r+0x110>
 8006ebc:	06d1      	lsls	r1, r2, #27
 8006ebe:	bf44      	itt	mi
 8006ec0:	2320      	movmi	r3, #32
 8006ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ec6:	0713      	lsls	r3, r2, #28
 8006ec8:	bf44      	itt	mi
 8006eca:	232b      	movmi	r3, #43	@ 0x2b
 8006ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ed6:	d015      	beq.n	8006f04 <_vfiprintf_r+0x120>
 8006ed8:	9a07      	ldr	r2, [sp, #28]
 8006eda:	4654      	mov	r4, sl
 8006edc:	2000      	movs	r0, #0
 8006ede:	f04f 0c0a 	mov.w	ip, #10
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ee8:	3b30      	subs	r3, #48	@ 0x30
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	d94b      	bls.n	8006f86 <_vfiprintf_r+0x1a2>
 8006eee:	b1b0      	cbz	r0, 8006f1e <_vfiprintf_r+0x13a>
 8006ef0:	9207      	str	r2, [sp, #28]
 8006ef2:	e014      	b.n	8006f1e <_vfiprintf_r+0x13a>
 8006ef4:	eba0 0308 	sub.w	r3, r0, r8
 8006ef8:	46a2      	mov	sl, r4
 8006efa:	fa09 f303 	lsl.w	r3, r9, r3
 8006efe:	4313      	orrs	r3, r2
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	e7d2      	b.n	8006eaa <_vfiprintf_r+0xc6>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	1d19      	adds	r1, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	9103      	str	r1, [sp, #12]
 8006f0e:	bfbb      	ittet	lt
 8006f10:	425b      	neglt	r3, r3
 8006f12:	f042 0202 	orrlt.w	r2, r2, #2
 8006f16:	9307      	strge	r3, [sp, #28]
 8006f18:	9307      	strlt	r3, [sp, #28]
 8006f1a:	bfb8      	it	lt
 8006f1c:	9204      	strlt	r2, [sp, #16]
 8006f1e:	7823      	ldrb	r3, [r4, #0]
 8006f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f22:	d10a      	bne.n	8006f3a <_vfiprintf_r+0x156>
 8006f24:	7863      	ldrb	r3, [r4, #1]
 8006f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f28:	d132      	bne.n	8006f90 <_vfiprintf_r+0x1ac>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	3402      	adds	r4, #2
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f36:	9203      	str	r2, [sp, #12]
 8006f38:	9305      	str	r3, [sp, #20]
 8006f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007010 <_vfiprintf_r+0x22c>
 8006f3e:	2203      	movs	r2, #3
 8006f40:	7821      	ldrb	r1, [r4, #0]
 8006f42:	4650      	mov	r0, sl
 8006f44:	f000 fb38 	bl	80075b8 <memchr>
 8006f48:	b138      	cbz	r0, 8006f5a <_vfiprintf_r+0x176>
 8006f4a:	eba0 000a 	sub.w	r0, r0, sl
 8006f4e:	2240      	movs	r2, #64	@ 0x40
 8006f50:	9b04      	ldr	r3, [sp, #16]
 8006f52:	3401      	adds	r4, #1
 8006f54:	4082      	lsls	r2, r0
 8006f56:	4313      	orrs	r3, r2
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f5e:	2206      	movs	r2, #6
 8006f60:	4828      	ldr	r0, [pc, #160]	@ (8007004 <_vfiprintf_r+0x220>)
 8006f62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f66:	f000 fb27 	bl	80075b8 <memchr>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d03f      	beq.n	8006fee <_vfiprintf_r+0x20a>
 8006f6e:	4b26      	ldr	r3, [pc, #152]	@ (8007008 <_vfiprintf_r+0x224>)
 8006f70:	bb1b      	cbnz	r3, 8006fba <_vfiprintf_r+0x1d6>
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	3307      	adds	r3, #7
 8006f76:	f023 0307 	bic.w	r3, r3, #7
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	9303      	str	r3, [sp, #12]
 8006f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f80:	443b      	add	r3, r7
 8006f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f84:	e76a      	b.n	8006e5c <_vfiprintf_r+0x78>
 8006f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	e7a8      	b.n	8006ee2 <_vfiprintf_r+0xfe>
 8006f90:	2300      	movs	r3, #0
 8006f92:	3401      	adds	r4, #1
 8006f94:	f04f 0c0a 	mov.w	ip, #10
 8006f98:	4619      	mov	r1, r3
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa2:	3a30      	subs	r2, #48	@ 0x30
 8006fa4:	2a09      	cmp	r2, #9
 8006fa6:	d903      	bls.n	8006fb0 <_vfiprintf_r+0x1cc>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0c6      	beq.n	8006f3a <_vfiprintf_r+0x156>
 8006fac:	9105      	str	r1, [sp, #20]
 8006fae:	e7c4      	b.n	8006f3a <_vfiprintf_r+0x156>
 8006fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e7f0      	b.n	8006f9c <_vfiprintf_r+0x1b8>
 8006fba:	ab03      	add	r3, sp, #12
 8006fbc:	462a      	mov	r2, r5
 8006fbe:	a904      	add	r1, sp, #16
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4b11      	ldr	r3, [pc, #68]	@ (800700c <_vfiprintf_r+0x228>)
 8006fc6:	f3af 8000 	nop.w
 8006fca:	4607      	mov	r7, r0
 8006fcc:	1c78      	adds	r0, r7, #1
 8006fce:	d1d6      	bne.n	8006f7e <_vfiprintf_r+0x19a>
 8006fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fd2:	07d9      	lsls	r1, r3, #31
 8006fd4:	d405      	bmi.n	8006fe2 <_vfiprintf_r+0x1fe>
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	059a      	lsls	r2, r3, #22
 8006fda:	d402      	bmi.n	8006fe2 <_vfiprintf_r+0x1fe>
 8006fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fde:	f7ff fddd 	bl	8006b9c <__retarget_lock_release_recursive>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	065b      	lsls	r3, r3, #25
 8006fe6:	f53f af1f 	bmi.w	8006e28 <_vfiprintf_r+0x44>
 8006fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fec:	e71e      	b.n	8006e2c <_vfiprintf_r+0x48>
 8006fee:	ab03      	add	r3, sp, #12
 8006ff0:	462a      	mov	r2, r5
 8006ff2:	a904      	add	r1, sp, #16
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4b04      	ldr	r3, [pc, #16]	@ (800700c <_vfiprintf_r+0x228>)
 8006ffa:	f000 f87d 	bl	80070f8 <_printf_i>
 8006ffe:	e7e4      	b.n	8006fca <_vfiprintf_r+0x1e6>
 8007000:	080077a4 	.word	0x080077a4
 8007004:	080077ae 	.word	0x080077ae
 8007008:	00000000 	.word	0x00000000
 800700c:	08006dbf 	.word	0x08006dbf
 8007010:	080077aa 	.word	0x080077aa

08007014 <_printf_common>:
 8007014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	4616      	mov	r6, r2
 800701a:	4698      	mov	r8, r3
 800701c:	688a      	ldr	r2, [r1, #8]
 800701e:	4607      	mov	r7, r0
 8007020:	690b      	ldr	r3, [r1, #16]
 8007022:	460c      	mov	r4, r1
 8007024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007028:	4293      	cmp	r3, r2
 800702a:	bfb8      	it	lt
 800702c:	4613      	movlt	r3, r2
 800702e:	6033      	str	r3, [r6, #0]
 8007030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007034:	b10a      	cbz	r2, 800703a <_printf_common+0x26>
 8007036:	3301      	adds	r3, #1
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	0699      	lsls	r1, r3, #26
 800703e:	bf42      	ittt	mi
 8007040:	6833      	ldrmi	r3, [r6, #0]
 8007042:	3302      	addmi	r3, #2
 8007044:	6033      	strmi	r3, [r6, #0]
 8007046:	6825      	ldr	r5, [r4, #0]
 8007048:	f015 0506 	ands.w	r5, r5, #6
 800704c:	d106      	bne.n	800705c <_printf_common+0x48>
 800704e:	f104 0a19 	add.w	sl, r4, #25
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	6832      	ldr	r2, [r6, #0]
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	42ab      	cmp	r3, r5
 800705a:	dc2b      	bgt.n	80070b4 <_printf_common+0xa0>
 800705c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	3b00      	subs	r3, #0
 8007064:	bf18      	it	ne
 8007066:	2301      	movne	r3, #1
 8007068:	0692      	lsls	r2, r2, #26
 800706a:	d430      	bmi.n	80070ce <_printf_common+0xba>
 800706c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	47c8      	blx	r9
 8007076:	3001      	adds	r0, #1
 8007078:	d023      	beq.n	80070c2 <_printf_common+0xae>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	341a      	adds	r4, #26
 800707e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007082:	f003 0306 	and.w	r3, r3, #6
 8007086:	2b04      	cmp	r3, #4
 8007088:	bf0a      	itet	eq
 800708a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800708e:	2500      	movne	r5, #0
 8007090:	6833      	ldreq	r3, [r6, #0]
 8007092:	f04f 0600 	mov.w	r6, #0
 8007096:	bf08      	it	eq
 8007098:	1aed      	subeq	r5, r5, r3
 800709a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800709e:	bf08      	it	eq
 80070a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a4:	4293      	cmp	r3, r2
 80070a6:	bfc4      	itt	gt
 80070a8:	1a9b      	subgt	r3, r3, r2
 80070aa:	18ed      	addgt	r5, r5, r3
 80070ac:	42b5      	cmp	r5, r6
 80070ae:	d11a      	bne.n	80070e6 <_printf_common+0xd2>
 80070b0:	2000      	movs	r0, #0
 80070b2:	e008      	b.n	80070c6 <_printf_common+0xb2>
 80070b4:	2301      	movs	r3, #1
 80070b6:	4652      	mov	r2, sl
 80070b8:	4641      	mov	r1, r8
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c8      	blx	r9
 80070be:	3001      	adds	r0, #1
 80070c0:	d103      	bne.n	80070ca <_printf_common+0xb6>
 80070c2:	f04f 30ff 	mov.w	r0, #4294967295
 80070c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ca:	3501      	adds	r5, #1
 80070cc:	e7c1      	b.n	8007052 <_printf_common+0x3e>
 80070ce:	18e1      	adds	r1, r4, r3
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	2030      	movs	r0, #48	@ 0x30
 80070d4:	3302      	adds	r3, #2
 80070d6:	4422      	add	r2, r4
 80070d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070e4:	e7c2      	b.n	800706c <_printf_common+0x58>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4622      	mov	r2, r4
 80070ea:	4641      	mov	r1, r8
 80070ec:	4638      	mov	r0, r7
 80070ee:	47c8      	blx	r9
 80070f0:	3001      	adds	r0, #1
 80070f2:	d0e6      	beq.n	80070c2 <_printf_common+0xae>
 80070f4:	3601      	adds	r6, #1
 80070f6:	e7d9      	b.n	80070ac <_printf_common+0x98>

080070f8 <_printf_i>:
 80070f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	7e0f      	ldrb	r7, [r1, #24]
 80070fe:	4691      	mov	r9, r2
 8007100:	4680      	mov	r8, r0
 8007102:	460c      	mov	r4, r1
 8007104:	2f78      	cmp	r7, #120	@ 0x78
 8007106:	469a      	mov	sl, r3
 8007108:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800710a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800710e:	d807      	bhi.n	8007120 <_printf_i+0x28>
 8007110:	2f62      	cmp	r7, #98	@ 0x62
 8007112:	d80a      	bhi.n	800712a <_printf_i+0x32>
 8007114:	2f00      	cmp	r7, #0
 8007116:	f000 80d2 	beq.w	80072be <_printf_i+0x1c6>
 800711a:	2f58      	cmp	r7, #88	@ 0x58
 800711c:	f000 80b9 	beq.w	8007292 <_printf_i+0x19a>
 8007120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007128:	e03a      	b.n	80071a0 <_printf_i+0xa8>
 800712a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800712e:	2b15      	cmp	r3, #21
 8007130:	d8f6      	bhi.n	8007120 <_printf_i+0x28>
 8007132:	a101      	add	r1, pc, #4	@ (adr r1, 8007138 <_printf_i+0x40>)
 8007134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007138:	08007191 	.word	0x08007191
 800713c:	080071a5 	.word	0x080071a5
 8007140:	08007121 	.word	0x08007121
 8007144:	08007121 	.word	0x08007121
 8007148:	08007121 	.word	0x08007121
 800714c:	08007121 	.word	0x08007121
 8007150:	080071a5 	.word	0x080071a5
 8007154:	08007121 	.word	0x08007121
 8007158:	08007121 	.word	0x08007121
 800715c:	08007121 	.word	0x08007121
 8007160:	08007121 	.word	0x08007121
 8007164:	080072a5 	.word	0x080072a5
 8007168:	080071cf 	.word	0x080071cf
 800716c:	0800725f 	.word	0x0800725f
 8007170:	08007121 	.word	0x08007121
 8007174:	08007121 	.word	0x08007121
 8007178:	080072c7 	.word	0x080072c7
 800717c:	08007121 	.word	0x08007121
 8007180:	080071cf 	.word	0x080071cf
 8007184:	08007121 	.word	0x08007121
 8007188:	08007121 	.word	0x08007121
 800718c:	08007267 	.word	0x08007267
 8007190:	6833      	ldr	r3, [r6, #0]
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6032      	str	r2, [r6, #0]
 8007198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800719c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071a0:	2301      	movs	r3, #1
 80071a2:	e09d      	b.n	80072e0 <_printf_i+0x1e8>
 80071a4:	6833      	ldr	r3, [r6, #0]
 80071a6:	6820      	ldr	r0, [r4, #0]
 80071a8:	1d19      	adds	r1, r3, #4
 80071aa:	6031      	str	r1, [r6, #0]
 80071ac:	0606      	lsls	r6, r0, #24
 80071ae:	d501      	bpl.n	80071b4 <_printf_i+0xbc>
 80071b0:	681d      	ldr	r5, [r3, #0]
 80071b2:	e003      	b.n	80071bc <_printf_i+0xc4>
 80071b4:	0645      	lsls	r5, r0, #25
 80071b6:	d5fb      	bpl.n	80071b0 <_printf_i+0xb8>
 80071b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071bc:	2d00      	cmp	r5, #0
 80071be:	da03      	bge.n	80071c8 <_printf_i+0xd0>
 80071c0:	232d      	movs	r3, #45	@ 0x2d
 80071c2:	426d      	negs	r5, r5
 80071c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c8:	4859      	ldr	r0, [pc, #356]	@ (8007330 <_printf_i+0x238>)
 80071ca:	230a      	movs	r3, #10
 80071cc:	e011      	b.n	80071f2 <_printf_i+0xfa>
 80071ce:	6821      	ldr	r1, [r4, #0]
 80071d0:	6833      	ldr	r3, [r6, #0]
 80071d2:	0608      	lsls	r0, r1, #24
 80071d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071d8:	d402      	bmi.n	80071e0 <_printf_i+0xe8>
 80071da:	0649      	lsls	r1, r1, #25
 80071dc:	bf48      	it	mi
 80071de:	b2ad      	uxthmi	r5, r5
 80071e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071e2:	6033      	str	r3, [r6, #0]
 80071e4:	4852      	ldr	r0, [pc, #328]	@ (8007330 <_printf_i+0x238>)
 80071e6:	bf14      	ite	ne
 80071e8:	230a      	movne	r3, #10
 80071ea:	2308      	moveq	r3, #8
 80071ec:	2100      	movs	r1, #0
 80071ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071f2:	6866      	ldr	r6, [r4, #4]
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	60a6      	str	r6, [r4, #8]
 80071f8:	bfa2      	ittt	ge
 80071fa:	6821      	ldrge	r1, [r4, #0]
 80071fc:	f021 0104 	bicge.w	r1, r1, #4
 8007200:	6021      	strge	r1, [r4, #0]
 8007202:	b90d      	cbnz	r5, 8007208 <_printf_i+0x110>
 8007204:	2e00      	cmp	r6, #0
 8007206:	d04b      	beq.n	80072a0 <_printf_i+0x1a8>
 8007208:	4616      	mov	r6, r2
 800720a:	fbb5 f1f3 	udiv	r1, r5, r3
 800720e:	fb03 5711 	mls	r7, r3, r1, r5
 8007212:	5dc7      	ldrb	r7, [r0, r7]
 8007214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007218:	462f      	mov	r7, r5
 800721a:	460d      	mov	r5, r1
 800721c:	42bb      	cmp	r3, r7
 800721e:	d9f4      	bls.n	800720a <_printf_i+0x112>
 8007220:	2b08      	cmp	r3, #8
 8007222:	d10b      	bne.n	800723c <_printf_i+0x144>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	07df      	lsls	r7, r3, #31
 8007228:	d508      	bpl.n	800723c <_printf_i+0x144>
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	6861      	ldr	r1, [r4, #4]
 800722e:	4299      	cmp	r1, r3
 8007230:	bfde      	ittt	le
 8007232:	2330      	movle	r3, #48	@ 0x30
 8007234:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007238:	f106 36ff 	addle.w	r6, r6, #4294967295
 800723c:	1b92      	subs	r2, r2, r6
 800723e:	6122      	str	r2, [r4, #16]
 8007240:	464b      	mov	r3, r9
 8007242:	aa03      	add	r2, sp, #12
 8007244:	4621      	mov	r1, r4
 8007246:	4640      	mov	r0, r8
 8007248:	f8cd a000 	str.w	sl, [sp]
 800724c:	f7ff fee2 	bl	8007014 <_printf_common>
 8007250:	3001      	adds	r0, #1
 8007252:	d14a      	bne.n	80072ea <_printf_i+0x1f2>
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	b004      	add	sp, #16
 800725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	f043 0320 	orr.w	r3, r3, #32
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	2778      	movs	r7, #120	@ 0x78
 8007268:	4832      	ldr	r0, [pc, #200]	@ (8007334 <_printf_i+0x23c>)
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007270:	061f      	lsls	r7, r3, #24
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	f851 5b04 	ldr.w	r5, [r1], #4
 8007278:	d402      	bmi.n	8007280 <_printf_i+0x188>
 800727a:	065f      	lsls	r7, r3, #25
 800727c:	bf48      	it	mi
 800727e:	b2ad      	uxthmi	r5, r5
 8007280:	6031      	str	r1, [r6, #0]
 8007282:	07d9      	lsls	r1, r3, #31
 8007284:	bf44      	itt	mi
 8007286:	f043 0320 	orrmi.w	r3, r3, #32
 800728a:	6023      	strmi	r3, [r4, #0]
 800728c:	b11d      	cbz	r5, 8007296 <_printf_i+0x19e>
 800728e:	2310      	movs	r3, #16
 8007290:	e7ac      	b.n	80071ec <_printf_i+0xf4>
 8007292:	4827      	ldr	r0, [pc, #156]	@ (8007330 <_printf_i+0x238>)
 8007294:	e7e9      	b.n	800726a <_printf_i+0x172>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	f023 0320 	bic.w	r3, r3, #32
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	e7f6      	b.n	800728e <_printf_i+0x196>
 80072a0:	4616      	mov	r6, r2
 80072a2:	e7bd      	b.n	8007220 <_printf_i+0x128>
 80072a4:	6833      	ldr	r3, [r6, #0]
 80072a6:	6825      	ldr	r5, [r4, #0]
 80072a8:	1d18      	adds	r0, r3, #4
 80072aa:	6961      	ldr	r1, [r4, #20]
 80072ac:	6030      	str	r0, [r6, #0]
 80072ae:	062e      	lsls	r6, r5, #24
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	d501      	bpl.n	80072b8 <_printf_i+0x1c0>
 80072b4:	6019      	str	r1, [r3, #0]
 80072b6:	e002      	b.n	80072be <_printf_i+0x1c6>
 80072b8:	0668      	lsls	r0, r5, #25
 80072ba:	d5fb      	bpl.n	80072b4 <_printf_i+0x1bc>
 80072bc:	8019      	strh	r1, [r3, #0]
 80072be:	2300      	movs	r3, #0
 80072c0:	4616      	mov	r6, r2
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	e7bc      	b.n	8007240 <_printf_i+0x148>
 80072c6:	6833      	ldr	r3, [r6, #0]
 80072c8:	2100      	movs	r1, #0
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	6032      	str	r2, [r6, #0]
 80072ce:	681e      	ldr	r6, [r3, #0]
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	4630      	mov	r0, r6
 80072d4:	f000 f970 	bl	80075b8 <memchr>
 80072d8:	b108      	cbz	r0, 80072de <_printf_i+0x1e6>
 80072da:	1b80      	subs	r0, r0, r6
 80072dc:	6060      	str	r0, [r4, #4]
 80072de:	6863      	ldr	r3, [r4, #4]
 80072e0:	6123      	str	r3, [r4, #16]
 80072e2:	2300      	movs	r3, #0
 80072e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072e8:	e7aa      	b.n	8007240 <_printf_i+0x148>
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	4632      	mov	r2, r6
 80072ee:	4649      	mov	r1, r9
 80072f0:	4640      	mov	r0, r8
 80072f2:	47d0      	blx	sl
 80072f4:	3001      	adds	r0, #1
 80072f6:	d0ad      	beq.n	8007254 <_printf_i+0x15c>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	079b      	lsls	r3, r3, #30
 80072fc:	d413      	bmi.n	8007326 <_printf_i+0x22e>
 80072fe:	68e0      	ldr	r0, [r4, #12]
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	4298      	cmp	r0, r3
 8007304:	bfb8      	it	lt
 8007306:	4618      	movlt	r0, r3
 8007308:	e7a6      	b.n	8007258 <_printf_i+0x160>
 800730a:	2301      	movs	r3, #1
 800730c:	4632      	mov	r2, r6
 800730e:	4649      	mov	r1, r9
 8007310:	4640      	mov	r0, r8
 8007312:	47d0      	blx	sl
 8007314:	3001      	adds	r0, #1
 8007316:	d09d      	beq.n	8007254 <_printf_i+0x15c>
 8007318:	3501      	adds	r5, #1
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	9903      	ldr	r1, [sp, #12]
 800731e:	1a5b      	subs	r3, r3, r1
 8007320:	42ab      	cmp	r3, r5
 8007322:	dcf2      	bgt.n	800730a <_printf_i+0x212>
 8007324:	e7eb      	b.n	80072fe <_printf_i+0x206>
 8007326:	2500      	movs	r5, #0
 8007328:	f104 0619 	add.w	r6, r4, #25
 800732c:	e7f5      	b.n	800731a <_printf_i+0x222>
 800732e:	bf00      	nop
 8007330:	080077b5 	.word	0x080077b5
 8007334:	080077c6 	.word	0x080077c6

08007338 <__sflush_r>:
 8007338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	0716      	lsls	r6, r2, #28
 8007342:	4605      	mov	r5, r0
 8007344:	460c      	mov	r4, r1
 8007346:	d454      	bmi.n	80073f2 <__sflush_r+0xba>
 8007348:	684b      	ldr	r3, [r1, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dc02      	bgt.n	8007354 <__sflush_r+0x1c>
 800734e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	dd48      	ble.n	80073e6 <__sflush_r+0xae>
 8007354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007356:	2e00      	cmp	r6, #0
 8007358:	d045      	beq.n	80073e6 <__sflush_r+0xae>
 800735a:	2300      	movs	r3, #0
 800735c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007360:	682f      	ldr	r7, [r5, #0]
 8007362:	6a21      	ldr	r1, [r4, #32]
 8007364:	602b      	str	r3, [r5, #0]
 8007366:	d030      	beq.n	80073ca <__sflush_r+0x92>
 8007368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	0759      	lsls	r1, r3, #29
 800736e:	d505      	bpl.n	800737c <__sflush_r+0x44>
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007376:	b10b      	cbz	r3, 800737c <__sflush_r+0x44>
 8007378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007380:	6a21      	ldr	r1, [r4, #32]
 8007382:	4628      	mov	r0, r5
 8007384:	47b0      	blx	r6
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	d106      	bne.n	800739a <__sflush_r+0x62>
 800738c:	6829      	ldr	r1, [r5, #0]
 800738e:	291d      	cmp	r1, #29
 8007390:	d82b      	bhi.n	80073ea <__sflush_r+0xb2>
 8007392:	4a2a      	ldr	r2, [pc, #168]	@ (800743c <__sflush_r+0x104>)
 8007394:	410a      	asrs	r2, r1
 8007396:	07d6      	lsls	r6, r2, #31
 8007398:	d427      	bmi.n	80073ea <__sflush_r+0xb2>
 800739a:	2200      	movs	r2, #0
 800739c:	04d9      	lsls	r1, r3, #19
 800739e:	6062      	str	r2, [r4, #4]
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	d504      	bpl.n	80073b0 <__sflush_r+0x78>
 80073a6:	1c42      	adds	r2, r0, #1
 80073a8:	d101      	bne.n	80073ae <__sflush_r+0x76>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	b903      	cbnz	r3, 80073b0 <__sflush_r+0x78>
 80073ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80073b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073b2:	602f      	str	r7, [r5, #0]
 80073b4:	b1b9      	cbz	r1, 80073e6 <__sflush_r+0xae>
 80073b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073ba:	4299      	cmp	r1, r3
 80073bc:	d002      	beq.n	80073c4 <__sflush_r+0x8c>
 80073be:	4628      	mov	r0, r5
 80073c0:	f7ff fbee 	bl	8006ba0 <_free_r>
 80073c4:	2300      	movs	r3, #0
 80073c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80073c8:	e00d      	b.n	80073e6 <__sflush_r+0xae>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b0      	blx	r6
 80073d0:	4602      	mov	r2, r0
 80073d2:	1c50      	adds	r0, r2, #1
 80073d4:	d1c9      	bne.n	800736a <__sflush_r+0x32>
 80073d6:	682b      	ldr	r3, [r5, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0c6      	beq.n	800736a <__sflush_r+0x32>
 80073dc:	2b1d      	cmp	r3, #29
 80073de:	d001      	beq.n	80073e4 <__sflush_r+0xac>
 80073e0:	2b16      	cmp	r3, #22
 80073e2:	d11d      	bne.n	8007420 <__sflush_r+0xe8>
 80073e4:	602f      	str	r7, [r5, #0]
 80073e6:	2000      	movs	r0, #0
 80073e8:	e021      	b.n	800742e <__sflush_r+0xf6>
 80073ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ee:	b21b      	sxth	r3, r3
 80073f0:	e01a      	b.n	8007428 <__sflush_r+0xf0>
 80073f2:	690f      	ldr	r7, [r1, #16]
 80073f4:	2f00      	cmp	r7, #0
 80073f6:	d0f6      	beq.n	80073e6 <__sflush_r+0xae>
 80073f8:	0793      	lsls	r3, r2, #30
 80073fa:	680e      	ldr	r6, [r1, #0]
 80073fc:	600f      	str	r7, [r1, #0]
 80073fe:	bf0c      	ite	eq
 8007400:	694b      	ldreq	r3, [r1, #20]
 8007402:	2300      	movne	r3, #0
 8007404:	eba6 0807 	sub.w	r8, r6, r7
 8007408:	608b      	str	r3, [r1, #8]
 800740a:	f1b8 0f00 	cmp.w	r8, #0
 800740e:	ddea      	ble.n	80073e6 <__sflush_r+0xae>
 8007410:	4643      	mov	r3, r8
 8007412:	463a      	mov	r2, r7
 8007414:	6a21      	ldr	r1, [r4, #32]
 8007416:	4628      	mov	r0, r5
 8007418:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800741a:	47b0      	blx	r6
 800741c:	2800      	cmp	r0, #0
 800741e:	dc08      	bgt.n	8007432 <__sflush_r+0xfa>
 8007420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007432:	4407      	add	r7, r0
 8007434:	eba8 0800 	sub.w	r8, r8, r0
 8007438:	e7e7      	b.n	800740a <__sflush_r+0xd2>
 800743a:	bf00      	nop
 800743c:	dfbffffe 	.word	0xdfbffffe

08007440 <_fflush_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	690b      	ldr	r3, [r1, #16]
 8007444:	4605      	mov	r5, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b913      	cbnz	r3, 8007450 <_fflush_r+0x10>
 800744a:	2500      	movs	r5, #0
 800744c:	4628      	mov	r0, r5
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	b118      	cbz	r0, 800745a <_fflush_r+0x1a>
 8007452:	6a03      	ldr	r3, [r0, #32]
 8007454:	b90b      	cbnz	r3, 800745a <_fflush_r+0x1a>
 8007456:	f7ff fa07 	bl	8006868 <__sinit>
 800745a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f3      	beq.n	800744a <_fflush_r+0xa>
 8007462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007464:	07d0      	lsls	r0, r2, #31
 8007466:	d404      	bmi.n	8007472 <_fflush_r+0x32>
 8007468:	0599      	lsls	r1, r3, #22
 800746a:	d402      	bmi.n	8007472 <_fflush_r+0x32>
 800746c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800746e:	f7ff fb94 	bl	8006b9a <__retarget_lock_acquire_recursive>
 8007472:	4628      	mov	r0, r5
 8007474:	4621      	mov	r1, r4
 8007476:	f7ff ff5f 	bl	8007338 <__sflush_r>
 800747a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800747c:	4605      	mov	r5, r0
 800747e:	07da      	lsls	r2, r3, #31
 8007480:	d4e4      	bmi.n	800744c <_fflush_r+0xc>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	059b      	lsls	r3, r3, #22
 8007486:	d4e1      	bmi.n	800744c <_fflush_r+0xc>
 8007488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800748a:	f7ff fb87 	bl	8006b9c <__retarget_lock_release_recursive>
 800748e:	e7dd      	b.n	800744c <_fflush_r+0xc>

08007490 <__swhatbuf_r>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	460c      	mov	r4, r1
 8007494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007498:	b096      	sub	sp, #88	@ 0x58
 800749a:	4615      	mov	r5, r2
 800749c:	2900      	cmp	r1, #0
 800749e:	461e      	mov	r6, r3
 80074a0:	da0c      	bge.n	80074bc <__swhatbuf_r+0x2c>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	2100      	movs	r1, #0
 80074a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074aa:	bf14      	ite	ne
 80074ac:	2340      	movne	r3, #64	@ 0x40
 80074ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074b2:	2000      	movs	r0, #0
 80074b4:	6031      	str	r1, [r6, #0]
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	b016      	add	sp, #88	@ 0x58
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	466a      	mov	r2, sp
 80074be:	f000 f849 	bl	8007554 <_fstat_r>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	dbed      	blt.n	80074a2 <__swhatbuf_r+0x12>
 80074c6:	9901      	ldr	r1, [sp, #4]
 80074c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074d0:	4259      	negs	r1, r3
 80074d2:	4159      	adcs	r1, r3
 80074d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074d8:	e7eb      	b.n	80074b2 <__swhatbuf_r+0x22>

080074da <__smakebuf_r>:
 80074da:	898b      	ldrh	r3, [r1, #12]
 80074dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074de:	079d      	lsls	r5, r3, #30
 80074e0:	4606      	mov	r6, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	d507      	bpl.n	80074f6 <__smakebuf_r+0x1c>
 80074e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	2301      	movs	r3, #1
 80074f0:	6163      	str	r3, [r4, #20]
 80074f2:	b003      	add	sp, #12
 80074f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f6:	ab01      	add	r3, sp, #4
 80074f8:	466a      	mov	r2, sp
 80074fa:	f7ff ffc9 	bl	8007490 <__swhatbuf_r>
 80074fe:	9f00      	ldr	r7, [sp, #0]
 8007500:	4605      	mov	r5, r0
 8007502:	4630      	mov	r0, r6
 8007504:	4639      	mov	r1, r7
 8007506:	f7ff fbb7 	bl	8006c78 <_malloc_r>
 800750a:	b948      	cbnz	r0, 8007520 <__smakebuf_r+0x46>
 800750c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007510:	059a      	lsls	r2, r3, #22
 8007512:	d4ee      	bmi.n	80074f2 <__smakebuf_r+0x18>
 8007514:	f023 0303 	bic.w	r3, r3, #3
 8007518:	f043 0302 	orr.w	r3, r3, #2
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	e7e2      	b.n	80074e6 <__smakebuf_r+0xc>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	6020      	str	r0, [r4, #0]
 8007524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007530:	b15b      	cbz	r3, 800754a <__smakebuf_r+0x70>
 8007532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007536:	4630      	mov	r0, r6
 8007538:	f000 f81e 	bl	8007578 <_isatty_r>
 800753c:	b128      	cbz	r0, 800754a <__smakebuf_r+0x70>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f023 0303 	bic.w	r3, r3, #3
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	431d      	orrs	r5, r3
 800754e:	81a5      	strh	r5, [r4, #12]
 8007550:	e7cf      	b.n	80074f2 <__smakebuf_r+0x18>
	...

08007554 <_fstat_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	2300      	movs	r3, #0
 8007558:	4d06      	ldr	r5, [pc, #24]	@ (8007574 <_fstat_r+0x20>)
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	602b      	str	r3, [r5, #0]
 8007562:	f7f9 fbe0 	bl	8000d26 <_fstat>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	d102      	bne.n	8007570 <_fstat_r+0x1c>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	b103      	cbz	r3, 8007570 <_fstat_r+0x1c>
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	bd38      	pop	{r3, r4, r5, pc}
 8007572:	bf00      	nop
 8007574:	20000318 	.word	0x20000318

08007578 <_isatty_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	2300      	movs	r3, #0
 800757c:	4d05      	ldr	r5, [pc, #20]	@ (8007594 <_isatty_r+0x1c>)
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7f9 fbdf 	bl	8000d46 <_isatty>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_isatty_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_isatty_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20000318 	.word	0x20000318

08007598 <_sbrk_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	2300      	movs	r3, #0
 800759c:	4d05      	ldr	r5, [pc, #20]	@ (80075b4 <_sbrk_r+0x1c>)
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	f7f9 fbe8 	bl	8000d78 <_sbrk>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_sbrk_r+0x1a>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_sbrk_r+0x1a>
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20000318 	.word	0x20000318

080075b8 <memchr>:
 80075b8:	b2c9      	uxtb	r1, r1
 80075ba:	4603      	mov	r3, r0
 80075bc:	4402      	add	r2, r0
 80075be:	b510      	push	{r4, lr}
 80075c0:	4293      	cmp	r3, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	d101      	bne.n	80075ca <memchr+0x12>
 80075c6:	2000      	movs	r0, #0
 80075c8:	e003      	b.n	80075d2 <memchr+0x1a>
 80075ca:	7804      	ldrb	r4, [r0, #0]
 80075cc:	3301      	adds	r3, #1
 80075ce:	428c      	cmp	r4, r1
 80075d0:	d1f6      	bne.n	80075c0 <memchr+0x8>
 80075d2:	bd10      	pop	{r4, pc}

080075d4 <_init>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	bf00      	nop
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr

080075e0 <_fini>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr
