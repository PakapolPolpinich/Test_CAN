
Filter_set.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000733c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007650  08007650  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007650  08007650  00008650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007658  08007658  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800765c  0800765c  0000865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007660  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  080076c8  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  080076c8  0000934c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001264d  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024dd  00000000  00000000  0001b6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d7  00000000  00000000  0001e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021072  00000000  00000000  0001f28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a7a  00000000  00000000  00040301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c883f  00000000  00000000  00051d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a5ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  0011a600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0011e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000068 	.word	0x20000068
 8000274:	00000000 	.word	0x00000000
 8000278:	0800757c 	.word	0x0800757c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000006c 	.word	0x2000006c
 8000294:	0800757c 	.word	0x0800757c

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SystemClock_Config>:

#include "RCC_clock.h"


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	@ 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2250      	movs	r2, #80	@ 0x50
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 f9b1 	bl	8006926 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <SystemClock_Config+0xdc>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005de:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xdc>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xdc>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xdc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d1f9      	bne.n	80005f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000626:	230c      	movs	r3, #12
 8000628:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062a:	2300      	movs	r3, #0
 800062c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f001 ff1a 	bl	8002470 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    //Error_Handler();
	while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <SystemClock_Config+0x92>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fb3b 	bl	8002ce0 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    //Error_Handler();
	while(1);
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <SystemClock_Config+0xc0>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <SystemClock_Config+0xe0>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	44020800 	.word	0x44020800
 8000690:	40022000 	.word	0x40022000

08000694 <MX_GPIO_Init>:
 *      Author: Admin
 */
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a2a      	ldr	r2, [pc, #168]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b28      	ldr	r3, [pc, #160]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a23      	ldr	r2, [pc, #140]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4815      	ldr	r0, [pc, #84]	@ (8000760 <MX_GPIO_Init+0xcc>)
 800070a:	f001 fe4d 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MX_GPIO_Init+0xd0>)
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_GPIO_Init+0xd4>)
 8000724:	f001 fcee 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	4808      	ldr	r0, [pc, #32]	@ (8000760 <MX_GPIO_Init+0xcc>)
 8000740:	f001 fce0 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2018      	movs	r0, #24
 800074a:	f000 fd7d 	bl	8001248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800074e:	2018      	movs	r0, #24
 8000750:	f000 fd94 	bl	800127c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	44020c00 	.word	0x44020c00
 8000760:	42020000 	.word	0x42020000
 8000764:	10210000 	.word	0x10210000
 8000768:	42020800 	.word	0x42020800

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fbf4 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f7ff ff1c 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f7ff ff8c 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800077c:	f000 f804 	bl	8000788 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000780:	f000 fb76 	bl	8000e70 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <main+0x18>

08000788 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800078e:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 8000790:	4a40      	ldr	r2, [pc, #256]	@ (8000894 <MX_FDCAN1_Init+0x10c>)
 8000792:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000794:	4b3e      	ldr	r3, [pc, #248]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800079a:	4b3d      	ldr	r3, [pc, #244]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007a0:	4b3b      	ldr	r3, [pc, #236]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007ac:	4b38      	ldr	r3, [pc, #224]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007b2:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 80007b8:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007ba:	2219      	movs	r2, #25
 80007bc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007be:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80007c4:	4b32      	ldr	r3, [pc, #200]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007c6:	220d      	movs	r2, #13
 80007c8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007ca:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007d8:	2201      	movs	r2, #1
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007de:	2201      	movs	r2, #1
 80007e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 4; /*Fix this how many filter you use */
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007f4:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007fa:	4825      	ldr	r0, [pc, #148]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 80007fc:	f000 fea2 	bl	8001544 <HAL_FDCAN_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000806:	f000 f8e3 	bl	80009d0 <Error_Handler>
  }

  /*Fix this to set , message_id , mask*/
  Set_Filter(0,0x7E0,0x7FE);
 800080a:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800080e:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f85e 	bl	80008d4 <Set_Filter>
  Set_Filter(1,0x7E2,0x7FF);
 8000818:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800081c:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 8000820:	2001      	movs	r0, #1
 8000822:	f000 f857 	bl	80008d4 <Set_Filter>
  Set_Filter(2,0x7E4,0x7FC);
 8000826:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 800082a:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 800082e:	2002      	movs	r0, #2
 8000830:	f000 f850 	bl	80008d4 <Set_Filter>
  Set_Filter(3,0x7E8,0x7F8);
 8000834:	f44f 62ff 	mov.w	r2, #2040	@ 0x7f8
 8000838:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f849 	bl	80008d4 <Set_Filter>

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,FDCAN_REJECT,FDCAN_REJECT,FDCAN_REJECT_REMOTE,FDCAN_REJECT_REMOTE);
 8000842:	2301      	movs	r3, #1
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	2202      	movs	r2, #2
 800084a:	2102      	movs	r1, #2
 800084c:	4810      	ldr	r0, [pc, #64]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 800084e:	f001 f82d 	bl	80018ac <HAL_FDCAN_ConfigGlobalFilter>

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000852:	4911      	ldr	r1, [pc, #68]	@ (8000898 <MX_FDCAN1_Init+0x110>)
 8000854:	480e      	ldr	r0, [pc, #56]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 8000856:	f000 ffcf 	bl	80017f8 <HAL_FDCAN_ConfigFilter>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_FDCAN1_Init+0xdc>
  	{
	  /* Filter configuration Error */
	  Error_Handler();
 8000860:	f000 f8b6 	bl	80009d0 <Error_Handler>
  	}

  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000864:	480a      	ldr	r0, [pc, #40]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 8000866:	f001 f852 	bl	800190e <HAL_FDCAN_Start>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_FDCAN1_Init+0xec>
   	 /* Notification Error */
   	Error_Handler();
 8000870:	f000 f8ae 	bl	80009d0 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000874:	2200      	movs	r2, #0
 8000876:	2101      	movs	r1, #1
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_FDCAN1_Init+0x108>)
 800087a:	f001 f979 	bl	8001b70 <HAL_FDCAN_ActivateNotification>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_FDCAN1_Init+0x100>
  {
	  /* Notification Error */
 	Error_Handler();
 8000884:	f000 f8a4 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000fc 	.word	0x200000fc
 8000894:	4000a400 	.word	0x4000a400
 8000898:	200000e4 	.word	0x200000e4

0800089c <HAL_GPIO_EXTI_Falling_Callback>:
//	  /* Filter configuration Error */
//	  Error_Handler();
//	}
//}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_BLUE_USER_BUTTON_Pin){
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ac:	d109      	bne.n	80008c2 <HAL_GPIO_EXTI_Falling_Callback+0x26>
			if (counter == 1){
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
//					  	}
			}else{
				// SetFilter(0x7E0,0x7FF);

			}
			counter ^= 1;
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f083 0301 	eor.w	r3, r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 80008c0:	701a      	strb	r2, [r3, #0]
	}
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200001f4 	.word	0x200001f4

080008d4 <Set_Filter>:

void Set_Filter(uint8_t index,uint16_t Msg,uint16_t Msk){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	460b      	mov	r3, r1
 80008e0:	80bb      	strh	r3, [r7, #4]
 80008e2:	4613      	mov	r3, r2
 80008e4:	807b      	strh	r3, [r7, #2]

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <Set_Filter+0x48>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = index;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a0b      	ldr	r2, [pc, #44]	@ (800091c <Set_Filter+0x48>)
 80008f0:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <Set_Filter+0x48>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80008f8:	4b08      	ldr	r3, [pc, #32]	@ (800091c <Set_Filter+0x48>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 = Msg;
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <Set_Filter+0x48>)
 8000902:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 = Msk;
 8000904:	887b      	ldrh	r3, [r7, #2]
 8000906:	4a05      	ldr	r2, [pc, #20]	@ (800091c <Set_Filter+0x48>)
 8000908:	6153      	str	r3, [r2, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800090a:	4904      	ldr	r1, [pc, #16]	@ (800091c <Set_Filter+0x48>)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <Set_Filter+0x4c>)
 800090e:	f000 ff73 	bl	80017f8 <HAL_FDCAN_ConfigFilter>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000e4 	.word	0x200000e4
 8000920:	200000fc 	.word	0x200000fc

08000924 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d029      	beq.n	800098c <HAL_FDCAN_RxFifo0Callback+0x68>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800093c:	2140      	movs	r1, #64	@ 0x40
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f001 f80e 	bl	8001960 <HAL_FDCAN_GetRxMessage>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 800094a:	f000 f841 	bl	80009d0 <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800094e:	2200      	movs	r2, #0
 8000950:	2101      	movs	r1, #1
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f001 f90c 	bl	8001b70 <HAL_FDCAN_ActivateNotification>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 800095e:	f000 f837 	bl	80009d0 <Error_Handler>
		}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000962:	2120      	movs	r1, #32
 8000964:	480d      	ldr	r0, [pc, #52]	@ (800099c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000966:	f001 fd37 	bl	80023d8 <HAL_GPIO_TogglePin>

		//Print the received ID
		if (CAN_Payload.RxHeader.IdType == FDCAN_STANDARD_ID) {
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800096c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800096e:	2b00      	cmp	r3, #0
 8000970:	d106      	bne.n	8000980 <HAL_FDCAN_RxFifo0Callback+0x5c>
			printf("Rec eived STD ID: 0x%03X\r\n", CAN_Payload.RxHeader.Identifier);
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8000974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <HAL_FDCAN_RxFifo0Callback+0x80>)
 800097a:	f005 ff7f 	bl	800687c <iprintf>
		} else {
			printf("Received EXT ID: 0x%08lX\r\n", CAN_Payload.RxHeader.Identifier);
		}
	}
}
 800097e:	e005      	b.n	800098c <HAL_FDCAN_RxFifo0Callback+0x68>
			printf("Received EXT ID: 0x%08lX\r\n", CAN_Payload.RxHeader.Identifier);
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8000982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <HAL_FDCAN_RxFifo0Callback+0x84>)
 8000988:	f005 ff78 	bl	800687c <iprintf>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000dc 	.word	0x200000dc
 8000998:	200000a8 	.word	0x200000a8
 800099c:	42020000 	.word	0x42020000
 80009a0:	20000084 	.word	0x20000084
 80009a4:	08007594 	.word	0x08007594
 80009a8:	080075b0 	.word	0x080075b0

080009ac <__io_putchar>:
int __io_putchar(int ch)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1,1000);
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	2201      	movs	r2, #1
 80009bc:	4803      	ldr	r0, [pc, #12]	@ (80009cc <__io_putchar+0x20>)
 80009be:	f004 fdf3 	bl	80055a8 <HAL_UART_Transmit>
    return ch;
 80009c2:	687b      	ldr	r3, [r7, #4]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000160 	.word	0x20000160

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ac      	sub	sp, #176	@ 0xb0
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2288      	movs	r2, #136	@ 0x88
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f005 ff8a 	bl	8006926 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac0 <HAL_FDCAN_MspInit+0xd4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d14d      	bne.n	8000ab8 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0304 	mov.w	r3, #4
 8000a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fc96 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000a3e:	f7ff ffc7 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a42:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <HAL_FDCAN_MspInit+0xd8>)
 8000a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a48:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <HAL_FDCAN_MspInit+0xd8>)
 8000a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a4e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_FDCAN_MspInit+0xd8>)
 8000a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_FDCAN_MspInit+0xd8>)
 8000a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_FDCAN_MspInit+0xd8>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <HAL_FDCAN_MspInit+0xd8>)
 8000a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a7e:	23c0      	movs	r3, #192	@ 0xc0
 8000a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a96:	2309      	movs	r3, #9
 8000a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <HAL_FDCAN_MspInit+0xdc>)
 8000aa4:	f001 fb2e 	bl	8002104 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2027      	movs	r0, #39	@ 0x27
 8000aae:	f000 fbcb 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ab2:	2027      	movs	r0, #39	@ 0x27
 8000ab4:	f000 fbe2 	bl	800127c <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000ab8:	bf00      	nop
 8000aba:	37b0      	adds	r7, #176	@ 0xb0
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	4000a400 	.word	0x4000a400
 8000ac4:	44020c00 	.word	0x44020c00
 8000ac8:	42020800 	.word	0x42020800

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0ac      	sub	sp, #176	@ 0xb0
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2288      	movs	r2, #136	@ 0x88
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f005 ff1a 	bl	8006926 <memset>
  if(huart->Instance==USART3)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba0 <HAL_UART_MspInit+0xd4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d14c      	bne.n	8000b96 <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000afc:	f04f 0204 	mov.w	r2, #4
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 fc27 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b1c:	f7ff ff58 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <HAL_UART_MspInit+0xd8>)
 8000b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <HAL_UART_MspInit+0xd8>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b2c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <HAL_UART_MspInit+0xd8>)
 8000b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_UART_MspInit+0xd8>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b44:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <HAL_UART_MspInit+0xd8>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <HAL_UART_MspInit+0xd8>)
 8000b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000b5c:	2318      	movs	r3, #24
 8000b5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000b74:	230d      	movs	r3, #13
 8000b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4809      	ldr	r0, [pc, #36]	@ (8000ba8 <HAL_UART_MspInit+0xdc>)
 8000b82:	f001 fabf 	bl	8002104 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	203c      	movs	r0, #60	@ 0x3c
 8000b8c:	f000 fb5c 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b90:	203c      	movs	r0, #60	@ 0x3c
 8000b92:	f000 fb73 	bl	800127c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b96:	bf00      	nop
 8000b98:	37b0      	adds	r7, #176	@ 0xb0
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004800 	.word	0x40004800
 8000ba4:	44020c00 	.word	0x44020c00
 8000ba8:	42020000 	.word	0x42020000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c02:	f000 fa49 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000c0e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c12:	f001 fbfb 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <FDCAN1_IT0_IRQHandler+0x10>)
 8000c22:	f001 f88b 	bl	8001d3c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000fc 	.word	0x200000fc

08000c30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <USART3_IRQHandler+0x10>)
 8000c36:	f004 fd55 	bl	80056e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000160 	.word	0x20000160

08000c44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e00a      	b.n	8000c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c56:	f3af 8000 	nop.w
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf0      	blt.n	8000c56 <_read+0x12>
  }

  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e009      	b.n	8000ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fe87 	bl	80009ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf1      	blt.n	8000c90 <_write+0x12>
  }
  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cde:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_isatty>:

int _isatty(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f005 fe38 	bl	80069c4 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20008000 	.word	0x20008000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	200001f8 	.word	0x200001f8
 8000d88:	20000350 	.word	0x20000350

08000d8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d92:	4b30      	ldr	r3, [pc, #192]	@ (8000e54 <SystemInit+0xc8>)
 8000d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d98:	4a2e      	ldr	r2, [pc, #184]	@ (8000e54 <SystemInit+0xc8>)
 8000d9a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000da2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <SystemInit+0xcc>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000da8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <SystemInit+0xcc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <SystemInit+0xcc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <SystemInit+0xcc>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4927      	ldr	r1, [pc, #156]	@ (8000e58 <SystemInit+0xcc>)
 8000dba:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <SystemInit+0xd0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <SystemInit+0xcc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <SystemInit+0xcc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <SystemInit+0xcc>)
 8000dce:	4a24      	ldr	r2, [pc, #144]	@ (8000e60 <SystemInit+0xd4>)
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <SystemInit+0xcc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <SystemInit+0xcc>)
 8000dda:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <SystemInit+0xd4>)
 8000ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <SystemInit+0xcc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <SystemInit+0xcc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <SystemInit+0xcc>)
 8000dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <SystemInit+0xcc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <SystemInit+0xc8>)
 8000df8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dfc:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <SystemInit+0xd8>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000e06:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000e0e:	d003      	beq.n	8000e18 <SystemInit+0x8c>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000e16:	d117      	bne.n	8000e48 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <SystemInit+0xd8>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <SystemInit+0xd8>)
 8000e26:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <SystemInit+0xdc>)
 8000e28:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <SystemInit+0xd8>)
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <SystemInit+0xe0>)
 8000e2e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <SystemInit+0xd8>)
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <SystemInit+0xd8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <SystemInit+0xd8>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <SystemInit+0xd8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	61d3      	str	r3, [r2, #28]
  }
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00
 8000e58:	44020c00 	.word	0x44020c00
 8000e5c:	fae2eae3 	.word	0xfae2eae3
 8000e60:	01010280 	.word	0x01010280
 8000e64:	40022000 	.word	0x40022000
 8000e68:	08192a3b 	.word	0x08192a3b
 8000e6c:	4c5d6e7f 	.word	0x4c5d6e7f

08000e70 <MX_USART3_UART_Init>:

#include"uart.h"
extern UART_HandleTypeDef huart3;

void MX_USART3_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000e76:	4a23      	ldr	r2, [pc, #140]	@ (8000f04 <MX_USART3_UART_Init+0x94>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eb8:	4811      	ldr	r0, [pc, #68]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000eba:	f004 fb25 	bl	8005508 <HAL_UART_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART3_UART_Init+0x58>
  {
	  //Error_Handler();
	  	while(1);
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MX_USART3_UART_Init+0x54>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000ecc:	f005 fb49 	bl	8006562 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART3_UART_Init+0x6a>
  {
	  //Error_Handler();
	  	while(1);
 8000ed6:	bf00      	nop
 8000ed8:	e7fd      	b.n	8000ed6 <MX_USART3_UART_Init+0x66>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4808      	ldr	r0, [pc, #32]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000ede:	f005 fb7e 	bl	80065de <HAL_UARTEx_SetRxFifoThreshold>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART3_UART_Init+0x7c>
  {
	  //Error_Handler();
	  	while(1);
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MX_USART3_UART_Init+0x78>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_USART3_UART_Init+0x90>)
 8000eee:	f005 faff 	bl	80064f0 <HAL_UARTEx_DisableFifoMode>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART3_UART_Init+0x8c>
  {
	  //Error_Handler();
	  	while(1);
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <MX_USART3_UART_Init+0x88>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000160 	.word	0x20000160
 8000f04:	40004800 	.word	0x40004800

08000f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f0e:	e003      	b.n	8000f18 <LoopCopyDataInit>

08000f10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f16:	3104      	adds	r1, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f18:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f20:	d3f6      	bcc.n	8000f10 <CopyDataInit>
	ldr	r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f24:	e002      	b.n	8000f2c <LoopFillZerobss>

08000f26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f28:	f842 3b04 	str.w	r3, [r2], #4

08000f2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <LoopForever+0x16>)
	cmp	r2, r3
 8000f2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f30:	d3f9      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f32:	f7ff ff2b 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f005 fd4b 	bl	80069d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3a:	f7ff fc17 	bl	800076c <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f40:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000f44:	08007660 	.word	0x08007660
	ldr	r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f4c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000f50:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000f54:	2000034c 	.word	0x2000034c

08000f58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f966 	bl	8001232 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f66:	f002 f873 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <HAL_Init+0x44>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	490b      	ldr	r1, [pc, #44]	@ (8000fa4 <HAL_Init+0x48>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_Init+0x4c>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f80:	2004      	movs	r0, #4
 8000f82:	f000 f9ab 	bl	80012dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f810 	bl	8000fac <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e002      	b.n	8000f9c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f96:	f7ff fd21 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	44020c00 	.word	0x44020c00
 8000fa4:	080075cc 	.word	0x080075cc
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000fb8:	4b33      	ldr	r3, [pc, #204]	@ (8001088 <HAL_InitTick+0xdc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e05c      	b.n	800107e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000fc4:	4b31      	ldr	r3, [pc, #196]	@ (800108c <HAL_InitTick+0xe0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d10c      	bne.n	8000fea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <HAL_InitTick+0xe4>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <HAL_InitTick+0xdc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e037      	b.n	800105a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000fea:	f000 f9cf 	bl	800138c <HAL_SYSTICK_GetCLKSourceConfig>
 8000fee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d023      	beq.n	800103e <HAL_InitTick+0x92>
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d82d      	bhi.n	8001058 <HAL_InitTick+0xac>
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_InitTick+0x5e>
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d00d      	beq.n	8001024 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001008:	e026      	b.n	8001058 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <HAL_InitTick+0xe4>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <HAL_InitTick+0xdc>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	4619      	mov	r1, r3
 8001014:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001018:	fbb3 f3f1 	udiv	r3, r3, r1
 800101c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001020:	60fb      	str	r3, [r7, #12]
        break;
 8001022:	e01a      	b.n	800105a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_InitTick+0xdc>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001032:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	60fb      	str	r3, [r7, #12]
        break;
 800103c:	e00d      	b.n	800105a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0xdc>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001048:	fbb3 f3f2 	udiv	r3, r3, r2
 800104c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	60fb      	str	r3, [r7, #12]
        break;
 8001056:	e000      	b.n	800105a <HAL_InitTick+0xae>
        break;
 8001058:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f91c 	bl	8001298 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e009      	b.n	800107e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106a:	2200      	movs	r2, #0
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	f04f 30ff 	mov.w	r0, #4294967295
 8001072:	f000 f8e9 	bl	8001248 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001076:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_InitTick+0xe8>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	e000e010 	.word	0xe000e010
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	200001fc 	.word	0x200001fc

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001fc 	.word	0x200001fc

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	@ (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	@ (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	@ 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	@ 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff4c 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001256:	f7ff ff63 	bl	8001120 <__NVIC_GetPriorityGrouping>
 800125a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f7ff ffb3 	bl	80011cc <NVIC_EncodePriority>
 8001266:	4602      	mov	r2, r0
 8001268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff82 	bl	8001178 <__NVIC_SetPriority>
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff56 	bl	800113c <__NVIC_EnableIRQ>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00d      	b.n	80012ca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_SYSTICK_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_SYSTICK_Config+0x40>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_SYSTICK_Config+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <HAL_SYSTICK_Config+0x40>)
 80012c2:	f043 0303 	orr.w	r3, r3, #3
 80012c6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d844      	bhi.n	8001374 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80012ea:	a201      	add	r2, pc, #4	@ (adr r2, 80012f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	08001313 	.word	0x08001313
 80012f4:	08001331 	.word	0x08001331
 80012f8:	08001353 	.word	0x08001353
 80012fc:	08001375 	.word	0x08001375
 8001300:	08001305 	.word	0x08001305
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1e      	ldr	r2, [pc, #120]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6013      	str	r3, [r2, #0]
      break;
 8001310:	e031      	b.n	8001376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001324:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001326:	f023 030c 	bic.w	r3, r3, #12
 800132a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800132e:	e022      	b.n	8001376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001336:	f023 0304 	bic.w	r3, r3, #4
 800133a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800133e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001342:	f023 030c 	bic.w	r3, r3, #12
 8001346:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001350:	e011      	b.n	8001376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001360:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001364:	f023 030c 	bic.w	r3, r3, #12
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001372:	e000      	b.n	8001376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001374:	bf00      	nop
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010
 8001388:	44020c00 	.word	0x44020c00

0800138c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800139e:	2304      	movs	r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	e01e      	b.n	80013e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80013a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d00f      	beq.n	80013d6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d80f      	bhi.n	80013dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d003      	beq.n	80013d0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80013c8:	e008      	b.n	80013dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
        break;
 80013ce:	e008      	b.n	80013e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
        break;
 80013d4:	e005      	b.n	80013e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80013d6:	2302      	movs	r3, #2
 80013d8:	607b      	str	r3, [r7, #4]
        break;
 80013da:	e002      	b.n	80013e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
        break;
 80013e0:	bf00      	nop
    }
  }
  return systick_source;
 80013e2:	687b      	ldr	r3, [r7, #4]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e010 	.word	0xe000e010
 80013f4:	44020c00 	.word	0x44020c00

080013f8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001400:	f7ff fe5e 	bl	80010c0 <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e06b      	b.n	80014e8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d008      	beq.n	800142e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2220      	movs	r2, #32
 8001420:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e05c      	b.n	80014e8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f042 0204 	orr.w	r2, r2, #4
 800143c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2205      	movs	r2, #5
 8001442:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001446:	e020      	b.n	800148a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001448:	f7ff fe3a 	bl	80010c0 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b05      	cmp	r3, #5
 8001454:	d919      	bls.n	800148a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800146e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800147a:	2201      	movs	r2, #1
 800147c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e02e      	b.n	80014e8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0d7      	beq.n	8001448 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0202 	orr.w	r2, r2, #2
 80014a6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80014b8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d2:	2201      	movs	r2, #1
 80014d4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e019      	b.n	8001536 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d004      	beq.n	8001518 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2220      	movs	r2, #32
 8001512:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e00e      	b.n	8001536 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2204      	movs	r2, #4
 800151c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e147      	b.n	80017e6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fa3e 	bl	80009ec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0210 	bic.w	r2, r2, #16
 800157e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001580:	f7ff fd9e 	bl	80010c0 <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001586:	e012      	b.n	80015ae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001588:	f7ff fd9a 	bl	80010c0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b0a      	cmp	r3, #10
 8001594:	d90b      	bls.n	80015ae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2203      	movs	r2, #3
 80015a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e11b      	b.n	80017e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d0e5      	beq.n	8001588 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015cc:	f7ff fd78 	bl	80010c0 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015d2:	e012      	b.n	80015fa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015d4:	f7ff fd74 	bl	80010c0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b0a      	cmp	r3, #10
 80015e0:	d90b      	bls.n	80015fa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0f5      	b.n	80017e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0e5      	beq.n	80015d4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0202 	orr.w	r2, r2, #2
 8001616:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a74      	ldr	r2, [pc, #464]	@ (80017f0 <HAL_FDCAN_Init+0x2ac>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d103      	bne.n	800162a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001622:	4a74      	ldr	r2, [pc, #464]	@ (80017f4 <HAL_FDCAN_Init+0x2b0>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7c1b      	ldrb	r3, [r3, #16]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001640:	619a      	str	r2, [r3, #24]
 8001642:	e007      	b.n	8001654 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001652:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7c5b      	ldrb	r3, [r3, #17]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800166a:	619a      	str	r2, [r3, #24]
 800166c:	e007      	b.n	800167e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800167c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7c9b      	ldrb	r3, [r3, #18]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d108      	bne.n	8001698 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001694:	619a      	str	r2, [r3, #24]
 8001696:	e007      	b.n	80016a8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80016a6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80016cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0210 	bic.w	r2, r2, #16
 80016dc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699a      	ldr	r2, [r3, #24]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0204 	orr.w	r2, r2, #4
 80016f4:	619a      	str	r2, [r3, #24]
 80016f6:	e02c      	b.n	8001752 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d028      	beq.n	8001752 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d01c      	beq.n	8001742 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001716:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0210 	orr.w	r2, r2, #16
 8001726:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d110      	bne.n	8001752 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	e007      	b.n	8001752 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0220 	orr.w	r2, r2, #32
 8001750:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	3b01      	subs	r3, #1
 8001758:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	3b01      	subs	r3, #1
 8001760:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001762:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800176a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	3b01      	subs	r3, #1
 8001774:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800177a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800177c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001786:	d115      	bne.n	80017b4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	3b01      	subs	r3, #1
 8001794:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001796:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	3b01      	subs	r3, #1
 800179e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017a0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80017b0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017b2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fc44 	bl	8002058 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	4000a400 	.word	0x4000a400
 80017f4:	4000a500 	.word	0x4000a500

080017f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001808:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d002      	beq.n	8001816 <HAL_FDCAN_ConfigFilter+0x1e>
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d13d      	bne.n	8001892 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800182a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001832:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e01d      	b.n	800188e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	075a      	lsls	r2, r3, #29
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	079a      	lsls	r2, r3, #30
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3304      	adds	r3, #4
 8001886:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e006      	b.n	80018a0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d116      	bne.n	80018f4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ce:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	011a      	lsls	r2, r3, #4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	431a      	orrs	r2, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e006      	b.n	8001902 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f8:	f043 0204 	orr.w	r2, r3, #4
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d110      	bne.n	8001944 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e006      	b.n	8001952 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	@ 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001978:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800197a:	7efb      	ldrb	r3, [r7, #27]
 800197c:	2b02      	cmp	r3, #2
 800197e:	f040 80e8 	bne.w	8001b52 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b40      	cmp	r3, #64	@ 0x40
 8001986:	d137      	bne.n	80019f8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0db      	b.n	8001b60 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b0:	0e1b      	lsrs	r3, r3, #24
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10a      	bne.n	80019d0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019c2:	0a5b      	lsrs	r3, r3, #9
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f6:	e036      	b.n	8001a66 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d107      	bne.n	8001a18 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0a3      	b.n	8001b60 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a20:	0e1b      	lsrs	r3, r3, #24
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d10a      	bne.n	8001a40 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0c9b      	lsrs	r3, r3, #18
 8001a80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e005      	b.n	8001a96 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	f003 020f 	and.w	r2, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0e1b      	lsrs	r3, r3, #24
 8001aea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0fda      	lsrs	r2, r3, #31
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	3304      	adds	r3, #4
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
 8001b0a:	e00a      	b.n	8001b22 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	441a      	add	r2, r3
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	440b      	add	r3, r1
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d3ec      	bcc.n	8001b0c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b40      	cmp	r3, #64	@ 0x40
 8001b36:	d105      	bne.n	8001b44 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001b42:	e004      	b.n	8001b4e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e006      	b.n	8001b60 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b56:	f043 0208 	orr.w	r2, r3, #8
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
  }
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	372c      	adds	r7, #44	@ 0x2c
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	080075e4 	.word	0x080075e4

08001b70 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b82:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d003      	beq.n	8001b92 <HAL_FDCAN_ActivateNotification+0x22>
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	f040 80c8 	bne.w	8001d22 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03b      	beq.n	8001c26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d031      	beq.n	8001c26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d027      	beq.n	8001c26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01d      	beq.n	8001c26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d013      	beq.n	8001c26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d13b      	bne.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d131      	bne.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d127      	bne.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11d      	bne.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d113      	bne.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0202 	orr.w	r2, r2, #2
 8001cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e006      	b.n	8001d30 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	@ 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d58:	4013      	ands	r3, r2
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d70:	4013      	ands	r3, r2
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d88:	4013      	ands	r3, r2
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d92:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001d96:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	4013      	ands	r3, r2
 8001da2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001daa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dae:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dca:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2240      	movs	r2, #64	@ 0x40
 8001de6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f916 	bl	800201a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d019      	beq.n	8001e2c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d014      	beq.n	8001e2c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e0a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001e24:	6939      	ldr	r1, [r7, #16]
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8d8 	bl	8001fdc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e38:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8a2 	bl	8001f86 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fd66 	bl	8000924 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e64:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001e66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f897 	bl	8001f9c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00c      	beq.n	8001e92 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f890 	bl	8001fb2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d018      	beq.n	8001ece <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d013      	beq.n	8001ece <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001eae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2280      	movs	r2, #128	@ 0x80
 8001ec4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f87c 	bl	8001fc6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00c      	beq.n	8001ef2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f880 	bl	8001ff2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f878 	bl	8002006 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00f      	beq.n	8001f40 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001f4e:	69f9      	ldr	r1, [r7, #28]
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f876 	bl	8002042 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f858 	bl	800202e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3730      	adds	r7, #48	@ 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002060:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002062:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002072:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002098:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	061a      	lsls	r2, r3, #24
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e005      	b.n	80020e6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3304      	adds	r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3f3      	bcc.n	80020da <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	4000ac00 	.word	0x4000ac00

08002104 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002112:	e136      	b.n	8002382 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8128 	beq.w	800237c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x38>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d125      	bne.n	8002188 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 020f 	and.w	r2, r3, #15
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d00b      	beq.n	80021dc <HAL_GPIO_Init+0xd8>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d0:	2b11      	cmp	r3, #17
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b12      	cmp	r3, #18
 80021da:	d130      	bne.n	800223e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002212:	2201      	movs	r2, #1
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4013      	ands	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0201 	and.w	r2, r3, #1
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d017      	beq.n	8002276 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4013      	ands	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d07c      	beq.n	800237c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002282:	4a47      	ldr	r2, [pc, #284]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3318      	adds	r3, #24
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4013      	ands	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0a9a      	lsrs	r2, r3, #10
 80022aa:	4b3e      	ldr	r3, [pc, #248]	@ (80023a4 <HAL_GPIO_Init+0x2a0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	f002 0203 	and.w	r2, r2, #3
 80022b4:	00d2      	lsls	r2, r2, #3
 80022b6:	4093      	lsls	r3, r2
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022be:	4938      	ldr	r1, [pc, #224]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3318      	adds	r3, #24
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022cc:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4013      	ands	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80022f0:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022f6:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4013      	ands	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800231a:	4a21      	ldr	r2, [pc, #132]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002320:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 8002322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002326:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43db      	mvns	r3, r3
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4013      	ands	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002346:	4a16      	ldr	r2, [pc, #88]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800234e:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 8002350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002354:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_GPIO_Init+0x29c>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	3301      	adds	r3, #1
 8002380:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f aec1 	bne.w	8002114 <HAL_GPIO_Init+0x10>
  }
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	44022000 	.word	0x44022000
 80023a4:	002f7f7f 	.word	0x002f7f7f

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43d9      	mvns	r1, r3
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	400b      	ands	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002422:	4a0c      	ldr	r2, [pc, #48]	@ (8002454 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f814 	bl	8002458 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800243c:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fa29 	bl	800089c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	44022000 	.word	0x44022000

08002458 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f000 bc28 	b.w	8002cd4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002484:	4b94      	ldr	r3, [pc, #592]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f003 0318 	and.w	r3, r3, #24
 800248c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800248e:	4b92      	ldr	r3, [pc, #584]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	2b18      	cmp	r3, #24
 80024ae:	d114      	bne.n	80024da <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d111      	bne.n	80024da <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	f000 bc08 	b.w	8002cd4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80024c4:	4b84      	ldr	r3, [pc, #528]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	041b      	lsls	r3, r3, #16
 80024d2:	4981      	ldr	r1, [pc, #516]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80024d8:	e040      	b.n	800255c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d023      	beq.n	800252a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024e2:	4b7d      	ldr	r3, [pc, #500]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7c      	ldr	r2, [pc, #496]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fde7 	bl	80010c0 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80024f6:	f7fe fde3 	bl	80010c0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e3e5      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002508:	4b73      	ldr	r3, [pc, #460]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002514:	4b70      	ldr	r3, [pc, #448]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	496d      	ldr	r1, [pc, #436]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002524:	4313      	orrs	r3, r2
 8002526:	618b      	str	r3, [r1, #24]
 8002528:	e018      	b.n	800255c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800252a:	4b6b      	ldr	r3, [pc, #428]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6a      	ldr	r2, [pc, #424]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fdc3 	bl	80010c0 <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800253e:	f7fe fdbf 	bl	80010c0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e3c1      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002550:	4b61      	ldr	r3, [pc, #388]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a0 	beq.w	80026aa <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b10      	cmp	r3, #16
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x10c>
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b18      	cmp	r3, #24
 8002574:	d109      	bne.n	800258a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 8092 	bne.w	80026aa <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e3a4      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x132>
 8002594:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4f      	ldr	r2, [pc, #316]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e058      	b.n	8002654 <HAL_RCC_OscConfig+0x1e4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d112      	bne.n	80025d0 <HAL_RCC_OscConfig+0x160>
 80025aa:	4b4b      	ldr	r3, [pc, #300]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4a      	ldr	r2, [pc, #296]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b48      	ldr	r3, [pc, #288]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a47      	ldr	r2, [pc, #284]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a44      	ldr	r2, [pc, #272]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e041      	b.n	8002654 <HAL_RCC_OscConfig+0x1e4>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x190>
 80025da:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a3e      	ldr	r2, [pc, #248]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b3c      	ldr	r3, [pc, #240]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b39      	ldr	r3, [pc, #228]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a38      	ldr	r2, [pc, #224]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e029      	b.n	8002654 <HAL_RCC_OscConfig+0x1e4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002608:	d112      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c0>
 800260a:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a32      	ldr	r2, [pc, #200]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2f      	ldr	r2, [pc, #188]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800261c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2c      	ldr	r2, [pc, #176]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e011      	b.n	8002654 <HAL_RCC_OscConfig+0x1e4>
 8002630:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a28      	ldr	r2, [pc, #160]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a22      	ldr	r2, [pc, #136]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 800264e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fd30 	bl	80010c0 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002664:	f7fe fd2c 	bl	80010c0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e32e      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x1f4>
 8002682:	e012      	b.n	80026aa <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fd1c 	bl	80010c0 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800268c:	f7fe fd18 	bl	80010c0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e31a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_RCC_OscConfig+0x268>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 809a 	beq.w	80027ec <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x25a>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	2b18      	cmp	r3, #24
 80026c2:	d149      	bne.n	8002758 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d146      	bne.n	8002758 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e2fe      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
 80026d6:	bf00      	nop
 80026d8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11c      	bne.n	800271c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80026e2:	4b9a      	ldr	r3, [pc, #616]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0218 	and.w	r2, r3, #24
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d014      	beq.n	800271c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80026f2:	4b96      	ldr	r3, [pc, #600]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0218 	bic.w	r2, r3, #24
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	4993      	ldr	r1, [pc, #588]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002704:	f000 fdd0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002708:	4b91      	ldr	r3, [pc, #580]	@ (8002950 <HAL_RCC_OscConfig+0x4e0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fc4d 	bl	8000fac <HAL_InitTick>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e2db      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fcd0 	bl	80010c0 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002724:	f7fe fccc 	bl	80010c0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e2ce      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002736:	4b85      	ldr	r3, [pc, #532]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002742:	4b82      	ldr	r3, [pc, #520]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	041b      	lsls	r3, r3, #16
 8002750:	497e      	ldr	r1, [pc, #504]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002756:	e049      	b.n	80027ec <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02c      	beq.n	80027ba <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002760:	4b7a      	ldr	r3, [pc, #488]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 0218 	bic.w	r2, r3, #24
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4977      	ldr	r1, [pc, #476]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002772:	4b76      	ldr	r3, [pc, #472]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a75      	ldr	r2, [pc, #468]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fc9f 	bl	80010c0 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002786:	f7fe fc9b 	bl	80010c0 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e29d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002798:	4b6c      	ldr	r3, [pc, #432]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80027a4:	4b69      	ldr	r3, [pc, #420]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	4966      	ldr	r1, [pc, #408]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	610b      	str	r3, [r1, #16]
 80027b8:	e018      	b.n	80027ec <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a63      	ldr	r2, [pc, #396]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fc7b 	bl	80010c0 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fc77 	bl	80010c0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e279      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e0:	4b5a      	ldr	r3, [pc, #360]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03c      	beq.n	8002872 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01c      	beq.n	800283a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002800:	4b52      	ldr	r3, [pc, #328]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002806:	4a51      	ldr	r2, [pc, #324]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002808:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800280c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe fc56 	bl	80010c0 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002818:	f7fe fc52 	bl	80010c0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e254      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800282a:	4b48      	ldr	r3, [pc, #288]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 800282c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ef      	beq.n	8002818 <HAL_RCC_OscConfig+0x3a8>
 8002838:	e01b      	b.n	8002872 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283a:	4b44      	ldr	r3, [pc, #272]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 800283c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002840:	4a42      	ldr	r2, [pc, #264]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002846:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fe fc39 	bl	80010c0 <HAL_GetTick>
 800284e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002852:	f7fe fc35 	bl	80010c0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e237      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002864:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ef      	bne.n	8002852 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80d2 	beq.w	8002a24 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002880:	4b34      	ldr	r3, [pc, #208]	@ (8002954 <HAL_RCC_OscConfig+0x4e4>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d118      	bne.n	80028be <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800288c:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_OscConfig+0x4e4>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_RCC_OscConfig+0x4e4>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002898:	f7fe fc12 	bl	80010c0 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a0:	f7fe fc0e 	bl	80010c0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e210      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028b2:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_RCC_OscConfig+0x4e4>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_RCC_OscConfig+0x468>
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80028c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028cc:	4a1f      	ldr	r2, [pc, #124]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028d6:	e074      	b.n	80029c2 <HAL_RCC_OscConfig+0x552>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d118      	bne.n	8002912 <HAL_RCC_OscConfig+0x4a2>
 80028e0:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80028e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e6:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f6:	4a15      	ldr	r2, [pc, #84]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 80028f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002900:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002906:	4a11      	ldr	r2, [pc, #68]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002910:	e057      	b.n	80029c2 <HAL_RCC_OscConfig+0x552>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d11e      	bne.n	8002958 <HAL_RCC_OscConfig+0x4e8>
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 800291c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 800292c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002930:	4a06      	ldr	r2, [pc, #24]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002936:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 800293c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002940:	4a02      	ldr	r2, [pc, #8]	@ (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x552>
 800294c:	44020c00 	.word	0x44020c00
 8002950:	20000004 	.word	0x20000004
 8002954:	44020800 	.word	0x44020800
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b85      	cmp	r3, #133	@ 0x85
 800295e:	d118      	bne.n	8002992 <HAL_RCC_OscConfig+0x522>
 8002960:	4ba2      	ldr	r3, [pc, #648]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002966:	4aa1      	ldr	r2, [pc, #644]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002970:	4b9e      	ldr	r3, [pc, #632]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002976:	4a9d      	ldr	r2, [pc, #628]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800297c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002980:	4b9a      	ldr	r3, [pc, #616]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002986:	4a99      	ldr	r2, [pc, #612]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002990:	e017      	b.n	80029c2 <HAL_RCC_OscConfig+0x552>
 8002992:	4b96      	ldr	r3, [pc, #600]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002998:	4a94      	ldr	r2, [pc, #592]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029a2:	4b92      	ldr	r3, [pc, #584]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 80029a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029a8:	4a90      	ldr	r2, [pc, #576]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029b2:	4b8e      	ldr	r3, [pc, #568]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 80029b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b8:	4a8c      	ldr	r2, [pc, #560]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 80029ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fb79 	bl	80010c0 <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fb75 	bl	80010c0 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e175      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e8:	4b80      	ldr	r3, [pc, #512]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 80029ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ed      	beq.n	80029d2 <HAL_RCC_OscConfig+0x562>
 80029f6:	e015      	b.n	8002a24 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fb62 	bl	80010c0 <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fb5e 	bl	80010c0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e15e      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a16:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ed      	bne.n	8002a00 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d036      	beq.n	8002a9e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d019      	beq.n	8002a6c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a38:	4b6c      	ldr	r3, [pc, #432]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002a3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fb3c 	bl	80010c0 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a4c:	f7fe fb38 	bl	80010c0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e13a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a5e:	4b63      	ldr	r3, [pc, #396]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x5dc>
 8002a6a:	e018      	b.n	8002a9e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a6c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a5e      	ldr	r2, [pc, #376]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fb22 	bl	80010c0 <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a80:	f7fe fb1e 	bl	80010c0 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e120      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a92:	4b56      	ldr	r3, [pc, #344]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8115 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b18      	cmp	r3, #24
 8002aac:	f000 80af 	beq.w	8002c0e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	f040 8086 	bne.w	8002bc6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002aba:	4b4c      	ldr	r3, [pc, #304]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a4b      	ldr	r2, [pc, #300]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002ac0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fafb 	bl	80010c0 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ace:	f7fe faf7 	bl	80010c0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0f9      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ae0:	4b42      	ldr	r3, [pc, #264]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002aec:	4b3f      	ldr	r3, [pc, #252]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002af4:	f023 0303 	bic.w	r3, r3, #3
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b00:	0212      	lsls	r2, r2, #8
 8002b02:	430a      	orrs	r2, r1
 8002b04:	4939      	ldr	r1, [pc, #228]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	025b      	lsls	r3, r3, #9
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	3b01      	subs	r3, #1
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b3a:	492c      	ldr	r1, [pc, #176]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002b40:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	4a29      	ldr	r2, [pc, #164]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b46:	f023 0310 	bic.w	r3, r3, #16
 8002b4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b50:	4a26      	ldr	r2, [pc, #152]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002b56:	4b25      	ldr	r3, [pc, #148]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	4a24      	ldr	r2, [pc, #144]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b5c:	f043 0310 	orr.w	r3, r3, #16
 8002b60:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002b62:	4b22      	ldr	r3, [pc, #136]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	f023 020c 	bic.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	491f      	ldr	r1, [pc, #124]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	f023 0220 	bic.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	491a      	ldr	r1, [pc, #104]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	4a18      	ldr	r2, [pc, #96]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b90:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002b92:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a15      	ldr	r2, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002b98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fa8f 	bl	80010c0 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fa8b 	bl	80010c0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e08d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x736>
 8002bc4:	e085      	b.n	8002cd2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <HAL_RCC_OscConfig+0x77c>)
 8002bcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fa75 	bl	80010c0 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002bda:	f7fe fa71 	bl	80010c0 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d903      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e073      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
 8002bec:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002bfc:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	4a36      	ldr	r2, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002c02:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	6293      	str	r3, [r2, #40]	@ 0x28
 8002c0c:	e061      	b.n	8002cd2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002c0e:	4b33      	ldr	r3, [pc, #204]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c14:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c18:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d031      	beq.n	8002c86 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d12a      	bne.n	8002c86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d122      	bne.n	8002c86 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d11a      	bne.n	8002c86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	0a5b      	lsrs	r3, r3, #9
 8002c54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d111      	bne.n	8002c86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d108      	bne.n	8002c86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0e1b      	lsrs	r3, r3, #24
 8002c78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e024      	b.n	8002cd4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c8a:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8e:	08db      	lsrs	r3, r3, #3
 8002c90:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d01a      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002ca2:	f023 0310 	bic.w	r3, r3, #16
 8002ca6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fa0a 	bl	80010c0 <HAL_GetTick>
 8002cac:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002cae:	bf00      	nop
 8002cb0:	f7fe fa06 	bl	80010c0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d0f9      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc0:	4a06      	ldr	r2, [pc, #24]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002cc6:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	4a04      	ldr	r2, [pc, #16]	@ (8002cdc <HAL_RCC_OscConfig+0x86c>)
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	44020c00 	.word	0x44020c00

08002ce0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e19e      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b83      	ldr	r3, [pc, #524]	@ (8002f04 <HAL_RCC_ClockConfig+0x224>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d910      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b80      	ldr	r3, [pc, #512]	@ (8002f04 <HAL_RCC_ClockConfig+0x224>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 020f 	bic.w	r2, r3, #15
 8002d0a:	497e      	ldr	r1, [pc, #504]	@ (8002f04 <HAL_RCC_ClockConfig+0x224>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b7c      	ldr	r3, [pc, #496]	@ (8002f04 <HAL_RCC_ClockConfig+0x224>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e186      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	4b74      	ldr	r3, [pc, #464]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d909      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002d42:	4b71      	ldr	r3, [pc, #452]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	496d      	ldr	r1, [pc, #436]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d012      	beq.n	8002d88 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	4b68      	ldr	r3, [pc, #416]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d909      	bls.n	8002d88 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d74:	4b64      	ldr	r3, [pc, #400]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4961      	ldr	r1, [pc, #388]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4b5b      	ldr	r3, [pc, #364]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d908      	bls.n	8002db6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002da4:	4b58      	ldr	r3, [pc, #352]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4955      	ldr	r1, [pc, #340]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4b50      	ldr	r3, [pc, #320]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d908      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	494a      	ldr	r1, [pc, #296]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8093 	beq.w	8002f18 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002dfa:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d121      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e113      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e12:	4b3d      	ldr	r3, [pc, #244]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d115      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e107      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002e2a:	4b37      	ldr	r3, [pc, #220]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0fb      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3a:	4b33      	ldr	r3, [pc, #204]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0f3      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	492c      	ldr	r1, [pc, #176]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe f930 	bl	80010c0 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fe f928 	bl	80010c0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0d7      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e82:	4b21      	ldr	r3, [pc, #132]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0318 	and.w	r3, r3, #24
 8002e8a:	2b18      	cmp	r3, #24
 8002e8c:	d1ee      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x18c>
 8002e8e:	e043      	b.n	8002f18 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d112      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9a:	f7fe f911 	bl	80010c0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0c0      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb0:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f003 0318 	and.w	r3, r3, #24
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d1ee      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
 8002ebc:	e02c      	b.n	8002f18 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d122      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fe f8fa 	bl	80010c0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0a9      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_RCC_ClockConfig+0x228>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0318 	and.w	r3, r3, #24
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d1ee      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x1e8>
 8002eea:	e015      	b.n	8002f18 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002eec:	f7fe f8e8 	bl	80010c0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d906      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e097      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
 8002f02:	bf00      	nop
 8002f04:	40022000 	.word	0x40022000
 8002f08:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 0318 	and.w	r3, r3, #24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e9      	bne.n	8002eec <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b44      	ldr	r3, [pc, #272]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d208      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002f34:	4b41      	ldr	r3, [pc, #260]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f023 020f 	bic.w	r2, r3, #15
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	493e      	ldr	r1, [pc, #248]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f46:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <HAL_RCC_ClockConfig+0x360>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d210      	bcs.n	8002f76 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f54:	4b3a      	ldr	r3, [pc, #232]	@ (8003040 <HAL_RCC_ClockConfig+0x360>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 020f 	bic.w	r2, r3, #15
 8002f5c:	4938      	ldr	r1, [pc, #224]	@ (8003040 <HAL_RCC_ClockConfig+0x360>)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f64:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <HAL_RCC_ClockConfig+0x360>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e05d      	b.n	8003032 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d208      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002f92:	4b2a      	ldr	r3, [pc, #168]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4927      	ldr	r1, [pc, #156]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	4b21      	ldr	r3, [pc, #132]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d209      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	491a      	ldr	r1, [pc, #104]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d012      	beq.n	8003008 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d209      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	490e      	ldr	r1, [pc, #56]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003008:	f000 f822 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_ClockConfig+0x35c>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490b      	ldr	r1, [pc, #44]	@ (8003044 <HAL_RCC_ClockConfig+0x364>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a0a      	ldr	r2, [pc, #40]	@ (8003048 <HAL_RCC_ClockConfig+0x368>)
 8003020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003022:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <HAL_RCC_ClockConfig+0x36c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd ffc0 	bl	8000fac <HAL_InitTick>
 800302c:	4603      	mov	r3, r0
 800302e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003030:	7afb      	ldrb	r3, [r7, #11]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	44020c00 	.word	0x44020c00
 8003040:	40022000 	.word	0x40022000
 8003044:	080075cc 	.word	0x080075cc
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	@ 0x24
 8003054:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003056:	4b8c      	ldr	r3, [pc, #560]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 0318 	and.w	r3, r3, #24
 800305e:	2b08      	cmp	r3, #8
 8003060:	d102      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003062:	4b8a      	ldr	r3, [pc, #552]	@ (800328c <HAL_RCC_GetSysClockFreq+0x23c>)
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e107      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003068:	4b87      	ldr	r3, [pc, #540]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 0318 	and.w	r3, r3, #24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d112      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003074:	4b84      	ldr	r3, [pc, #528]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003080:	4b81      	ldr	r3, [pc, #516]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	08db      	lsrs	r3, r3, #3
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	4a81      	ldr	r2, [pc, #516]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x240>)
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e0f1      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003094:	4b7e      	ldr	r3, [pc, #504]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x240>)
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	e0ee      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800309a:	4b7b      	ldr	r3, [pc, #492]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 0318 	and.w	r3, r3, #24
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d102      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x244>)
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e0e5      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ac:	4b76      	ldr	r3, [pc, #472]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 0318 	and.w	r3, r3, #24
 80030b4:	2b18      	cmp	r3, #24
 80030b6:	f040 80dd 	bne.w	8003274 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030ba:	4b73      	ldr	r3, [pc, #460]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80030c4:	4b70      	ldr	r3, [pc, #448]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80030d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80030dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80b7 	beq.w	800326e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d003      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0xbe>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d056      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x16a>
 800310c:	e077      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800310e:	4b5e      	ldr	r3, [pc, #376]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02d      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	08db      	lsrs	r3, r3, #3
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	4a5a      	ldr	r2, [pc, #360]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x240>)
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003144:	4b50      	ldr	r3, [pc, #320]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 8003146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003154:	ed97 6a02 	vldr	s12, [r7, #8]
 8003158:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003298 <HAL_RCC_GetSysClockFreq+0x248>
 800315c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003160:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003164:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003168:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003174:	e065      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	ee07 3a90 	vmov	s15, r3
 800317c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003180:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800329c <HAL_RCC_GetSysClockFreq+0x24c>
 8003184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003188:	4b3f      	ldr	r3, [pc, #252]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003198:	ed97 6a02 	vldr	s12, [r7, #8]
 800319c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003298 <HAL_RCC_GetSysClockFreq+0x248>
 80031a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80031b8:	e043      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80032a0 <HAL_RCC_GetSysClockFreq+0x250>
 80031c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 80031ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003298 <HAL_RCC_GetSysClockFreq+0x248>
 80031e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80031fc:	e021      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003208:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x254>
 800320c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003210:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 8003212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003220:	ed97 6a02 	vldr	s12, [r7, #8]
 8003224:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003298 <HAL_RCC_GetSysClockFreq+0x248>
 8003228:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800322c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003230:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003234:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003240:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x238>)
 8003244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003246:	0a5b      	lsrs	r3, r3, #9
 8003248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800324c:	3301      	adds	r3, #1
 800324e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800325a:	edd7 6a06 	vldr	s13, [r7, #24]
 800325e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003266:	ee17 3a90 	vmov	r3, s15
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e004      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e001      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003274:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x240>)
 8003276:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003278:	69fb      	ldr	r3, [r7, #28]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	@ 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	44020c00 	.word	0x44020c00
 800328c:	003d0900 	.word	0x003d0900
 8003290:	03d09000 	.word	0x03d09000
 8003294:	016e3600 	.word	0x016e3600
 8003298:	46000000 	.word	0x46000000
 800329c:	4c742400 	.word	0x4c742400
 80032a0:	4bb71b00 	.word	0x4bb71b00
 80032a4:	4a742400 	.word	0x4a742400

080032a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032ac:	f7ff fed0 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80032b6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032ba:	4907      	ldr	r1, [pc, #28]	@ (80032d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80032be:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032c2:	fa22 f303 	lsr.w	r3, r2, r3
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <HAL_RCC_GetHCLKFreq+0x34>)
 80032c8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80032ca:	4b04      	ldr	r3, [pc, #16]	@ (80032dc <HAL_RCC_GetHCLKFreq+0x34>)
 80032cc:	681b      	ldr	r3, [r3, #0]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	44020c00 	.word	0x44020c00
 80032d8:	080075cc 	.word	0x080075cc
 80032dc:	20000000 	.word	0x20000000

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80032e4:	f7ff ffe0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4904      	ldr	r1, [pc, #16]	@ (8003308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	44020c00 	.word	0x44020c00
 8003308:	080075dc 	.word	0x080075dc

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003310:	f7ff ffca 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4904      	ldr	r1, [pc, #16]	@ (8003334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	44020c00 	.word	0x44020c00
 8003334:	080075dc 	.word	0x080075dc

08003338 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800333c:	f7ff ffb4 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	0b1b      	lsrs	r3, r3, #12
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4904      	ldr	r1, [pc, #16]	@ (8003360 <HAL_RCC_GetPCLK3Freq+0x28>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	44020c00 	.word	0x44020c00
 8003360:	080075dc 	.word	0x080075dc

08003364 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b0aa      	sub	sp, #168	@ 0xa8
 800336a:	af00      	add	r7, sp, #0
 800336c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003370:	2300      	movs	r3, #0
 8003372:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003376:	2300      	movs	r3, #0
 8003378:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800337c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003388:	2500      	movs	r5, #0
 800338a:	ea54 0305 	orrs.w	r3, r4, r5
 800338e:	d00b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003390:	4bb8      	ldr	r3, [pc, #736]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003396:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800339a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	4ab4      	ldr	r2, [pc, #720]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f002 0801 	and.w	r8, r2, #1
 80033b4:	f04f 0900 	mov.w	r9, #0
 80033b8:	ea58 0309 	orrs.w	r3, r8, r9
 80033bc:	d038      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80033be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d819      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	08003405 	.word	0x08003405
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033fd 	.word	0x080033fd
 80033dc:	08003405 	.word	0x08003405
 80033e0:	08003405 	.word	0x08003405
 80033e4:	08003405 	.word	0x08003405
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ec:	3308      	adds	r3, #8
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fff2 	bl	80053d8 <RCCEx_PLL2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80033fa:	e004      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003406:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800340e:	4b99      	ldr	r3, [pc, #612]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003414:	f023 0107 	bic.w	r1, r3, #7
 8003418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	4a95      	ldr	r2, [pc, #596]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003420:	430b      	orrs	r3, r1
 8003422:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800342c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f002 0a02 	and.w	sl, r2, #2
 800343c:	f04f 0b00 	mov.w	fp, #0
 8003440:	ea5a 030b 	orrs.w	r3, sl, fp
 8003444:	d03c      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003446:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	2b28      	cmp	r3, #40	@ 0x28
 800344e:	d01b      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003450:	2b28      	cmp	r3, #40	@ 0x28
 8003452:	d815      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d019      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d811      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800345c:	2b18      	cmp	r3, #24
 800345e:	d017      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003460:	2b18      	cmp	r3, #24
 8003462:	d80d      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003468:	2b08      	cmp	r3, #8
 800346a:	d109      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800346c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003470:	3308      	adds	r3, #8
 8003472:	4618      	mov	r0, r3
 8003474:	f001 ffb0 	bl	80053d8 <RCCEx_PLL2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800347e:	e00a      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003486:	e006      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003488:	bf00      	nop
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800348c:	bf00      	nop
 800348e:	e002      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800349e:	4b75      	ldr	r3, [pc, #468]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034a4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80034a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	4a71      	ldr	r2, [pc, #452]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034b6:	e003      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f002 0304 	and.w	r3, r2, #4
 80034cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d040      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80034e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034ea:	d01e      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80034ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034f0:	d817      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80034f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f6:	d01a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80034f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fc:	d811      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80034fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003500:	d017      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003502:	2bc0      	cmp	r3, #192	@ 0xc0
 8003504:	d80d      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d015      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d109      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800350e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003512:	3308      	adds	r3, #8
 8003514:	4618      	mov	r0, r3
 8003516:	f001 ff5f 	bl	80053d8 <RCCEx_PLL2_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003520:	e00a      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003528:	e006      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800352a:	bf00      	nop
 800352c:	e004      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003538:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10c      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003540:	4b4c      	ldr	r3, [pc, #304]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003546:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800354a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	4a48      	ldr	r2, [pc, #288]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003552:	430b      	orrs	r3, r1
 8003554:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003558:	e003      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800355e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800356e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003578:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800357c:	460b      	mov	r3, r1
 800357e:	4313      	orrs	r3, r2
 8003580:	d043      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003582:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800358c:	d021      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800358e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003592:	d81a      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003598:	d01d      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800359a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800359e:	d814      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x266>
 80035a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035a4:	d019      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80035a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035aa:	d80e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x266>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d016      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80035b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035b4:	d109      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ba:	3308      	adds	r3, #8
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 ff0b 	bl	80053d8 <RCCEx_PLL2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80035c8:	e00a      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035d0:	e006      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80035d2:	bf00      	nop
 80035d4:	e004      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80035d6:	bf00      	nop
 80035d8:	e002      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80035de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10c      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80035e8:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ee:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035fa:	430b      	orrs	r3, r1
 80035fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003600:	e003      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003602:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003606:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003616:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003618:	2300      	movs	r3, #0
 800361a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800361c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003620:	460b      	mov	r3, r1
 8003622:	4313      	orrs	r3, r2
 8003624:	d03e      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003626:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003630:	d01b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003632:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003636:	d814      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800363c:	d017      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800363e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003642:	d80e      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d017      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364c:	d109      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800364e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003652:	3308      	adds	r3, #8
 8003654:	4618      	mov	r0, r3
 8003656:	f001 febf 	bl	80053d8 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003660:	e00b      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003668:	e007      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800366a:	bf00      	nop
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800366e:	bf00      	nop
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003672:	bf00      	nop
 8003674:	44020c00 	.word	0x44020c00
        break;
 8003678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003682:	4ba5      	ldr	r3, [pc, #660]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003684:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003688:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800368c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	4aa1      	ldr	r2, [pc, #644]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003694:	430b      	orrs	r3, r1
 8003696:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80036b2:	2300      	movs	r3, #0
 80036b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80036b6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80036c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036ca:	d01b      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80036cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036d0:	d814      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x398>
 80036d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036d6:	d017      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80036d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036dc:	d80e      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x398>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d014      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80036e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036e6:	d109      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ec:	3308      	adds	r3, #8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fe72 	bl	80053d8 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80036fa:	e008      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003702:	e004      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003704:	bf00      	nop
 8003706:	e002      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003708:	bf00      	nop
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800370c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10c      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003716:	4b80      	ldr	r3, [pc, #512]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003718:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800371c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003720:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003726:	4a7c      	ldr	r2, [pc, #496]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003728:	430b      	orrs	r3, r1
 800372a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800372e:	e003      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003734:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003746:	2300      	movs	r3, #0
 8003748:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800374a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d033      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003754:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375e:	d015      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003764:	d80e      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800376a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800376e:	d109      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003774:	3308      	adds	r3, #8
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fe2e 	bl	80053d8 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003782:	e006      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800378a:	e002      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003792:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800379a:	4b5f      	ldr	r3, [pc, #380]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800379c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037a0:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80037a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80037b2:	e003      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80037bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	2100      	movs	r1, #0
 80037c6:	6639      	str	r1, [r7, #96]	@ 0x60
 80037c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80037ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80037d2:	460b      	mov	r3, r1
 80037d4:	4313      	orrs	r3, r2
 80037d6:	d033      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80037d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e2:	d015      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80037e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e8:	d80e      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d012      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80037ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f2:	d109      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037f8:	3308      	adds	r3, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fdec 	bl	80053d8 <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003806:	e006      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800380e:	e002      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003814:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003816:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800381e:	4b3e      	ldr	r3, [pc, #248]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003820:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003824:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003828:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800382c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382e:	4a3a      	ldr	r2, [pc, #232]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003830:	430b      	orrs	r3, r1
 8003832:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003836:	e003      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800383c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003840:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	2100      	movs	r1, #0
 800384a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800384c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003852:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800385c:	4b2e      	ldr	r3, [pc, #184]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	4a2d      	ldr	r2, [pc, #180]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003862:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003866:	61d3      	str	r3, [r2, #28]
 8003868:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003874:	4a28      	ldr	r2, [pc, #160]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003876:	430b      	orrs	r3, r1
 8003878:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800387a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003886:	653b      	str	r3, [r7, #80]	@ 0x50
 8003888:	2300      	movs	r3, #0
 800388a:	657b      	str	r3, [r7, #84]	@ 0x54
 800388c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003890:	460b      	mov	r3, r1
 8003892:	4313      	orrs	r3, r2
 8003894:	d046      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003896:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80038a0:	d021      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80038a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80038a6:	d81a      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ac:	d01d      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x586>
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d814      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80038b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038b8:	d019      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80038ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038be:	d80e      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c8:	d109      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ce:	3308      	adds	r3, #8
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 fd81 	bl	80053d8 <RCCEx_PLL2_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80038dc:	e00a      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038e4:	e006      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80038e6:	bf00      	nop
 80038e8:	e004      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80038ea:	bf00      	nop
 80038ec:	e002      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80038f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003902:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003906:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	4a02      	ldr	r2, [pc, #8]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800390e:	430b      	orrs	r3, r1
 8003910:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003916:	bf00      	nop
 8003918:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003920:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003932:	2300      	movs	r3, #0
 8003934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003936:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800393a:	460b      	mov	r3, r1
 800393c:	4313      	orrs	r3, r2
 800393e:	d043      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003940:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800394a:	d021      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800394c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003950:	d81a      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003956:	d01d      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003958:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800395c:	d814      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800395e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003962:	d019      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003964:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003968:	d80e      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003972:	d109      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003974:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003978:	3308      	adds	r3, #8
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fd2c 	bl	80053d8 <RCCEx_PLL2_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003986:	e00a      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800398e:	e006      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003990:	bf00      	nop
 8003992:	e004      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003994:	bf00      	nop
 8003996:	e002      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80039a6:	4bb6      	ldr	r3, [pc, #728]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80039ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b6:	4ab2      	ldr	r2, [pc, #712]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80039be:	e003      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80039c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039d6:	2300      	movs	r3, #0
 80039d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80039de:	460b      	mov	r3, r1
 80039e0:	4313      	orrs	r3, r2
 80039e2:	d030      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80039e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d80f      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d211      	bcs.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d911      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d109      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039fe:	3308      	adds	r3, #8
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 fce9 	bl	80053d8 <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a0c:	e006      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a14:	e002      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a24:	4b96      	ldr	r3, [pc, #600]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a2a:	f023 0107 	bic.w	r1, r3, #7
 8003a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a34:	4a92      	ldr	r2, [pc, #584]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a3c:	e003      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a42:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	2100      	movs	r1, #0
 8003a50:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003a62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003a86:	4b7e      	ldr	r3, [pc, #504]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a8c:	f023 0108 	bic.w	r1, r3, #8
 8003a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a96:	4a7a      	ldr	r2, [pc, #488]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003aa4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f000 80b0 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	4a6e      	ldr	r2, [pc, #440]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ad2:	f7fd faf5 	bl	80010c0 <HAL_GetTick>
 8003ad6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ada:	e00b      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fd faf0 	bl	80010c0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d903      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003af2:	e005      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003af4:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ed      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003b00:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 808a 	bne.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d022      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b26:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d01b      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b2e:	4b54      	ldr	r3, [pc, #336]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b3c:	4b50      	ldr	r3, [pc, #320]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b42:	4a4f      	ldr	r2, [pc, #316]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b52:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b5c:	4a48      	ldr	r2, [pc, #288]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d019      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd faa5 	bl	80010c0 <HAL_GetTick>
 8003b76:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7a:	e00d      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fd faa0 	bl	80010c0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d903      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003b96:	e006      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b98:	4b39      	ldr	r3, [pc, #228]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ea      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003ba6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d132      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003bbe:	4b30      	ldr	r3, [pc, #192]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bd2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	61d3      	str	r3, [r2, #28]
 8003bdc:	e005      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003bde:	4b28      	ldr	r3, [pc, #160]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	4a27      	ldr	r2, [pc, #156]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003be4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003be8:	61d3      	str	r3, [r2, #28]
 8003bea:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf0:	4a23      	ldr	r2, [pc, #140]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bfa:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bfc:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c12:	e008      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c14:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c18:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003c1c:	e003      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c22:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	d038      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c48:	2b30      	cmp	r3, #48	@ 0x30
 8003c4a:	d014      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003c4c:	2b30      	cmp	r3, #48	@ 0x30
 8003c4e:	d80e      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d012      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d80a      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	4a06      	ldr	r2, [pc, #24]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c6c:	e00d      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c74:	e009      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003c76:	bf00      	nop
 8003c78:	e007      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003c7a:	bf00      	nop
 8003c7c:	e005      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003c7e:	bf00      	nop
 8003c80:	44020c00 	.word	0x44020c00
 8003c84:	44020800 	.word	0x44020800
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003c92:	4bb5      	ldr	r3, [pc, #724]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	49b1      	ldr	r1, [pc, #708]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003caa:	e003      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cb0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003cb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	d03c      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d81d      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003cda:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003cf5 	.word	0x08003cf5
 8003ce4:	08003d03 	.word	0x08003d03
 8003ce8:	08003d17 	.word	0x08003d17
 8003cec:	08003d1f 	.word	0x08003d1f
 8003cf0:	08003d1f 	.word	0x08003d1f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf4:	4b9c      	ldr	r3, [pc, #624]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	4a9b      	ldr	r2, [pc, #620]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d00:	e00e      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d06:	3308      	adds	r3, #8
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 fb65 	bl	80053d8 <RCCEx_PLL2_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d14:	e004      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d1c:	e000      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10c      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003d28:	4b8f      	ldr	r3, [pc, #572]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d2e:	f023 0207 	bic.w	r2, r3, #7
 8003d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d38:	498b      	ldr	r1, [pc, #556]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d46:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d03c      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d01f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d819      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003d74:	2b18      	cmp	r3, #24
 8003d76:	d01d      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003d78:	2b18      	cmp	r3, #24
 8003d7a:	d815      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d007      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d84:	e010      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d86:	4b78      	ldr	r3, [pc, #480]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	4a77      	ldr	r2, [pc, #476]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d90:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003d92:	e010      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d98:	3308      	adds	r3, #8
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 fb1c 	bl	80053d8 <RCCEx_PLL2_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003da6:	e006      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003dae:	e002      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dc4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	4966      	ldr	r1, [pc, #408]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ddc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d03e      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e06:	d020      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0c:	d819      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e10:	d01d      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e14:	d815      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003e1a:	2b40      	cmp	r3, #64	@ 0x40
 8003e1c:	d007      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003e1e:	e010      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b51      	ldr	r3, [pc, #324]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	4a50      	ldr	r2, [pc, #320]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e2c:	e010      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e32:	3308      	adds	r3, #8
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 facf 	bl	80053d8 <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e40:	e006      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e48:	e002      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e50:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003e58:	4b43      	ldr	r3, [pc, #268]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e5e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e68:	493f      	ldr	r1, [pc, #252]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e76:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	2100      	movs	r1, #0
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d038      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003e96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea6:	d815      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d017      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb0:	d110      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ebc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ebe:	e00e      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 fa86 	bl	80053d8 <RCCEx_PLL2_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ed2:	e004      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ede:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003ee6:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	491c      	ldr	r1, [pc, #112]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003efe:	e003      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f04:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	2100      	movs	r1, #0
 8003f12:	6039      	str	r1, [r7, #0]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d039      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2a:	2b30      	cmp	r3, #48	@ 0x30
 8003f2c:	d01e      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003f2e:	2b30      	cmp	r3, #48	@ 0x30
 8003f30:	d815      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d002      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d007      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003f3a:	e010      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	4a09      	ldr	r2, [pc, #36]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f46:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f48:	e011      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f4e:	3308      	adds	r3, #8
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fa41 	bl	80053d8 <RCCEx_PLL2_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003f5c:	e007      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f64:	e003      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003f66:	bf00      	nop
 8003f68:	44020c00 	.word	0x44020c00
        break;
 8003f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003f76:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f86:	4908      	ldr	r1, [pc, #32]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003f8e:	e003      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f94:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003f98:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	37a8      	adds	r7, #168	@ 0xa8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa6:	bf00      	nop
 8003fa8:	44020c00 	.word	0x44020c00

08003fac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b08b      	sub	sp, #44	@ 0x2c
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003fb4:	4bae      	ldr	r3, [pc, #696]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003fbe:	4bac      	ldr	r3, [pc, #688]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003fc8:	4ba9      	ldr	r3, [pc, #676]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003fd4:	4ba6      	ldr	r3, [pc, #664]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003fe0:	4ba3      	ldr	r3, [pc, #652]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	08db      	lsrs	r3, r3, #3
 8003fe6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8126 	beq.w	8004250 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d053      	beq.n	80040b2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d86f      	bhi.n	80040f0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d003      	beq.n	800401e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d02b      	beq.n	8004074 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800401c:	e068      	b.n	80040f0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800401e:	4b94      	ldr	r3, [pc, #592]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	08db      	lsrs	r3, r3, #3
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	4a92      	ldr	r2, [pc, #584]	@ (8004274 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	ed97 6a04 	vldr	s12, [r7, #16]
 8004056:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004278 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800405a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004072:	e068      	b.n	8004146 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800427c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004090:	ed97 6a04 	vldr	s12, [r7, #16]
 8004094:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004278 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80040b0:	e049      	b.n	8004146 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040bc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004280 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80040c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80040d2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004278 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80040d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80040ee:	e02a      	b.n	8004146 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040f0:	4b5f      	ldr	r3, [pc, #380]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	4a5e      	ldr	r2, [pc, #376]	@ (8004274 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004100:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004124:	ed97 6a04 	vldr	s12, [r7, #16]
 8004128:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004278 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800412c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004134:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004140:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004144:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004146:	4b4a      	ldr	r3, [pc, #296]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004152:	d121      	bne.n	8004198 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004154:	4b46      	ldr	r3, [pc, #280]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004160:	4b43      	ldr	r3, [pc, #268]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004164:	0a5b      	lsrs	r3, r3, #9
 8004166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004172:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004176:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800417a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800417e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004186:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e006      	b.n	800419e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e002      	b.n	800419e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800419e:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041aa:	d121      	bne.n	80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80041ac:	4b30      	ldr	r3, [pc, #192]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d017      	beq.n	80041e8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80041ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80041d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004202:	d121      	bne.n	8004248 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004204:	4b1a      	ldr	r3, [pc, #104]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004210:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	0e1b      	lsrs	r3, r3, #24
 8004216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004226:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800422a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800422e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004236:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800423e:	e010      	b.n	8004262 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	e00c      	b.n	8004262 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
}
 800424e:	e008      	b.n	8004262 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
}
 8004262:	bf00      	nop
 8004264:	372c      	adds	r7, #44	@ 0x2c
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	44020c00 	.word	0x44020c00
 8004274:	03d09000 	.word	0x03d09000
 8004278:	46000000 	.word	0x46000000
 800427c:	4a742400 	.word	0x4a742400
 8004280:	4bb71b00 	.word	0x4bb71b00

08004284 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004284:	b480      	push	{r7}
 8004286:	b08b      	sub	sp, #44	@ 0x2c
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800428c:	4bae      	ldr	r3, [pc, #696]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004294:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004296:	4bac      	ldr	r3, [pc, #688]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80042a0:	4ba9      	ldr	r3, [pc, #676]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042aa:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80042ac:	4ba6      	ldr	r3, [pc, #664]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80042b8:	4ba3      	ldr	r3, [pc, #652]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8126 	beq.w	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d053      	beq.n	800438a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d86f      	bhi.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d003      	beq.n	80042f6 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d02b      	beq.n	800434c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80042f4:	e068      	b.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042f6:	4b94      	ldr	r3, [pc, #592]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	08db      	lsrs	r3, r3, #3
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	4a92      	ldr	r2, [pc, #584]	@ (800454c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004302:	fa22 f303 	lsr.w	r3, r2, r3
 8004306:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a04 	vldr	s12, [r7, #16]
 800432e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800434a:	e068      	b.n	800441e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004368:	ed97 6a04 	vldr	s12, [r7, #16]
 800436c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004378:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800437c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004384:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004388:	e049      	b.n	800441e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004394:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8004398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80043aa:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80043c6:	e02a      	b.n	800441e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	08db      	lsrs	r3, r3, #3
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	4a5e      	ldr	r2, [pc, #376]	@ (800454c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
 80043d8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fc:	ed97 6a04 	vldr	s12, [r7, #16]
 8004400:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004418:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800441c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800441e:	4b4a      	ldr	r3, [pc, #296]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800442a:	d121      	bne.n	8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800442c:	4b46      	ldr	r3, [pc, #280]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d017      	beq.n	8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004438:	4b43      	ldr	r3, [pc, #268]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	0a5b      	lsrs	r3, r3, #9
 800443e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800444a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800444e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004452:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e006      	b.n	8004476 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e002      	b.n	8004476 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004476:	4b34      	ldr	r3, [pc, #208]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800447e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004482:	d121      	bne.n	80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004484:	4b30      	ldr	r3, [pc, #192]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004490:	4b2d      	ldr	r3, [pc, #180]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80044a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80044aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80044ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044da:	d121      	bne.n	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80044dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d017      	beq.n	8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80044e8:	4b17      	ldr	r3, [pc, #92]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	0e1b      	lsrs	r3, r3, #24
 80044ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80044fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004502:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004516:	e010      	b.n	800453a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
}
 800451e:	e00c      	b.n	800453a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
}
 8004526:	e008      	b.n	800453a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	bf00      	nop
 800453c:	372c      	adds	r7, #44	@ 0x2c
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	44020c00 	.word	0x44020c00
 800454c:	03d09000 	.word	0x03d09000
 8004550:	46000000 	.word	0x46000000
 8004554:	4a742400 	.word	0x4a742400
 8004558:	4bb71b00 	.word	0x4bb71b00

0800455c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	@ 0x30
 8004560:	af00      	add	r7, sp, #0
 8004562:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800456e:	430b      	orrs	r3, r1
 8004570:	d14b      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004572:	4bc4      	ldr	r3, [pc, #784]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004578:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800457e:	4bc1      	ldr	r3, [pc, #772]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d108      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004592:	d104      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004594:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459a:	f000 bf14 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800459e:	4bb9      	ldr	r3, [pc, #740]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ac:	d108      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b4:	d104      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80045b6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045bc:	f000 bf03 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80045c0:	4bb0      	ldr	r3, [pc, #704]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045cc:	d119      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80045ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d4:	d115      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80045d6:	4bab      	ldr	r3, [pc, #684]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80045de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e2:	d30a      	bcc.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80045e4:	4ba7      	ldr	r3, [pc, #668]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ee:	4aa6      	ldr	r2, [pc, #664]	@ (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80045f6:	f000 bee6 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80045fe:	f000 bee2 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004606:	f000 bede 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800460a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004612:	ea52 0301 	orrs.w	r3, r2, r1
 8004616:	f000 838e 	beq.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	2a01      	cmp	r2, #1
 8004620:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004624:	f080 86cc 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800462c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004630:	ea52 0301 	orrs.w	r3, r2, r1
 8004634:	f000 82aa 	beq.w	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800463c:	2a01      	cmp	r2, #1
 800463e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8004642:	f080 86bd 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800464a:	f1a3 0110 	sub.w	r1, r3, #16
 800464e:	ea52 0301 	orrs.w	r3, r2, r1
 8004652:	f000 8681 	beq.w	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800465a:	2a01      	cmp	r2, #1
 800465c:	f173 0310 	sbcs.w	r3, r3, #16
 8004660:	f080 86ae 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004668:	1f19      	subs	r1, r3, #4
 800466a:	ea52 0301 	orrs.w	r3, r2, r1
 800466e:	f000 84b1 	beq.w	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004676:	2a01      	cmp	r2, #1
 8004678:	f173 0304 	sbcs.w	r3, r3, #4
 800467c:	f080 86a0 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004684:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004688:	430b      	orrs	r3, r1
 800468a:	f000 85aa 	beq.w	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800468e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004692:	497e      	ldr	r1, [pc, #504]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004694:	428a      	cmp	r2, r1
 8004696:	f173 0300 	sbcs.w	r3, r3, #0
 800469a:	f080 8691 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800469e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80046a6:	430b      	orrs	r3, r1
 80046a8:	f000 8532 	beq.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80046ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b0:	4977      	ldr	r1, [pc, #476]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80046b2:	428a      	cmp	r2, r1
 80046b4:	f173 0300 	sbcs.w	r3, r3, #0
 80046b8:	f080 8682 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80046c4:	430b      	orrs	r3, r1
 80046c6:	f000 84bc 	beq.w	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80046ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ce:	4971      	ldr	r1, [pc, #452]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80046d0:	428a      	cmp	r2, r1
 80046d2:	f173 0300 	sbcs.w	r3, r3, #0
 80046d6:	f080 8673 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046de:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80046e2:	430b      	orrs	r3, r1
 80046e4:	f000 85f2 	beq.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80046e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ec:	496a      	ldr	r1, [pc, #424]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80046ee:	428a      	cmp	r2, r1
 80046f0:	f173 0300 	sbcs.w	r3, r3, #0
 80046f4:	f080 8664 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046fc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004700:	430b      	orrs	r3, r1
 8004702:	f000 81e5 	beq.w	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800470a:	4964      	ldr	r1, [pc, #400]	@ (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 800470c:	428a      	cmp	r2, r1
 800470e:	f173 0300 	sbcs.w	r3, r3, #0
 8004712:	f080 8655 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800471a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800471e:	430b      	orrs	r3, r1
 8004720:	f000 83cc 	beq.w	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004728:	495d      	ldr	r1, [pc, #372]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800472a:	428a      	cmp	r2, r1
 800472c:	f173 0300 	sbcs.w	r3, r3, #0
 8004730:	f080 8646 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004738:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800473c:	430b      	orrs	r3, r1
 800473e:	f000 8331 	beq.w	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004746:	4957      	ldr	r1, [pc, #348]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004748:	428a      	cmp	r2, r1
 800474a:	f173 0300 	sbcs.w	r3, r3, #0
 800474e:	f080 8637 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004756:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800475a:	430b      	orrs	r3, r1
 800475c:	f000 82bb 	beq.w	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004764:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004768:	f173 0300 	sbcs.w	r3, r3, #0
 800476c:	f080 8628 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004774:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004778:	430b      	orrs	r3, r1
 800477a:	f000 826d 	beq.w	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800477e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004782:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004786:	428a      	cmp	r2, r1
 8004788:	f173 0300 	sbcs.w	r3, r3, #0
 800478c:	f080 8618 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004794:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004798:	430b      	orrs	r3, r1
 800479a:	f000 821e 	beq.w	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800479e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a2:	f242 0101 	movw	r1, #8193	@ 0x2001
 80047a6:	428a      	cmp	r2, r1
 80047a8:	f173 0300 	sbcs.w	r3, r3, #0
 80047ac:	f080 8608 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80047b8:	430b      	orrs	r3, r1
 80047ba:	f000 8137 	beq.w	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80047be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047c2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80047c6:	428a      	cmp	r2, r1
 80047c8:	f173 0300 	sbcs.w	r3, r3, #0
 80047cc:	f080 85f8 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d4:	1f11      	subs	r1, r2, #4
 80047d6:	430b      	orrs	r3, r1
 80047d8:	f000 80d2 	beq.w	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80047dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047e0:	2a05      	cmp	r2, #5
 80047e2:	f173 0300 	sbcs.w	r3, r3, #0
 80047e6:	f080 85eb 	bcs.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ee:	1e51      	subs	r1, r2, #1
 80047f0:	430b      	orrs	r3, r1
 80047f2:	d006      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80047f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f8:	1e91      	subs	r1, r2, #2
 80047fa:	430b      	orrs	r3, r1
 80047fc:	d06c      	beq.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80047fe:	f000 bddf 	b.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004802:	4b20      	ldr	r3, [pc, #128]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800480e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004814:	f7fe fd7a 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8004818:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800481a:	f000 bdd4 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800481e:	4b19      	ldr	r3, [pc, #100]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800482a:	d10a      	bne.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	2b01      	cmp	r3, #1
 8004830:	d107      	bne.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004832:	f107 030c 	add.w	r3, r7, #12
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fd24 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004840:	e048      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	2b03      	cmp	r3, #3
 8004852:	d109      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	08db      	lsrs	r3, r3, #3
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004866:	e035      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004868:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004874:	d11c      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	2b04      	cmp	r3, #4
 800487a:	d119      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800487e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004880:	e028      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004882:	bf00      	nop
 8004884:	44020c00 	.word	0x44020c00
 8004888:	016e3600 	.word	0x016e3600
 800488c:	20000001 	.word	0x20000001
 8004890:	10000001 	.word	0x10000001
 8004894:	08000001 	.word	0x08000001
 8004898:	04000001 	.word	0x04000001
 800489c:	00200001 	.word	0x00200001
 80048a0:	00040001 	.word	0x00040001
 80048a4:	00020001 	.word	0x00020001
 80048a8:	03d09000 	.word	0x03d09000
 80048ac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80048b0:	4b9f      	ldr	r3, [pc, #636]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d106      	bne.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d103      	bne.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80048c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ca:	e003      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048d0:	f000 bd79 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048d4:	f000 bd77 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80048d8:	4b95      	ldr	r3, [pc, #596]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048e2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80048e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ea:	f7fe fcf9 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 80048ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80048f0:	f000 bd69 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80048f4:	4b8e      	ldr	r3, [pc, #568]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004900:	d10a      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	2b08      	cmp	r3, #8
 8004906:	d107      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004908:	f107 030c 	add.w	r3, r7, #12
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff fcb9 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004916:	e031      	b.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004918:	4b85      	ldr	r3, [pc, #532]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d10c      	bne.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	2b18      	cmp	r3, #24
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800492a:	4b81      	ldr	r3, [pc, #516]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	4a7f      	ldr	r2, [pc, #508]	@ (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004936:	fa22 f303 	lsr.w	r3, r2, r3
 800493a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800493c:	e01e      	b.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800493e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494a:	d105      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	2b20      	cmp	r3, #32
 8004950:	d102      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004952:	4b79      	ldr	r3, [pc, #484]	@ (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004956:	e011      	b.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004958:	4b75      	ldr	r3, [pc, #468]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800495a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	d106      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004968:	2b28      	cmp	r3, #40	@ 0x28
 800496a:	d103      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 800496c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004972:	e003      	b.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004978:	f000 bd25 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800497c:	f000 bd23 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004980:	4b6b      	ldr	r3, [pc, #428]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004986:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800498a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d104      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004992:	f7fe fca5 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004996:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004998:	f000 bd15 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800499c:	4b64      	ldr	r3, [pc, #400]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049a8:	d10a      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d107      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049b0:	f107 030c 	add.w	r3, r7, #12
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fc65 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049be:	e033      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80049c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049d2:	4b57      	ldr	r3, [pc, #348]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	08db      	lsrs	r3, r3, #3
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	4a55      	ldr	r2, [pc, #340]	@ (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e4:	e020      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80049e6:	4b52      	ldr	r3, [pc, #328]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f2:	d106      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fa:	d102      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80049fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a00:	e012      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004a02:	4b4b      	ldr	r3, [pc, #300]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a16:	d103      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004a18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1e:	e003      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a24:	f000 bccf 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a28:	f000 bccd 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a2c:	4b40      	ldr	r3, [pc, #256]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a32:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004a3e:	f7fe fc7b 	bl	8003338 <HAL_RCC_GetPCLK3Freq>
 8004a42:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a44:	f000 bcbf 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a4e:	d108      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a50:	f107 030c 	add.w	r3, r7, #12
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fc15 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a5e:	f000 bcb2 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004a62:	4b33      	ldr	r3, [pc, #204]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d10d      	bne.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a74:	d109      	bne.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a76:	4b2e      	ldr	r3, [pc, #184]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	08db      	lsrs	r3, r3, #3
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	4a2c      	ldr	r2, [pc, #176]	@ (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004a82:	fa22 f303 	lsr.w	r3, r2, r3
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a88:	e020      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004a8a:	4b29      	ldr	r3, [pc, #164]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a9e:	d102      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004aa0:	4b25      	ldr	r3, [pc, #148]	@ (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa4:	e012      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004aa6:	4b22      	ldr	r3, [pc, #136]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004aba:	d103      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac2:	e003      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ac8:	f000 bc7d 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004acc:	f000 bc7b 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004ad0:	4b17      	ldr	r3, [pc, #92]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004ae2:	f7fe fbe1 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 8004ae6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004ae8:	f000 bc6d 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d104      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fe faad 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8004af6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004af8:	f000 bc65 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d108      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b02:	f107 030c 	add.w	r3, r7, #12
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fbbc 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b10:	f000 bc59 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004b14:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b20:	d10e      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004b28:	4b04      	ldr	r3, [pc, #16]	@ (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2c:	e02c      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004b2e:	bf00      	nop
 8004b30:	44020c00 	.word	0x44020c00
 8004b34:	03d09000 	.word	0x03d09000
 8004b38:	003d0900 	.word	0x003d0900
 8004b3c:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004b40:	4b95      	ldr	r3, [pc, #596]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d10c      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d109      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b52:	4b91      	ldr	r3, [pc, #580]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	08db      	lsrs	r3, r3, #3
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	4a8f      	ldr	r2, [pc, #572]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b64:	e010      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004b66:	4b8c      	ldr	r3, [pc, #560]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	2b05      	cmp	r3, #5
 8004b78:	d102      	bne.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004b7a:	4b89      	ldr	r3, [pc, #548]	@ (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b84:	f000 bc1f 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b88:	f000 bc1d 	b.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004b8c:	4b82      	ldr	r3, [pc, #520]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004b98:	4b7f      	ldr	r3, [pc, #508]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004bac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	e011      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004bb4:	4b78      	ldr	r3, [pc, #480]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d103      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004bca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd0:	e002      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004bd6:	e3f6      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004bd8:	e3f5      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004bda:	4b6f      	ldr	r3, [pc, #444]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004be4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe fb78 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004bf2:	e3e8      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fb3f 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c0a:	e3dc      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004c0c:	4b62      	ldr	r3, [pc, #392]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d10d      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c1e:	d109      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c20:	4b5d      	ldr	r3, [pc, #372]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	08db      	lsrs	r3, r3, #3
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c32:	e010      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004c34:	4b58      	ldr	r3, [pc, #352]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c40:	d106      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c48:	d102      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004c4a:	4b55      	ldr	r3, [pc, #340]	@ (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c4e:	e002      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c54:	e3b7      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c56:	e3b6      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004c58:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c5e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004c62:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c6a:	f7fe fb39 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004c6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c70:	e3a9      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c78:	d107      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c7a:	f107 030c 	add.w	r3, r7, #12
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fb00 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c88:	e39d      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004c8a:	4b43      	ldr	r3, [pc, #268]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d10d      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c9c:	d109      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	08db      	lsrs	r3, r3, #3
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004caa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb0:	e010      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004cb2:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cbe:	d106      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cc6:	d102      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004cc8:	4b35      	ldr	r3, [pc, #212]	@ (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cd2:	e378      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004cd4:	e377      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004cd6:	4b30      	ldr	r3, [pc, #192]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cdc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004ce0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fe fafa 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004cec:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004cee:	e36a      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cf8:	f107 030c 	add.w	r3, r7, #12
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff fac1 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d06:	e35e      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004d08:	4b23      	ldr	r3, [pc, #140]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d10d      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d1a:	d109      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	08db      	lsrs	r3, r3, #3
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d2e:	e34a      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d34:	e347      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004d36:	4b18      	ldr	r3, [pc, #96]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d3c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004d48:	f7fe faf6 	bl	8003338 <HAL_RCC_GetPCLK3Freq>
 8004d4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d4e:	e33a      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d56:	d107      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d58:	f107 030c 	add.w	r3, r7, #12
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fa91 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d66:	e32e      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d10d      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d7c:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	4a05      	ldr	r2, [pc, #20]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d8e:	e31a      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d94:	e317      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d96:	bf00      	nop
 8004d98:	44020c00 	.word	0x44020c00
 8004d9c:	03d09000 	.word	0x03d09000
 8004da0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004da4:	4b9b      	ldr	r3, [pc, #620]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004da6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004daa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004db6:	d044      	beq.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004dbe:	d879      	bhi.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc6:	d02d      	beq.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dce:	d871      	bhi.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dd6:	d017      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dde:	d869      	bhi.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dec:	d004      	beq.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004dee:	e061      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004df0:	f7fe faa2 	bl	8003338 <HAL_RCC_GetPCLK3Freq>
 8004df4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004df6:	e060      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff fa41 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e06:	e058      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e08:	4b82      	ldr	r3, [pc, #520]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d103      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e1c:	e04d      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e22:	e04a      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004e24:	4b7b      	ldr	r3, [pc, #492]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e32:	d103      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004e34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e3a:	e03e      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e40:	e03b      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e42:	4b74      	ldr	r3, [pc, #464]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e48:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e4e:	4b71      	ldr	r3, [pc, #452]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e60:	4b6c      	ldr	r3, [pc, #432]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	08db      	lsrs	r3, r3, #3
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e72:	e01e      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e74:	4b67      	ldr	r3, [pc, #412]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e80:	d106      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d102      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e8a:	4b64      	ldr	r3, [pc, #400]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e8e:	e010      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e90:	4b60      	ldr	r3, [pc, #384]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e9c:	d106      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ea4:	d102      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004eb0:	e003      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004eb2:	e002      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004eb8:	bf00      	nop
          }
        }
        break;
 8004eba:	e284      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004ebc:	4b55      	ldr	r3, [pc, #340]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ebe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ec2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ece:	d044      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ed6:	d879      	bhi.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ede:	d02d      	beq.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ee6:	d871      	bhi.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eee:	d017      	beq.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ef6:	d869      	bhi.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f04:	d004      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004f06:	e061      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7fe f9ea 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004f0e:	e060      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f10:	f107 030c 	add.w	r3, r7, #12
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff f9b5 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f1e:	e058      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f20:	4b3c      	ldr	r3, [pc, #240]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d103      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f34:	e04d      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f3a:	e04a      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004f3c:	4b35      	ldr	r3, [pc, #212]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f4a:	d103      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004f4c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f52:	e03e      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f58:	e03b      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f60:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f66:	4b2b      	ldr	r3, [pc, #172]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f78:	4b26      	ldr	r3, [pc, #152]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	08db      	lsrs	r3, r3, #3
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	4a25      	ldr	r2, [pc, #148]	@ (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f8a:	e01e      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f8c:	4b21      	ldr	r3, [pc, #132]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fa6:	e010      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fbc:	d102      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004fbe:	4b18      	ldr	r3, [pc, #96]	@ (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc2:	e002      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004fc8:	e003      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004fca:	e002      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fd0:	bf00      	nop
          }
        }
        break;
 8004fd2:	e1f8      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fde:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fec:	d105      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004ff8:	e1e5      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005000:	d110      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005002:	f107 0318 	add.w	r3, r7, #24
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe ffd0 	bl	8003fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005010:	e1d9      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005012:	bf00      	nop
 8005014:	44020c00 	.word	0x44020c00
 8005018:	03d09000 	.word	0x03d09000
 800501c:	003d0900 	.word	0x003d0900
 8005020:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800502a:	d107      	bne.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff f927 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800503a:	e1c4      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005040:	e1c1      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005042:	4b9d      	ldr	r3, [pc, #628]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	2b04      	cmp	r3, #4
 8005052:	d859      	bhi.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8005054:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005071 	.word	0x08005071
 8005060:	08005081 	.word	0x08005081
 8005064:	08005109 	.word	0x08005109
 8005068:	08005091 	.word	0x08005091
 800506c:	08005097 	.word	0x08005097
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005070:	f107 0318 	add.w	r3, r7, #24
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe ff99 	bl	8003fac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800507e:	e046      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005080:	f107 030c 	add.w	r3, r7, #12
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff f8fd 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800508e:	e03e      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005090:	4b8a      	ldr	r3, [pc, #552]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005094:	e03b      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005096:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800509c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050a2:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050b4:	4b80      	ldr	r3, [pc, #512]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	4a80      	ldr	r2, [pc, #512]	@ (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050c6:	e01e      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050c8:	4b7b      	ldr	r3, [pc, #492]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d4:	d106      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050dc:	d102      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050de:	4b79      	ldr	r3, [pc, #484]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80050e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e2:	e010      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050e4:	4b74      	ldr	r3, [pc, #464]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050f0:	d106      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050f8:	d102      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80050fa:	4b73      	ldr	r3, [pc, #460]	@ (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80050fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fe:	e002      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005104:	e003      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8005106:	e002      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800510c:	bf00      	nop
          }
        }
        break;
 800510e:	e15a      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005110:	4b69      	ldr	r3, [pc, #420]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800511a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	2b20      	cmp	r3, #32
 8005120:	d022      	beq.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	2b20      	cmp	r3, #32
 8005126:	d858      	bhi.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	2b18      	cmp	r3, #24
 800512c:	d019      	beq.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	2b18      	cmp	r3, #24
 8005132:	d852      	bhi.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	2b08      	cmp	r3, #8
 800513e:	d008      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005140:	e04b      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005142:	f107 0318 	add.w	r3, r7, #24
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe ff30 	bl	8003fac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005150:	e046      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005152:	f107 030c 	add.w	r3, r7, #12
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff f894 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005160:	e03e      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005162:	4b56      	ldr	r3, [pc, #344]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005164:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005166:	e03b      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005168:	4b53      	ldr	r3, [pc, #332]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800516a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800516e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005174:	4b50      	ldr	r3, [pc, #320]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d10c      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005186:	4b4c      	ldr	r3, [pc, #304]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	4a4b      	ldr	r2, [pc, #300]	@ (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005198:	e01e      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800519a:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a6:	d106      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ae:	d102      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80051b0:	4b44      	ldr	r3, [pc, #272]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051b4:	e010      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051b6:	4b40      	ldr	r3, [pc, #256]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051c2:	d106      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ca:	d102      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80051cc:	4b3e      	ldr	r3, [pc, #248]	@ (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d0:	e002      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80051d6:	e003      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80051d8:	e002      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051de:	bf00      	nop
          }
        }
        break;
 80051e0:	e0f1      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80051e2:	4b35      	ldr	r3, [pc, #212]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051e8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f4:	d023      	beq.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fc:	d858      	bhi.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	2bc0      	cmp	r3, #192	@ 0xc0
 8005202:	d019      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005206:	2bc0      	cmp	r3, #192	@ 0xc0
 8005208:	d852      	bhi.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d008      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8005216:	e04b      	b.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005218:	f107 0318 	add.w	r3, r7, #24
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe fec5 	bl	8003fac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005226:	e046      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005228:	f107 030c 	add.w	r3, r7, #12
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff f829 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005236:	e03e      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005238:	4b20      	ldr	r3, [pc, #128]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800523a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800523c:	e03b      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800523e:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005244:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800524a:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d10c      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800525c:	4b16      	ldr	r3, [pc, #88]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	4a16      	ldr	r2, [pc, #88]	@ (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526e:	e01e      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005270:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800527c:	d106      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005284:	d102      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005286:	4b0f      	ldr	r3, [pc, #60]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800528a:	e010      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005298:	d106      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052a0:	d102      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a6:	e002      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80052ac:	e003      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80052ae:	e002      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80052b4:	bf00      	nop
          }
        }
        break;
 80052b6:	e086      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80052b8:	44020c00 	.word	0x44020c00
 80052bc:	00bb8000 	.word	0x00bb8000
 80052c0:	03d09000 	.word	0x03d09000
 80052c4:	003d0900 	.word	0x003d0900
 80052c8:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80052cc:	4b40      	ldr	r3, [pc, #256]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80052d8:	4b3d      	ldr	r3, [pc, #244]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e4:	d105      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80052ec:	4b39      	ldr	r3, [pc, #228]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f0:	e031      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80052f2:	4b37      	ldr	r3, [pc, #220]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052fe:	d10a      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005302:	2b10      	cmp	r3, #16
 8005304:	d107      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005306:	f107 0318 	add.w	r3, r7, #24
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fe4e 	bl	8003fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005314:	e01f      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005316:	4b2e      	ldr	r3, [pc, #184]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b02      	cmp	r3, #2
 8005322:	d106      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	2b20      	cmp	r3, #32
 8005328:	d103      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005330:	e011      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005332:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800533c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005340:	d106      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	2b30      	cmp	r3, #48	@ 0x30
 8005346:	d103      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005348:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005354:	e037      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005356:	e036      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005358:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800535a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800535e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005362:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	2b10      	cmp	r3, #16
 8005368:	d107      	bne.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800536a:	f107 0318 	add.w	r3, r7, #24
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe fe1c 	bl	8003fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8005378:	e025      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800537a:	4b15      	ldr	r3, [pc, #84]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005386:	d10a      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538a:	2b20      	cmp	r3, #32
 800538c:	d107      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe ff76 	bl	8004284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539c:	e00f      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800539e:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	2b30      	cmp	r3, #48	@ 0x30
 80053b0:	d102      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80053b2:	4b08      	ldr	r3, [pc, #32]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80053be:	e002      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053c4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3730      	adds	r7, #48	@ 0x30
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	44020c00 	.word	0x44020c00
 80053d4:	02dc6c00 	.word	0x02dc6c00

080053d8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80053e0:	4b48      	ldr	r3, [pc, #288]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a47      	ldr	r2, [pc, #284]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80053e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ec:	f7fb fe68 	bl	80010c0 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053f2:	e008      	b.n	8005406 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053f4:	f7fb fe64 	bl	80010c0 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e07a      	b.n	80054fc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005406:	4b3f      	ldr	r3, [pc, #252]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005412:	4b3c      	ldr	r3, [pc, #240]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005416:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6811      	ldr	r1, [r2, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6852      	ldr	r2, [r2, #4]
 8005426:	0212      	lsls	r2, r2, #8
 8005428:	430a      	orrs	r2, r1
 800542a:	4936      	ldr	r1, [pc, #216]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	3b01      	subs	r3, #1
 8005436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	3b01      	subs	r3, #1
 8005440:	025b      	lsls	r3, r3, #9
 8005442:	b29b      	uxth	r3, r3
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	3b01      	subs	r3, #1
 800545a:	061b      	lsls	r3, r3, #24
 800545c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005460:	4928      	ldr	r1, [pc, #160]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005466:	4b27      	ldr	r3, [pc, #156]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	f023 020c 	bic.w	r2, r3, #12
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	4924      	ldr	r1, [pc, #144]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005478:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	f023 0220 	bic.w	r2, r3, #32
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	491f      	ldr	r1, [pc, #124]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800548a:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 800548c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	491c      	ldr	r1, [pc, #112]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005498:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 800549e:	f023 0310 	bic.w	r3, r3, #16
 80054a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80054a4:	4b17      	ldr	r3, [pc, #92]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6a12      	ldr	r2, [r2, #32]
 80054b4:	00d2      	lsls	r2, r2, #3
 80054b6:	4913      	ldr	r1, [pc, #76]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80054bc:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	4a10      	ldr	r2, [pc, #64]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80054c2:	f043 0310 	orr.w	r3, r3, #16
 80054c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80054c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80054ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054d4:	f7fb fdf4 	bl	80010c0 <HAL_GetTick>
 80054d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054da:	e008      	b.n	80054ee <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054dc:	f7fb fdf0 	bl	80010c0 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e006      	b.n	80054fc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <RCCEx_PLL2_Config+0x12c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0

}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	44020c00 	.word	0x44020c00

08005508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e042      	b.n	80055a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fb facd 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	@ 0x24
 8005536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fd52 	bl	8005ffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fbd1 	bl	8005d00 <UART_SetConfig>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e01b      	b.n	80055a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fdd1 	bl	8006140 <UART_CheckIdleState>
 800559e:	4603      	mov	r3, r0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	@ 0x28
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055be:	2b20      	cmp	r3, #32
 80055c0:	f040 808b 	bne.w	80056da <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_UART_Transmit+0x28>
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e083      	b.n	80056dc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055de:	2b80      	cmp	r3, #128	@ 0x80
 80055e0:	d107      	bne.n	80055f2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055f0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2221      	movs	r2, #33	@ 0x21
 80055fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005602:	f7fb fd5d 	bl	80010c0 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005620:	d108      	bne.n	8005634 <HAL_UART_Transmit+0x8c>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e003      	b.n	800563c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800563c:	e030      	b.n	80056a0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	2180      	movs	r1, #128	@ 0x80
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fe23 	bl	8006294 <UART_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e03d      	b.n	80056dc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005674:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	3302      	adds	r3, #2
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	e007      	b.n	800568e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1c8      	bne.n	800563e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2140      	movs	r1, #64	@ 0x40
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fdec 	bl	8006294 <UART_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e006      	b.n	80056dc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e000      	b.n	80056dc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b0ae      	sub	sp, #184	@ 0xb8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800570a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800570e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005712:	4013      	ands	r3, r2
 8005714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11b      	bne.n	8005758 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d015      	beq.n	8005758 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800572c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800573c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d009      	beq.n	8005758 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 82ac 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
      }
      return;
 8005756:	e2a6      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80fd 	beq.w	800595c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005762:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005766:	4b7a      	ldr	r3, [pc, #488]	@ (8005950 <HAL_UART_IRQHandler+0x26c>)
 8005768:	4013      	ands	r3, r2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800576e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005772:	4b78      	ldr	r3, [pc, #480]	@ (8005954 <HAL_UART_IRQHandler+0x270>)
 8005774:	4013      	ands	r3, r2
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80f0 	beq.w	800595c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800577c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d011      	beq.n	80057ac <HAL_UART_IRQHandler+0xc8>
 8005788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800578c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2201      	movs	r2, #1
 800579a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <HAL_UART_IRQHandler+0xf8>
 80057b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2202      	movs	r2, #2
 80057ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d2:	f043 0204 	orr.w	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d011      	beq.n	800580c <HAL_UART_IRQHandler+0x128>
 80057e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2204      	movs	r2, #4
 80057fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005802:	f043 0202 	orr.w	r2, r3, #2
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800580c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d017      	beq.n	8005848 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005824:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005828:	4b49      	ldr	r3, [pc, #292]	@ (8005950 <HAL_UART_IRQHandler+0x26c>)
 800582a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2208      	movs	r2, #8
 8005836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	f043 0208 	orr.w	r2, r3, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800584c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005850:	2b00      	cmp	r3, #0
 8005852:	d012      	beq.n	800587a <HAL_UART_IRQHandler+0x196>
 8005854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005858:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00c      	beq.n	800587a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8212 	beq.w	8005caa <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d013      	beq.n	80058ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d105      	bne.n	80058aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800589e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b40      	cmp	r3, #64	@ 0x40
 80058d0:	d005      	beq.n	80058de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02e      	beq.n	800593c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fd45 	bl	800636e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ee:	2b40      	cmp	r3, #64	@ 0x40
 80058f0:	d120      	bne.n	8005934 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d017      	beq.n	800592c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005902:	4a15      	ldr	r2, [pc, #84]	@ (8005958 <HAL_UART_IRQHandler+0x274>)
 8005904:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800590c:	4618      	mov	r0, r3
 800590e:	f7fb fdef 	bl	80014f0 <HAL_DMA_Abort_IT>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d019      	beq.n	800594c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800591e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005926:	4610      	mov	r0, r2
 8005928:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592a:	e00f      	b.n	800594c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9d1 	bl	8005cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005932:	e00b      	b.n	800594c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f9cd 	bl	8005cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593a:	e007      	b.n	800594c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f9c9 	bl	8005cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800594a:	e1ae      	b.n	8005caa <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	bf00      	nop
    return;
 800594e:	e1ac      	b.n	8005caa <HAL_UART_IRQHandler+0x5c6>
 8005950:	10000001 	.word	0x10000001
 8005954:	04000120 	.word	0x04000120
 8005958:	0800643b 	.word	0x0800643b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005960:	2b01      	cmp	r3, #1
 8005962:	f040 8142 	bne.w	8005bea <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 813b 	beq.w	8005bea <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8134 	beq.w	8005bea <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2210      	movs	r2, #16
 8005988:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005994:	2b40      	cmp	r3, #64	@ 0x40
 8005996:	f040 80aa 	bne.w	8005aee <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80059a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8084 	beq.w	8005aba <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059b8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80059bc:	429a      	cmp	r2, r3
 80059be:	d27c      	bcs.n	8005aba <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80059c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d2:	2b81      	cmp	r3, #129	@ 0x81
 80059d4:	d060      	beq.n	8005a98 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059fc:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e2      	bne.n	80059d6 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005a34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e3      	bne.n	8005a10 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a66:	f023 0310 	bic.w	r3, r3, #16
 8005a6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e4      	bne.n	8005a56 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fb fcb0 	bl	80013f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f918 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005ab8:	e0f9      	b.n	8005cae <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ac0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	f040 80f2 	bne.w	8005cae <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	2b81      	cmp	r3, #129	@ 0x81
 8005ad4:	f040 80eb 	bne.w	8005cae <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8fe 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
      return;
 8005aec:	e0df      	b.n	8005cae <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80d1 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8005b10:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80cc 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e4      	bne.n	8005b1a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b66:	f023 0301 	bic.w	r3, r3, #1
 8005b6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005b78:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e1      	bne.n	8005b50 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f023 0310 	bic.w	r3, r3, #16
 8005bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	69b9      	ldr	r1, [r7, #24]
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e4      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bdc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f880 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be8:	e063      	b.n	8005cb2 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <HAL_UART_IRQHandler+0x530>
 8005bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fc51 	bl	80064b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c12:	e051      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d014      	beq.n	8005c4a <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d03a      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
    }
    return;
 8005c48:	e035      	b.n	8005cb6 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <HAL_UART_IRQHandler+0x586>
 8005c56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fbfb 	bl	800645e <UART_EndTransmit_IT>
    return;
 8005c68:	e026      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <HAL_UART_IRQHandler+0x5a6>
 8005c76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fc2a 	bl	80064dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c88:	e016      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
 8005c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da0c      	bge.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fc12 	bl	80064c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ca4:	e008      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005ca6:	bf00      	nop
 8005ca8:	e006      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005caa:	bf00      	nop
 8005cac:	e004      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005cae:	bf00      	nop
 8005cb0:	e002      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005cb6:	bf00      	nop
  }
}
 8005cb8:	37b8      	adds	r7, #184	@ 0xb8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d04:	b094      	sub	sp, #80	@ 0x50
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	498a      	ldr	r1, [pc, #552]	@ (8005f58 <UART_SetConfig+0x258>)
 8005d30:	4019      	ands	r1, r3
 8005d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d48:	68d9      	ldr	r1, [r3, #12]
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	ea40 0301 	orr.w	r3, r0, r1
 8005d52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f5c <UART_SetConfig+0x25c>)
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d004      	beq.n	8005d6e <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d66:	6a1a      	ldr	r2, [r3, #32]
 8005d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005d78:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d82:	430b      	orrs	r3, r1
 8005d84:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	f023 000f 	bic.w	r0, r3, #15
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	ea40 0301 	orr.w	r3, r0, r1
 8005d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b6f      	ldr	r3, [pc, #444]	@ (8005f60 <UART_SetConfig+0x260>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d102      	bne.n	8005dae <UART_SetConfig+0xae>
 8005da8:	2301      	movs	r3, #1
 8005daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dac:	e01a      	b.n	8005de4 <UART_SetConfig+0xe4>
 8005dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b6c      	ldr	r3, [pc, #432]	@ (8005f64 <UART_SetConfig+0x264>)
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d102      	bne.n	8005dbe <UART_SetConfig+0xbe>
 8005db8:	2302      	movs	r3, #2
 8005dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dbc:	e012      	b.n	8005de4 <UART_SetConfig+0xe4>
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b69      	ldr	r3, [pc, #420]	@ (8005f68 <UART_SetConfig+0x268>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d102      	bne.n	8005dce <UART_SetConfig+0xce>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dcc:	e00a      	b.n	8005de4 <UART_SetConfig+0xe4>
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b62      	ldr	r3, [pc, #392]	@ (8005f5c <UART_SetConfig+0x25c>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d103      	bne.n	8005de0 <UART_SetConfig+0xe0>
 8005dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dde:	e001      	b.n	8005de4 <UART_SetConfig+0xe4>
 8005de0:	2300      	movs	r3, #0
 8005de2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f5c <UART_SetConfig+0x25c>)
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d171      	bne.n	8005ed2 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df0:	2200      	movs	r2, #0
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005df6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005dfa:	f7fe fbaf 	bl	800455c <HAL_RCCEx_GetPeriphCLKFreq>
 8005dfe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80e2 	beq.w	8005fcc <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	4a57      	ldr	r2, [pc, #348]	@ (8005f6c <UART_SetConfig+0x26c>)
 8005e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	4413      	add	r3, r2
 8005e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d305      	bcc.n	8005e38 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d903      	bls.n	8005e40 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e3e:	e0c5      	b.n	8005fcc <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e42:	2200      	movs	r2, #0
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	61fa      	str	r2, [r7, #28]
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	4a47      	ldr	r2, [pc, #284]	@ (8005f6c <UART_SetConfig+0x26c>)
 8005e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2200      	movs	r2, #0
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	617a      	str	r2, [r7, #20]
 8005e5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e62:	f7fa fa19 	bl	8000298 <__aeabi_uldivmod>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	020b      	lsls	r3, r1, #8
 8005e78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e7c:	0202      	lsls	r2, r0, #8
 8005e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e80:	6849      	ldr	r1, [r1, #4]
 8005e82:	0849      	lsrs	r1, r1, #1
 8005e84:	2000      	movs	r0, #0
 8005e86:	460c      	mov	r4, r1
 8005e88:	4605      	mov	r5, r0
 8005e8a:	eb12 0804 	adds.w	r8, r2, r4
 8005e8e:	eb43 0905 	adc.w	r9, r3, r5
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	60fa      	str	r2, [r7, #12]
 8005e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	f7fa f9f8 	bl	8000298 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4613      	mov	r3, r2
 8005eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d308      	bcc.n	8005eca <UART_SetConfig+0x1ca>
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ebe:	d204      	bcs.n	8005eca <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ec6:	60da      	str	r2, [r3, #12]
 8005ec8:	e080      	b.n	8005fcc <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ed0:	e07c      	b.n	8005fcc <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eda:	d149      	bne.n	8005f70 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ede:	2200      	movs	r2, #0
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ee8:	f7fe fb38 	bl	800455c <HAL_RCCEx_GetPeriphCLKFreq>
 8005eec:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d06b      	beq.n	8005fcc <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f6c <UART_SetConfig+0x26c>)
 8005efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f06:	005a      	lsls	r2, r3, #1
 8005f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	441a      	add	r2, r3
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	d916      	bls.n	8005f4e <UART_SetConfig+0x24e>
 8005f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f26:	d212      	bcs.n	8005f4e <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f023 030f 	bic.w	r3, r3, #15
 8005f30:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005f40:	4313      	orrs	r3, r2
 8005f42:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005f4a:	60da      	str	r2, [r3, #12]
 8005f4c:	e03e      	b.n	8005fcc <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f54:	e03a      	b.n	8005fcc <UART_SetConfig+0x2cc>
 8005f56:	bf00      	nop
 8005f58:	cfff69f3 	.word	0xcfff69f3
 8005f5c:	44002400 	.word	0x44002400
 8005f60:	40013800 	.word	0x40013800
 8005f64:	40004400 	.word	0x40004400
 8005f68:	40004800 	.word	0x40004800
 8005f6c:	080075f4 	.word	0x080075f4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f72:	2200      	movs	r2, #0
 8005f74:	469a      	mov	sl, r3
 8005f76:	4693      	mov	fp, r2
 8005f78:	4650      	mov	r0, sl
 8005f7a:	4659      	mov	r1, fp
 8005f7c:	f7fe faee 	bl	800455c <HAL_RCCEx_GetPeriphCLKFreq>
 8005f80:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d021      	beq.n	8005fcc <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff8 <UART_SetConfig+0x2f8>)
 8005f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f96:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	441a      	add	r2, r3
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fae:	2b0f      	cmp	r3, #15
 8005fb0:	d909      	bls.n	8005fc6 <UART_SetConfig+0x2c6>
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fb8:	d205      	bcs.n	8005fc6 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60da      	str	r2, [r3, #12]
 8005fc4:	e002      	b.n	8005fcc <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	2200      	movs	r2, #0
 8005fe0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005fe8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3750      	adds	r7, #80	@ 0x50
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ff6:	bf00      	nop
 8005ff8:	080075f4 	.word	0x080075f4

08005ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01a      	beq.n	8006112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060fa:	d10a      	bne.n	8006112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b098      	sub	sp, #96	@ 0x60
 8006144:	af02      	add	r7, sp, #8
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006150:	f7fa ffb6 	bl	80010c0 <HAL_GetTick>
 8006154:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b08      	cmp	r3, #8
 8006162:	d12f      	bne.n	80061c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006164:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800616c:	2200      	movs	r2, #0
 800616e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f88e 	bl	8006294 <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d022      	beq.n	80061c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800618c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006192:	653b      	str	r3, [r7, #80]	@ 0x50
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800619c:	647b      	str	r3, [r7, #68]	@ 0x44
 800619e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e6      	bne.n	800617e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e063      	b.n	800628c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d149      	bne.n	8006266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061da:	2200      	movs	r2, #0
 80061dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f857 	bl	8006294 <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d03c      	beq.n	8006266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	623b      	str	r3, [r7, #32]
   return(result);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620a:	633b      	str	r3, [r7, #48]	@ 0x30
 800620c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	60fb      	str	r3, [r7, #12]
   return(result);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3308      	adds	r3, #8
 800623c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800623e:	61fa      	str	r2, [r7, #28]
 8006240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	69b9      	ldr	r1, [r7, #24]
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	617b      	str	r3, [r7, #20]
   return(result);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e5      	bne.n	800621e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e012      	b.n	800628c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3758      	adds	r7, #88	@ 0x58
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a4:	e04f      	b.n	8006346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d04b      	beq.n	8006346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ae:	f7fa ff07 	bl	80010c0 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d302      	bcc.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e04e      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d037      	beq.n	8006346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b80      	cmp	r3, #128	@ 0x80
 80062da:	d034      	beq.n	8006346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b40      	cmp	r3, #64	@ 0x40
 80062e0:	d031      	beq.n	8006346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d110      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2208      	movs	r2, #8
 80062f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f838 	bl	800636e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2208      	movs	r2, #8
 8006302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e029      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800631c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006320:	d111      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800632a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f81e 	bl	800636e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e00f      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4013      	ands	r3, r2
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2300      	movne	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	429a      	cmp	r2, r3
 8006362:	d0a0      	beq.n	80062a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800636e:	b480      	push	{r7}
 8006370:	b095      	sub	sp, #84	@ 0x54
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800638a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006394:	643b      	str	r3, [r7, #64]	@ 0x40
 8006396:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800639a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e3      	bne.n	80063a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d118      	bne.n	800641a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f023 0310 	bic.w	r3, r3, #16
 80063fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6979      	ldr	r1, [r7, #20]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	613b      	str	r3, [r7, #16]
   return(result);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e6      	bne.n	80063e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800642e:	bf00      	nop
 8006430:	3754      	adds	r7, #84	@ 0x54
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006446:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff fc3f 	bl	8005cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b088      	sub	sp, #32
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	60bb      	str	r3, [r7, #8]
   return(result);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6979      	ldr	r1, [r7, #20]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	613b      	str	r3, [r7, #16]
   return(result);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fc0a 	bl	8005cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ac:	bf00      	nop
 80064ae:	3720      	adds	r7, #32
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_UARTEx_DisableFifoMode+0x16>
 8006502:	2302      	movs	r3, #2
 8006504:	e027      	b.n	8006556 <HAL_UARTEx_DisableFifoMode+0x66>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2224      	movs	r2, #36	@ 0x24
 8006512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0201 	bic.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006534:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006576:	2302      	movs	r3, #2
 8006578:	e02d      	b.n	80065d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	@ 0x24
 8006586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0201 	bic.w	r2, r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f850 	bl	800665c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e02d      	b.n	8006652 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2224      	movs	r2, #36	@ 0x24
 8006602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f812 	bl	800665c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006668:	2b00      	cmp	r3, #0
 800666a:	d108      	bne.n	800667e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800667c:	e031      	b.n	80066e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800667e:	2308      	movs	r3, #8
 8006680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006682:	2308      	movs	r3, #8
 8006684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	0e5b      	lsrs	r3, r3, #25
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	0f5b      	lsrs	r3, r3, #29
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	7b3a      	ldrb	r2, [r7, #12]
 80066aa:	4911      	ldr	r1, [pc, #68]	@ (80066f0 <UARTEx_SetNbDataToProcess+0x94>)
 80066ac:	5c8a      	ldrb	r2, [r1, r2]
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066b2:	7b3a      	ldrb	r2, [r7, #12]
 80066b4:	490f      	ldr	r1, [pc, #60]	@ (80066f4 <UARTEx_SetNbDataToProcess+0x98>)
 80066b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	7b7a      	ldrb	r2, [r7, #13]
 80066c8:	4909      	ldr	r1, [pc, #36]	@ (80066f0 <UARTEx_SetNbDataToProcess+0x94>)
 80066ca:	5c8a      	ldrb	r2, [r1, r2]
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066d0:	7b7a      	ldrb	r2, [r7, #13]
 80066d2:	4908      	ldr	r1, [pc, #32]	@ (80066f4 <UARTEx_SetNbDataToProcess+0x98>)
 80066d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066da:	b29a      	uxth	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	0800760c 	.word	0x0800760c
 80066f4:	08007614 	.word	0x08007614

080066f8 <std>:
 80066f8:	2300      	movs	r3, #0
 80066fa:	b510      	push	{r4, lr}
 80066fc:	4604      	mov	r4, r0
 80066fe:	6083      	str	r3, [r0, #8]
 8006700:	8181      	strh	r1, [r0, #12]
 8006702:	4619      	mov	r1, r3
 8006704:	6643      	str	r3, [r0, #100]	@ 0x64
 8006706:	81c2      	strh	r2, [r0, #14]
 8006708:	2208      	movs	r2, #8
 800670a:	6183      	str	r3, [r0, #24]
 800670c:	e9c0 3300 	strd	r3, r3, [r0]
 8006710:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006714:	305c      	adds	r0, #92	@ 0x5c
 8006716:	f000 f906 	bl	8006926 <memset>
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x58>)
 800671c:	6224      	str	r4, [r4, #32]
 800671e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006720:	4b0c      	ldr	r3, [pc, #48]	@ (8006754 <std+0x5c>)
 8006722:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006724:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <std+0x60>)
 8006726:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006728:	4b0c      	ldr	r3, [pc, #48]	@ (800675c <std+0x64>)
 800672a:	6323      	str	r3, [r4, #48]	@ 0x30
 800672c:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <std+0x68>)
 800672e:	429c      	cmp	r4, r3
 8006730:	d006      	beq.n	8006740 <std+0x48>
 8006732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006736:	4294      	cmp	r4, r2
 8006738:	d002      	beq.n	8006740 <std+0x48>
 800673a:	33d0      	adds	r3, #208	@ 0xd0
 800673c:	429c      	cmp	r4, r3
 800673e:	d105      	bne.n	800674c <std+0x54>
 8006740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006748:	f000 b966 	b.w	8006a18 <__retarget_lock_init_recursive>
 800674c:	bd10      	pop	{r4, pc}
 800674e:	bf00      	nop
 8006750:	080068a1 	.word	0x080068a1
 8006754:	080068c3 	.word	0x080068c3
 8006758:	080068fb 	.word	0x080068fb
 800675c:	0800691f 	.word	0x0800691f
 8006760:	20000200 	.word	0x20000200

08006764 <stdio_exit_handler>:
 8006764:	4a02      	ldr	r2, [pc, #8]	@ (8006770 <stdio_exit_handler+0xc>)
 8006766:	4903      	ldr	r1, [pc, #12]	@ (8006774 <stdio_exit_handler+0x10>)
 8006768:	4803      	ldr	r0, [pc, #12]	@ (8006778 <stdio_exit_handler+0x14>)
 800676a:	f000 b869 	b.w	8006840 <_fwalk_sglue>
 800676e:	bf00      	nop
 8006770:	2000000c 	.word	0x2000000c
 8006774:	080072c1 	.word	0x080072c1
 8006778:	2000001c 	.word	0x2000001c

0800677c <cleanup_stdio>:
 800677c:	6841      	ldr	r1, [r0, #4]
 800677e:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <cleanup_stdio+0x34>)
 8006780:	4299      	cmp	r1, r3
 8006782:	b510      	push	{r4, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	d001      	beq.n	800678c <cleanup_stdio+0x10>
 8006788:	f000 fd9a 	bl	80072c0 <_fflush_r>
 800678c:	68a1      	ldr	r1, [r4, #8]
 800678e:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <cleanup_stdio+0x38>)
 8006790:	4299      	cmp	r1, r3
 8006792:	d002      	beq.n	800679a <cleanup_stdio+0x1e>
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fd93 	bl	80072c0 <_fflush_r>
 800679a:	68e1      	ldr	r1, [r4, #12]
 800679c:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <cleanup_stdio+0x3c>)
 800679e:	4299      	cmp	r1, r3
 80067a0:	d004      	beq.n	80067ac <cleanup_stdio+0x30>
 80067a2:	4620      	mov	r0, r4
 80067a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a8:	f000 bd8a 	b.w	80072c0 <_fflush_r>
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	bf00      	nop
 80067b0:	20000200 	.word	0x20000200
 80067b4:	20000268 	.word	0x20000268
 80067b8:	200002d0 	.word	0x200002d0

080067bc <global_stdio_init.part.0>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <global_stdio_init.part.0+0x30>)
 80067c0:	2104      	movs	r1, #4
 80067c2:	4c0b      	ldr	r4, [pc, #44]	@ (80067f0 <global_stdio_init.part.0+0x34>)
 80067c4:	4a0b      	ldr	r2, [pc, #44]	@ (80067f4 <global_stdio_init.part.0+0x38>)
 80067c6:	4620      	mov	r0, r4
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f7ff ff94 	bl	80066f8 <std>
 80067d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067d4:	2201      	movs	r2, #1
 80067d6:	2109      	movs	r1, #9
 80067d8:	f7ff ff8e 	bl	80066f8 <std>
 80067dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067e0:	2202      	movs	r2, #2
 80067e2:	2112      	movs	r1, #18
 80067e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e8:	f7ff bf86 	b.w	80066f8 <std>
 80067ec:	20000338 	.word	0x20000338
 80067f0:	20000200 	.word	0x20000200
 80067f4:	08006765 	.word	0x08006765

080067f8 <__sfp_lock_acquire>:
 80067f8:	4801      	ldr	r0, [pc, #4]	@ (8006800 <__sfp_lock_acquire+0x8>)
 80067fa:	f000 b90e 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 80067fe:	bf00      	nop
 8006800:	20000341 	.word	0x20000341

08006804 <__sfp_lock_release>:
 8006804:	4801      	ldr	r0, [pc, #4]	@ (800680c <__sfp_lock_release+0x8>)
 8006806:	f000 b909 	b.w	8006a1c <__retarget_lock_release_recursive>
 800680a:	bf00      	nop
 800680c:	20000341 	.word	0x20000341

08006810 <__sinit>:
 8006810:	b510      	push	{r4, lr}
 8006812:	4604      	mov	r4, r0
 8006814:	f7ff fff0 	bl	80067f8 <__sfp_lock_acquire>
 8006818:	6a23      	ldr	r3, [r4, #32]
 800681a:	b11b      	cbz	r3, 8006824 <__sinit+0x14>
 800681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006820:	f7ff bff0 	b.w	8006804 <__sfp_lock_release>
 8006824:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <__sinit+0x28>)
 8006826:	6223      	str	r3, [r4, #32]
 8006828:	4b04      	ldr	r3, [pc, #16]	@ (800683c <__sinit+0x2c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f5      	bne.n	800681c <__sinit+0xc>
 8006830:	f7ff ffc4 	bl	80067bc <global_stdio_init.part.0>
 8006834:	e7f2      	b.n	800681c <__sinit+0xc>
 8006836:	bf00      	nop
 8006838:	0800677d 	.word	0x0800677d
 800683c:	20000338 	.word	0x20000338

08006840 <_fwalk_sglue>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4607      	mov	r7, r0
 8006846:	4688      	mov	r8, r1
 8006848:	4614      	mov	r4, r2
 800684a:	2600      	movs	r6, #0
 800684c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006850:	f1b9 0901 	subs.w	r9, r9, #1
 8006854:	d505      	bpl.n	8006862 <_fwalk_sglue+0x22>
 8006856:	6824      	ldr	r4, [r4, #0]
 8006858:	2c00      	cmp	r4, #0
 800685a:	d1f7      	bne.n	800684c <_fwalk_sglue+0xc>
 800685c:	4630      	mov	r0, r6
 800685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006862:	89ab      	ldrh	r3, [r5, #12]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d907      	bls.n	8006878 <_fwalk_sglue+0x38>
 8006868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686c:	3301      	adds	r3, #1
 800686e:	d003      	beq.n	8006878 <_fwalk_sglue+0x38>
 8006870:	4629      	mov	r1, r5
 8006872:	4638      	mov	r0, r7
 8006874:	47c0      	blx	r8
 8006876:	4306      	orrs	r6, r0
 8006878:	3568      	adds	r5, #104	@ 0x68
 800687a:	e7e9      	b.n	8006850 <_fwalk_sglue+0x10>

0800687c <iprintf>:
 800687c:	b40f      	push	{r0, r1, r2, r3}
 800687e:	b507      	push	{r0, r1, r2, lr}
 8006880:	4906      	ldr	r1, [pc, #24]	@ (800689c <iprintf+0x20>)
 8006882:	ab04      	add	r3, sp, #16
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	f853 2b04 	ldr.w	r2, [r3], #4
 800688a:	6881      	ldr	r1, [r0, #8]
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	f000 f9e9 	bl	8006c64 <_vfiprintf_r>
 8006892:	b003      	add	sp, #12
 8006894:	f85d eb04 	ldr.w	lr, [sp], #4
 8006898:	b004      	add	sp, #16
 800689a:	4770      	bx	lr
 800689c:	20000018 	.word	0x20000018

080068a0 <__sread>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	460c      	mov	r4, r1
 80068a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a8:	f000 f868 	bl	800697c <_read_r>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	bfab      	itete	ge
 80068b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068b2:	89a3      	ldrhlt	r3, [r4, #12]
 80068b4:	181b      	addge	r3, r3, r0
 80068b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068ba:	bfac      	ite	ge
 80068bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068be:	81a3      	strhlt	r3, [r4, #12]
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <__swrite>:
 80068c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	461f      	mov	r7, r3
 80068c8:	898b      	ldrh	r3, [r1, #12]
 80068ca:	4605      	mov	r5, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	05db      	lsls	r3, r3, #23
 80068d0:	4616      	mov	r6, r2
 80068d2:	d505      	bpl.n	80068e0 <__swrite+0x1e>
 80068d4:	2302      	movs	r3, #2
 80068d6:	2200      	movs	r2, #0
 80068d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068dc:	f000 f83c 	bl	8006958 <_lseek_r>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	4632      	mov	r2, r6
 80068e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e8:	4628      	mov	r0, r5
 80068ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	463b      	mov	r3, r7
 80068f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f6:	f000 b853 	b.w	80069a0 <_write_r>

080068fa <__sseek>:
 80068fa:	b510      	push	{r4, lr}
 80068fc:	460c      	mov	r4, r1
 80068fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006902:	f000 f829 	bl	8006958 <_lseek_r>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	bf15      	itete	ne
 800690c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800690e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006912:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006916:	81a3      	strheq	r3, [r4, #12]
 8006918:	bf18      	it	ne
 800691a:	81a3      	strhne	r3, [r4, #12]
 800691c:	bd10      	pop	{r4, pc}

0800691e <__sclose>:
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 b809 	b.w	8006938 <_close_r>

08006926 <memset>:
 8006926:	4402      	add	r2, r0
 8006928:	4603      	mov	r3, r0
 800692a:	4293      	cmp	r3, r2
 800692c:	d100      	bne.n	8006930 <memset+0xa>
 800692e:	4770      	bx	lr
 8006930:	f803 1b01 	strb.w	r1, [r3], #1
 8006934:	e7f9      	b.n	800692a <memset+0x4>
	...

08006938 <_close_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	2300      	movs	r3, #0
 800693c:	4d05      	ldr	r5, [pc, #20]	@ (8006954 <_close_r+0x1c>)
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f7fa f9b7 	bl	8000cb6 <_close>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_close_r+0x1a>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_close_r+0x1a>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	2000033c 	.word	0x2000033c

08006958 <_lseek_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4604      	mov	r4, r0
 800695c:	4d06      	ldr	r5, [pc, #24]	@ (8006978 <_lseek_r+0x20>)
 800695e:	4608      	mov	r0, r1
 8006960:	4611      	mov	r1, r2
 8006962:	2200      	movs	r2, #0
 8006964:	602a      	str	r2, [r5, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	f7fa f9cc 	bl	8000d04 <_lseek>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_lseek_r+0x1e>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_lseek_r+0x1e>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	2000033c 	.word	0x2000033c

0800697c <_read_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	4d06      	ldr	r5, [pc, #24]	@ (800699c <_read_r+0x20>)
 8006982:	4608      	mov	r0, r1
 8006984:	4611      	mov	r1, r2
 8006986:	2200      	movs	r2, #0
 8006988:	602a      	str	r2, [r5, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f7fa f95a 	bl	8000c44 <_read>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_read_r+0x1e>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_read_r+0x1e>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	2000033c 	.word	0x2000033c

080069a0 <_write_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4604      	mov	r4, r0
 80069a4:	4d06      	ldr	r5, [pc, #24]	@ (80069c0 <_write_r+0x20>)
 80069a6:	4608      	mov	r0, r1
 80069a8:	4611      	mov	r1, r2
 80069aa:	2200      	movs	r2, #0
 80069ac:	602a      	str	r2, [r5, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f7fa f965 	bl	8000c7e <_write>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_write_r+0x1e>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_write_r+0x1e>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	2000033c 	.word	0x2000033c

080069c4 <__errno>:
 80069c4:	4b01      	ldr	r3, [pc, #4]	@ (80069cc <__errno+0x8>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000018 	.word	0x20000018

080069d0 <__libc_init_array>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006a08 <__libc_init_array+0x38>)
 80069d4:	2600      	movs	r6, #0
 80069d6:	4c0d      	ldr	r4, [pc, #52]	@ (8006a0c <__libc_init_array+0x3c>)
 80069d8:	1b64      	subs	r4, r4, r5
 80069da:	10a4      	asrs	r4, r4, #2
 80069dc:	42a6      	cmp	r6, r4
 80069de:	d109      	bne.n	80069f4 <__libc_init_array+0x24>
 80069e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006a10 <__libc_init_array+0x40>)
 80069e2:	2600      	movs	r6, #0
 80069e4:	4c0b      	ldr	r4, [pc, #44]	@ (8006a14 <__libc_init_array+0x44>)
 80069e6:	f000 fdc9 	bl	800757c <_init>
 80069ea:	1b64      	subs	r4, r4, r5
 80069ec:	10a4      	asrs	r4, r4, #2
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d105      	bne.n	80069fe <__libc_init_array+0x2e>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f8:	3601      	adds	r6, #1
 80069fa:	4798      	blx	r3
 80069fc:	e7ee      	b.n	80069dc <__libc_init_array+0xc>
 80069fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a02:	3601      	adds	r6, #1
 8006a04:	4798      	blx	r3
 8006a06:	e7f2      	b.n	80069ee <__libc_init_array+0x1e>
 8006a08:	08007658 	.word	0x08007658
 8006a0c:	08007658 	.word	0x08007658
 8006a10:	08007658 	.word	0x08007658
 8006a14:	0800765c 	.word	0x0800765c

08006a18 <__retarget_lock_init_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_acquire_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <__retarget_lock_release_recursive>:
 8006a1c:	4770      	bx	lr
	...

08006a20 <_free_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4605      	mov	r5, r0
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d041      	beq.n	8006aac <_free_r+0x8c>
 8006a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a2c:	1f0c      	subs	r4, r1, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfb8      	it	lt
 8006a32:	18e4      	addlt	r4, r4, r3
 8006a34:	f000 f8e0 	bl	8006bf8 <__malloc_lock>
 8006a38:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab0 <_free_r+0x90>)
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	b933      	cbnz	r3, 8006a4c <_free_r+0x2c>
 8006a3e:	6063      	str	r3, [r4, #4]
 8006a40:	6014      	str	r4, [r2, #0]
 8006a42:	4628      	mov	r0, r5
 8006a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a48:	f000 b8dc 	b.w	8006c04 <__malloc_unlock>
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d908      	bls.n	8006a62 <_free_r+0x42>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	1821      	adds	r1, r4, r0
 8006a54:	428b      	cmp	r3, r1
 8006a56:	bf01      	itttt	eq
 8006a58:	6819      	ldreq	r1, [r3, #0]
 8006a5a:	685b      	ldreq	r3, [r3, #4]
 8006a5c:	1809      	addeq	r1, r1, r0
 8006a5e:	6021      	streq	r1, [r4, #0]
 8006a60:	e7ed      	b.n	8006a3e <_free_r+0x1e>
 8006a62:	461a      	mov	r2, r3
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b10b      	cbz	r3, 8006a6c <_free_r+0x4c>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d9fa      	bls.n	8006a62 <_free_r+0x42>
 8006a6c:	6811      	ldr	r1, [r2, #0]
 8006a6e:	1850      	adds	r0, r2, r1
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d10b      	bne.n	8006a8c <_free_r+0x6c>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	4401      	add	r1, r0
 8006a78:	1850      	adds	r0, r2, r1
 8006a7a:	6011      	str	r1, [r2, #0]
 8006a7c:	4283      	cmp	r3, r0
 8006a7e:	d1e0      	bne.n	8006a42 <_free_r+0x22>
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4408      	add	r0, r1
 8006a86:	6053      	str	r3, [r2, #4]
 8006a88:	6010      	str	r0, [r2, #0]
 8006a8a:	e7da      	b.n	8006a42 <_free_r+0x22>
 8006a8c:	d902      	bls.n	8006a94 <_free_r+0x74>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	e7d6      	b.n	8006a42 <_free_r+0x22>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	1821      	adds	r1, r4, r0
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	bf02      	ittt	eq
 8006a9c:	6819      	ldreq	r1, [r3, #0]
 8006a9e:	685b      	ldreq	r3, [r3, #4]
 8006aa0:	1809      	addeq	r1, r1, r0
 8006aa2:	6063      	str	r3, [r4, #4]
 8006aa4:	bf08      	it	eq
 8006aa6:	6021      	streq	r1, [r4, #0]
 8006aa8:	6054      	str	r4, [r2, #4]
 8006aaa:	e7ca      	b.n	8006a42 <_free_r+0x22>
 8006aac:	bd38      	pop	{r3, r4, r5, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000348 	.word	0x20000348

08006ab4 <sbrk_aligned>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8006af4 <sbrk_aligned+0x40>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	4605      	mov	r5, r0
 8006abc:	6831      	ldr	r1, [r6, #0]
 8006abe:	b911      	cbnz	r1, 8006ac6 <sbrk_aligned+0x12>
 8006ac0:	f000 fcba 	bl	8007438 <_sbrk_r>
 8006ac4:	6030      	str	r0, [r6, #0]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 fcb5 	bl	8007438 <_sbrk_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d103      	bne.n	8006ada <sbrk_aligned+0x26>
 8006ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	1cc4      	adds	r4, r0, #3
 8006adc:	f024 0403 	bic.w	r4, r4, #3
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d0f8      	beq.n	8006ad6 <sbrk_aligned+0x22>
 8006ae4:	1a21      	subs	r1, r4, r0
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 fca6 	bl	8007438 <_sbrk_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1f2      	bne.n	8006ad6 <sbrk_aligned+0x22>
 8006af0:	e7ef      	b.n	8006ad2 <sbrk_aligned+0x1e>
 8006af2:	bf00      	nop
 8006af4:	20000344 	.word	0x20000344

08006af8 <_malloc_r>:
 8006af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006afc:	1ccd      	adds	r5, r1, #3
 8006afe:	4606      	mov	r6, r0
 8006b00:	f025 0503 	bic.w	r5, r5, #3
 8006b04:	3508      	adds	r5, #8
 8006b06:	2d0c      	cmp	r5, #12
 8006b08:	bf38      	it	cc
 8006b0a:	250c      	movcc	r5, #12
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	db01      	blt.n	8006b14 <_malloc_r+0x1c>
 8006b10:	42a9      	cmp	r1, r5
 8006b12:	d904      	bls.n	8006b1e <_malloc_r+0x26>
 8006b14:	230c      	movs	r3, #12
 8006b16:	6033      	str	r3, [r6, #0]
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bf4 <_malloc_r+0xfc>
 8006b22:	f000 f869 	bl	8006bf8 <__malloc_lock>
 8006b26:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	bb44      	cbnz	r4, 8006b80 <_malloc_r+0x88>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ffbf 	bl	8006ab4 <sbrk_aligned>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	4604      	mov	r4, r0
 8006b3a:	d158      	bne.n	8006bee <_malloc_r+0xf6>
 8006b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b40:	4627      	mov	r7, r4
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d143      	bne.n	8006bce <_malloc_r+0xd6>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d04b      	beq.n	8006be2 <_malloc_r+0xea>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	eb04 0903 	add.w	r9, r4, r3
 8006b54:	f000 fc70 	bl	8007438 <_sbrk_r>
 8006b58:	4581      	cmp	r9, r0
 8006b5a:	d142      	bne.n	8006be2 <_malloc_r+0xea>
 8006b5c:	6821      	ldr	r1, [r4, #0]
 8006b5e:	4630      	mov	r0, r6
 8006b60:	1a6d      	subs	r5, r5, r1
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7ff ffa6 	bl	8006ab4 <sbrk_aligned>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d03a      	beq.n	8006be2 <_malloc_r+0xea>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	442b      	add	r3, r5
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	bb62      	cbnz	r2, 8006bd4 <_malloc_r+0xdc>
 8006b7a:	f8c8 7000 	str.w	r7, [r8]
 8006b7e:	e00f      	b.n	8006ba0 <_malloc_r+0xa8>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	1b52      	subs	r2, r2, r5
 8006b84:	d420      	bmi.n	8006bc8 <_malloc_r+0xd0>
 8006b86:	2a0b      	cmp	r2, #11
 8006b88:	d917      	bls.n	8006bba <_malloc_r+0xc2>
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	6025      	str	r5, [r4, #0]
 8006b90:	bf18      	it	ne
 8006b92:	6059      	strne	r1, [r3, #4]
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	bf08      	it	eq
 8006b98:	f8c8 1000 	streq.w	r1, [r8]
 8006b9c:	5162      	str	r2, [r4, r5]
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f82f 	bl	8006c04 <__malloc_unlock>
 8006ba6:	f104 000b 	add.w	r0, r4, #11
 8006baa:	1d23      	adds	r3, r4, #4
 8006bac:	f020 0007 	bic.w	r0, r0, #7
 8006bb0:	1ac2      	subs	r2, r0, r3
 8006bb2:	bf1c      	itt	ne
 8006bb4:	1a1b      	subne	r3, r3, r0
 8006bb6:	50a3      	strne	r3, [r4, r2]
 8006bb8:	e7af      	b.n	8006b1a <_malloc_r+0x22>
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	bf0c      	ite	eq
 8006bc0:	f8c8 2000 	streq.w	r2, [r8]
 8006bc4:	605a      	strne	r2, [r3, #4]
 8006bc6:	e7eb      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bc8:	4623      	mov	r3, r4
 8006bca:	6864      	ldr	r4, [r4, #4]
 8006bcc:	e7ae      	b.n	8006b2c <_malloc_r+0x34>
 8006bce:	463c      	mov	r4, r7
 8006bd0:	687f      	ldr	r7, [r7, #4]
 8006bd2:	e7b6      	b.n	8006b42 <_malloc_r+0x4a>
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d1fb      	bne.n	8006bd4 <_malloc_r+0xdc>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6053      	str	r3, [r2, #4]
 8006be0:	e7de      	b.n	8006ba0 <_malloc_r+0xa8>
 8006be2:	230c      	movs	r3, #12
 8006be4:	4630      	mov	r0, r6
 8006be6:	6033      	str	r3, [r6, #0]
 8006be8:	f000 f80c 	bl	8006c04 <__malloc_unlock>
 8006bec:	e794      	b.n	8006b18 <_malloc_r+0x20>
 8006bee:	6005      	str	r5, [r0, #0]
 8006bf0:	e7d6      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bf2:	bf00      	nop
 8006bf4:	20000348 	.word	0x20000348

08006bf8 <__malloc_lock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__malloc_lock+0x8>)
 8006bfa:	f7ff bf0e 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	20000340 	.word	0x20000340

08006c04 <__malloc_unlock>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__malloc_unlock+0x8>)
 8006c06:	f7ff bf09 	b.w	8006a1c <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20000340 	.word	0x20000340

08006c10 <__sfputc_r>:
 8006c10:	6893      	ldr	r3, [r2, #8]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	6093      	str	r3, [r2, #8]
 8006c18:	b410      	push	{r4}
 8006c1a:	da08      	bge.n	8006c2e <__sfputc_r+0x1e>
 8006c1c:	6994      	ldr	r4, [r2, #24]
 8006c1e:	42a3      	cmp	r3, r4
 8006c20:	db01      	blt.n	8006c26 <__sfputc_r+0x16>
 8006c22:	290a      	cmp	r1, #10
 8006c24:	d103      	bne.n	8006c2e <__sfputc_r+0x1e>
 8006c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2a:	f000 bb71 	b.w	8007310 <__swbuf_r>
 8006c2e:	6813      	ldr	r3, [r2, #0]
 8006c30:	1c58      	adds	r0, r3, #1
 8006c32:	6010      	str	r0, [r2, #0]
 8006c34:	4608      	mov	r0, r1
 8006c36:	7019      	strb	r1, [r3, #0]
 8006c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <__sfputs_r>:
 8006c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c40:	4606      	mov	r6, r0
 8006c42:	460f      	mov	r7, r1
 8006c44:	4614      	mov	r4, r2
 8006c46:	18d5      	adds	r5, r2, r3
 8006c48:	42ac      	cmp	r4, r5
 8006c4a:	d101      	bne.n	8006c50 <__sfputs_r+0x12>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e007      	b.n	8006c60 <__sfputs_r+0x22>
 8006c50:	463a      	mov	r2, r7
 8006c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff ffda 	bl	8006c10 <__sfputc_r>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d1f3      	bne.n	8006c48 <__sfputs_r+0xa>
 8006c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c64 <_vfiprintf_r>:
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	460d      	mov	r5, r1
 8006c6a:	b09d      	sub	sp, #116	@ 0x74
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	4698      	mov	r8, r3
 8006c70:	4606      	mov	r6, r0
 8006c72:	b118      	cbz	r0, 8006c7c <_vfiprintf_r+0x18>
 8006c74:	6a03      	ldr	r3, [r0, #32]
 8006c76:	b90b      	cbnz	r3, 8006c7c <_vfiprintf_r+0x18>
 8006c78:	f7ff fdca 	bl	8006810 <__sinit>
 8006c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c7e:	07d9      	lsls	r1, r3, #31
 8006c80:	d405      	bmi.n	8006c8e <_vfiprintf_r+0x2a>
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	059a      	lsls	r2, r3, #22
 8006c86:	d402      	bmi.n	8006c8e <_vfiprintf_r+0x2a>
 8006c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c8a:	f7ff fec6 	bl	8006a1a <__retarget_lock_acquire_recursive>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	071b      	lsls	r3, r3, #28
 8006c92:	d501      	bpl.n	8006c98 <_vfiprintf_r+0x34>
 8006c94:	692b      	ldr	r3, [r5, #16]
 8006c96:	b99b      	cbnz	r3, 8006cc0 <_vfiprintf_r+0x5c>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f000 fb76 	bl	800738c <__swsetup_r>
 8006ca0:	b170      	cbz	r0, 8006cc0 <_vfiprintf_r+0x5c>
 8006ca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ca4:	07dc      	lsls	r4, r3, #31
 8006ca6:	d504      	bpl.n	8006cb2 <_vfiprintf_r+0x4e>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	b01d      	add	sp, #116	@ 0x74
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	0598      	lsls	r0, r3, #22
 8006cb6:	d4f7      	bmi.n	8006ca8 <_vfiprintf_r+0x44>
 8006cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cba:	f7ff feaf 	bl	8006a1c <__retarget_lock_release_recursive>
 8006cbe:	e7f3      	b.n	8006ca8 <_vfiprintf_r+0x44>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cc6:	f04f 0901 	mov.w	r9, #1
 8006cca:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8006e80 <_vfiprintf_r+0x21c>
 8006cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cd6:	2330      	movs	r3, #48	@ 0x30
 8006cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cdc:	4623      	mov	r3, r4
 8006cde:	469a      	mov	sl, r3
 8006ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce4:	b10a      	cbz	r2, 8006cea <_vfiprintf_r+0x86>
 8006ce6:	2a25      	cmp	r2, #37	@ 0x25
 8006ce8:	d1f9      	bne.n	8006cde <_vfiprintf_r+0x7a>
 8006cea:	ebba 0b04 	subs.w	fp, sl, r4
 8006cee:	d00b      	beq.n	8006d08 <_vfiprintf_r+0xa4>
 8006cf0:	465b      	mov	r3, fp
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ffa1 	bl	8006c3e <__sfputs_r>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f000 80a7 	beq.w	8006e50 <_vfiprintf_r+0x1ec>
 8006d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d04:	445a      	add	r2, fp
 8006d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d08:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 809f 	beq.w	8006e50 <_vfiprintf_r+0x1ec>
 8006d12:	2300      	movs	r3, #0
 8006d14:	f04f 32ff 	mov.w	r2, #4294967295
 8006d18:	f10a 0a01 	add.w	sl, sl, #1
 8006d1c:	9304      	str	r3, [sp, #16]
 8006d1e:	9307      	str	r3, [sp, #28]
 8006d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2205      	movs	r2, #5
 8006d2e:	4854      	ldr	r0, [pc, #336]	@ (8006e80 <_vfiprintf_r+0x21c>)
 8006d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d34:	f000 fb90 	bl	8007458 <memchr>
 8006d38:	9a04      	ldr	r2, [sp, #16]
 8006d3a:	b9d8      	cbnz	r0, 8006d74 <_vfiprintf_r+0x110>
 8006d3c:	06d1      	lsls	r1, r2, #27
 8006d3e:	bf44      	itt	mi
 8006d40:	2320      	movmi	r3, #32
 8006d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d46:	0713      	lsls	r3, r2, #28
 8006d48:	bf44      	itt	mi
 8006d4a:	232b      	movmi	r3, #43	@ 0x2b
 8006d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d50:	f89a 3000 	ldrb.w	r3, [sl]
 8006d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d56:	d015      	beq.n	8006d84 <_vfiprintf_r+0x120>
 8006d58:	9a07      	ldr	r2, [sp, #28]
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f04f 0c0a 	mov.w	ip, #10
 8006d62:	4621      	mov	r1, r4
 8006d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d68:	3b30      	subs	r3, #48	@ 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d94b      	bls.n	8006e06 <_vfiprintf_r+0x1a2>
 8006d6e:	b1b0      	cbz	r0, 8006d9e <_vfiprintf_r+0x13a>
 8006d70:	9207      	str	r2, [sp, #28]
 8006d72:	e014      	b.n	8006d9e <_vfiprintf_r+0x13a>
 8006d74:	eba0 0308 	sub.w	r3, r0, r8
 8006d78:	46a2      	mov	sl, r4
 8006d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	e7d2      	b.n	8006d2a <_vfiprintf_r+0xc6>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	1d19      	adds	r1, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	9103      	str	r1, [sp, #12]
 8006d8e:	bfbb      	ittet	lt
 8006d90:	425b      	neglt	r3, r3
 8006d92:	f042 0202 	orrlt.w	r2, r2, #2
 8006d96:	9307      	strge	r3, [sp, #28]
 8006d98:	9307      	strlt	r3, [sp, #28]
 8006d9a:	bfb8      	it	lt
 8006d9c:	9204      	strlt	r2, [sp, #16]
 8006d9e:	7823      	ldrb	r3, [r4, #0]
 8006da0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006da2:	d10a      	bne.n	8006dba <_vfiprintf_r+0x156>
 8006da4:	7863      	ldrb	r3, [r4, #1]
 8006da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006da8:	d132      	bne.n	8006e10 <_vfiprintf_r+0x1ac>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	3402      	adds	r4, #2
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006db6:	9203      	str	r2, [sp, #12]
 8006db8:	9305      	str	r3, [sp, #20]
 8006dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e90 <_vfiprintf_r+0x22c>
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	7821      	ldrb	r1, [r4, #0]
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	f000 fb48 	bl	8007458 <memchr>
 8006dc8:	b138      	cbz	r0, 8006dda <_vfiprintf_r+0x176>
 8006dca:	eba0 000a 	sub.w	r0, r0, sl
 8006dce:	2240      	movs	r2, #64	@ 0x40
 8006dd0:	9b04      	ldr	r3, [sp, #16]
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	4082      	lsls	r2, r0
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dde:	2206      	movs	r2, #6
 8006de0:	4828      	ldr	r0, [pc, #160]	@ (8006e84 <_vfiprintf_r+0x220>)
 8006de2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006de6:	f000 fb37 	bl	8007458 <memchr>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d03f      	beq.n	8006e6e <_vfiprintf_r+0x20a>
 8006dee:	4b26      	ldr	r3, [pc, #152]	@ (8006e88 <_vfiprintf_r+0x224>)
 8006df0:	bb1b      	cbnz	r3, 8006e3a <_vfiprintf_r+0x1d6>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	3307      	adds	r3, #7
 8006df6:	f023 0307 	bic.w	r3, r3, #7
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	443b      	add	r3, r7
 8006e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e04:	e76a      	b.n	8006cdc <_vfiprintf_r+0x78>
 8006e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e7a8      	b.n	8006d62 <_vfiprintf_r+0xfe>
 8006e10:	2300      	movs	r3, #0
 8006e12:	3401      	adds	r4, #1
 8006e14:	f04f 0c0a 	mov.w	ip, #10
 8006e18:	4619      	mov	r1, r3
 8006e1a:	9305      	str	r3, [sp, #20]
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e22:	3a30      	subs	r2, #48	@ 0x30
 8006e24:	2a09      	cmp	r2, #9
 8006e26:	d903      	bls.n	8006e30 <_vfiprintf_r+0x1cc>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0c6      	beq.n	8006dba <_vfiprintf_r+0x156>
 8006e2c:	9105      	str	r1, [sp, #20]
 8006e2e:	e7c4      	b.n	8006dba <_vfiprintf_r+0x156>
 8006e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e34:	4604      	mov	r4, r0
 8006e36:	2301      	movs	r3, #1
 8006e38:	e7f0      	b.n	8006e1c <_vfiprintf_r+0x1b8>
 8006e3a:	ab03      	add	r3, sp, #12
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	a904      	add	r1, sp, #16
 8006e40:	4630      	mov	r0, r6
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	4b11      	ldr	r3, [pc, #68]	@ (8006e8c <_vfiprintf_r+0x228>)
 8006e46:	f3af 8000 	nop.w
 8006e4a:	4607      	mov	r7, r0
 8006e4c:	1c78      	adds	r0, r7, #1
 8006e4e:	d1d6      	bne.n	8006dfe <_vfiprintf_r+0x19a>
 8006e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e52:	07d9      	lsls	r1, r3, #31
 8006e54:	d405      	bmi.n	8006e62 <_vfiprintf_r+0x1fe>
 8006e56:	89ab      	ldrh	r3, [r5, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d402      	bmi.n	8006e62 <_vfiprintf_r+0x1fe>
 8006e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e5e:	f7ff fddd 	bl	8006a1c <__retarget_lock_release_recursive>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	065b      	lsls	r3, r3, #25
 8006e66:	f53f af1f 	bmi.w	8006ca8 <_vfiprintf_r+0x44>
 8006e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e6c:	e71e      	b.n	8006cac <_vfiprintf_r+0x48>
 8006e6e:	ab03      	add	r3, sp, #12
 8006e70:	462a      	mov	r2, r5
 8006e72:	a904      	add	r1, sp, #16
 8006e74:	4630      	mov	r0, r6
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <_vfiprintf_r+0x228>)
 8006e7a:	f000 f87d 	bl	8006f78 <_printf_i>
 8006e7e:	e7e4      	b.n	8006e4a <_vfiprintf_r+0x1e6>
 8006e80:	0800761c 	.word	0x0800761c
 8006e84:	08007626 	.word	0x08007626
 8006e88:	00000000 	.word	0x00000000
 8006e8c:	08006c3f 	.word	0x08006c3f
 8006e90:	08007622 	.word	0x08007622

08006e94 <_printf_common>:
 8006e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	4616      	mov	r6, r2
 8006e9a:	4698      	mov	r8, r3
 8006e9c:	688a      	ldr	r2, [r1, #8]
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	690b      	ldr	r3, [r1, #16]
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	bfb8      	it	lt
 8006eac:	4613      	movlt	r3, r2
 8006eae:	6033      	str	r3, [r6, #0]
 8006eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006eb4:	b10a      	cbz	r2, 8006eba <_printf_common+0x26>
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	0699      	lsls	r1, r3, #26
 8006ebe:	bf42      	ittt	mi
 8006ec0:	6833      	ldrmi	r3, [r6, #0]
 8006ec2:	3302      	addmi	r3, #2
 8006ec4:	6033      	strmi	r3, [r6, #0]
 8006ec6:	6825      	ldr	r5, [r4, #0]
 8006ec8:	f015 0506 	ands.w	r5, r5, #6
 8006ecc:	d106      	bne.n	8006edc <_printf_common+0x48>
 8006ece:	f104 0a19 	add.w	sl, r4, #25
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	6832      	ldr	r2, [r6, #0]
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	dc2b      	bgt.n	8006f34 <_printf_common+0xa0>
 8006edc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	3b00      	subs	r3, #0
 8006ee4:	bf18      	it	ne
 8006ee6:	2301      	movne	r3, #1
 8006ee8:	0692      	lsls	r2, r2, #26
 8006eea:	d430      	bmi.n	8006f4e <_printf_common+0xba>
 8006eec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c8      	blx	r9
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d023      	beq.n	8006f42 <_printf_common+0xae>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	341a      	adds	r4, #26
 8006efe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8006f02:	f003 0306 	and.w	r3, r3, #6
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	bf0a      	itet	eq
 8006f0a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006f0e:	2500      	movne	r5, #0
 8006f10:	6833      	ldreq	r3, [r6, #0]
 8006f12:	f04f 0600 	mov.w	r6, #0
 8006f16:	bf08      	it	eq
 8006f18:	1aed      	subeq	r5, r5, r3
 8006f1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f1e:	bf08      	it	eq
 8006f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f24:	4293      	cmp	r3, r2
 8006f26:	bfc4      	itt	gt
 8006f28:	1a9b      	subgt	r3, r3, r2
 8006f2a:	18ed      	addgt	r5, r5, r3
 8006f2c:	42b5      	cmp	r5, r6
 8006f2e:	d11a      	bne.n	8006f66 <_printf_common+0xd2>
 8006f30:	2000      	movs	r0, #0
 8006f32:	e008      	b.n	8006f46 <_printf_common+0xb2>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4652      	mov	r2, sl
 8006f38:	4641      	mov	r1, r8
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	47c8      	blx	r9
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d103      	bne.n	8006f4a <_printf_common+0xb6>
 8006f42:	f04f 30ff 	mov.w	r0, #4294967295
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	3501      	adds	r5, #1
 8006f4c:	e7c1      	b.n	8006ed2 <_printf_common+0x3e>
 8006f4e:	18e1      	adds	r1, r4, r3
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	2030      	movs	r0, #48	@ 0x30
 8006f54:	3302      	adds	r3, #2
 8006f56:	4422      	add	r2, r4
 8006f58:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f64:	e7c2      	b.n	8006eec <_printf_common+0x58>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	47c8      	blx	r9
 8006f70:	3001      	adds	r0, #1
 8006f72:	d0e6      	beq.n	8006f42 <_printf_common+0xae>
 8006f74:	3601      	adds	r6, #1
 8006f76:	e7d9      	b.n	8006f2c <_printf_common+0x98>

08006f78 <_printf_i>:
 8006f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	7e0f      	ldrb	r7, [r1, #24]
 8006f7e:	4691      	mov	r9, r2
 8006f80:	4680      	mov	r8, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	2f78      	cmp	r7, #120	@ 0x78
 8006f86:	469a      	mov	sl, r3
 8006f88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f8e:	d807      	bhi.n	8006fa0 <_printf_i+0x28>
 8006f90:	2f62      	cmp	r7, #98	@ 0x62
 8006f92:	d80a      	bhi.n	8006faa <_printf_i+0x32>
 8006f94:	2f00      	cmp	r7, #0
 8006f96:	f000 80d2 	beq.w	800713e <_printf_i+0x1c6>
 8006f9a:	2f58      	cmp	r7, #88	@ 0x58
 8006f9c:	f000 80b9 	beq.w	8007112 <_printf_i+0x19a>
 8006fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fa8:	e03a      	b.n	8007020 <_printf_i+0xa8>
 8006faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fae:	2b15      	cmp	r3, #21
 8006fb0:	d8f6      	bhi.n	8006fa0 <_printf_i+0x28>
 8006fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fb8 <_printf_i+0x40>)
 8006fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007025 	.word	0x08007025
 8006fc0:	08006fa1 	.word	0x08006fa1
 8006fc4:	08006fa1 	.word	0x08006fa1
 8006fc8:	08006fa1 	.word	0x08006fa1
 8006fcc:	08006fa1 	.word	0x08006fa1
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08006fa1 	.word	0x08006fa1
 8006fd8:	08006fa1 	.word	0x08006fa1
 8006fdc:	08006fa1 	.word	0x08006fa1
 8006fe0:	08006fa1 	.word	0x08006fa1
 8006fe4:	08007125 	.word	0x08007125
 8006fe8:	0800704f 	.word	0x0800704f
 8006fec:	080070df 	.word	0x080070df
 8006ff0:	08006fa1 	.word	0x08006fa1
 8006ff4:	08006fa1 	.word	0x08006fa1
 8006ff8:	08007147 	.word	0x08007147
 8006ffc:	08006fa1 	.word	0x08006fa1
 8007000:	0800704f 	.word	0x0800704f
 8007004:	08006fa1 	.word	0x08006fa1
 8007008:	08006fa1 	.word	0x08006fa1
 800700c:	080070e7 	.word	0x080070e7
 8007010:	6833      	ldr	r3, [r6, #0]
 8007012:	1d1a      	adds	r2, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6032      	str	r2, [r6, #0]
 8007018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800701c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007020:	2301      	movs	r3, #1
 8007022:	e09d      	b.n	8007160 <_printf_i+0x1e8>
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	1d19      	adds	r1, r3, #4
 800702a:	6031      	str	r1, [r6, #0]
 800702c:	0606      	lsls	r6, r0, #24
 800702e:	d501      	bpl.n	8007034 <_printf_i+0xbc>
 8007030:	681d      	ldr	r5, [r3, #0]
 8007032:	e003      	b.n	800703c <_printf_i+0xc4>
 8007034:	0645      	lsls	r5, r0, #25
 8007036:	d5fb      	bpl.n	8007030 <_printf_i+0xb8>
 8007038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800703c:	2d00      	cmp	r5, #0
 800703e:	da03      	bge.n	8007048 <_printf_i+0xd0>
 8007040:	232d      	movs	r3, #45	@ 0x2d
 8007042:	426d      	negs	r5, r5
 8007044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007048:	4859      	ldr	r0, [pc, #356]	@ (80071b0 <_printf_i+0x238>)
 800704a:	230a      	movs	r3, #10
 800704c:	e011      	b.n	8007072 <_printf_i+0xfa>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	0608      	lsls	r0, r1, #24
 8007054:	f853 5b04 	ldr.w	r5, [r3], #4
 8007058:	d402      	bmi.n	8007060 <_printf_i+0xe8>
 800705a:	0649      	lsls	r1, r1, #25
 800705c:	bf48      	it	mi
 800705e:	b2ad      	uxthmi	r5, r5
 8007060:	2f6f      	cmp	r7, #111	@ 0x6f
 8007062:	6033      	str	r3, [r6, #0]
 8007064:	4852      	ldr	r0, [pc, #328]	@ (80071b0 <_printf_i+0x238>)
 8007066:	bf14      	ite	ne
 8007068:	230a      	movne	r3, #10
 800706a:	2308      	moveq	r3, #8
 800706c:	2100      	movs	r1, #0
 800706e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007072:	6866      	ldr	r6, [r4, #4]
 8007074:	2e00      	cmp	r6, #0
 8007076:	60a6      	str	r6, [r4, #8]
 8007078:	bfa2      	ittt	ge
 800707a:	6821      	ldrge	r1, [r4, #0]
 800707c:	f021 0104 	bicge.w	r1, r1, #4
 8007080:	6021      	strge	r1, [r4, #0]
 8007082:	b90d      	cbnz	r5, 8007088 <_printf_i+0x110>
 8007084:	2e00      	cmp	r6, #0
 8007086:	d04b      	beq.n	8007120 <_printf_i+0x1a8>
 8007088:	4616      	mov	r6, r2
 800708a:	fbb5 f1f3 	udiv	r1, r5, r3
 800708e:	fb03 5711 	mls	r7, r3, r1, r5
 8007092:	5dc7      	ldrb	r7, [r0, r7]
 8007094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007098:	462f      	mov	r7, r5
 800709a:	460d      	mov	r5, r1
 800709c:	42bb      	cmp	r3, r7
 800709e:	d9f4      	bls.n	800708a <_printf_i+0x112>
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d10b      	bne.n	80070bc <_printf_i+0x144>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	07df      	lsls	r7, r3, #31
 80070a8:	d508      	bpl.n	80070bc <_printf_i+0x144>
 80070aa:	6923      	ldr	r3, [r4, #16]
 80070ac:	6861      	ldr	r1, [r4, #4]
 80070ae:	4299      	cmp	r1, r3
 80070b0:	bfde      	ittt	le
 80070b2:	2330      	movle	r3, #48	@ 0x30
 80070b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070bc:	1b92      	subs	r2, r2, r6
 80070be:	6122      	str	r2, [r4, #16]
 80070c0:	464b      	mov	r3, r9
 80070c2:	aa03      	add	r2, sp, #12
 80070c4:	4621      	mov	r1, r4
 80070c6:	4640      	mov	r0, r8
 80070c8:	f8cd a000 	str.w	sl, [sp]
 80070cc:	f7ff fee2 	bl	8006e94 <_printf_common>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d14a      	bne.n	800716a <_printf_i+0x1f2>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	b004      	add	sp, #16
 80070da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	2778      	movs	r7, #120	@ 0x78
 80070e8:	4832      	ldr	r0, [pc, #200]	@ (80071b4 <_printf_i+0x23c>)
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070f0:	061f      	lsls	r7, r3, #24
 80070f2:	6831      	ldr	r1, [r6, #0]
 80070f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070f8:	d402      	bmi.n	8007100 <_printf_i+0x188>
 80070fa:	065f      	lsls	r7, r3, #25
 80070fc:	bf48      	it	mi
 80070fe:	b2ad      	uxthmi	r5, r5
 8007100:	6031      	str	r1, [r6, #0]
 8007102:	07d9      	lsls	r1, r3, #31
 8007104:	bf44      	itt	mi
 8007106:	f043 0320 	orrmi.w	r3, r3, #32
 800710a:	6023      	strmi	r3, [r4, #0]
 800710c:	b11d      	cbz	r5, 8007116 <_printf_i+0x19e>
 800710e:	2310      	movs	r3, #16
 8007110:	e7ac      	b.n	800706c <_printf_i+0xf4>
 8007112:	4827      	ldr	r0, [pc, #156]	@ (80071b0 <_printf_i+0x238>)
 8007114:	e7e9      	b.n	80070ea <_printf_i+0x172>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	f023 0320 	bic.w	r3, r3, #32
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	e7f6      	b.n	800710e <_printf_i+0x196>
 8007120:	4616      	mov	r6, r2
 8007122:	e7bd      	b.n	80070a0 <_printf_i+0x128>
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	6825      	ldr	r5, [r4, #0]
 8007128:	1d18      	adds	r0, r3, #4
 800712a:	6961      	ldr	r1, [r4, #20]
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	062e      	lsls	r6, r5, #24
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	d501      	bpl.n	8007138 <_printf_i+0x1c0>
 8007134:	6019      	str	r1, [r3, #0]
 8007136:	e002      	b.n	800713e <_printf_i+0x1c6>
 8007138:	0668      	lsls	r0, r5, #25
 800713a:	d5fb      	bpl.n	8007134 <_printf_i+0x1bc>
 800713c:	8019      	strh	r1, [r3, #0]
 800713e:	2300      	movs	r3, #0
 8007140:	4616      	mov	r6, r2
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	e7bc      	b.n	80070c0 <_printf_i+0x148>
 8007146:	6833      	ldr	r3, [r6, #0]
 8007148:	2100      	movs	r1, #0
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	6032      	str	r2, [r6, #0]
 800714e:	681e      	ldr	r6, [r3, #0]
 8007150:	6862      	ldr	r2, [r4, #4]
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f980 	bl	8007458 <memchr>
 8007158:	b108      	cbz	r0, 800715e <_printf_i+0x1e6>
 800715a:	1b80      	subs	r0, r0, r6
 800715c:	6060      	str	r0, [r4, #4]
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	2300      	movs	r3, #0
 8007164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007168:	e7aa      	b.n	80070c0 <_printf_i+0x148>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	4632      	mov	r2, r6
 800716e:	4649      	mov	r1, r9
 8007170:	4640      	mov	r0, r8
 8007172:	47d0      	blx	sl
 8007174:	3001      	adds	r0, #1
 8007176:	d0ad      	beq.n	80070d4 <_printf_i+0x15c>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	079b      	lsls	r3, r3, #30
 800717c:	d413      	bmi.n	80071a6 <_printf_i+0x22e>
 800717e:	68e0      	ldr	r0, [r4, #12]
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	4298      	cmp	r0, r3
 8007184:	bfb8      	it	lt
 8007186:	4618      	movlt	r0, r3
 8007188:	e7a6      	b.n	80070d8 <_printf_i+0x160>
 800718a:	2301      	movs	r3, #1
 800718c:	4632      	mov	r2, r6
 800718e:	4649      	mov	r1, r9
 8007190:	4640      	mov	r0, r8
 8007192:	47d0      	blx	sl
 8007194:	3001      	adds	r0, #1
 8007196:	d09d      	beq.n	80070d4 <_printf_i+0x15c>
 8007198:	3501      	adds	r5, #1
 800719a:	68e3      	ldr	r3, [r4, #12]
 800719c:	9903      	ldr	r1, [sp, #12]
 800719e:	1a5b      	subs	r3, r3, r1
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dcf2      	bgt.n	800718a <_printf_i+0x212>
 80071a4:	e7eb      	b.n	800717e <_printf_i+0x206>
 80071a6:	2500      	movs	r5, #0
 80071a8:	f104 0619 	add.w	r6, r4, #25
 80071ac:	e7f5      	b.n	800719a <_printf_i+0x222>
 80071ae:	bf00      	nop
 80071b0:	0800762d 	.word	0x0800762d
 80071b4:	0800763e 	.word	0x0800763e

080071b8 <__sflush_r>:
 80071b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c0:	0716      	lsls	r6, r2, #28
 80071c2:	4605      	mov	r5, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	d454      	bmi.n	8007272 <__sflush_r+0xba>
 80071c8:	684b      	ldr	r3, [r1, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dc02      	bgt.n	80071d4 <__sflush_r+0x1c>
 80071ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dd48      	ble.n	8007266 <__sflush_r+0xae>
 80071d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	d045      	beq.n	8007266 <__sflush_r+0xae>
 80071da:	2300      	movs	r3, #0
 80071dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071e0:	682f      	ldr	r7, [r5, #0]
 80071e2:	6a21      	ldr	r1, [r4, #32]
 80071e4:	602b      	str	r3, [r5, #0]
 80071e6:	d030      	beq.n	800724a <__sflush_r+0x92>
 80071e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	0759      	lsls	r1, r3, #29
 80071ee:	d505      	bpl.n	80071fc <__sflush_r+0x44>
 80071f0:	6863      	ldr	r3, [r4, #4]
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071f6:	b10b      	cbz	r3, 80071fc <__sflush_r+0x44>
 80071f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	2300      	movs	r3, #0
 80071fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007200:	6a21      	ldr	r1, [r4, #32]
 8007202:	4628      	mov	r0, r5
 8007204:	47b0      	blx	r6
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	d106      	bne.n	800721a <__sflush_r+0x62>
 800720c:	6829      	ldr	r1, [r5, #0]
 800720e:	291d      	cmp	r1, #29
 8007210:	d82b      	bhi.n	800726a <__sflush_r+0xb2>
 8007212:	4a2a      	ldr	r2, [pc, #168]	@ (80072bc <__sflush_r+0x104>)
 8007214:	410a      	asrs	r2, r1
 8007216:	07d6      	lsls	r6, r2, #31
 8007218:	d427      	bmi.n	800726a <__sflush_r+0xb2>
 800721a:	2200      	movs	r2, #0
 800721c:	04d9      	lsls	r1, r3, #19
 800721e:	6062      	str	r2, [r4, #4]
 8007220:	6922      	ldr	r2, [r4, #16]
 8007222:	6022      	str	r2, [r4, #0]
 8007224:	d504      	bpl.n	8007230 <__sflush_r+0x78>
 8007226:	1c42      	adds	r2, r0, #1
 8007228:	d101      	bne.n	800722e <__sflush_r+0x76>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	b903      	cbnz	r3, 8007230 <__sflush_r+0x78>
 800722e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007232:	602f      	str	r7, [r5, #0]
 8007234:	b1b9      	cbz	r1, 8007266 <__sflush_r+0xae>
 8007236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800723a:	4299      	cmp	r1, r3
 800723c:	d002      	beq.n	8007244 <__sflush_r+0x8c>
 800723e:	4628      	mov	r0, r5
 8007240:	f7ff fbee 	bl	8006a20 <_free_r>
 8007244:	2300      	movs	r3, #0
 8007246:	6363      	str	r3, [r4, #52]	@ 0x34
 8007248:	e00d      	b.n	8007266 <__sflush_r+0xae>
 800724a:	2301      	movs	r3, #1
 800724c:	4628      	mov	r0, r5
 800724e:	47b0      	blx	r6
 8007250:	4602      	mov	r2, r0
 8007252:	1c50      	adds	r0, r2, #1
 8007254:	d1c9      	bne.n	80071ea <__sflush_r+0x32>
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0c6      	beq.n	80071ea <__sflush_r+0x32>
 800725c:	2b1d      	cmp	r3, #29
 800725e:	d001      	beq.n	8007264 <__sflush_r+0xac>
 8007260:	2b16      	cmp	r3, #22
 8007262:	d11d      	bne.n	80072a0 <__sflush_r+0xe8>
 8007264:	602f      	str	r7, [r5, #0]
 8007266:	2000      	movs	r0, #0
 8007268:	e021      	b.n	80072ae <__sflush_r+0xf6>
 800726a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800726e:	b21b      	sxth	r3, r3
 8007270:	e01a      	b.n	80072a8 <__sflush_r+0xf0>
 8007272:	690f      	ldr	r7, [r1, #16]
 8007274:	2f00      	cmp	r7, #0
 8007276:	d0f6      	beq.n	8007266 <__sflush_r+0xae>
 8007278:	0793      	lsls	r3, r2, #30
 800727a:	680e      	ldr	r6, [r1, #0]
 800727c:	600f      	str	r7, [r1, #0]
 800727e:	bf0c      	ite	eq
 8007280:	694b      	ldreq	r3, [r1, #20]
 8007282:	2300      	movne	r3, #0
 8007284:	eba6 0807 	sub.w	r8, r6, r7
 8007288:	608b      	str	r3, [r1, #8]
 800728a:	f1b8 0f00 	cmp.w	r8, #0
 800728e:	ddea      	ble.n	8007266 <__sflush_r+0xae>
 8007290:	4643      	mov	r3, r8
 8007292:	463a      	mov	r2, r7
 8007294:	6a21      	ldr	r1, [r4, #32]
 8007296:	4628      	mov	r0, r5
 8007298:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800729a:	47b0      	blx	r6
 800729c:	2800      	cmp	r0, #0
 800729e:	dc08      	bgt.n	80072b2 <__sflush_r+0xfa>
 80072a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b2:	4407      	add	r7, r0
 80072b4:	eba8 0800 	sub.w	r8, r8, r0
 80072b8:	e7e7      	b.n	800728a <__sflush_r+0xd2>
 80072ba:	bf00      	nop
 80072bc:	dfbffffe 	.word	0xdfbffffe

080072c0 <_fflush_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	690b      	ldr	r3, [r1, #16]
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b913      	cbnz	r3, 80072d0 <_fflush_r+0x10>
 80072ca:	2500      	movs	r5, #0
 80072cc:	4628      	mov	r0, r5
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	b118      	cbz	r0, 80072da <_fflush_r+0x1a>
 80072d2:	6a03      	ldr	r3, [r0, #32]
 80072d4:	b90b      	cbnz	r3, 80072da <_fflush_r+0x1a>
 80072d6:	f7ff fa9b 	bl	8006810 <__sinit>
 80072da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f3      	beq.n	80072ca <_fflush_r+0xa>
 80072e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072e4:	07d0      	lsls	r0, r2, #31
 80072e6:	d404      	bmi.n	80072f2 <_fflush_r+0x32>
 80072e8:	0599      	lsls	r1, r3, #22
 80072ea:	d402      	bmi.n	80072f2 <_fflush_r+0x32>
 80072ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072ee:	f7ff fb94 	bl	8006a1a <__retarget_lock_acquire_recursive>
 80072f2:	4628      	mov	r0, r5
 80072f4:	4621      	mov	r1, r4
 80072f6:	f7ff ff5f 	bl	80071b8 <__sflush_r>
 80072fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072fc:	4605      	mov	r5, r0
 80072fe:	07da      	lsls	r2, r3, #31
 8007300:	d4e4      	bmi.n	80072cc <_fflush_r+0xc>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	059b      	lsls	r3, r3, #22
 8007306:	d4e1      	bmi.n	80072cc <_fflush_r+0xc>
 8007308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730a:	f7ff fb87 	bl	8006a1c <__retarget_lock_release_recursive>
 800730e:	e7dd      	b.n	80072cc <_fflush_r+0xc>

08007310 <__swbuf_r>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	460e      	mov	r6, r1
 8007314:	4614      	mov	r4, r2
 8007316:	4605      	mov	r5, r0
 8007318:	b118      	cbz	r0, 8007322 <__swbuf_r+0x12>
 800731a:	6a03      	ldr	r3, [r0, #32]
 800731c:	b90b      	cbnz	r3, 8007322 <__swbuf_r+0x12>
 800731e:	f7ff fa77 	bl	8006810 <__sinit>
 8007322:	69a3      	ldr	r3, [r4, #24]
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	071a      	lsls	r2, r3, #28
 800732a:	d501      	bpl.n	8007330 <__swbuf_r+0x20>
 800732c:	6923      	ldr	r3, [r4, #16]
 800732e:	b943      	cbnz	r3, 8007342 <__swbuf_r+0x32>
 8007330:	4621      	mov	r1, r4
 8007332:	4628      	mov	r0, r5
 8007334:	f000 f82a 	bl	800738c <__swsetup_r>
 8007338:	b118      	cbz	r0, 8007342 <__swbuf_r+0x32>
 800733a:	f04f 37ff 	mov.w	r7, #4294967295
 800733e:	4638      	mov	r0, r7
 8007340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	b2f6      	uxtb	r6, r6
 8007346:	6922      	ldr	r2, [r4, #16]
 8007348:	4637      	mov	r7, r6
 800734a:	1a98      	subs	r0, r3, r2
 800734c:	6963      	ldr	r3, [r4, #20]
 800734e:	4283      	cmp	r3, r0
 8007350:	dc05      	bgt.n	800735e <__swbuf_r+0x4e>
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f7ff ffb3 	bl	80072c0 <_fflush_r>
 800735a:	2800      	cmp	r0, #0
 800735c:	d1ed      	bne.n	800733a <__swbuf_r+0x2a>
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	3b01      	subs	r3, #1
 8007362:	60a3      	str	r3, [r4, #8]
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	6022      	str	r2, [r4, #0]
 800736a:	701e      	strb	r6, [r3, #0]
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	6962      	ldr	r2, [r4, #20]
 8007370:	429a      	cmp	r2, r3
 8007372:	d004      	beq.n	800737e <__swbuf_r+0x6e>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	07db      	lsls	r3, r3, #31
 8007378:	d5e1      	bpl.n	800733e <__swbuf_r+0x2e>
 800737a:	2e0a      	cmp	r6, #10
 800737c:	d1df      	bne.n	800733e <__swbuf_r+0x2e>
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f7ff ff9d 	bl	80072c0 <_fflush_r>
 8007386:	2800      	cmp	r0, #0
 8007388:	d0d9      	beq.n	800733e <__swbuf_r+0x2e>
 800738a:	e7d6      	b.n	800733a <__swbuf_r+0x2a>

0800738c <__swsetup_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4b29      	ldr	r3, [pc, #164]	@ (8007434 <__swsetup_r+0xa8>)
 8007390:	4605      	mov	r5, r0
 8007392:	460c      	mov	r4, r1
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	b118      	cbz	r0, 80073a0 <__swsetup_r+0x14>
 8007398:	6a03      	ldr	r3, [r0, #32]
 800739a:	b90b      	cbnz	r3, 80073a0 <__swsetup_r+0x14>
 800739c:	f7ff fa38 	bl	8006810 <__sinit>
 80073a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a4:	0719      	lsls	r1, r3, #28
 80073a6:	d422      	bmi.n	80073ee <__swsetup_r+0x62>
 80073a8:	06da      	lsls	r2, r3, #27
 80073aa:	d407      	bmi.n	80073bc <__swsetup_r+0x30>
 80073ac:	2209      	movs	r2, #9
 80073ae:	602a      	str	r2, [r5, #0]
 80073b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	e033      	b.n	8007424 <__swsetup_r+0x98>
 80073bc:	0758      	lsls	r0, r3, #29
 80073be:	d512      	bpl.n	80073e6 <__swsetup_r+0x5a>
 80073c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073c2:	b141      	cbz	r1, 80073d6 <__swsetup_r+0x4a>
 80073c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073c8:	4299      	cmp	r1, r3
 80073ca:	d002      	beq.n	80073d2 <__swsetup_r+0x46>
 80073cc:	4628      	mov	r0, r5
 80073ce:	f7ff fb27 	bl	8006a20 <_free_r>
 80073d2:	2300      	movs	r3, #0
 80073d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	2300      	movs	r3, #0
 80073e0:	6063      	str	r3, [r4, #4]
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	f043 0308 	orr.w	r3, r3, #8
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	b94b      	cbnz	r3, 8007406 <__swsetup_r+0x7a>
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073fc:	d003      	beq.n	8007406 <__swsetup_r+0x7a>
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f000 f85c 	bl	80074be <__smakebuf_r>
 8007406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740a:	f013 0201 	ands.w	r2, r3, #1
 800740e:	d00a      	beq.n	8007426 <__swsetup_r+0x9a>
 8007410:	2200      	movs	r2, #0
 8007412:	60a2      	str	r2, [r4, #8]
 8007414:	6962      	ldr	r2, [r4, #20]
 8007416:	4252      	negs	r2, r2
 8007418:	61a2      	str	r2, [r4, #24]
 800741a:	6922      	ldr	r2, [r4, #16]
 800741c:	b942      	cbnz	r2, 8007430 <__swsetup_r+0xa4>
 800741e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007422:	d1c5      	bne.n	80073b0 <__swsetup_r+0x24>
 8007424:	bd38      	pop	{r3, r4, r5, pc}
 8007426:	0799      	lsls	r1, r3, #30
 8007428:	bf58      	it	pl
 800742a:	6962      	ldrpl	r2, [r4, #20]
 800742c:	60a2      	str	r2, [r4, #8]
 800742e:	e7f4      	b.n	800741a <__swsetup_r+0x8e>
 8007430:	2000      	movs	r0, #0
 8007432:	e7f7      	b.n	8007424 <__swsetup_r+0x98>
 8007434:	20000018 	.word	0x20000018

08007438 <_sbrk_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	2300      	movs	r3, #0
 800743c:	4d05      	ldr	r5, [pc, #20]	@ (8007454 <_sbrk_r+0x1c>)
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7f9 fc6c 	bl	8000d20 <_sbrk>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_sbrk_r+0x1a>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_sbrk_r+0x1a>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	2000033c 	.word	0x2000033c

08007458 <memchr>:
 8007458:	b2c9      	uxtb	r1, r1
 800745a:	4603      	mov	r3, r0
 800745c:	4402      	add	r2, r0
 800745e:	b510      	push	{r4, lr}
 8007460:	4293      	cmp	r3, r2
 8007462:	4618      	mov	r0, r3
 8007464:	d101      	bne.n	800746a <memchr+0x12>
 8007466:	2000      	movs	r0, #0
 8007468:	e003      	b.n	8007472 <memchr+0x1a>
 800746a:	7804      	ldrb	r4, [r0, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	428c      	cmp	r4, r1
 8007470:	d1f6      	bne.n	8007460 <memchr+0x8>
 8007472:	bd10      	pop	{r4, pc}

08007474 <__swhatbuf_r>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	460c      	mov	r4, r1
 8007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747c:	b096      	sub	sp, #88	@ 0x58
 800747e:	4615      	mov	r5, r2
 8007480:	2900      	cmp	r1, #0
 8007482:	461e      	mov	r6, r3
 8007484:	da0c      	bge.n	80074a0 <__swhatbuf_r+0x2c>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	2100      	movs	r1, #0
 800748a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800748e:	bf14      	ite	ne
 8007490:	2340      	movne	r3, #64	@ 0x40
 8007492:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007496:	2000      	movs	r0, #0
 8007498:	6031      	str	r1, [r6, #0]
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	b016      	add	sp, #88	@ 0x58
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	466a      	mov	r2, sp
 80074a2:	f000 f849 	bl	8007538 <_fstat_r>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	dbed      	blt.n	8007486 <__swhatbuf_r+0x12>
 80074aa:	9901      	ldr	r1, [sp, #4]
 80074ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074b4:	4259      	negs	r1, r3
 80074b6:	4159      	adcs	r1, r3
 80074b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074bc:	e7eb      	b.n	8007496 <__swhatbuf_r+0x22>

080074be <__smakebuf_r>:
 80074be:	898b      	ldrh	r3, [r1, #12]
 80074c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074c2:	079d      	lsls	r5, r3, #30
 80074c4:	4606      	mov	r6, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	d507      	bpl.n	80074da <__smakebuf_r+0x1c>
 80074ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	2301      	movs	r3, #1
 80074d4:	6163      	str	r3, [r4, #20]
 80074d6:	b003      	add	sp, #12
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074da:	ab01      	add	r3, sp, #4
 80074dc:	466a      	mov	r2, sp
 80074de:	f7ff ffc9 	bl	8007474 <__swhatbuf_r>
 80074e2:	9f00      	ldr	r7, [sp, #0]
 80074e4:	4605      	mov	r5, r0
 80074e6:	4630      	mov	r0, r6
 80074e8:	4639      	mov	r1, r7
 80074ea:	f7ff fb05 	bl	8006af8 <_malloc_r>
 80074ee:	b948      	cbnz	r0, 8007504 <__smakebuf_r+0x46>
 80074f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d4ee      	bmi.n	80074d6 <__smakebuf_r+0x18>
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	e7e2      	b.n	80074ca <__smakebuf_r+0xc>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	6020      	str	r0, [r4, #0]
 8007508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007514:	b15b      	cbz	r3, 800752e <__smakebuf_r+0x70>
 8007516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800751a:	4630      	mov	r0, r6
 800751c:	f000 f81e 	bl	800755c <_isatty_r>
 8007520:	b128      	cbz	r0, 800752e <__smakebuf_r+0x70>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f023 0303 	bic.w	r3, r3, #3
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	431d      	orrs	r5, r3
 8007532:	81a5      	strh	r5, [r4, #12]
 8007534:	e7cf      	b.n	80074d6 <__smakebuf_r+0x18>
	...

08007538 <_fstat_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	2300      	movs	r3, #0
 800753c:	4d06      	ldr	r5, [pc, #24]	@ (8007558 <_fstat_r+0x20>)
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f7f9 fbc2 	bl	8000cce <_fstat>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d102      	bne.n	8007554 <_fstat_r+0x1c>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	b103      	cbz	r3, 8007554 <_fstat_r+0x1c>
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	bd38      	pop	{r3, r4, r5, pc}
 8007556:	bf00      	nop
 8007558:	2000033c 	.word	0x2000033c

0800755c <_isatty_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	2300      	movs	r3, #0
 8007560:	4d05      	ldr	r5, [pc, #20]	@ (8007578 <_isatty_r+0x1c>)
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7f9 fbc1 	bl	8000cee <_isatty>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_isatty_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_isatty_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	2000033c 	.word	0x2000033c

0800757c <_init>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr

08007588 <_fini>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr
