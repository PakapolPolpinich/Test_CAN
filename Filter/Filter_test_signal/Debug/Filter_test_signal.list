
Filter_test_signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000605c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080062b4  080062b4  000072b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006304  08006304  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  08006304  08006304  00007304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800630c  0800630c  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800630c  0800630c  0000730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006310  08006310  00007310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08006314  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000020  08006334  00008020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08006334  00008198  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c5b  00000000  00000000  00008056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220c  00000000  00000000  00019cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0001bec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000944  00000000  00000000  0001cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201e3  00000000  00000000  0001d424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c82  00000000  00000000  0003d607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6730  00000000  00000000  0004e289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001149b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f4  00000000  00000000  001149fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00117bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000020 	.word	0x20000020
 8000274:	00000000 	.word	0x00000000
 8000278:	0800629c 	.word	0x0800629c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000024 	.word	0x20000024
 8000294:	0800629c 	.word	0x0800629c

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SystemClock_Config>:

#include "RCC_clock.h"


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	@ 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2250      	movs	r2, #80	@ 0x50
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fe40 	bl	8006244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <SystemClock_Config+0xdc>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005de:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xdc>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xdc>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xdc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d1f9      	bne.n	80005f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000626:	230c      	movs	r3, #12
 8000628:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062a:	2300      	movs	r3, #0
 800062c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fd5e 	bl	80020f8 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    //Error_Handler();
	while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <SystemClock_Config+0x92>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 f97f 	bl	8002968 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    //Error_Handler();
	while(1);
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <SystemClock_Config+0xc0>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <SystemClock_Config+0xe0>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	44020800 	.word	0x44020800
 8000690:	40022000 	.word	0x40022000

08000694 <MX_GPIO_Init>:
 *      Author: Admin
 */
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a2a      	ldr	r2, [pc, #168]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b28      	ldr	r3, [pc, #160]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a23      	ldr	r2, [pc, #140]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <MX_GPIO_Init+0xc8>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4815      	ldr	r0, [pc, #84]	@ (8000760 <MX_GPIO_Init+0xcc>)
 800070a:	f001 fcab 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MX_GPIO_Init+0xd0>)
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_GPIO_Init+0xd4>)
 8000724:	f001 fb4c 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	4808      	ldr	r0, [pc, #32]	@ (8000760 <MX_GPIO_Init+0xcc>)
 8000740:	f001 fb3e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2018      	movs	r0, #24
 800074a:	f000 fca3 	bl	8001094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800074e:	2018      	movs	r0, #24
 8000750:	f000 fcba 	bl	80010c8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	44020c00 	.word	0x44020c00
 8000760:	42020000 	.word	0x42020000
 8000764:	10210000 	.word	0x10210000
 8000768:	42020800 	.word	0x42020800

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 faf5 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f7ff ff1b 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f7ff ff8b 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800077e:	f000 f82b 	bl	80007d8 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000782:	f000 fa77 	bl	8000c74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  for(uint8_t i = 0; i < 8 ;i++){
 8000786:	2300      	movs	r3, #0
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	e008      	b.n	800079e <main+0x32>
	  CAN_Payload.dataTx[i] = i;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <main+0x64>)
 8000790:	4413      	add	r3, r2
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  for(uint8_t i = 0; i < 8 ;i++){
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	3301      	adds	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	d9f3      	bls.n	800078c <main+0x20>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // HAL_Delay(10);
	  for (uint8_t i = 0; i < 10 ;i++){
 80007a4:	2300      	movs	r3, #0
 80007a6:	71bb      	strb	r3, [r7, #6]
 80007a8:	e00e      	b.n	80007c8 <main+0x5c>
		  CAN_Payload.msgID = ID[i];
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <main+0x68>)
 80007ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <main+0x64>)
 80007b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		  TX_Send_CAN();
 80007b8:	f000 f872 	bl	80008a0 <TX_Send_CAN>
		  HAL_Delay(5);
 80007bc:	2005      	movs	r0, #5
 80007be:	f000 fb8d 	bl	8000edc <HAL_Delay>
	  for (uint8_t i = 0; i < 10 ;i++){
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	3301      	adds	r3, #1
 80007c6:	71bb      	strb	r3, [r7, #6]
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	2b09      	cmp	r3, #9
 80007cc:	d9ed      	bls.n	80007aa <main+0x3e>
 80007ce:	e7e9      	b.n	80007a4 <main+0x38>
 80007d0:	2000003c 	.word	0x2000003c
 80007d4:	20000000 	.word	0x20000000

080007d8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007dc:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 80007de:	4a29      	ldr	r2, [pc, #164]	@ (8000884 <MX_FDCAN1_Init+0xac>)
 80007e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007e2:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007e8:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007ee:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000802:	2200      	movs	r2, #0
 8000804:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000808:	2219      	movs	r2, #25
 800080a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 800080e:	2201      	movs	r2, #1
 8000810:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000814:	220d      	movs	r2, #13
 8000816:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 800081a:	2202      	movs	r2, #2
 800081c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000820:	2201      	movs	r2, #1
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000824:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000826:	2201      	movs	r2, #1
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 800082c:	2201      	movs	r2, #1
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000832:	2201      	movs	r2, #1
 8000834:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000838:	2201      	movs	r2, #1
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800083c:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 800083e:	2200      	movs	r2, #0
 8000840:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 8000844:	2200      	movs	r2, #0
 8000846:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 800084a:	f000 fda1 	bl	8001390 <HAL_FDCAN_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000854:	f000 f862 	bl	800091c <Error_Handler>
  }

  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 800085a:	f000 fef3 	bl	8001644 <HAL_FDCAN_Start>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_FDCAN1_Init+0x90>
   	 /* Notification Error */
   	Error_Handler();
 8000864:	f000 f85a 	bl	800091c <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000868:	2200      	movs	r2, #0
 800086a:	2101      	movs	r1, #1
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_FDCAN1_Init+0xa8>)
 800086e:	f000 ff55 	bl	800171c <HAL_FDCAN_ActivateNotification>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_FDCAN1_Init+0xa4>
  {
	  /* Notification Error */
 	Error_Handler();
 8000878:	f000 f850 	bl	800091c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000009c 	.word	0x2000009c
 8000884:	4000a400 	.word	0x4000a400

08000888 <HAL_GPIO_EXTI_Falling_Callback>:


/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
//				 SetFilter(0x105,0x7FF);
//
//			}
//			counter ^= 1;
		}
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <TX_Send_CAN>:

void TX_Send_CAN(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	 while ((hfdcan1.Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0) {
 80008a4:	bf00      	nop
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <TX_Send_CAN+0x70>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f7      	bne.n	80008a6 <TX_Send_CAN+0x6>
	    }

    /* ----- Prepare CAN data --------------------------------------- */
    CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <TX_Send_CAN+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
    CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID; //CAN_Payload.msgID
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <TX_Send_CAN+0x74>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c0:	4a14      	ldr	r2, [pc, #80]	@ (8000914 <TX_Send_CAN+0x74>)
 80008c2:	6013      	str	r3, [r2, #0]
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008c4:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <TX_Send_CAN+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;        // 8-byte payloaD
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <TX_Send_CAN+0x74>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	60da      	str	r2, [r3, #12]
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008d0:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <TX_Send_CAN+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <TX_Send_CAN+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
    CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <TX_Send_CAN+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <TX_Send_CAN+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
    CAN_Payload.TxHeader.MessageMarker = 0;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <TX_Send_CAN+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]

    CAN_Payload.dataTx[0] ^= 1;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <TX_Send_CAN+0x74>)
 80008f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80008f4:	f083 0301 	eor.w	r3, r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <TX_Send_CAN+0x74>)
 80008fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50



    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 8000900:	4a05      	ldr	r2, [pc, #20]	@ (8000918 <TX_Send_CAN+0x78>)
 8000902:	4904      	ldr	r1, [pc, #16]	@ (8000914 <TX_Send_CAN+0x74>)
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <TX_Send_CAN+0x70>)
 8000906:	f000 fec5 	bl	8001694 <HAL_FDCAN_AddMessageToTxFifoQ>
    {
    	//Error_Handler();
    }
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000009c 	.word	0x2000009c
 8000914:	2000003c 	.word	0x2000003c
 8000918:	2000008c 	.word	0x2000008c

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0ac      	sub	sp, #176	@ 0xb0
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2288      	movs	r2, #136	@ 0x88
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f005 fc73 	bl	8006244 <memset>
  if(hfdcan->Instance==FDCAN1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2a      	ldr	r2, [pc, #168]	@ (8000a0c <HAL_FDCAN_MspInit+0xd4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d14d      	bne.n	8000a04 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000968:	f04f 0200 	mov.w	r2, #0
 800096c:	f04f 0304 	mov.w	r3, #4
 8000970:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000978:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fb34 	bl	8002fec <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800098a:	f7ff ffc7 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <HAL_FDCAN_MspInit+0xd8>)
 8000990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000994:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <HAL_FDCAN_MspInit+0xd8>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800099a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_FDCAN_MspInit+0xd8>)
 80009a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_FDCAN_MspInit+0xd8>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <HAL_FDCAN_MspInit+0xd8>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <HAL_FDCAN_MspInit+0xd8>)
 80009be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	23c0      	movs	r3, #192	@ 0xc0
 80009cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009e2:	2309      	movs	r3, #9
 80009e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ec:	4619      	mov	r1, r3
 80009ee:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <HAL_FDCAN_MspInit+0xdc>)
 80009f0:	f001 f9e6 	bl	8001dc0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2027      	movs	r0, #39	@ 0x27
 80009fa:	f000 fb4b 	bl	8001094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009fe:	2027      	movs	r0, #39	@ 0x27
 8000a00:	f000 fb62 	bl	80010c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a04:	bf00      	nop
 8000a06:	37b0      	adds	r7, #176	@ 0xb0
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	4000a400 	.word	0x4000a400
 8000a10:	44020c00 	.word	0x44020c00
 8000a14:	42020800 	.word	0x42020800

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	2288      	movs	r2, #136	@ 0x88
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f005 fc03 	bl	8006244 <memset>
  if(huart->Instance==USART3)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a2a      	ldr	r2, [pc, #168]	@ (8000aec <HAL_UART_MspInit+0xd4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d14c      	bne.n	8000ae2 <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a48:	f04f 0204 	mov.w	r2, #4
 8000a4c:	f04f 0300 	mov.w	r3, #0
 8000a50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fac5 	bl	8002fec <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000a68:	f7ff ff58 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a6c:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <HAL_UART_MspInit+0xd8>)
 8000a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a72:	4a1f      	ldr	r2, [pc, #124]	@ (8000af0 <HAL_UART_MspInit+0xd8>)
 8000a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a78:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_UART_MspInit+0xd8>)
 8000a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <HAL_UART_MspInit+0xd8>)
 8000a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a90:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_UART_MspInit+0xd8>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0xd8>)
 8000a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000aa8:	2318      	movs	r3, #24
 8000aaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000ac0:	230d      	movs	r3, #13
 8000ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aca:	4619      	mov	r1, r3
 8000acc:	4809      	ldr	r0, [pc, #36]	@ (8000af4 <HAL_UART_MspInit+0xdc>)
 8000ace:	f001 f977 	bl	8001dc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	203c      	movs	r0, #60	@ 0x3c
 8000ad8:	f000 fadc 	bl	8001094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000adc:	203c      	movs	r0, #60	@ 0x3c
 8000ade:	f000 faf3 	bl	80010c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	37b0      	adds	r7, #176	@ 0xb0
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004800 	.word	0x40004800
 8000af0:	44020c00 	.word	0x44020c00
 8000af4:	42020000 	.word	0x42020000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 f9a5 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000b5a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b5e:	f001 fa99 	bl	8002094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <FDCAN1_IT0_IRQHandler+0x10>)
 8000b6e:	f000 febb 	bl	80018e8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000009c 	.word	0x2000009c

08000b7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <USART3_IRQHandler+0x10>)
 8000b82:	f004 fb55 	bl	8005230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000100 	.word	0x20000100

08000b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b96:	4b30      	ldr	r3, [pc, #192]	@ (8000c58 <SystemInit+0xc8>)
 8000b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c58 <SystemInit+0xc8>)
 8000b9e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <SystemInit+0xcc>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	@ (8000c5c <SystemInit+0xcc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <SystemInit+0xcc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000bb8:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <SystemInit+0xcc>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4927      	ldr	r1, [pc, #156]	@ (8000c5c <SystemInit+0xcc>)
 8000bbe:	4b28      	ldr	r3, [pc, #160]	@ (8000c60 <SystemInit+0xd0>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bc4:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <SystemInit+0xcc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000bca:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <SystemInit+0xcc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <SystemInit+0xcc>)
 8000bd2:	4a24      	ldr	r2, [pc, #144]	@ (8000c64 <SystemInit+0xd4>)
 8000bd4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <SystemInit+0xcc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <SystemInit+0xcc>)
 8000bde:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <SystemInit+0xd4>)
 8000be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <SystemInit+0xcc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000be8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <SystemInit+0xcc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <SystemInit+0xcc>)
 8000bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <SystemInit+0xcc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <SystemInit+0xc8>)
 8000bfc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c00:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <SystemInit+0xd8>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000c0a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000c12:	d003      	beq.n	8000c1c <SystemInit+0x8c>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000c1a:	d117      	bne.n	8000c4c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <SystemInit+0xd8>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <SystemInit+0xd8>)
 8000c2a:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <SystemInit+0xdc>)
 8000c2c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <SystemInit+0xd8>)
 8000c30:	4a0f      	ldr	r2, [pc, #60]	@ (8000c70 <SystemInit+0xe0>)
 8000c32:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <SystemInit+0xd8>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <SystemInit+0xd8>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <SystemInit+0xd8>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <SystemInit+0xd8>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	61d3      	str	r3, [r2, #28]
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	44020c00 	.word	0x44020c00
 8000c60:	fae2eae3 	.word	0xfae2eae3
 8000c64:	01010280 	.word	0x01010280
 8000c68:	40022000 	.word	0x40022000
 8000c6c:	08192a3b 	.word	0x08192a3b
 8000c70:	4c5d6e7f 	.word	0x4c5d6e7f

08000c74 <MX_USART3_UART_Init>:

#include"uart.h"
extern UART_HandleTypeDef huart3;

void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c7a:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <MX_USART3_UART_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbc:	4811      	ldr	r0, [pc, #68]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cbe:	f004 fa67 	bl	8005190 <HAL_UART_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART3_UART_Init+0x58>
  {
	  //Error_Handler();
	  	while(1);
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MX_USART3_UART_Init+0x54>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cd0:	f005 f9ed 	bl	80060ae <HAL_UARTEx_SetTxFifoThreshold>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART3_UART_Init+0x6a>
  {
	  //Error_Handler();
	  	while(1);
 8000cda:	bf00      	nop
 8000cdc:	e7fd      	b.n	8000cda <MX_USART3_UART_Init+0x66>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4808      	ldr	r0, [pc, #32]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ce2:	f005 fa22 	bl	800612a <HAL_UARTEx_SetRxFifoThreshold>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART3_UART_Init+0x7c>
  {
	  //Error_Handler();
	  	while(1);
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <MX_USART3_UART_Init+0x78>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f005 f9a3 	bl	800603c <HAL_UARTEx_DisableFifoMode>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x8c>
  {
	  //Error_Handler();
	  	while(1);
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MX_USART3_UART_Init+0x88>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000100 	.word	0x20000100
 8000d08:	40004800 	.word	0x40004800

08000d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d12:	e003      	b.n	8000d1c <LoopCopyDataInit>

08000d14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d1a:	3104      	adds	r1, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d1c:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d24:	d3f6      	bcc.n	8000d14 <CopyDataInit>
	ldr	r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	@ (8000d54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d28:	e002      	b.n	8000d30 <LoopFillZerobss>

08000d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d2c:	f842 3b04 	str.w	r3, [r2], #4

08000d30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <LoopForever+0x16>)
	cmp	r2, r3
 8000d32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d34:	d3f9      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d36:	f7ff ff2b 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f005 fa8b 	bl	8006254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3e:	f7ff fd15 	bl	800076c <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d44:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000d48:	08006314 	.word	0x08006314
	ldr	r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d50:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8000d54:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8000d58:	20000198 	.word	0x20000198

08000d5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f98a 	bl	800107e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d6a:	f001 ffb5 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_Init+0x44>)
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	490b      	ldr	r1, [pc, #44]	@ (8000da8 <HAL_Init+0x48>)
 8000d7a:	5ccb      	ldrb	r3, [r1, r3]
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <HAL_Init+0x4c>)
 8000d82:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d84:	2004      	movs	r0, #4
 8000d86:	f000 f9cf 	bl	8001128 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f810 	bl	8000db0 <HAL_InitTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e002      	b.n	8000da0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9a:	f7ff fdc5 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	44020c00 	.word	0x44020c00
 8000da8:	080062b4 	.word	0x080062b4
 8000dac:	20000014 	.word	0x20000014

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000dbc:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <HAL_InitTick+0xdc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e05c      	b.n	8000e82 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000dc8:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <HAL_InitTick+0xe0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d10c      	bne.n	8000dee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HAL_InitTick+0xe4>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <HAL_InitTick+0xdc>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e037      	b.n	8000e5e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000dee:	f000 f9f3 	bl	80011d8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000df2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d023      	beq.n	8000e42 <HAL_InitTick+0x92>
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d82d      	bhi.n	8000e5c <HAL_InitTick+0xac>
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_InitTick+0x5e>
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d00d      	beq.n	8000e28 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000e0c:	e026      	b.n	8000e5c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <HAL_InitTick+0xe4>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <HAL_InitTick+0xdc>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4619      	mov	r1, r3
 8000e18:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e24:	60fb      	str	r3, [r7, #12]
        break;
 8000e26:	e01a      	b.n	8000e5e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_InitTick+0xdc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e36:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]
        break;
 8000e40:	e00d      	b.n	8000e5e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e42:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_InitTick+0xdc>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e58:	60fb      	str	r3, [r7, #12]
        break;
 8000e5a:	e000      	b.n	8000e5e <HAL_InitTick+0xae>
        break;
 8000e5c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f000 f940 	bl	80010e4 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e009      	b.n	8000e82 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	f04f 30ff 	mov.w	r0, #4294967295
 8000e76:	f000 f90d 	bl	8001094 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000e7a:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <HAL_InitTick+0xe8>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000001c 	.word	0x2000001c
 8000e90:	e000e010 	.word	0xe000e010
 8000e94:	20000014 	.word	0x20000014
 8000e98:	20000018 	.word	0x20000018

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000001c 	.word	0x2000001c
 8000ec0:	20000194 	.word	0x20000194

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000194 	.word	0x20000194

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000001c 	.word	0x2000001c

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff4c 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a2:	f7ff ff63 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	6978      	ldr	r0, [r7, #20]
 80010ae:	f7ff ffb3 	bl	8001018 <NVIC_EncodePriority>
 80010b2:	4602      	mov	r2, r0
 80010b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff82 	bl	8000fc4 <__NVIC_SetPriority>
}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff56 	bl	8000f88 <__NVIC_EnableIRQ>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f4:	d301      	bcc.n	80010fa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00d      	b.n	8001116 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_SYSTICK_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_SYSTICK_Config+0x40>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_SYSTICK_Config+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <HAL_SYSTICK_Config+0x40>)
 800110e:	f043 0303 	orr.w	r3, r3, #3
 8001112:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b04      	cmp	r3, #4
 8001134:	d844      	bhi.n	80011c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001136:	a201      	add	r2, pc, #4	@ (adr r2, 800113c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800115f 	.word	0x0800115f
 8001140:	0800117d 	.word	0x0800117d
 8001144:	0800119f 	.word	0x0800119f
 8001148:	080011c1 	.word	0x080011c1
 800114c:	08001151 	.word	0x08001151
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1e      	ldr	r2, [pc, #120]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6013      	str	r3, [r2, #0]
      break;
 800115c:	e031      	b.n	80011c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800115e:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1b      	ldr	r2, [pc, #108]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001164:	f023 0304 	bic.w	r3, r3, #4
 8001168:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800116c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001170:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001172:	f023 030c 	bic.w	r3, r3, #12
 8001176:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800117a:	e022      	b.n	80011c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a13      	ldr	r2, [pc, #76]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001182:	f023 0304 	bic.w	r3, r3, #4
 8001186:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800118a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800118e:	f023 030c 	bic.w	r3, r3, #12
 8001192:	4a10      	ldr	r2, [pc, #64]	@ (80011d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800119c:	e011      	b.n	80011c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011b0:	f023 030c 	bic.w	r3, r3, #12
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80011be:	e000      	b.n	80011c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80011c0:	bf00      	nop
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010
 80011d4:	44020c00 	.word	0x44020c00

080011d8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80011ea:	2304      	movs	r3, #4
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	e01e      	b.n	800122e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80011f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d00f      	beq.n	8001222 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d80f      	bhi.n	8001228 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d003      	beq.n	800121c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001214:	e008      	b.n	8001228 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
        break;
 800121a:	e008      	b.n	800122e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
        break;
 8001220:	e005      	b.n	800122e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001222:	2302      	movs	r3, #2
 8001224:	607b      	str	r3, [r7, #4]
        break;
 8001226:	e002      	b.n	800122e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
        break;
 800122c:	bf00      	nop
    }
  }
  return systick_source;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e010 	.word	0xe000e010
 8001240:	44020c00 	.word	0x44020c00

08001244 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800124c:	f7ff fe3a 	bl	8000ec4 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e06b      	b.n	8001334 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d008      	beq.n	800127a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2220      	movs	r2, #32
 800126c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e05c      	b.n	8001334 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0204 	orr.w	r2, r2, #4
 8001288:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2205      	movs	r2, #5
 800128e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001292:	e020      	b.n	80012d6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001294:	f7ff fe16 	bl	8000ec4 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d919      	bls.n	80012d6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	f043 0210 	orr.w	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2203      	movs	r2, #3
 80012b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c6:	2201      	movs	r2, #1
 80012c8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e02e      	b.n	8001334 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0d7      	beq.n	8001294 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0202 	orr.w	r2, r2, #2
 80012f2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2204      	movs	r2, #4
 80012f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001304:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800131e:	2201      	movs	r2, #1
 8001320:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e019      	b.n	8001382 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d004      	beq.n	8001364 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e00e      	b.n	8001382 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2204      	movs	r2, #4
 8001368:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e147      	b.n	8001632 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fabe 	bl	8000938 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0210 	bic.w	r2, r2, #16
 80013ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff fd7a 	bl	8000ec4 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013d2:	e012      	b.n	80013fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013d4:	f7ff fd76 	bl	8000ec4 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90b      	bls.n	80013fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e11b      	b.n	8001632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b08      	cmp	r3, #8
 8001406:	d0e5      	beq.n	80013d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001418:	f7ff fd54 	bl	8000ec4 <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800141e:	e012      	b.n	8001446 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001420:	f7ff fd50 	bl	8000ec4 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d90b      	bls.n	8001446 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0f5      	b.n	8001632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0e5      	beq.n	8001420 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0202 	orr.w	r2, r2, #2
 8001462:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a74      	ldr	r2, [pc, #464]	@ (800163c <HAL_FDCAN_Init+0x2ac>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d103      	bne.n	8001476 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800146e:	4a74      	ldr	r2, [pc, #464]	@ (8001640 <HAL_FDCAN_Init+0x2b0>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7c1b      	ldrb	r3, [r3, #16]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e007      	b.n	80014a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800149e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7c5b      	ldrb	r3, [r3, #17]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d108      	bne.n	80014ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699a      	ldr	r2, [r3, #24]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	e007      	b.n	80014ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80014c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7c9b      	ldrb	r3, [r3, #18]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014e0:	619a      	str	r2, [r3, #24]
 80014e2:	e007      	b.n	80014f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80014f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001518:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0210 	bic.w	r2, r2, #16
 8001528:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d108      	bne.n	8001544 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0204 	orr.w	r2, r2, #4
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	e02c      	b.n	800159e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d028      	beq.n	800159e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d01c      	beq.n	800158e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001562:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0210 	orr.w	r2, r2, #16
 8001572:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d110      	bne.n	800159e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0220 	orr.w	r2, r2, #32
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	e007      	b.n	800159e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	3b01      	subs	r3, #1
 80015c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80015d2:	d115      	bne.n	8001600 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	3b01      	subs	r3, #1
 80015e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	3b01      	subs	r3, #1
 80015ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	3b01      	subs	r3, #1
 80015f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fb00 	bl	8001c1c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	4000a400 	.word	0x4000a400
 8001640:	4000a500 	.word	0x4000a500

08001644 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d110      	bne.n	800167a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e006      	b.n	8001688 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	f043 0204 	orr.w	r2, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d12c      	bne.n	8001706 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e023      	b.n	8001714 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 faf0 	bl	8001cc8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80016f8:	2201      	movs	r2, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e006      	b.n	8001714 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f043 0208 	orr.w	r2, r3, #8
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800172e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d003      	beq.n	800173e <HAL_FDCAN_ActivateNotification+0x22>
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b02      	cmp	r3, #2
 800173a:	f040 80c8 	bne.w	80018ce <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001744:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d03b      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d031      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d027      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01d      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d013      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00c      	beq.n	80017e2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d107      	bne.n	80017e2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13b      	bne.n	800186e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d131      	bne.n	800186e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d127      	bne.n	800186e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d11d      	bne.n	800186e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d113      	bne.n	800186e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0202 	orr.w	r2, r2, #2
 800187c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	430a      	orrs	r2, r1
 8001898:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e006      	b.n	80018dc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001904:	4013      	ands	r3, r2
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800191c:	4013      	ands	r3, r2
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001926:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001934:	4013      	ands	r3, r2
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001942:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194a:	6a3a      	ldr	r2, [r7, #32]
 800194c:	4013      	ands	r3, r2
 800194e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001956:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800195a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	4013      	ands	r3, r2
 8001966:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001976:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2240      	movs	r2, #64	@ 0x40
 8001992:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f921 	bl	8001bdc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d019      	beq.n	80019d8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d014      	beq.n	80019d8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019b6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019d0:	6939      	ldr	r1, [r7, #16]
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8e3 	bl	8001b9e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8a2 	bl	8001b32 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8a2 	bl	8001b48 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a10:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8a2 	bl	8001b5e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00c      	beq.n	8001a3e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a36:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f89b 	bl	8001b74 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d018      	beq.n	8001a7a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d013      	beq.n	8001a7a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a5a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f887 	bl	8001b88 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00c      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f88b 	bl	8001bb4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00c      	beq.n	8001ac2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001aba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f883 	bl	8001bc8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00f      	beq.n	8001aec <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ade:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001afa:	69f9      	ldr	r1, [r7, #28]
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f881 	bl	8001c04 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f863 	bl	8001bf0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3730      	adds	r7, #48	@ 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001c24:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001c26:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c36:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3e:	041a      	lsls	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c5c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c64:	061a      	lsls	r2, r3, #24
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e005      	b.n	8001caa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d3f3      	bcc.n	8001c9e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	4000ac00 	.word	0x4000ac00

08001cc8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10a      	bne.n	8001cf4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001ce6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e00a      	b.n	8001d0a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001cfc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001d02:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d08:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d14:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001d1a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001d20:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	3304      	adds	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	3304      	adds	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e020      	b.n	8001d9e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3303      	adds	r3, #3
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	440b      	add	r3, r1
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d74:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	440b      	add	r3, r1
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d82:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	440a      	add	r2, r1
 8001d8a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d8c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3304      	adds	r3, #4
 8001d96:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a06      	ldr	r2, [pc, #24]	@ (8001dbc <FDCAN_CopyMessageToRAM+0xf4>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	461a      	mov	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d3d6      	bcc.n	8001d5c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3724      	adds	r7, #36	@ 0x24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	080062cc 	.word	0x080062cc

08001dc0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dce:	e136      	b.n	800203e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8128 	beq.w	8002038 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x38>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	d125      	bne.n	8001e44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	6979      	ldr	r1, [r7, #20]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d00b      	beq.n	8001e98 <HAL_GPIO_Init+0xd8>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8c:	2b11      	cmp	r3, #17
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	d130      	bne.n	8001efa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4013      	ands	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 0201 	and.w	r2, r3, #1
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d017      	beq.n	8001f32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4013      	ands	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d07c      	beq.n	8002038 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f3e:	4a47      	ldr	r2, [pc, #284]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3318      	adds	r3, #24
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0a9a      	lsrs	r2, r3, #10
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_GPIO_Init+0x2a0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	00d2      	lsls	r2, r2, #3
 8001f72:	4093      	lsls	r3, r2
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f7a:	4938      	ldr	r1, [pc, #224]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3318      	adds	r3, #24
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f88:	4b34      	ldr	r3, [pc, #208]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001fac:	4a2b      	ldr	r2, [pc, #172]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001fd6:	4a21      	ldr	r2, [pc, #132]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8001fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fe2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4013      	ands	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002002:	4a16      	ldr	r2, [pc, #88]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_GPIO_Init+0x29c>)
 800200c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002010:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002030:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_GPIO_Init+0x29c>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	3301      	adds	r3, #1
 800203c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f aec1 	bne.w	8001dd0 <HAL_GPIO_Init+0x10>
  }
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	44022000 	.word	0x44022000
 8002060:	002f7f7f 	.word	0x002f7f7f

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002080:	e002      	b.n	8002088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80020aa:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f814 	bl	80020e0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80020c4:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fbdb 	bl	8000888 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	44022000 	.word	0x44022000

080020e0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	f000 bc28 	b.w	800295c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210c:	4b94      	ldr	r3, [pc, #592]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f003 0318 	and.w	r3, r3, #24
 8002114:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002116:	4b92      	ldr	r3, [pc, #584]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05b      	beq.n	80021e4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b08      	cmp	r3, #8
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x46>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b18      	cmp	r3, #24
 8002136:	d114      	bne.n	8002162 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d111      	bne.n	8002162 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f000 bc08 	b.w	800295c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800214c:	4b84      	ldr	r3, [pc, #528]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	4981      	ldr	r1, [pc, #516]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800215c:	4313      	orrs	r3, r2
 800215e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002160:	e040      	b.n	80021e4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d023      	beq.n	80021b2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800216a:	4b7d      	ldr	r3, [pc, #500]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7c      	ldr	r2, [pc, #496]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe fea5 	bl	8000ec4 <HAL_GetTick>
 800217a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800217e:	f7fe fea1 	bl	8000ec4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e3e5      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002190:	4b73      	ldr	r3, [pc, #460]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800219c:	4b70      	ldr	r3, [pc, #448]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	496d      	ldr	r1, [pc, #436]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	618b      	str	r3, [r1, #24]
 80021b0:	e018      	b.n	80021e4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6a      	ldr	r2, [pc, #424]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80021b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe fe81 	bl	8000ec4 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80021c6:	f7fe fe7d 	bl	8000ec4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e3c1      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80021d8:	4b61      	ldr	r3, [pc, #388]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a0 	beq.w	8002332 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x10c>
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b18      	cmp	r3, #24
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 8092 	bne.w	8002332 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e3a4      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x132>
 800221c:	4b50      	ldr	r3, [pc, #320]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a4f      	ldr	r2, [pc, #316]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e058      	b.n	80022dc <HAL_RCC_OscConfig+0x1e4>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d112      	bne.n	8002258 <HAL_RCC_OscConfig+0x160>
 8002232:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a4a      	ldr	r2, [pc, #296]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b48      	ldr	r3, [pc, #288]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a47      	ldr	r2, [pc, #284]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002244:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b45      	ldr	r3, [pc, #276]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a44      	ldr	r2, [pc, #272]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e041      	b.n	80022dc <HAL_RCC_OscConfig+0x1e4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x190>
 8002262:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a3e      	ldr	r2, [pc, #248]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a3b      	ldr	r2, [pc, #236]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002274:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a38      	ldr	r2, [pc, #224]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e029      	b.n	80022dc <HAL_RCC_OscConfig+0x1e4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002290:	d112      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1c0>
 8002292:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a32      	ldr	r2, [pc, #200]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e011      	b.n	80022dc <HAL_RCC_OscConfig+0x1e4>
 80022b8:	4b29      	ldr	r3, [pc, #164]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a28      	ldr	r2, [pc, #160]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a25      	ldr	r2, [pc, #148]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a22      	ldr	r2, [pc, #136]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 80022d6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fdee 	bl	8000ec4 <HAL_GetTick>
 80022e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fdea 	bl	8000ec4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e32e      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x1f4>
 800230a:	e012      	b.n	8002332 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fdda 	bl	8000ec4 <HAL_GetTick>
 8002310:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002314:	f7fe fdd6 	bl	8000ec4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	@ 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e31a      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_RCC_OscConfig+0x268>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 809a 	beq.w	8002474 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x25a>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b18      	cmp	r3, #24
 800234a:	d149      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d146      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d104      	bne.n	8002364 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e2fe      	b.n	800295c <HAL_RCC_OscConfig+0x864>
 800235e:	bf00      	nop
 8002360:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800236a:	4b9a      	ldr	r3, [pc, #616]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0218 	and.w	r2, r3, #24
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	429a      	cmp	r2, r3
 8002378:	d014      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800237a:	4b96      	ldr	r3, [pc, #600]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0218 	bic.w	r2, r3, #24
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4993      	ldr	r1, [pc, #588]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800238c:	f000 fdd0 	bl	8002f30 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002390:	4b91      	ldr	r3, [pc, #580]	@ (80025d8 <HAL_RCC_OscConfig+0x4e0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fd0b 	bl	8000db0 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e2db      	b.n	800295c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd8e 	bl	8000ec4 <HAL_GetTick>
 80023a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023ac:	f7fe fd8a 	bl	8000ec4 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e2ce      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023be:	4b85      	ldr	r3, [pc, #532]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80023ca:	4b82      	ldr	r3, [pc, #520]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	497e      	ldr	r1, [pc, #504]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80023de:	e049      	b.n	8002474 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02c      	beq.n	8002442 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80023e8:	4b7a      	ldr	r3, [pc, #488]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 0218 	bic.w	r2, r3, #24
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4977      	ldr	r1, [pc, #476]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80023fa:	4b76      	ldr	r3, [pc, #472]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a75      	ldr	r2, [pc, #468]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fd5d 	bl	8000ec4 <HAL_GetTick>
 800240a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800240e:	f7fe fd59 	bl	8000ec4 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e29d      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002420:	4b6c      	ldr	r3, [pc, #432]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800242c:	4b69      	ldr	r3, [pc, #420]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	4966      	ldr	r1, [pc, #408]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	610b      	str	r3, [r1, #16]
 8002440:	e018      	b.n	8002474 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b64      	ldr	r3, [pc, #400]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a63      	ldr	r2, [pc, #396]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fd39 	bl	8000ec4 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002456:	f7fe fd35 	bl	8000ec4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e279      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002468:	4b5a      	ldr	r3, [pc, #360]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03c      	beq.n	80024fa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002488:	4b52      	ldr	r3, [pc, #328]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800248a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800248e:	4a51      	ldr	r2, [pc, #324]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002490:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002494:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe fd14 	bl	8000ec4 <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024a0:	f7fe fd10 	bl	8000ec4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e254      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80024b2:	4b48      	ldr	r3, [pc, #288]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80024b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ef      	beq.n	80024a0 <HAL_RCC_OscConfig+0x3a8>
 80024c0:	e01b      	b.n	80024fa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c2:	4b44      	ldr	r3, [pc, #272]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80024c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c8:	4a42      	ldr	r2, [pc, #264]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80024ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fcf7 	bl	8000ec4 <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024da:	f7fe fcf3 	bl	8000ec4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e237      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024ec:	4b39      	ldr	r3, [pc, #228]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80024ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ef      	bne.n	80024da <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80d2 	beq.w	80026ac <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002508:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_RCC_OscConfig+0x4e4>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d118      	bne.n	8002546 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_OscConfig+0x4e4>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <HAL_RCC_OscConfig+0x4e4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002520:	f7fe fcd0 	bl	8000ec4 <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002528:	f7fe fccc 	bl	8000ec4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e210      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800253a:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_OscConfig+0x4e4>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0x468>
 800254e:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002554:	4a1f      	ldr	r2, [pc, #124]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800255e:	e074      	b.n	800264a <HAL_RCC_OscConfig+0x552>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d118      	bne.n	800259a <HAL_RCC_OscConfig+0x4a2>
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800256a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800256e:	4a19      	ldr	r2, [pc, #100]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002578:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800257a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800257e:	4a15      	ldr	r2, [pc, #84]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002584:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 800258a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800258e:	4a11      	ldr	r2, [pc, #68]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002598:	e057      	b.n	800264a <HAL_RCC_OscConfig+0x552>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d11e      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4e8>
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80025a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80025b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b8:	4a06      	ldr	r2, [pc, #24]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80025ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025c2:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80025c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c8:	4a02      	ldr	r2, [pc, #8]	@ (80025d4 <HAL_RCC_OscConfig+0x4dc>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025d2:	e03a      	b.n	800264a <HAL_RCC_OscConfig+0x552>
 80025d4:	44020c00 	.word	0x44020c00
 80025d8:	20000018 	.word	0x20000018
 80025dc:	44020800 	.word	0x44020800
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b85      	cmp	r3, #133	@ 0x85
 80025e6:	d118      	bne.n	800261a <HAL_RCC_OscConfig+0x522>
 80025e8:	4ba2      	ldr	r3, [pc, #648]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80025ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ee:	4aa1      	ldr	r2, [pc, #644]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025f8:	4b9e      	ldr	r3, [pc, #632]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80025fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025fe:	4a9d      	ldr	r2, [pc, #628]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002604:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002608:	4b9a      	ldr	r3, [pc, #616]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800260a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800260e:	4a99      	ldr	r2, [pc, #612]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002618:	e017      	b.n	800264a <HAL_RCC_OscConfig+0x552>
 800261a:	4b96      	ldr	r3, [pc, #600]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800261c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002620:	4a94      	ldr	r2, [pc, #592]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800262a:	4b92      	ldr	r3, [pc, #584]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800262c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002630:	4a90      	ldr	r2, [pc, #576]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800263a:	4b8e      	ldr	r3, [pc, #568]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800263c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002640:	4a8c      	ldr	r2, [pc, #560]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fc37 	bl	8000ec4 <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fc33 	bl	8000ec4 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e175      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002670:	4b80      	ldr	r3, [pc, #512]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ed      	beq.n	800265a <HAL_RCC_OscConfig+0x562>
 800267e:	e015      	b.n	80026ac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fc20 	bl	8000ec4 <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe fc1c 	bl	8000ec4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e15e      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800269e:	4b75      	ldr	r3, [pc, #468]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80026a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ed      	bne.n	8002688 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d036      	beq.n	8002726 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d019      	beq.n	80026f4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80026c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fbfa 	bl	8000ec4 <HAL_GetTick>
 80026d0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80026d4:	f7fe fbf6 	bl	8000ec4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e13a      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026e6:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x5dc>
 80026f2:	e018      	b.n	8002726 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80026fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fbe0 	bl	8000ec4 <HAL_GetTick>
 8002704:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002708:	f7fe fbdc 	bl	8000ec4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e120      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800271a:	4b56      	ldr	r3, [pc, #344]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8115 	beq.w	800295a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b18      	cmp	r3, #24
 8002734:	f000 80af 	beq.w	8002896 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	2b02      	cmp	r3, #2
 800273e:	f040 8086 	bne.w	800284e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002742:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4b      	ldr	r2, [pc, #300]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002748:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fbb9 	bl	8000ec4 <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002756:	f7fe fbb5 	bl	8000ec4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0f9      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002768:	4b42      	ldr	r3, [pc, #264]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002774:	4b3f      	ldr	r3, [pc, #252]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800277c:	f023 0303 	bic.w	r3, r3, #3
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002788:	0212      	lsls	r2, r2, #8
 800278a:	430a      	orrs	r2, r1
 800278c:	4939      	ldr	r1, [pc, #228]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	628b      	str	r3, [r1, #40]	@ 0x28
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002796:	3b01      	subs	r3, #1
 8002798:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	3b01      	subs	r3, #1
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ac:	3b01      	subs	r3, #1
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	3b01      	subs	r3, #1
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027c2:	492c      	ldr	r1, [pc, #176]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80027c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	4a29      	ldr	r2, [pc, #164]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027ce:	f023 0310 	bic.w	r3, r3, #16
 80027d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d8:	4a26      	ldr	r2, [pc, #152]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	4a24      	ldr	r2, [pc, #144]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80027ea:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	f023 020c 	bic.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	491f      	ldr	r1, [pc, #124]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	f023 0220 	bic.w	r2, r3, #32
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002808:	491a      	ldr	r1, [pc, #104]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002820:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fb4d 	bl	8000ec4 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800282e:	f7fe fb49 	bl	8000ec4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e08d      	b.n	800295c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x736>
 800284c:	e085      	b.n	800295a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a08      	ldr	r2, [pc, #32]	@ (8002874 <HAL_RCC_OscConfig+0x77c>)
 8002854:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fb33 	bl	8000ec4 <HAL_GetTick>
 800285e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002862:	f7fe fb2f 	bl	8000ec4 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d903      	bls.n	8002878 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e073      	b.n	800295c <HAL_RCC_OscConfig+0x864>
 8002874:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002878:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ee      	bne.n	8002862 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002884:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 800288a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	6293      	str	r3, [r2, #40]	@ 0x28
 8002894:	e061      	b.n	800295a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002896:	4b33      	ldr	r3, [pc, #204]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d031      	beq.n	800290e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0203 	and.w	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d12a      	bne.n	800290e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d122      	bne.n	800290e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d11a      	bne.n	800290e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	0a5b      	lsrs	r3, r3, #9
 80028dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d111      	bne.n	800290e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d108      	bne.n	800290e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	0e1b      	lsrs	r3, r3, #24
 8002900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e024      	b.n	800295c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002912:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 8002914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002920:	429a      	cmp	r2, r3
 8002922:	d01a      	beq.n	800295a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002924:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	4a0e      	ldr	r2, [pc, #56]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 800292a:	f023 0310 	bic.w	r3, r3, #16
 800292e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fac8 	bl	8000ec4 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002936:	bf00      	nop
 8002938:	f7fe fac4 	bl	8000ec4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	4293      	cmp	r3, r2
 8002942:	d0f9      	beq.n	8002938 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	4a06      	ldr	r2, [pc, #24]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <HAL_RCC_OscConfig+0x86c>)
 8002954:	f043 0310 	orr.w	r3, r3, #16
 8002958:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	44020c00 	.word	0x44020c00

08002968 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e19e      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4b83      	ldr	r3, [pc, #524]	@ (8002b8c <HAL_RCC_ClockConfig+0x224>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d910      	bls.n	80029ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b80      	ldr	r3, [pc, #512]	@ (8002b8c <HAL_RCC_ClockConfig+0x224>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 020f 	bic.w	r2, r3, #15
 8002992:	497e      	ldr	r1, [pc, #504]	@ (8002b8c <HAL_RCC_ClockConfig+0x224>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b8c <HAL_RCC_ClockConfig+0x224>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e186      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	4b74      	ldr	r3, [pc, #464]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d909      	bls.n	80029de <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80029ca:	4b71      	ldr	r3, [pc, #452]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	496d      	ldr	r1, [pc, #436]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	4b68      	ldr	r3, [pc, #416]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d909      	bls.n	8002a10 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80029fc:	4b64      	ldr	r3, [pc, #400]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4961      	ldr	r1, [pc, #388]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	4b5b      	ldr	r3, [pc, #364]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d908      	bls.n	8002a3e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002a2c:	4b58      	ldr	r3, [pc, #352]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4955      	ldr	r1, [pc, #340]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d010      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b50      	ldr	r3, [pc, #320]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d908      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f023 020f 	bic.w	r2, r3, #15
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	494a      	ldr	r1, [pc, #296]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8093 	beq.w	8002ba0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a82:	4b43      	ldr	r3, [pc, #268]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d121      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e113      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e107      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002ab2:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0fb      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac2:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0f3      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	492c      	ldr	r1, [pc, #176]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fe f9ee 	bl	8000ec4 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d112      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe f9e6 	bl	8000ec4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0d7      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0a:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0318 	and.w	r3, r3, #24
 8002b12:	2b18      	cmp	r3, #24
 8002b14:	d1ee      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x18c>
 8002b16:	e043      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d112      	bne.n	8002b46 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b22:	f7fe f9cf 	bl	8000ec4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e0c0      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 0318 	and.w	r3, r3, #24
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d1ee      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x1ba>
 8002b44:	e02c      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d122      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe f9b8 	bl	8000ec4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0a9      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <HAL_RCC_ClockConfig+0x228>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f003 0318 	and.w	r3, r3, #24
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d1ee      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x1e8>
 8002b72:	e015      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe f9a6 	bl	8000ec4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d906      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e097      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
 8002b8a:	bf00      	nop
 8002b8c:	40022000 	.word	0x40022000
 8002b90:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b94:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 0318 	and.w	r3, r3, #24
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e9      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b44      	ldr	r3, [pc, #272]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d208      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002bbc:	4b41      	ldr	r3, [pc, #260]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f023 020f 	bic.w	r2, r3, #15
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	493e      	ldr	r1, [pc, #248]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bce:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <HAL_RCC_ClockConfig+0x360>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d210      	bcs.n	8002bfe <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc8 <HAL_RCC_ClockConfig+0x360>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 020f 	bic.w	r2, r3, #15
 8002be4:	4938      	ldr	r1, [pc, #224]	@ (8002cc8 <HAL_RCC_ClockConfig+0x360>)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <HAL_RCC_ClockConfig+0x360>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e05d      	b.n	8002cba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d208      	bcs.n	8002c2c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4927      	ldr	r1, [pc, #156]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d209      	bcs.n	8002c5e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	491a      	ldr	r1, [pc, #104]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d209      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	490e      	ldr	r1, [pc, #56]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c90:	f000 f822 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_RCC_ClockConfig+0x35c>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490b      	ldr	r1, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x364>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x368>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_RCC_ClockConfig+0x36c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe f87e 	bl	8000db0 <HAL_InitTick>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	44020c00 	.word	0x44020c00
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	080062b4 	.word	0x080062b4
 8002cd0:	20000014 	.word	0x20000014
 8002cd4:	20000018 	.word	0x20000018

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cde:	4b8c      	ldr	r3, [pc, #560]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0318 	and.w	r3, r3, #24
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002cea:	4b8a      	ldr	r3, [pc, #552]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e107      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf0:	4b87      	ldr	r3, [pc, #540]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 0318 	and.w	r3, r3, #24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d112      	bne.n	8002d22 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002cfc:	4b84      	ldr	r3, [pc, #528]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d08:	4b81      	ldr	r3, [pc, #516]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	4a81      	ldr	r2, [pc, #516]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e0f1      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e0ee      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d22:	4b7b      	ldr	r3, [pc, #492]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0318 	and.w	r3, r3, #24
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d102      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x244>)
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e0e5      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d34:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 0318 	and.w	r3, r3, #24
 8002d3c:	2b18      	cmp	r3, #24
 8002d3e:	f040 80dd 	bne.w	8002efc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d42:	4b73      	ldr	r3, [pc, #460]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002d4c:	4b70      	ldr	r3, [pc, #448]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002d58:	4b6d      	ldr	r3, [pc, #436]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d64:	4b6a      	ldr	r3, [pc, #424]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80b7 	beq.w	8002ef6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0xbe>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d056      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x16a>
 8002d94:	e077      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d96:	4b5e      	ldr	r3, [pc, #376]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02d      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002da2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	08db      	lsrs	r3, r3, #3
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	4a5a      	ldr	r2, [pc, #360]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x240>)
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dcc:	4b50      	ldr	r3, [pc, #320]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ddc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002f20 <HAL_RCC_GetSysClockFreq+0x248>
 8002de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002dfc:	e065      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e08:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f24 <HAL_RCC_GetSysClockFreq+0x24c>
 8002e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e10:	4b3f      	ldr	r3, [pc, #252]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e20:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e24:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002f20 <HAL_RCC_GetSysClockFreq+0x248>
 8002e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e40:	e043      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x250>
 8002e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e54:	4b2e      	ldr	r3, [pc, #184]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e64:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e68:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002f20 <HAL_RCC_GetSysClockFreq+0x248>
 8002e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e80:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002e84:	e021      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e90:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f2c <HAL_RCC_GetSysClockFreq+0x254>
 8002e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e98:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ea8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eac:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002f20 <HAL_RCC_GetSysClockFreq+0x248>
 8002eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002ec8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	0a5b      	lsrs	r3, r3, #9
 8002ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ee2:	edd7 6a06 	vldr	s13, [r7, #24]
 8002ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eee:	ee17 3a90 	vmov	r3, s15
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e004      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e001      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x240>)
 8002efe:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002f00:	69fb      	ldr	r3, [r7, #28]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	44020c00 	.word	0x44020c00
 8002f14:	003d0900 	.word	0x003d0900
 8002f18:	03d09000 	.word	0x03d09000
 8002f1c:	016e3600 	.word	0x016e3600
 8002f20:	46000000 	.word	0x46000000
 8002f24:	4c742400 	.word	0x4c742400
 8002f28:	4bb71b00 	.word	0x4bb71b00
 8002f2c:	4a742400 	.word	0x4a742400

08002f30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f34:	f7ff fed0 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f3e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f42:	4907      	ldr	r1, [pc, #28]	@ (8002f60 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f46:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4e:	4a05      	ldr	r2, [pc, #20]	@ (8002f64 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f50:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f54:	681b      	ldr	r3, [r3, #0]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	44020c00 	.word	0x44020c00
 8002f60:	080062b4 	.word	0x080062b4
 8002f64:	20000014 	.word	0x20000014

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002f6c:	f7ff ffe0 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4904      	ldr	r1, [pc, #16]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	44020c00 	.word	0x44020c00
 8002f90:	080062c4 	.word	0x080062c4

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002f98:	f7ff ffca 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	@ (8002fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	44020c00 	.word	0x44020c00
 8002fbc:	080062c4 	.word	0x080062c4

08002fc0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002fc4:	f7ff ffb4 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	0b1b      	lsrs	r3, r3, #12
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	44020c00 	.word	0x44020c00
 8002fe8:	080062c4 	.word	0x080062c4

08002fec <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b0aa      	sub	sp, #168	@ 0xa8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003004:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003010:	2500      	movs	r5, #0
 8003012:	ea54 0305 	orrs.w	r3, r4, r5
 8003016:	d00b      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003018:	4bb8      	ldr	r3, [pc, #736]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800301e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003022:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003028:	4ab4      	ldr	r2, [pc, #720]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800302a:	430b      	orrs	r3, r1
 800302c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003030:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f002 0801 	and.w	r8, r2, #1
 800303c:	f04f 0900 	mov.w	r9, #0
 8003040:	ea58 0309 	orrs.w	r3, r8, r9
 8003044:	d038      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003046:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800304a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304c:	2b05      	cmp	r3, #5
 800304e:	d819      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003050:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	0800308d 	.word	0x0800308d
 800305c:	08003071 	.word	0x08003071
 8003060:	08003085 	.word	0x08003085
 8003064:	0800308d 	.word	0x0800308d
 8003068:	0800308d 	.word	0x0800308d
 800306c:	0800308d 	.word	0x0800308d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003070:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003074:	3308      	adds	r3, #8
 8003076:	4618      	mov	r0, r3
 8003078:	f001 fff2 	bl	8005060 <RCCEx_PLL2_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003082:	e004      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800308a:	e000      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 800308c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800308e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10c      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003096:	4b99      	ldr	r3, [pc, #612]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800309c:	f023 0107 	bic.w	r1, r3, #7
 80030a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	4a95      	ldr	r2, [pc, #596]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030a8:	430b      	orrs	r3, r1
 80030aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030ae:	e003      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f002 0a02 	and.w	sl, r2, #2
 80030c4:	f04f 0b00 	mov.w	fp, #0
 80030c8:	ea5a 030b 	orrs.w	r3, sl, fp
 80030cc:	d03c      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80030ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	2b28      	cmp	r3, #40	@ 0x28
 80030d6:	d01b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80030d8:	2b28      	cmp	r3, #40	@ 0x28
 80030da:	d815      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d019      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d811      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80030e4:	2b18      	cmp	r3, #24
 80030e6:	d017      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80030e8:	2b18      	cmp	r3, #24
 80030ea:	d80d      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x130>
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d109      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030f8:	3308      	adds	r3, #8
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 ffb0 	bl	8005060 <RCCEx_PLL2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003106:	e00a      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800310e:	e006      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003110:	bf00      	nop
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003114:	bf00      	nop
 8003116:	e002      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003118:	bf00      	nop
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003126:	4b75      	ldr	r3, [pc, #468]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800312c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003130:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	4a71      	ldr	r2, [pc, #452]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003138:	430b      	orrs	r3, r1
 800313a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800313e:	e003      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003144:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003148:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f002 0304 	and.w	r3, r2, #4
 8003154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003158:	2300      	movs	r3, #0
 800315a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800315e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003162:	460b      	mov	r3, r1
 8003164:	4313      	orrs	r3, r2
 8003166:	d040      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003168:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800316c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003172:	d01e      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003174:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003178:	d817      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800317a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800317e:	d01a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003184:	d811      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003186:	2bc0      	cmp	r3, #192	@ 0xc0
 8003188:	d017      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800318a:	2bc0      	cmp	r3, #192	@ 0xc0
 800318c:	d80d      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d109      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800319a:	3308      	adds	r3, #8
 800319c:	4618      	mov	r0, r3
 800319e:	f001 ff5f 	bl	8005060 <RCCEx_PLL2_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80031a8:	e00a      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80031b2:	bf00      	nop
 80031b4:	e004      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80031be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80031c8:	4b4c      	ldr	r3, [pc, #304]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031ce:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80031d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	4a48      	ldr	r2, [pc, #288]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031da:	430b      	orrs	r3, r1
 80031dc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80031e0:	e003      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031e6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80031f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003200:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003204:	460b      	mov	r3, r1
 8003206:	4313      	orrs	r3, r2
 8003208:	d043      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800320a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003214:	d021      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003216:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800321a:	d81a      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800321c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003220:	d01d      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003222:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003226:	d814      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003228:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800322c:	d019      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800322e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003232:	d80e      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d016      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800323c:	d109      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800323e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003242:	3308      	adds	r3, #8
 8003244:	4618      	mov	r0, r3
 8003246:	f001 ff0b 	bl	8005060 <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003250:	e00a      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003258:	e006      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800325a:	bf00      	nop
 800325c:	e004      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800325e:	bf00      	nop
 8003260:	e002      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003268:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003270:	4b22      	ldr	r3, [pc, #136]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003276:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800327a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003282:	430b      	orrs	r3, r1
 8003284:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003288:	e003      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800328e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003292:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800329e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032a0:	2300      	movs	r3, #0
 80032a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80032a8:	460b      	mov	r3, r1
 80032aa:	4313      	orrs	r3, r2
 80032ac:	d03e      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80032ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032b8:	d01b      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80032ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032be:	d814      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80032c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c4:	d017      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80032c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032ca:	d80e      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d017      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d4:	d109      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032da:	3308      	adds	r3, #8
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 febf 	bl	8005060 <RCCEx_PLL2_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80032e8:	e00b      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032f0:	e007      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80032f2:	bf00      	nop
 80032f4:	e005      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80032f6:	bf00      	nop
 80032f8:	e003      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80032fa:	bf00      	nop
 80032fc:	44020c00 	.word	0x44020c00
        break;
 8003300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003302:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800330a:	4ba5      	ldr	r3, [pc, #660]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800330c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003310:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4aa1      	ldr	r2, [pc, #644]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800331c:	430b      	orrs	r3, r1
 800331e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003322:	e003      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003328:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800332c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003338:	673b      	str	r3, [r7, #112]	@ 0x70
 800333a:	2300      	movs	r3, #0
 800333c:	677b      	str	r3, [r7, #116]	@ 0x74
 800333e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003342:	460b      	mov	r3, r1
 8003344:	4313      	orrs	r3, r2
 8003346:	d03b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800334c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003352:	d01b      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003354:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003358:	d814      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800335a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800335e:	d017      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003360:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003364:	d80e      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d014      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800336a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800336e:	d109      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003370:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003374:	3308      	adds	r3, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f001 fe72 	bl	8005060 <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003382:	e008      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800338c:	bf00      	nop
 800338e:	e002      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800339e:	4b80      	ldr	r3, [pc, #512]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033a4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80033a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ae:	4a7c      	ldr	r2, [pc, #496]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033b0:	430b      	orrs	r3, r1
 80033b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033b6:	e003      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80033c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80033cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033ce:	2300      	movs	r3, #0
 80033d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80033d6:	460b      	mov	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	d033      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80033dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033e6:	d015      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80033e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033ec:	d80e      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d012      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80033f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f6:	d109      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033fc:	3308      	adds	r3, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fe2e 	bl	8005060 <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800340a:	e006      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003412:	e002      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003422:	4b5f      	ldr	r3, [pc, #380]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003428:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800342c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003434:	430b      	orrs	r3, r1
 8003436:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003440:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	2100      	movs	r1, #0
 800344e:	6639      	str	r1, [r7, #96]	@ 0x60
 8003450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003454:	667b      	str	r3, [r7, #100]	@ 0x64
 8003456:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d033      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003460:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800346a:	d015      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800346c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003470:	d80e      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d012      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003476:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800347a:	d109      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800347c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003480:	3308      	adds	r3, #8
 8003482:	4618      	mov	r0, r3
 8003484:	f001 fdec 	bl	8005060 <RCCEx_PLL2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800348e:	e006      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003496:	e002      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003498:	bf00      	nop
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800349c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800349e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80034a6:	4b3e      	ldr	r3, [pc, #248]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034ac:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b6:	4a3a      	ldr	r2, [pc, #232]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034b8:	430b      	orrs	r3, r1
 80034ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034be:	e003      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	2100      	movs	r1, #0
 80034d2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80034e4:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4a2d      	ldr	r2, [pc, #180]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80034ee:	61d3      	str	r3, [r2, #28]
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034f2:	69d9      	ldr	r1, [r3, #28]
 80034f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034fc:	4a28      	ldr	r2, [pc, #160]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034fe:	430b      	orrs	r3, r1
 8003500:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003502:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800350e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003510:	2300      	movs	r3, #0
 8003512:	657b      	str	r3, [r7, #84]	@ 0x54
 8003514:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003518:	460b      	mov	r3, r1
 800351a:	4313      	orrs	r3, r2
 800351c:	d046      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800351e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003528:	d021      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800352a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800352e:	d81a      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003534:	d01d      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353a:	d814      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800353c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003540:	d019      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003546:	d80e      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d016      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 800354c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003550:	d109      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003552:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003556:	3308      	adds	r3, #8
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fd81 	bl	8005060 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003564:	e00a      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800356c:	e006      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800356e:	bf00      	nop
 8003570:	e004      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800357a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10f      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800358a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800358e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003594:	4a02      	ldr	r2, [pc, #8]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003596:	430b      	orrs	r3, r1
 8003598:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800359c:	e006      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800359e:	bf00      	nop
 80035a0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80035b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035ba:	2300      	movs	r3, #0
 80035bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d043      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80035c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80035d2:	d021      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80035d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80035d8:	d81a      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80035da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035de:	d01d      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x630>
 80035e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035e4:	d814      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80035e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035ea:	d019      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80035ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035f0:	d80e      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fa:	d109      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003600:	3308      	adds	r3, #8
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fd2c 	bl	8005060 <RCCEx_PLL2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800360e:	e00a      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003616:	e006      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003618:	bf00      	nop
 800361a:	e004      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800361c:	bf00      	nop
 800361e:	e002      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003626:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10c      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800362e:	4bb6      	ldr	r3, [pc, #728]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003630:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003634:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003638:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	4ab2      	ldr	r2, [pc, #712]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003640:	430b      	orrs	r3, r1
 8003642:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003646:	e003      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800364c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003650:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800365c:	643b      	str	r3, [r7, #64]	@ 0x40
 800365e:	2300      	movs	r3, #0
 8003660:	647b      	str	r3, [r7, #68]	@ 0x44
 8003662:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003666:	460b      	mov	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	d030      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800366c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003672:	2b05      	cmp	r3, #5
 8003674:	d80f      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003676:	2b03      	cmp	r3, #3
 8003678:	d211      	bcs.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800367a:	2b01      	cmp	r3, #1
 800367c:	d911      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800367e:	2b02      	cmp	r3, #2
 8003680:	d109      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003682:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003686:	3308      	adds	r3, #8
 8003688:	4618      	mov	r0, r3
 800368a:	f001 fce9 	bl	8005060 <RCCEx_PLL2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003694:	e006      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80036a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80036ac:	4b96      	ldr	r3, [pc, #600]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036b2:	f023 0107 	bic.w	r1, r3, #7
 80036b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036bc:	4a92      	ldr	r2, [pc, #584]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036ca:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80036ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	2100      	movs	r1, #0
 80036d8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80036e4:	460b      	mov	r3, r1
 80036e6:	4313      	orrs	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80036ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d005      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036fe:	e002      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800370e:	4b7e      	ldr	r3, [pc, #504]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003714:	f023 0108 	bic.w	r1, r3, #8
 8003718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800371c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800371e:	4a7a      	ldr	r2, [pc, #488]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003720:	430b      	orrs	r3, r1
 8003722:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003726:	e003      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800372c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003730:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
 8003742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	f000 80b0 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800374e:	4b6f      	ldr	r3, [pc, #444]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	4a6e      	ldr	r2, [pc, #440]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800375a:	f7fd fbb3 	bl	8000ec4 <HAL_GetTick>
 800375e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003762:	e00b      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003764:	f7fd fbae 	bl	8000ec4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d903      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800377a:	e005      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800377c:	4b63      	ldr	r3, [pc, #396]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ed      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003788:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 808a 	bne.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003792:	4b5d      	ldr	r3, [pc, #372]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80037a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x802>
 80037a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d01b      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b6:	4b54      	ldr	r3, [pc, #336]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c4:	4b50      	ldr	r3, [pc, #320]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037da:	4a4b      	ldr	r2, [pc, #300]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037e4:	4a48      	ldr	r2, [pc, #288]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d019      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd fb63 	bl	8000ec4 <HAL_GetTick>
 80037fe:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003802:	e00d      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd fb5e 	bl	8000ec4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d903      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 800381e:	e006      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003820:	4b39      	ldr	r3, [pc, #228]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ea      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 800382e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d132      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003836:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800383a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800383c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003844:	d10f      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003846:	4b30      	ldr	r3, [pc, #192]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800384e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800385a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800385e:	4a2a      	ldr	r2, [pc, #168]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003860:	430b      	orrs	r3, r1
 8003862:	61d3      	str	r3, [r2, #28]
 8003864:	e005      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003866:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4a27      	ldr	r2, [pc, #156]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800386c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003870:	61d3      	str	r3, [r2, #28]
 8003872:	4b25      	ldr	r3, [pc, #148]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003878:	4a23      	ldr	r2, [pc, #140]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800387a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003882:	4b21      	ldr	r3, [pc, #132]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003884:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800388c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800388e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003892:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003894:	430b      	orrs	r3, r1
 8003896:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800389a:	e008      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800389c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80038a4:	e003      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038aa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80038c4:	460b      	mov	r3, r1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	d038      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80038ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	2b30      	cmp	r3, #48	@ 0x30
 80038d2:	d014      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x912>
 80038d4:	2b30      	cmp	r3, #48	@ 0x30
 80038d6:	d80e      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d012      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x916>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d80a      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d106      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e8:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	4a06      	ldr	r2, [pc, #24]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80038f4:	e00d      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038fc:	e009      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80038fe:	bf00      	nop
 8003900:	e007      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003902:	bf00      	nop
 8003904:	e005      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003906:	bf00      	nop
 8003908:	44020c00 	.word	0x44020c00
 800390c:	44020800 	.word	0x44020800
        break;
 8003910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003912:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800391a:	4bb5      	ldr	r3, [pc, #724]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800391c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003920:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	49b1      	ldr	r1, [pc, #708]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003938:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800393c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
 800394e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d03c      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003958:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800395c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800395e:	2b04      	cmp	r3, #4
 8003960:	d81d      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003962:	a201      	add	r2, pc, #4	@ (adr r2, 8003968 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	0800397d 	.word	0x0800397d
 800396c:	0800398b 	.word	0x0800398b
 8003970:	0800399f 	.word	0x0800399f
 8003974:	080039a7 	.word	0x080039a7
 8003978:	080039a7 	.word	0x080039a7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397c:	4b9c      	ldr	r3, [pc, #624]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	4a9b      	ldr	r2, [pc, #620]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003986:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003988:	e00e      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800398a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800398e:	3308      	adds	r3, #8
 8003990:	4618      	mov	r0, r3
 8003992:	f001 fb65 	bl	8005060 <RCCEx_PLL2_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800399c:	e004      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039a4:	e000      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80039a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10c      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80039b0:	4b8f      	ldr	r3, [pc, #572]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c0:	498b      	ldr	r1, [pc, #556]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80039c8:	e003      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80039d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039e8:	460b      	mov	r3, r1
 80039ea:	4313      	orrs	r3, r2
 80039ec:	d03c      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80039ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d01f      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d819      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80039fc:	2b18      	cmp	r3, #24
 80039fe:	d01d      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003a00:	2b18      	cmp	r3, #24
 8003a02:	d815      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003a0c:	e010      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0e:	4b78      	ldr	r3, [pc, #480]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	4a77      	ldr	r2, [pc, #476]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a18:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e010      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a20:	3308      	adds	r3, #8
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 fb1c 	bl	8005060 <RCCEx_PLL2_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003a2e:	e006      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a36:	e002      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003a46:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a4c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003a50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	4966      	ldr	r1, [pc, #408]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003a5e:	e003      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a64:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d03e      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8e:	d020      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a94:	d819      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a98:	d01d      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003a9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a9c:	d815      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003aa2:	2b40      	cmp	r3, #64	@ 0x40
 8003aa4:	d007      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003aa6:	e010      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa8:	4b51      	ldr	r3, [pc, #324]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	4a50      	ldr	r2, [pc, #320]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003ab4:	e010      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aba:	3308      	adds	r3, #8
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 facf 	bl	8005060 <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10c      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003ae0:	4b43      	ldr	r3, [pc, #268]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ae6:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af0:	493f      	ldr	r1, [pc, #252]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003af8:	e003      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003afe:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d038      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b28:	d00e      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2e:	d815      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d017      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b38:	d110      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b44:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003b46:	e00e      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 fa86 	bl	8005060 <RCCEx_PLL2_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003b5a:	e004      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b62:	e000      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003b6e:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7e:	491c      	ldr	r1, [pc, #112]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	6039      	str	r1, [r7, #0]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d039      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bb2:	2b30      	cmp	r3, #48	@ 0x30
 8003bb4:	d01e      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003bb6:	2b30      	cmp	r3, #48	@ 0x30
 8003bb8:	d815      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d002      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d007      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003bc2:	e010      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	4a09      	ldr	r2, [pc, #36]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bd0:	e011      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 fa41 	bl	8005060 <RCCEx_PLL2_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003be4:	e007      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bec:	e003      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003bee:	bf00      	nop
 8003bf0:	44020c00 	.word	0x44020c00
        break;
 8003bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c0e:	4908      	ldr	r1, [pc, #32]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003c20:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	37a8      	adds	r7, #168	@ 0xa8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	44020c00 	.word	0x44020c00

08003c34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b08b      	sub	sp, #44	@ 0x2c
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003c3c:	4bae      	ldr	r3, [pc, #696]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c46:	4bac      	ldr	r3, [pc, #688]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003c50:	4ba9      	ldr	r3, [pc, #676]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c5a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003c5c:	4ba6      	ldr	r3, [pc, #664]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c68:	4ba3      	ldr	r3, [pc, #652]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	08db      	lsrs	r3, r3, #3
 8003c6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c80:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8126 	beq.w	8003ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d053      	beq.n	8003d3a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d86f      	bhi.n	8003d78 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d003      	beq.n	8003ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d02b      	beq.n	8003cfc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003ca4:	e068      	b.n	8003d78 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ca6:	4b94      	ldr	r3, [pc, #592]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	08db      	lsrs	r3, r3, #3
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	4a92      	ldr	r2, [pc, #584]	@ (8003efc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cda:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cde:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003cfa:	e068      	b.n	8003dce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003f04 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d18:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d1c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d34:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003d38:	e049      	b.n	8003dce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	ee07 3a90 	vmov	s15, r3
 8003d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d44:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003f08 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d56:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d5a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003d76:	e02a      	b.n	8003dce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d78:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	4a5e      	ldr	r2, [pc, #376]	@ (8003efc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dac:	ed97 6a04 	vldr	s12, [r7, #16]
 8003db0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003dcc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003dce:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dda:	d121      	bne.n	8003e20 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003ddc:	4b46      	ldr	r3, [pc, #280]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d017      	beq.n	8003e18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003de8:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dec:	0a5b      	lsrs	r3, r3, #9
 8003dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003e02:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e0e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e006      	b.n	8003e26 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e32:	d121      	bne.n	8003e78 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003e34:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e56:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003e5a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e66:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	e006      	b.n	8003e7e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e002      	b.n	8003e7e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e8a:	d121      	bne.n	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d017      	beq.n	8003ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e98:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9c:	0e1b      	lsrs	r3, r3, #24
 8003e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003eb2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ebe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003ec6:	e010      	b.n	8003eea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
}
 8003ece:	e00c      	b.n	8003eea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	609a      	str	r2, [r3, #8]
}
 8003ed6:	e008      	b.n	8003eea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
}
 8003eea:	bf00      	nop
 8003eec:	372c      	adds	r7, #44	@ 0x2c
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	44020c00 	.word	0x44020c00
 8003efc:	03d09000 	.word	0x03d09000
 8003f00:	46000000 	.word	0x46000000
 8003f04:	4a742400 	.word	0x4a742400
 8003f08:	4bb71b00 	.word	0x4bb71b00

08003f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b08b      	sub	sp, #44	@ 0x2c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003f14:	4bae      	ldr	r3, [pc, #696]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003f1e:	4bac      	ldr	r3, [pc, #688]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003f28:	4ba9      	ldr	r3, [pc, #676]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f32:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003f34:	4ba6      	ldr	r3, [pc, #664]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003f40:	4ba3      	ldr	r3, [pc, #652]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f58:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8126 	beq.w	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d053      	beq.n	8004012 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d86f      	bhi.n	8004050 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d02b      	beq.n	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003f7c:	e068      	b.n	8004050 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f7e:	4b94      	ldr	r3, [pc, #592]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	4a92      	ldr	r2, [pc, #584]	@ (80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fb6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003fd2:	e068      	b.n	80040a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	ee07 3a90 	vmov	s15, r3
 8003fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ff4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003ff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004010:	e049      	b.n	80040a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8004020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004032:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800404e:	e02a      	b.n	80040a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004050:	4b5f      	ldr	r3, [pc, #380]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	4a5e      	ldr	r2, [pc, #376]	@ (80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004084:	ed97 6a04 	vldr	s12, [r7, #16]
 8004088:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800408c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80040a4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80040a6:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040b2:	d121      	bne.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80040b4:	4b46      	ldr	r3, [pc, #280]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040c0:	4b43      	ldr	r3, [pc, #268]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	0a5b      	lsrs	r3, r3, #9
 80040c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80040d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040d6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80040da:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e006      	b.n	80040fe <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e002      	b.n	80040fe <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80040fe:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800410a:	d121      	bne.n	8004150 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800410c:	4b30      	ldr	r3, [pc, #192]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d017      	beq.n	8004148 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004118:	4b2d      	ldr	r3, [pc, #180]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800411a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800412a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800412e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004132:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e006      	b.n	8004156 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	e002      	b.n	8004156 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004156:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800415e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004162:	d121      	bne.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004164:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d017      	beq.n	80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004170:	4b17      	ldr	r3, [pc, #92]	@ (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	0e1b      	lsrs	r3, r3, #24
 8004176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004186:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800418a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800418e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004196:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800419e:	e010      	b.n	80041c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
}
 80041a6:	e00c      	b.n	80041c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
}
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
}
 80041c2:	bf00      	nop
 80041c4:	372c      	adds	r7, #44	@ 0x2c
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	44020c00 	.word	0x44020c00
 80041d4:	03d09000 	.word	0x03d09000
 80041d8:	46000000 	.word	0x46000000
 80041dc:	4a742400 	.word	0x4a742400
 80041e0:	4bb71b00 	.word	0x4bb71b00

080041e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	@ 0x30
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80041ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041f2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80041f6:	430b      	orrs	r3, r1
 80041f8:	d14b      	bne.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80041fa:	4bc4      	ldr	r3, [pc, #784]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80041fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004204:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004206:	4bc1      	ldr	r3, [pc, #772]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	d108      	bne.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421a:	d104      	bne.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800421c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004222:	f000 bf14 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004226:	4bb9      	ldr	r3, [pc, #740]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800422c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004234:	d108      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800423c:	d104      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800423e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004244:	f000 bf03 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004248:	4bb0      	ldr	r3, [pc, #704]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004254:	d119      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425c:	d115      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800425e:	4bab      	ldr	r3, [pc, #684]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426a:	d30a      	bcc.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800426c:	4ba7      	ldr	r3, [pc, #668]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004276:	4aa6      	ldr	r2, [pc, #664]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800427e:	f000 bee6 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004286:	f000 bee2 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800428e:	f000 bede 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004296:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 800429a:	ea52 0301 	orrs.w	r3, r2, r1
 800429e:	f000 838e 	beq.w	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80042a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a6:	2a01      	cmp	r2, #1
 80042a8:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80042ac:	f080 86cc 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b4:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80042b8:	ea52 0301 	orrs.w	r3, r2, r1
 80042bc:	f000 82aa 	beq.w	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80042c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c4:	2a01      	cmp	r2, #1
 80042c6:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80042ca:	f080 86bd 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d2:	f1a3 0110 	sub.w	r1, r3, #16
 80042d6:	ea52 0301 	orrs.w	r3, r2, r1
 80042da:	f000 8681 	beq.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80042de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e2:	2a01      	cmp	r2, #1
 80042e4:	f173 0310 	sbcs.w	r3, r3, #16
 80042e8:	f080 86ae 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f0:	1f19      	subs	r1, r3, #4
 80042f2:	ea52 0301 	orrs.w	r3, r2, r1
 80042f6:	f000 84b1 	beq.w	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80042fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042fe:	2a01      	cmp	r2, #1
 8004300:	f173 0304 	sbcs.w	r3, r3, #4
 8004304:	f080 86a0 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800430c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004310:	430b      	orrs	r3, r1
 8004312:	f000 85aa 	beq.w	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8004316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800431a:	497e      	ldr	r1, [pc, #504]	@ (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800431c:	428a      	cmp	r2, r1
 800431e:	f173 0300 	sbcs.w	r3, r3, #0
 8004322:	f080 8691 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800432e:	430b      	orrs	r3, r1
 8004330:	f000 8532 	beq.w	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004338:	4977      	ldr	r1, [pc, #476]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800433a:	428a      	cmp	r2, r1
 800433c:	f173 0300 	sbcs.w	r3, r3, #0
 8004340:	f080 8682 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004348:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800434c:	430b      	orrs	r3, r1
 800434e:	f000 84bc 	beq.w	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004356:	4971      	ldr	r1, [pc, #452]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004358:	428a      	cmp	r2, r1
 800435a:	f173 0300 	sbcs.w	r3, r3, #0
 800435e:	f080 8673 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004366:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800436a:	430b      	orrs	r3, r1
 800436c:	f000 85f2 	beq.w	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004374:	496a      	ldr	r1, [pc, #424]	@ (8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004376:	428a      	cmp	r2, r1
 8004378:	f173 0300 	sbcs.w	r3, r3, #0
 800437c:	f080 8664 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004384:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004388:	430b      	orrs	r3, r1
 800438a:	f000 81e5 	beq.w	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800438e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004392:	4964      	ldr	r1, [pc, #400]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004394:	428a      	cmp	r2, r1
 8004396:	f173 0300 	sbcs.w	r3, r3, #0
 800439a:	f080 8655 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800439e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80043a6:	430b      	orrs	r3, r1
 80043a8:	f000 83cc 	beq.w	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80043ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b0:	495d      	ldr	r1, [pc, #372]	@ (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80043b2:	428a      	cmp	r2, r1
 80043b4:	f173 0300 	sbcs.w	r3, r3, #0
 80043b8:	f080 8646 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c0:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80043c4:	430b      	orrs	r3, r1
 80043c6:	f000 8331 	beq.w	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80043ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ce:	4957      	ldr	r1, [pc, #348]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80043d0:	428a      	cmp	r2, r1
 80043d2:	f173 0300 	sbcs.w	r3, r3, #0
 80043d6:	f080 8637 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043de:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80043e2:	430b      	orrs	r3, r1
 80043e4:	f000 82bb 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80043e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ec:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80043f0:	f173 0300 	sbcs.w	r3, r3, #0
 80043f4:	f080 8628 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043fc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004400:	430b      	orrs	r3, r1
 8004402:	f000 826d 	beq.w	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800440e:	428a      	cmp	r2, r1
 8004410:	f173 0300 	sbcs.w	r3, r3, #0
 8004414:	f080 8618 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004420:	430b      	orrs	r3, r1
 8004422:	f000 821e 	beq.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800442a:	f242 0101 	movw	r1, #8193	@ 0x2001
 800442e:	428a      	cmp	r2, r1
 8004430:	f173 0300 	sbcs.w	r3, r3, #0
 8004434:	f080 8608 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004440:	430b      	orrs	r3, r1
 8004442:	f000 8137 	beq.w	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444a:	f241 0101 	movw	r1, #4097	@ 0x1001
 800444e:	428a      	cmp	r2, r1
 8004450:	f173 0300 	sbcs.w	r3, r3, #0
 8004454:	f080 85f8 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445c:	1f11      	subs	r1, r2, #4
 800445e:	430b      	orrs	r3, r1
 8004460:	f000 80d2 	beq.w	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004468:	2a05      	cmp	r2, #5
 800446a:	f173 0300 	sbcs.w	r3, r3, #0
 800446e:	f080 85eb 	bcs.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004476:	1e51      	subs	r1, r2, #1
 8004478:	430b      	orrs	r3, r1
 800447a:	d006      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800447c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004480:	1e91      	subs	r1, r2, #2
 8004482:	430b      	orrs	r3, r1
 8004484:	d06c      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004486:	f000 bddf 	b.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800448a:	4b20      	ldr	r3, [pc, #128]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800448c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe fd7a 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 80044a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80044a2:	f000 bdd4 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80044a6:	4b19      	ldr	r3, [pc, #100]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b2:	d10a      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ba:	f107 030c 	add.w	r3, r7, #12
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fd24 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c8:	e048      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80044ca:	4b10      	ldr	r3, [pc, #64]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80044d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d109      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	4a12      	ldr	r2, [pc, #72]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ee:	e035      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fc:	d11c      	bne.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	2b04      	cmp	r3, #4
 8004502:	d119      	bne.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004508:	e028      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800450a:	bf00      	nop
 800450c:	44020c00 	.word	0x44020c00
 8004510:	016e3600 	.word	0x016e3600
 8004514:	20000001 	.word	0x20000001
 8004518:	10000001 	.word	0x10000001
 800451c:	08000001 	.word	0x08000001
 8004520:	04000001 	.word	0x04000001
 8004524:	00200001 	.word	0x00200001
 8004528:	00040001 	.word	0x00040001
 800452c:	00020001 	.word	0x00020001
 8004530:	03d09000 	.word	0x03d09000
 8004534:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004538:	4b9f      	ldr	r3, [pc, #636]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800453a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d106      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	2b05      	cmp	r3, #5
 800454a:	d103      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 800454c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004552:	e003      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004558:	f000 bd79 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800455c:	f000 bd77 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004560:	4b95      	ldr	r3, [pc, #596]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004562:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004572:	f7fe fcf9 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004576:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004578:	f000 bd69 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800457c:	4b8e      	ldr	r3, [pc, #568]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004588:	d10a      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	2b08      	cmp	r3, #8
 800458e:	d107      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fcb9 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459e:	e031      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80045a0:	4b85      	ldr	r3, [pc, #532]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	2b18      	cmp	r3, #24
 80045b0:	d109      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045b2:	4b81      	ldr	r3, [pc, #516]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	08db      	lsrs	r3, r3, #3
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	4a7f      	ldr	r2, [pc, #508]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c4:	e01e      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80045c6:	4b7c      	ldr	r3, [pc, #496]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d2:	d105      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d102      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80045da:	4b79      	ldr	r3, [pc, #484]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80045dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80045e0:	4b75      	ldr	r3, [pc, #468]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d106      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	2b28      	cmp	r3, #40	@ 0x28
 80045f2:	d103      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80045f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045fa:	e003      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004600:	f000 bd25 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004604:	f000 bd23 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004608:	4b6b      	ldr	r3, [pc, #428]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800460a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800460e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004612:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800461a:	f7fe fca5 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 800461e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004620:	f000 bd15 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004624:	4b64      	ldr	r3, [pc, #400]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800462c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004630:	d10a      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	2b40      	cmp	r3, #64	@ 0x40
 8004636:	d107      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fc65 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004646:	e033      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004648:	4b5b      	ldr	r3, [pc, #364]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b02      	cmp	r3, #2
 8004652:	d10c      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	2bc0      	cmp	r3, #192	@ 0xc0
 8004658:	d109      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800465a:	4b57      	ldr	r3, [pc, #348]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	08db      	lsrs	r3, r3, #3
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	4a55      	ldr	r2, [pc, #340]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466c:	e020      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800466e:	4b52      	ldr	r3, [pc, #328]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004682:	d102      	bne.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004684:	4b4e      	ldr	r3, [pc, #312]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004688:	e012      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800468a:	4b4b      	ldr	r3, [pc, #300]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800468c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d107      	bne.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800469e:	d103      	bne.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 80046a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046ac:	f000 bccf 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80046b0:	f000 bccd 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80046b4:	4b40      	ldr	r3, [pc, #256]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ba:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80046be:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80046c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80046c6:	f7fe fc7b 	bl	8002fc0 <HAL_RCC_GetPCLK3Freq>
 80046ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80046cc:	f000 bcbf 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046d6:	d108      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046d8:	f107 030c 	add.w	r3, r7, #12
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fc15 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046e6:	f000 bcb2 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80046ea:	4b33      	ldr	r3, [pc, #204]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d10d      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046fc:	d109      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046fe:	4b2e      	ldr	r3, [pc, #184]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	08db      	lsrs	r3, r3, #3
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	4a2c      	ldr	r2, [pc, #176]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004710:	e020      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004712:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800471a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471e:	d106      	bne.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004726:	d102      	bne.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472c:	e012      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800472e:	4b22      	ldr	r3, [pc, #136]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d107      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004742:	d103      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800474a:	e003      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004750:	f000 bc7d 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004754:	f000 bc7b 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004758:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800475a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800476a:	f7fe fbe1 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 800476e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004770:	f000 bc6d 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	2b01      	cmp	r3, #1
 8004778:	d104      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800477a:	f7fe faad 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 800477e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004780:	f000 bc65 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004786:	2b02      	cmp	r3, #2
 8004788:	d108      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fbbc 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004798:	f000 bc59 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047a8:	d10e      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d10b      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80047b0:	4b04      	ldr	r3, [pc, #16]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80047b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b4:	e02c      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80047b6:	bf00      	nop
 80047b8:	44020c00 	.word	0x44020c00
 80047bc:	03d09000 	.word	0x03d09000
 80047c0:	003d0900 	.word	0x003d0900
 80047c4:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80047c8:	4b95      	ldr	r3, [pc, #596]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d10c      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d109      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047da:	4b91      	ldr	r3, [pc, #580]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	4a8f      	ldr	r2, [pc, #572]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ec:	e010      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80047ee:	4b8c      	ldr	r3, [pc, #560]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d102      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004802:	4b89      	ldr	r3, [pc, #548]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004806:	e003      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800480c:	f000 bc1f 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004810:	f000 bc1d 	b.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004814:	4b82      	ldr	r3, [pc, #520]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004820:	4b7f      	ldr	r3, [pc, #508]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d106      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800483a:	e011      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800483c:	4b78      	ldr	r3, [pc, #480]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800483e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800484a:	d106      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	2b08      	cmp	r3, #8
 8004850:	d103      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004852:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800485e:	e3f6      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004860:	e3f5      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004862:	4b6f      	ldr	r3, [pc, #444]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004864:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004868:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800486c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004874:	f7fe fb78 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004878:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800487a:	e3e8      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 800487c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004882:	d107      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fb3f 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004892:	e3dc      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004894:	4b62      	ldr	r3, [pc, #392]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b02      	cmp	r3, #2
 800489e:	d10d      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048a6:	d109      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048a8:	4b5d      	ldr	r3, [pc, #372]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ba:	e010      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80048bc:	4b58      	ldr	r3, [pc, #352]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c8:	d106      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048d0:	d102      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 80048d2:	4b55      	ldr	r3, [pc, #340]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80048d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d6:	e002      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048dc:	e3b7      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048de:	e3b6      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80048e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048e6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80048ea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048f2:	f7fe fb39 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 80048f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80048f8:	e3a9      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004900:	d107      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004902:	f107 030c 	add.w	r3, r7, #12
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fb00 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004910:	e39d      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004912:	4b43      	ldr	r3, [pc, #268]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d10d      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004924:	d109      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004926:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	08db      	lsrs	r3, r3, #3
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	4a3c      	ldr	r2, [pc, #240]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004938:	e010      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800493a:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004946:	d106      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800494e:	d102      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004950:	4b35      	ldr	r3, [pc, #212]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004954:	e002      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800495a:	e378      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800495c:	e377      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800495e:	4b30      	ldr	r3, [pc, #192]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004964:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004970:	f7fe fafa 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004974:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004976:	e36a      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800497e:	d107      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004980:	f107 030c 	add.w	r3, r7, #12
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fac1 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800498e:	e35e      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004990:	4b23      	ldr	r3, [pc, #140]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d10d      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049a2:	d109      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049b6:	e34a      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049bc:	e347      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80049be:	4b18      	ldr	r3, [pc, #96]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049c4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80049ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80049d0:	f7fe faf6 	bl	8002fc0 <HAL_RCC_GetPCLK3Freq>
 80049d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80049d6:	e33a      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049de:	d107      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fa91 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049ee:	e32e      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d10d      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a02:	d109      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	4a05      	ldr	r2, [pc, #20]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
 8004a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a16:	e31a      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a1c:	e317      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a1e:	bf00      	nop
 8004a20:	44020c00 	.word	0x44020c00
 8004a24:	03d09000 	.word	0x03d09000
 8004a28:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004a2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a32:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a3e:	d044      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a46:	d879      	bhi.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d02d      	beq.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a56:	d871      	bhi.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a5e:	d017      	beq.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a66:	d869      	bhi.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a74:	d004      	beq.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004a76:	e061      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004a78:	f7fe faa2 	bl	8002fc0 <HAL_RCC_GetPCLK3Freq>
 8004a7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004a7e:	e060      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fa41 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004a8e:	e058      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a90:	4b82      	ldr	r3, [pc, #520]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d103      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004aa4:	e04d      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004aaa:	e04a      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004aac:	4b7b      	ldr	r3, [pc, #492]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aba:	d103      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004abc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004ac2:	e03e      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ac8:	e03b      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004aca:	4b74      	ldr	r3, [pc, #464]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ad0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ad6:	4b71      	ldr	r3, [pc, #452]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afa:	e01e      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004afc:	4b67      	ldr	r3, [pc, #412]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b08:	d106      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b10:	d102      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004b12:	4b64      	ldr	r3, [pc, #400]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b16:	e010      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b18:	4b60      	ldr	r3, [pc, #384]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b24:	d106      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b2c:	d102      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b32:	e002      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004b38:	e003      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004b3a:	e002      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b40:	bf00      	nop
          }
        }
        break;
 8004b42:	e284      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b44:	4b55      	ldr	r3, [pc, #340]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b4a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b56:	d044      	beq.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b5e:	d879      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b66:	d02d      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b6e:	d871      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b76:	d017      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b7e:	d869      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8c:	d004      	beq.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004b8e:	e061      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004b90:	f7fe f9ea 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004b94:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004b96:	e060      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff f9b5 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ba6:	e058      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d103      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004bbc:	e04d      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004bc2:	e04a      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004bc4:	4b35      	ldr	r3, [pc, #212]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bd2:	d103      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004bd4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004bda:	e03e      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004be0:	e03b      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004be2:	4b2e      	ldr	r3, [pc, #184]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004be8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bee:	4b2b      	ldr	r3, [pc, #172]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c00:	4b26      	ldr	r3, [pc, #152]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	4a25      	ldr	r2, [pc, #148]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c12:	e01e      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c14:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c20:	d106      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c28:	d102      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c2e:	e010      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c30:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c44:	d102      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004c46:	4b18      	ldr	r3, [pc, #96]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c4a:	e002      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004c52:	e002      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c58:	bf00      	nop
          }
        }
        break;
 8004c5a:	e1f8      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c66:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004c68:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c74:	d105      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004c80:	e1e5      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c88:	d110      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c8a:	f107 0318 	add.w	r3, r7, #24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe ffd0 	bl	8003c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c98:	e1d9      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c9a:	bf00      	nop
 8004c9c:	44020c00 	.word	0x44020c00
 8004ca0:	03d09000 	.word	0x03d09000
 8004ca4:	003d0900 	.word	0x003d0900
 8004ca8:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff f927 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cc2:	e1c4      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cc8:	e1c1      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004cca:	4b9d      	ldr	r3, [pc, #628]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d859      	bhi.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004cf9 	.word	0x08004cf9
 8004ce8:	08004d09 	.word	0x08004d09
 8004cec:	08004d91 	.word	0x08004d91
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d1f 	.word	0x08004d1f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cf8:	f107 0318 	add.w	r3, r7, #24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe ff99 	bl	8003c34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d06:	e046      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff f8fd 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d16:	e03e      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004d18:	4b8a      	ldr	r3, [pc, #552]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d1c:	e03b      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d1e:	4b88      	ldr	r3, [pc, #544]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d24:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d2a:	4b85      	ldr	r3, [pc, #532]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d3c:	4b80      	ldr	r3, [pc, #512]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	08db      	lsrs	r3, r3, #3
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	4a80      	ldr	r2, [pc, #512]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d4e:	e01e      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d50:	4b7b      	ldr	r3, [pc, #492]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d64:	d102      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004d66:	4b79      	ldr	r3, [pc, #484]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d6a:	e010      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d6c:	4b74      	ldr	r3, [pc, #464]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d78:	d106      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d80:	d102      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004d82:	4b73      	ldr	r3, [pc, #460]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d86:	e002      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004d8c:	e003      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004d8e:	e002      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d94:	bf00      	nop
          }
        }
        break;
 8004d96:	e15a      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004d98:	4b69      	ldr	r3, [pc, #420]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d022      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d858      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	2b18      	cmp	r3, #24
 8004db4:	d019      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	2b18      	cmp	r3, #24
 8004dba:	d852      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d008      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004dc8:	e04b      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dca:	f107 0318 	add.w	r3, r7, #24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe ff30 	bl	8003c34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dd8:	e046      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dda:	f107 030c 	add.w	r3, r7, #12
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff f894 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004de8:	e03e      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004dea:	4b56      	ldr	r3, [pc, #344]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dee:	e03b      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004df0:	4b53      	ldr	r3, [pc, #332]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004df6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dfc:	4b50      	ldr	r3, [pc, #320]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d10c      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	08db      	lsrs	r3, r3, #3
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	4a4b      	ldr	r2, [pc, #300]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e20:	e01e      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e22:	4b47      	ldr	r3, [pc, #284]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e36:	d102      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e38:	4b44      	ldr	r3, [pc, #272]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3c:	e010      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e3e:	4b40      	ldr	r3, [pc, #256]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e52:	d102      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e54:	4b3e      	ldr	r3, [pc, #248]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004e5e:	e003      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004e60:	e002      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e66:	bf00      	nop
          }
        }
        break;
 8004e68:	e0f1      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004e6a:	4b35      	ldr	r3, [pc, #212]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e70:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7c:	d023      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e84:	d858      	bhi.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e8a:	d019      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e90:	d852      	bhi.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	2b40      	cmp	r3, #64	@ 0x40
 8004e9c:	d008      	beq.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004e9e:	e04b      	b.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ea0:	f107 0318 	add.w	r3, r7, #24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe fec5 	bl	8003c34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004eae:	e046      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f829 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ebe:	e03e      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004ec0:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ec4:	e03b      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ecc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ee4:	4b16      	ldr	r3, [pc, #88]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef6:	e01e      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ef8:	4b11      	ldr	r3, [pc, #68]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f04:	d106      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0c:	d102      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f12:	e010      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f14:	4b0a      	ldr	r3, [pc, #40]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f20:	d106      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f28:	d102      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004f2a:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f2e:	e002      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004f34:	e003      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004f36:	e002      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f3c:	bf00      	nop
          }
        }
        break;
 8004f3e:	e086      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f40:	44020c00 	.word	0x44020c00
 8004f44:	00bb8000 	.word	0x00bb8000
 8004f48:	03d09000 	.word	0x03d09000
 8004f4c:	003d0900 	.word	0x003d0900
 8004f50:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004f54:	4b40      	ldr	r3, [pc, #256]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f5a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004f60:	4b3d      	ldr	r3, [pc, #244]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6c:	d105      	bne.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004f74:	4b39      	ldr	r3, [pc, #228]	@ (800505c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f78:	e031      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004f7a:	4b37      	ldr	r3, [pc, #220]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f86:	d10a      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f8e:	f107 0318 	add.w	r3, r7, #24
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fe4e 	bl	8003c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f9c:	e01f      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d103      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb8:	e011      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004fba:	4b27      	ldr	r3, [pc, #156]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fc8:	d106      	bne.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fcc:	2b30      	cmp	r3, #48	@ 0x30
 8004fce:	d103      	bne.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004fd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd6:	e002      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004fdc:	e037      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004fde:	e036      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004fe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fe6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d107      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ff2:	f107 0318 	add.w	r3, r7, #24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fe1c 	bl	8003c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8005000:	e025      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8005002:	4b15      	ldr	r3, [pc, #84]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800500a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800500e:	d10a      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8005010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005012:	2b20      	cmp	r3, #32
 8005014:	d107      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005016:	f107 030c 	add.w	r3, r7, #12
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe ff76 	bl	8003f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005024:	e00f      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005026:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800502e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005032:	d105      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	2b30      	cmp	r3, #48	@ 0x30
 8005038:	d102      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800503a:	4b08      	ldr	r3, [pc, #32]	@ (800505c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800503c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503e:	e002      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005046:	e002      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800504c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005050:	4618      	mov	r0, r3
 8005052:	3730      	adds	r7, #48	@ 0x30
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	44020c00 	.word	0x44020c00
 800505c:	02dc6c00 	.word	0x02dc6c00

08005060 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005068:	4b48      	ldr	r3, [pc, #288]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a47      	ldr	r2, [pc, #284]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 800506e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005072:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005074:	f7fb ff26 	bl	8000ec4 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800507a:	e008      	b.n	800508e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800507c:	f7fb ff22 	bl	8000ec4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e07a      	b.n	8005184 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800508e:	4b3f      	ldr	r3, [pc, #252]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800509a:	4b3c      	ldr	r3, [pc, #240]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6811      	ldr	r1, [r2, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6852      	ldr	r2, [r2, #4]
 80050ae:	0212      	lsls	r2, r2, #8
 80050b0:	430a      	orrs	r2, r1
 80050b2:	4936      	ldr	r1, [pc, #216]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	3b01      	subs	r3, #1
 80050be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	025b      	lsls	r3, r3, #9
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	061b      	lsls	r3, r3, #24
 80050e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050e8:	4928      	ldr	r1, [pc, #160]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80050ee:	4b27      	ldr	r3, [pc, #156]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f023 020c 	bic.w	r2, r3, #12
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	4924      	ldr	r1, [pc, #144]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005100:	4b22      	ldr	r3, [pc, #136]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	f023 0220 	bic.w	r2, r3, #32
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	491f      	ldr	r1, [pc, #124]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005112:	4b1e      	ldr	r3, [pc, #120]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	491c      	ldr	r1, [pc, #112]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005120:	4b1a      	ldr	r3, [pc, #104]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	4a19      	ldr	r2, [pc, #100]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005126:	f023 0310 	bic.w	r3, r3, #16
 800512a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005134:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6a12      	ldr	r2, [r2, #32]
 800513c:	00d2      	lsls	r2, r2, #3
 800513e:	4913      	ldr	r1, [pc, #76]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005144:	4b11      	ldr	r3, [pc, #68]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005148:	4a10      	ldr	r2, [pc, #64]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 800514a:	f043 0310 	orr.w	r3, r3, #16
 800514e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005150:	4b0e      	ldr	r3, [pc, #56]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a0d      	ldr	r2, [pc, #52]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005156:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800515a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800515c:	f7fb feb2 	bl	8000ec4 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005162:	e008      	b.n	8005176 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005164:	f7fb feae 	bl	8000ec4 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e006      	b.n	8005184 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005176:	4b05      	ldr	r3, [pc, #20]	@ (800518c <RCCEx_PLL2_Config+0x12c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0

}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	44020c00 	.word	0x44020c00

08005190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e042      	b.n	8005228 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7fb fc2f 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	@ 0x24
 80051be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fcb4 	bl	8005b48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fb33 	bl	800584c <UART_SetConfig>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e01b      	b.n	8005228 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800520e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fd33 	bl	8005c8c <UART_CheckIdleState>
 8005226:	4603      	mov	r3, r0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b0ae      	sub	sp, #184	@ 0xb8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800525a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800525e:	4013      	ands	r3, r2
 8005260:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11b      	bne.n	80052a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800526c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 82ac 	beq.w	80057f2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
      }
      return;
 80052a2:	e2a6      	b.n	80057f2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80fd 	beq.w	80054a8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052b2:	4b7a      	ldr	r3, [pc, #488]	@ (800549c <HAL_UART_IRQHandler+0x26c>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052be:	4b78      	ldr	r3, [pc, #480]	@ (80054a0 <HAL_UART_IRQHandler+0x270>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80f0 	beq.w	80054a8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d011      	beq.n	80052f8 <HAL_UART_IRQHandler+0xc8>
 80052d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	f043 0201 	orr.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d011      	beq.n	8005328 <HAL_UART_IRQHandler+0xf8>
 8005304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2202      	movs	r2, #2
 8005316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	f043 0204 	orr.w	r2, r3, #4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005328:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d011      	beq.n	8005358 <HAL_UART_IRQHandler+0x128>
 8005334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2204      	movs	r2, #4
 8005346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534e:	f043 0202 	orr.w	r2, r3, #2
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005374:	4b49      	ldr	r3, [pc, #292]	@ (800549c <HAL_UART_IRQHandler+0x26c>)
 8005376:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2208      	movs	r2, #8
 8005382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538a:	f043 0208 	orr.w	r2, r3, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539c:	2b00      	cmp	r3, #0
 800539e:	d012      	beq.n	80053c6 <HAL_UART_IRQHandler+0x196>
 80053a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80053a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8212 	beq.w	80057f6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b40      	cmp	r3, #64	@ 0x40
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800541e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005422:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005426:	2b00      	cmp	r3, #0
 8005428:	d02e      	beq.n	8005488 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fd45 	bl	8005eba <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b40      	cmp	r3, #64	@ 0x40
 800543c:	d120      	bne.n	8005480 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005444:	2b00      	cmp	r3, #0
 8005446:	d017      	beq.n	8005478 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800544e:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <HAL_UART_IRQHandler+0x274>)
 8005450:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005458:	4618      	mov	r0, r3
 800545a:	f7fb ff6f 	bl	800133c <HAL_DMA_Abort_IT>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d019      	beq.n	8005498 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800546a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005472:	4610      	mov	r0, r2
 8005474:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005476:	e00f      	b.n	8005498 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9d1 	bl	8005820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547e:	e00b      	b.n	8005498 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f9cd 	bl	8005820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005486:	e007      	b.n	8005498 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9c9 	bl	8005820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005496:	e1ae      	b.n	80057f6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	bf00      	nop
    return;
 800549a:	e1ac      	b.n	80057f6 <HAL_UART_IRQHandler+0x5c6>
 800549c:	10000001 	.word	0x10000001
 80054a0:	04000120 	.word	0x04000120
 80054a4:	08005f87 	.word	0x08005f87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 8142 	bne.w	8005736 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 813b 	beq.w	8005736 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8134 	beq.w	8005736 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2210      	movs	r2, #16
 80054d4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b40      	cmp	r3, #64	@ 0x40
 80054e2:	f040 80aa 	bne.w	800563a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80054f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8084 	beq.w	8005606 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005504:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005508:	429a      	cmp	r2, r3
 800550a:	d27c      	bcs.n	8005606 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005512:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551e:	2b81      	cmp	r3, #129	@ 0x81
 8005520:	d060      	beq.n	80055e4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005548:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800554c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e2      	bne.n	8005522 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800556c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005580:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005582:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005586:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800558e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e3      	bne.n	800555c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b2:	f023 0310 	bic.w	r3, r3, #16
 80055b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e4      	bne.n	80055a2 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fb fe30 	bl	8001244 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f918 	bl	8005834 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005604:	e0f9      	b.n	80057fa <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800560c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005610:	429a      	cmp	r2, r3
 8005612:	f040 80f2 	bne.w	80057fa <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561e:	2b81      	cmp	r3, #129	@ 0x81
 8005620:	f040 80eb 	bne.w	80057fa <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8fe 	bl	8005834 <HAL_UARTEx_RxEventCallback>
      return;
 8005638:	e0df      	b.n	80057fa <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005646:	b29b      	uxth	r3, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80d1 	beq.w	80057fe <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800565c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80cc 	beq.w	80057fe <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005676:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800567a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005688:	647b      	str	r3, [r7, #68]	@ 0x44
 800568a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800568e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e4      	bne.n	8005666 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	623b      	str	r3, [r7, #32]
   return(result);
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80056c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e1      	bne.n	800569c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f023 0310 	bic.w	r3, r3, #16
 8005700:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	617b      	str	r3, [r7, #20]
   return(result);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e4      	bne.n	80056ec <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005728:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f880 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005734:	e063      	b.n	80057fe <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800573a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00e      	beq.n	8005760 <HAL_UART_IRQHandler+0x530>
 8005742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fc51 	bl	8006000 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800575e:	e051      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d014      	beq.n	8005796 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800576c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800577c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005788:	2b00      	cmp	r3, #0
 800578a:	d03a      	beq.n	8005802 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
    }
    return;
 8005794:	e035      	b.n	8005802 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800579a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_UART_IRQHandler+0x586>
 80057a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fbfb 	bl	8005faa <UART_EndTransmit_IT>
    return;
 80057b4:	e026      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80057b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_UART_IRQHandler+0x5a6>
 80057c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fc2a 	bl	8006028 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d4:	e016      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d010      	beq.n	8005804 <HAL_UART_IRQHandler+0x5d4>
 80057e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da0c      	bge.n	8005804 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fc12 	bl	8006014 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057f0:	e008      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
      return;
 80057f2:	bf00      	nop
 80057f4:	e006      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
    return;
 80057f6:	bf00      	nop
 80057f8:	e004      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
      return;
 80057fa:	bf00      	nop
 80057fc:	e002      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
      return;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005802:	bf00      	nop
  }
}
 8005804:	37b8      	adds	r7, #184	@ 0xb8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop

0800580c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800584c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005850:	b094      	sub	sp, #80	@ 0x50
 8005852:	af00      	add	r7, sp, #0
 8005854:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	431a      	orrs	r2, r3
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	431a      	orrs	r2, r3
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4313      	orrs	r3, r2
 8005872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	498a      	ldr	r1, [pc, #552]	@ (8005aa4 <UART_SetConfig+0x258>)
 800587c:	4019      	ands	r1, r3
 800587e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005884:	430b      	orrs	r3, r1
 8005886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	ea40 0301 	orr.w	r3, r0, r1
 800589e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa8 <UART_SetConfig+0x25c>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d004      	beq.n	80058ba <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b6:	4313      	orrs	r3, r2
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80058c4:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80058c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	f023 000f 	bic.w	r0, r3, #15
 80058dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058de:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	ea40 0301 	orr.w	r3, r0, r1
 80058e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b6f      	ldr	r3, [pc, #444]	@ (8005aac <UART_SetConfig+0x260>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d102      	bne.n	80058fa <UART_SetConfig+0xae>
 80058f4:	2301      	movs	r3, #1
 80058f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f8:	e01a      	b.n	8005930 <UART_SetConfig+0xe4>
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b6c      	ldr	r3, [pc, #432]	@ (8005ab0 <UART_SetConfig+0x264>)
 8005900:	429a      	cmp	r2, r3
 8005902:	d102      	bne.n	800590a <UART_SetConfig+0xbe>
 8005904:	2302      	movs	r3, #2
 8005906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005908:	e012      	b.n	8005930 <UART_SetConfig+0xe4>
 800590a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b69      	ldr	r3, [pc, #420]	@ (8005ab4 <UART_SetConfig+0x268>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d102      	bne.n	800591a <UART_SetConfig+0xce>
 8005914:	2304      	movs	r3, #4
 8005916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005918:	e00a      	b.n	8005930 <UART_SetConfig+0xe4>
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b62      	ldr	r3, [pc, #392]	@ (8005aa8 <UART_SetConfig+0x25c>)
 8005920:	429a      	cmp	r2, r3
 8005922:	d103      	bne.n	800592c <UART_SetConfig+0xe0>
 8005924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800592a:	e001      	b.n	8005930 <UART_SetConfig+0xe4>
 800592c:	2300      	movs	r3, #0
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b5c      	ldr	r3, [pc, #368]	@ (8005aa8 <UART_SetConfig+0x25c>)
 8005936:	429a      	cmp	r2, r3
 8005938:	d171      	bne.n	8005a1e <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800593a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800593c:	2200      	movs	r2, #0
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	627a      	str	r2, [r7, #36]	@ 0x24
 8005942:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005946:	f7fe fc4d 	bl	80041e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800594a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800594c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80e2 	beq.w	8005b18 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	4a57      	ldr	r2, [pc, #348]	@ (8005ab8 <UART_SetConfig+0x26c>)
 800595a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595e:	461a      	mov	r2, r3
 8005960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005962:	fbb3 f3f2 	udiv	r3, r3, r2
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005974:	429a      	cmp	r2, r3
 8005976:	d305      	bcc.n	8005984 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800597e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800598a:	e0c5      	b.n	8005b18 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800598c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800598e:	2200      	movs	r2, #0
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	61fa      	str	r2, [r7, #28]
 8005994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	4a47      	ldr	r2, [pc, #284]	@ (8005ab8 <UART_SetConfig+0x26c>)
 800599a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2200      	movs	r2, #0
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	617a      	str	r2, [r7, #20]
 80059a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059ae:	f7fa fc73 	bl	8000298 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	020b      	lsls	r3, r1, #8
 80059c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059c8:	0202      	lsls	r2, r0, #8
 80059ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059cc:	6849      	ldr	r1, [r1, #4]
 80059ce:	0849      	lsrs	r1, r1, #1
 80059d0:	2000      	movs	r0, #0
 80059d2:	460c      	mov	r4, r1
 80059d4:	4605      	mov	r5, r0
 80059d6:	eb12 0804 	adds.w	r8, r2, r4
 80059da:	eb43 0905 	adc.w	r9, r3, r5
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	60fa      	str	r2, [r7, #12]
 80059e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ec:	4640      	mov	r0, r8
 80059ee:	4649      	mov	r1, r9
 80059f0:	f7fa fc52 	bl	8000298 <__aeabi_uldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4613      	mov	r3, r2
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a02:	d308      	bcc.n	8005a16 <UART_SetConfig+0x1ca>
 8005a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a0a:	d204      	bcs.n	8005a16 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	e080      	b.n	8005b18 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005a1c:	e07c      	b.n	8005b18 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a26:	d149      	bne.n	8005abc <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a34:	f7fe fbd6 	bl	80041e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a38:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d06b      	beq.n	8005b18 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <UART_SetConfig+0x26c>)
 8005a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a52:	005a      	lsls	r2, r3, #1
 8005a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	441a      	add	r2, r3
 8005a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a68:	2b0f      	cmp	r3, #15
 8005a6a:	d916      	bls.n	8005a9a <UART_SetConfig+0x24e>
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a72:	d212      	bcs.n	8005a9a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f023 030f 	bic.w	r3, r3, #15
 8005a7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e03e      	b.n	8005b18 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005aa0:	e03a      	b.n	8005b18 <UART_SetConfig+0x2cc>
 8005aa2:	bf00      	nop
 8005aa4:	cfff69f3 	.word	0xcfff69f3
 8005aa8:	44002400 	.word	0x44002400
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	40004400 	.word	0x40004400
 8005ab4:	40004800 	.word	0x40004800
 8005ab8:	080062dc 	.word	0x080062dc
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005abe:	2200      	movs	r2, #0
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	4693      	mov	fp, r2
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	f7fe fb8c 	bl	80041e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005acc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d021      	beq.n	8005b18 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b44 <UART_SetConfig+0x2f8>)
 8005ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d909      	bls.n	8005b12 <UART_SetConfig+0x2c6>
 8005afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b04:	d205      	bcs.n	8005b12 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e002      	b.n	8005b18 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b22:	2201      	movs	r2, #1
 8005b24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	2200      	movs	r2, #0
 8005b32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3750      	adds	r7, #80	@ 0x50
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b42:	bf00      	nop
 8005b44:	080062dc 	.word	0x080062dc

08005b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c46:	d10a      	bne.n	8005c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b098      	sub	sp, #96	@ 0x60
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c9c:	f7fb f912 	bl	8000ec4 <HAL_GetTick>
 8005ca0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d12f      	bne.n	8005d10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f88e 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d022      	beq.n	8005d10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e063      	b.n	8005dd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d149      	bne.n	8005db2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d26:	2200      	movs	r2, #0
 8005d28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f857 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d03c      	beq.n	8005db2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	623b      	str	r3, [r7, #32]
   return(result);
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d56:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e6      	bne.n	8005d38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d8a:	61fa      	str	r2, [r7, #28]
 8005d8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	69b9      	ldr	r1, [r7, #24]
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	617b      	str	r3, [r7, #20]
   return(result);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e5      	bne.n	8005d6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e012      	b.n	8005dd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3758      	adds	r7, #88	@ 0x58
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df0:	e04f      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d04b      	beq.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fb f863 	bl	8000ec4 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e04e      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d037      	beq.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b80      	cmp	r3, #128	@ 0x80
 8005e26:	d034      	beq.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b40      	cmp	r3, #64	@ 0x40
 8005e2c:	d031      	beq.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d110      	bne.n	8005e5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2208      	movs	r2, #8
 8005e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f838 	bl	8005eba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e029      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e6c:	d111      	bne.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f81e 	bl	8005eba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e00f      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	bf0c      	ite	eq
 8005ea2:	2301      	moveq	r3, #1
 8005ea4:	2300      	movne	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d0a0      	beq.n	8005df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b095      	sub	sp, #84	@ 0x54
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ee2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e6      	bne.n	8005ec2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e3      	bne.n	8005ef4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d118      	bne.n	8005f66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f023 0310 	bic.w	r3, r3, #16
 8005f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e6      	bne.n	8005f34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f7a:	bf00      	nop
 8005f7c:	3754      	adds	r7, #84	@ 0x54
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fc3f 	bl	8005820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6979      	ldr	r1, [r7, #20]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fc0a 	bl	800580c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ff8:	bf00      	nop
 8005ffa:	3720      	adds	r7, #32
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_UARTEx_DisableFifoMode+0x16>
 800604e:	2302      	movs	r3, #2
 8006050:	e027      	b.n	80060a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2224      	movs	r2, #36	@ 0x24
 800605e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006080:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e02d      	b.n	8006122 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2224      	movs	r2, #36	@ 0x24
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f850 	bl	80061a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800613e:	2302      	movs	r3, #2
 8006140:	e02d      	b.n	800619e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2224      	movs	r2, #36	@ 0x24
 800614e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f812 	bl	80061a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d108      	bne.n	80061ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061c8:	e031      	b.n	800622e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061ca:	2308      	movs	r3, #8
 80061cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061ce:	2308      	movs	r3, #8
 80061d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	0e5b      	lsrs	r3, r3, #25
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	0f5b      	lsrs	r3, r3, #29
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	7b3a      	ldrb	r2, [r7, #12]
 80061f6:	4911      	ldr	r1, [pc, #68]	@ (800623c <UARTEx_SetNbDataToProcess+0x94>)
 80061f8:	5c8a      	ldrb	r2, [r1, r2]
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061fe:	7b3a      	ldrb	r2, [r7, #12]
 8006200:	490f      	ldr	r1, [pc, #60]	@ (8006240 <UARTEx_SetNbDataToProcess+0x98>)
 8006202:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006204:	fb93 f3f2 	sdiv	r3, r3, r2
 8006208:	b29a      	uxth	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	7b7a      	ldrb	r2, [r7, #13]
 8006214:	4909      	ldr	r1, [pc, #36]	@ (800623c <UARTEx_SetNbDataToProcess+0x94>)
 8006216:	5c8a      	ldrb	r2, [r1, r2]
 8006218:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800621c:	7b7a      	ldrb	r2, [r7, #13]
 800621e:	4908      	ldr	r1, [pc, #32]	@ (8006240 <UARTEx_SetNbDataToProcess+0x98>)
 8006220:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006222:	fb93 f3f2 	sdiv	r3, r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	080062f4 	.word	0x080062f4
 8006240:	080062fc 	.word	0x080062fc

08006244 <memset>:
 8006244:	4402      	add	r2, r0
 8006246:	4603      	mov	r3, r0
 8006248:	4293      	cmp	r3, r2
 800624a:	d100      	bne.n	800624e <memset+0xa>
 800624c:	4770      	bx	lr
 800624e:	f803 1b01 	strb.w	r1, [r3], #1
 8006252:	e7f9      	b.n	8006248 <memset+0x4>

08006254 <__libc_init_array>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	4d0d      	ldr	r5, [pc, #52]	@ (800628c <__libc_init_array+0x38>)
 8006258:	2600      	movs	r6, #0
 800625a:	4c0d      	ldr	r4, [pc, #52]	@ (8006290 <__libc_init_array+0x3c>)
 800625c:	1b64      	subs	r4, r4, r5
 800625e:	10a4      	asrs	r4, r4, #2
 8006260:	42a6      	cmp	r6, r4
 8006262:	d109      	bne.n	8006278 <__libc_init_array+0x24>
 8006264:	4d0b      	ldr	r5, [pc, #44]	@ (8006294 <__libc_init_array+0x40>)
 8006266:	2600      	movs	r6, #0
 8006268:	4c0b      	ldr	r4, [pc, #44]	@ (8006298 <__libc_init_array+0x44>)
 800626a:	f000 f817 	bl	800629c <_init>
 800626e:	1b64      	subs	r4, r4, r5
 8006270:	10a4      	asrs	r4, r4, #2
 8006272:	42a6      	cmp	r6, r4
 8006274:	d105      	bne.n	8006282 <__libc_init_array+0x2e>
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	f855 3b04 	ldr.w	r3, [r5], #4
 800627c:	3601      	adds	r6, #1
 800627e:	4798      	blx	r3
 8006280:	e7ee      	b.n	8006260 <__libc_init_array+0xc>
 8006282:	f855 3b04 	ldr.w	r3, [r5], #4
 8006286:	3601      	adds	r6, #1
 8006288:	4798      	blx	r3
 800628a:	e7f2      	b.n	8006272 <__libc_init_array+0x1e>
 800628c:	0800630c 	.word	0x0800630c
 8006290:	0800630c 	.word	0x0800630c
 8006294:	0800630c 	.word	0x0800630c
 8006298:	08006310 	.word	0x08006310

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
