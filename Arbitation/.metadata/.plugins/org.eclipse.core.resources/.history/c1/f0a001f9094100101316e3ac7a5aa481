
/*external is send data and Internal button_buildin is change address*/

/* Includes ------------------------------------------------------------------*/
#include "main.h"

#define NODE_A

FDCAN_HandleTypeDef hfdcan1;

/* Private function prototypes -----------------------------------------------*/
static void MX_FDCAN1_Init(void);
void SetFilter(uint16_t ID ,uint16_t msk);
void Test_Priority();
void TX_Send_CAN();
void Timer3_init();

volatile uint8_t Counter = 0;
typedef struct{
	FDCAN_TxHeaderTypeDef   TxHeader;
	FDCAN_RxHeaderTypeDef   RxHeader;
	uint32_t msgID;
	uint8_t dataTx[2];
	uint8_t dataRx[2];
} CAN_SET;

CAN_SET CAN_Payload;

#ifdef NODE_A
	uint16_t address[] = {0x000,0x001};
#endif

#ifdef NODE_B
	uint32_t address[] = {0x00000000,0x0000A0A,0x00040000};
#endif

volatile uint8_t flag = 0;
int main(void)
{
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_FDCAN1_Init();
  MX_USART3_UART_Init();
  Timer3_init();

  CAN_Payload.dataTx[0] = 0x0;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  if(flag == 1){
//	  		  Test_Priority();
//	  		  TX_Send_CAN();
//	  		  flag = 0;
//	  	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{

  /* USER CODE BEGIN FDCAN1_Init 0 */

  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 25;
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 13;
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 1;
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 1;
  hfdcan1.Init.DataTimeSeg2 = 1;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
  	 /* Notification Error */
  	Error_Handler();
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
  {
	/* Notification Error */
	Error_Handler();
  }
  /* USER CODE END FDCAN1_Init 2 */
}



/* USER CODE BEGIN 4 */
void SetFilter(uint16_t ID ,uint16_t msk){
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
	sFilterConfig.FilterIndex = 0;
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	sFilterConfig.FilterID1 = ID;
	sFilterConfig.FilterID2 = msk;
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
	{
	  /* Filter configuration Error */
	  Error_Handler();
	}
}



void Test_Priority(){

	#ifdef NODE_A
		CAN_Payload.msgID = address[Counter];
		CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
		//SetFilter(0x10,0x0);
	#endif

	#ifdef NODE_B
		CAN_Payload.msgID = address[Counter];
		CAN_Payload.TxHeader.IdType = FDCAN_EXTENDED_ID;
		//SetFilter(0x11,0x0);
	#endif



}



void TX_Send_CAN(){

    /* ----- Prepare CAN data --------------------------------------- */
    CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID; //CAN_Payload.msgID
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;        // 8-byte payloaD
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
    CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
    CAN_Payload.TxHeader.MessageMarker = 0;

    CAN_Payload.dataTx[0] ^= 1;

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
    {
    	Error_Handler();
    }
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){

	if(GPIO_Pin == GPIO_PIN_5) {
		 TIM3->CNT = 0;
		 TIM3->CR1 |= TIM_CR1_CEN;
		 TIM3->DIER |= TIM_DIER_UIE;

//		Test_Priority();
//		TX_Send_CAN();

	}
	if(GPIO_Pin == B1_BLUE_USER_BUTTON_Pin){
		Counter++;
		if (Counter >= sizeof(address)/sizeof(address[0])){
			Counter = 0;
		}
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
		{
			/* Reception Error */
			Error_Handler();
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
		{
			/* Notification Error */
			Error_Handler();
		}
	}
	if(CAN_Payload.dataRx[0] == 0x1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}
//void Timer3_init(){
//	RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
//
//
////	 TIM3->PSC = 199; /*40 us*/
////	 TIM3->ARR = 39;
//
////	TIM3->PSC = 0;
////	TIM3->ARR = 260;
//
//	TIM3->PSC = 0;
//	TIM3->ARR = 20000;
//
//
//	 // Enable update interrupt
//	 TIM3->DIER |= TIM_DIER_UIE;
//
//	 // Enable TIM16
//	// TIM2->CR1 |= TIM_CR1_CEN;
//	 TIM3->CR1 &= ~TIM_CR1_CEN;
//
//	 NVIC_EnableIRQ(TIM3_IRQn);
//	 NVIC_SetPriority(TIM3_IRQn,1);
//
//}
//void TIM3_IRQHandler(void){
//	 if (TIM3->SR & TIM_SR_UIF) {
//		 TIM3->SR &= ~TIM_SR_UIF;
//	     TIM3->CNT = 0;
//	     TIM3->CR1 &= ~TIM_CR1_CEN;
//	     TIM3->DIER &= ~TIM_DIER_UIE;
//
//	     __disable_irq();
//	     Test_Priority();
//	     TX_Send_CAN();
//	     __enable_irq();
//	 }
//}

/* USER CODE END 4 */









/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
