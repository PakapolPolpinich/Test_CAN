
Standard_NodeA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000630c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006564  08006564  00007564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b4  080065b4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080065b4  080065b4  000075b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065bc  080065bc  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065bc  080065bc  000075bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065c0  080065c0  000075c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080065c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  080065d0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080065d0  00008178  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001167f  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fb  00000000  00000000  000196c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  0001c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffdc  00000000  00000000  0001ce4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c9a  00000000  00000000  0003ce2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c617f  00000000  00000000  0004dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000324c  00000000  00000000  00113c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00116ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	0800654c 	.word	0x0800654c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	0800654c 	.word	0x0800654c

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SystemClock_Config>:
 */
#include "RCC_clock.h"


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	@ 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2250      	movs	r2, #80	@ 0x50
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 ff98 	bl	80064f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <SystemClock_Config+0xdc>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005de:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xdc>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xdc>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xdc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d1f9      	bne.n	80005f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000626:	230c      	movs	r3, #12
 8000628:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062a:	2300      	movs	r3, #0
 800062c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f001 feb6 	bl	80023a8 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    //Error_Handler();
	while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <SystemClock_Config+0x92>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fad7 	bl	8002c18 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    //Error_Handler();
	while(1);
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <SystemClock_Config+0xc0>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <SystemClock_Config+0xe0>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	44020800 	.word	0x44020800
 8000690:	40022000 	.word	0x40022000

08000694 <MX_GPIO_Init>:
 *      Author: Admin
 */
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b47      	ldr	r3, [pc, #284]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a45      	ldr	r2, [pc, #276]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b43      	ldr	r3, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c8:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a3e      	ldr	r2, [pc, #248]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0x134>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000714:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000728:	f001 fdda 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	4827      	ldr	r0, [pc, #156]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000732:	f001 fdd5 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0x144>)
 800074c:	f001 fc76 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000768:	f001 fc68 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076c:	2308      	movs	r3, #8
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000784:	f001 fc5a 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000788:	2320      	movs	r3, #32
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 800079c:	f001 fc4e 	bl	800203c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2010      	movs	r0, #16
 80007a6:	f000 fcb7 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 fcce 	bl	800114c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	2018      	movs	r0, #24
 80007b6:	f000 fcaf 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80007ba:	2018      	movs	r0, #24
 80007bc:	f000 fcc6 	bl	800114c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	@ 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	44020c00 	.word	0x44020c00
 80007cc:	42020000 	.word	0x42020000
 80007d0:	42020400 	.word	0x42020400
 80007d4:	10210000 	.word	0x10210000
 80007d8:	42020800 	.word	0x42020800

080007dc <main>:
CAN_SET CAN_Payload;



int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb24 	bl	8000e2c <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f7ff fee4 	bl	80005b0 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff54 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007ec:	f000 f80a 	bl	8000804 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 faa6 	bl	8000d40 <MX_USART3_UART_Init>

  CAN_Payload.dataTx[0] = 0x0;
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <main+0x24>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <main+0x20>
 8000800:	2000008c 	.word	0x2000008c

08000804 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800080a:	4a29      	ldr	r2, [pc, #164]	@ (80008b0 <MX_FDCAN1_Init+0xac>)
 800080c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800080e:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800081a:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000822:	2200      	movs	r2, #0
 8000824:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000828:	2200      	movs	r2, #0
 800082a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000834:	2219      	movs	r2, #25
 8000836:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800083a:	2201      	movs	r2, #1
 800083c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800083e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000840:	220d      	movs	r2, #13
 8000842:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000846:	2202      	movs	r2, #2
 8000848:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800084c:	2201      	movs	r2, #1
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000852:	2201      	movs	r2, #1
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800085e:	2201      	movs	r2, #1
 8000860:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000864:	2200      	movs	r2, #0
 8000866:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000876:	f000 fdcd 	bl	8001414 <HAL_FDCAN_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000880:	f000 f8ac 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000886:	f000 ff1f 	bl	80016c8 <HAL_FDCAN_Start>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_FDCAN1_Init+0x90>
  	 /* Notification Error */
  	Error_Handler();
 8000890:	f000 f8a4 	bl	80009dc <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800089a:	f001 f889 	bl	80019b0 <HAL_FDCAN_ActivateNotification>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_FDCAN1_Init+0xa4>
  {
	/* Notification Error */
	Error_Handler();
 80008a4:	f000 f89a 	bl	80009dc <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000028 	.word	0x20000028
 80008b0:	4000a400 	.word	0x4000a400

080008b4 <Test_Priority>:
	}
}



void Test_Priority(){
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

	#ifdef NODE_A
		CAN_Payload.msgID = 0x100;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <Test_Priority+0x20>)
 80008ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <Test_Priority+0x20>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
		//SetFilter(0x11,0x0);
	#endif



}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	2000008c 	.word	0x2000008c

080008d8 <TX_Send_CAN>:



void TX_Send_CAN(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

    /* ----- Prepare CAN data --------------------------------------- */
    CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID; //CAN_Payload.msgID
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <TX_Send_CAN+0x64>)
 80008de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <TX_Send_CAN+0x64>)
 80008e6:	601a      	str	r2, [r3, #0]
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <TX_Send_CAN+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;        // 8-byte payloaD
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <TX_Send_CAN+0x64>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	60da      	str	r2, [r3, #12]
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <TX_Send_CAN+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <TX_Send_CAN+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
    CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <TX_Send_CAN+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <TX_Send_CAN+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
    CAN_Payload.TxHeader.MessageMarker = 0;
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <TX_Send_CAN+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]

    CAN_Payload.dataTx[0] ^= 1;
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <TX_Send_CAN+0x64>)
 8000914:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8000918:	f083 0301 	eor.w	r3, r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <TX_Send_CAN+0x64>)
 8000920:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 8000924:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <TX_Send_CAN+0x68>)
 8000926:	4905      	ldr	r1, [pc, #20]	@ (800093c <TX_Send_CAN+0x64>)
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <TX_Send_CAN+0x6c>)
 800092a:	f000 fef5 	bl	8001718 <HAL_FDCAN_AddMessageToTxFifoQ>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <TX_Send_CAN+0x60>
    {
    	Error_Handler();
 8000934:	f000 f852 	bl	80009dc <Error_Handler>
    }
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000008c 	.word	0x2000008c
 8000940:	200000da 	.word	0x200000da
 8000944:	20000028 	.word	0x20000028

08000948 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_5) {
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b20      	cmp	r3, #32
 8000956:	d103      	bne.n	8000960 <HAL_GPIO_EXTI_Falling_Callback+0x18>
		Test_Priority();
 8000958:	f7ff ffac 	bl	80008b4 <Test_Priority>
		TX_Send_CAN();
 800095c:	f7ff ffbc 	bl	80008d8 <TX_Send_CAN>

	}
	if(GPIO_Pin == GPIO_PIN_13){
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000966:	d101      	bne.n	800096c <HAL_GPIO_EXTI_Falling_Callback+0x24>
		TX_Send_CAN();
 8000968:	f7ff ffb6 	bl	80008d8 <TX_Send_CAN>
	}
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d014      	beq.n	80009b2 <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <HAL_FDCAN_RxFifo0Callback+0x58>)
 800098a:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800098c:	2140      	movs	r1, #64	@ 0x40
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 ff06 	bl	80017a0 <HAL_FDCAN_GetRxMessage>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 800099a:	f000 f81f 	bl	80009dc <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800099e:	2200      	movs	r2, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f001 f804 	bl	80019b0 <HAL_FDCAN_ActivateNotification>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 80009ae:	f000 f815 	bl	80009dc <Error_Handler>
		}
	}
	if(CAN_Payload.dataRx[0] == 0x1){
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80009b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d103      	bne.n	80009c4 <HAL_FDCAN_RxFifo0Callback+0x50>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009bc:	2120      	movs	r1, #32
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80009c0:	f001 fca6 	bl	8002310 <HAL_GPIO_TogglePin>
	}
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000dc 	.word	0x200000dc
 80009d0:	200000b0 	.word	0x200000b0
 80009d4:	2000008c 	.word	0x2000008c
 80009d8:	42020000 	.word	0x42020000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0ac      	sub	sp, #176	@ 0xb0
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2288      	movs	r2, #136	@ 0x88
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f005 fd6b 	bl	80064f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a2a      	ldr	r2, [pc, #168]	@ (8000acc <HAL_FDCAN_MspInit+0xd4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d14d      	bne.n	8000ac4 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	f04f 0304 	mov.w	r3, #4
 8000a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fc2c 	bl	800329c <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000a4a:	f7ff ffc7 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_FDCAN_MspInit+0xd8>)
 8000a50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a54:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <HAL_FDCAN_MspInit+0xd8>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_FDCAN_MspInit+0xd8>)
 8000a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_FDCAN_MspInit+0xd8>)
 8000a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a72:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <HAL_FDCAN_MspInit+0xd8>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_FDCAN_MspInit+0xd8>)
 8000a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a8a:	23c0      	movs	r3, #192	@ 0xc0
 8000a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aac:	4619      	mov	r1, r3
 8000aae:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <HAL_FDCAN_MspInit+0xdc>)
 8000ab0:	f001 fac4 	bl	800203c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	2027      	movs	r0, #39	@ 0x27
 8000aba:	f000 fb2d 	bl	8001118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000abe:	2027      	movs	r0, #39	@ 0x27
 8000ac0:	f000 fb44 	bl	800114c <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000ac4:	bf00      	nop
 8000ac6:	37b0      	adds	r7, #176	@ 0xb0
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	4000a400 	.word	0x4000a400
 8000ad0:	44020c00 	.word	0x44020c00
 8000ad4:	42020800 	.word	0x42020800

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ac      	sub	sp, #176	@ 0xb0
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2288      	movs	r2, #136	@ 0x88
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f005 fcfb 	bl	80064f4 <memset>
  if(huart->Instance==USART3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a2a      	ldr	r2, [pc, #168]	@ (8000bac <HAL_UART_MspInit+0xd4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d14c      	bne.n	8000ba2 <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b08:	f04f 0204 	mov.w	r2, #4
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fbbd 	bl	800329c <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b28:	f7ff ff58 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <HAL_UART_MspInit+0xd8>)
 8000b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b32:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb0 <HAL_UART_MspInit+0xd8>)
 8000b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b38:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <HAL_UART_MspInit+0xd8>)
 8000b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <HAL_UART_MspInit+0xd8>)
 8000b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b50:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <HAL_UART_MspInit+0xd8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_UART_MspInit+0xd8>)
 8000b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000b68:	2318      	movs	r3, #24
 8000b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000b80:	230d      	movs	r3, #13
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <HAL_UART_MspInit+0xdc>)
 8000b8e:	f001 fa55 	bl	800203c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	203c      	movs	r0, #60	@ 0x3c
 8000b98:	f000 fabe 	bl	8001118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b9c:	203c      	movs	r0, #60	@ 0x3c
 8000b9e:	f000 fad5 	bl	800114c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	37b0      	adds	r7, #176	@ 0xb0
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	44020c00 	.word	0x44020c00
 8000bb4:	42020000 	.word	0x42020000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x4>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f9ab 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c1a:	2020      	movs	r0, #32
 8000c1c:	f001 fb92 	bl	8002344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000c28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c2c:	f001 fb8a 	bl	8002344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c3a:	f000 ff9f 	bl	8001b7c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000028 	.word	0x20000028

08000c48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <USART3_IRQHandler+0x10>)
 8000c4e:	f004 fc47 	bl	80054e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000e0 	.word	0x200000e0

08000c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c62:	4b30      	ldr	r3, [pc, #192]	@ (8000d24 <SystemInit+0xc8>)
 8000c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c68:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <SystemInit+0xc8>)
 8000c6a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <SystemInit+0xcc>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <SystemInit+0xcc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <SystemInit+0xcc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000c84:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <SystemInit+0xcc>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4927      	ldr	r1, [pc, #156]	@ (8000d28 <SystemInit+0xcc>)
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <SystemInit+0xd0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c90:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <SystemInit+0xcc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000c96:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <SystemInit+0xcc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <SystemInit+0xcc>)
 8000c9e:	4a24      	ldr	r2, [pc, #144]	@ (8000d30 <SystemInit+0xd4>)
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <SystemInit+0xcc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <SystemInit+0xcc>)
 8000caa:	4a21      	ldr	r2, [pc, #132]	@ (8000d30 <SystemInit+0xd4>)
 8000cac:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <SystemInit+0xcc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <SystemInit+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <SystemInit+0xcc>)
 8000cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <SystemInit+0xcc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <SystemInit+0xc8>)
 8000cc8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ccc:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <SystemInit+0xd8>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000cd6:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000cde:	d003      	beq.n	8000ce8 <SystemInit+0x8c>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000ce6:	d117      	bne.n	8000d18 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <SystemInit+0xd8>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <SystemInit+0xd8>)
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <SystemInit+0xdc>)
 8000cf8:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <SystemInit+0xd8>)
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <SystemInit+0xe0>)
 8000cfe:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <SystemInit+0xd8>)
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <SystemInit+0xd8>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <SystemInit+0xd8>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <SystemInit+0xd8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	61d3      	str	r3, [r2, #28]
  }
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	44020c00 	.word	0x44020c00
 8000d2c:	fae2eae3 	.word	0xfae2eae3
 8000d30:	01010280 	.word	0x01010280
 8000d34:	40022000 	.word	0x40022000
 8000d38:	08192a3b 	.word	0x08192a3b
 8000d3c:	4c5d6e7f 	.word	0x4c5d6e7f

08000d40 <MX_USART3_UART_Init>:
#include "uart.h"

UART_HandleTypeDef huart3;

void MX_USART3_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <MX_USART3_UART_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d8a:	f004 fb59 	bl	8005440 <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART3_UART_Init+0x58>
  {
	  //Error_Handler();
	  	while(1);
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MX_USART3_UART_Init+0x54>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d9c:	f005 fadf 	bl	800635e <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x6a>
  {
	  //Error_Handler();
	  	while(1);
 8000da6:	bf00      	nop
 8000da8:	e7fd      	b.n	8000da6 <MX_USART3_UART_Init+0x66>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dae:	f005 fb14 	bl	80063da <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x7c>
  {
	  //Error_Handler();
	  	while(1);
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MX_USART3_UART_Init+0x78>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f005 fa95 	bl	80062ec <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x8c>
  {
	  //Error_Handler();
	  	while(1);
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MX_USART3_UART_Init+0x88>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000e0 	.word	0x200000e0
 8000dd4:	40004800 	.word	0x40004800

08000dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ddc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dde:	e003      	b.n	8000de8 <LoopCopyDataInit>

08000de0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000de2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000de4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000de6:	3104      	adds	r1, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000df0:	d3f6      	bcc.n	8000de0 <CopyDataInit>
	ldr	r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000df4:	e002      	b.n	8000dfc <LoopFillZerobss>

08000df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000df6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000df8:	f842 3b04 	str.w	r3, [r2], #4

08000dfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <LoopForever+0x16>)
	cmp	r2, r3
 8000dfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e00:	d3f9      	bcc.n	8000df6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e02:	f7ff ff2b 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f005 fb7d 	bl	8006504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0a:	f7ff fce7 	bl	80007dc <main>

08000e0e <LoopForever>:

LoopForever:
    b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e10:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000e14:	080065c4 	.word	0x080065c4
	ldr	r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e1c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e20:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e24:	20000178 	.word	0x20000178

08000e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f966 	bl	8001102 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e36:	f002 f8a7 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_Init+0x44>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	f003 030f 	and.w	r3, r3, #15
 8000e44:	490b      	ldr	r1, [pc, #44]	@ (8000e74 <HAL_Init+0x48>)
 8000e46:	5ccb      	ldrb	r3, [r1, r3]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_Init+0x4c>)
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e50:	2004      	movs	r0, #4
 8000e52:	f000 f9ab 	bl	80011ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e56:	200f      	movs	r0, #15
 8000e58:	f000 f810 	bl	8000e7c <HAL_InitTick>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e002      	b.n	8000e6c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fdbf 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	44020c00 	.word	0x44020c00
 8000e74:	08006564 	.word	0x08006564
 8000e78:	20000000 	.word	0x20000000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e88:	4b33      	ldr	r3, [pc, #204]	@ (8000f58 <HAL_InitTick+0xdc>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e05c      	b.n	8000f4e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000e94:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <HAL_InitTick+0xe0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d10c      	bne.n	8000eba <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f60 <HAL_InitTick+0xe4>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <HAL_InitTick+0xdc>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	e037      	b.n	8000f2a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000eba:	f000 f9cf 	bl	800125c <HAL_SYSTICK_GetCLKSourceConfig>
 8000ebe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d023      	beq.n	8000f0e <HAL_InitTick+0x92>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d82d      	bhi.n	8000f28 <HAL_InitTick+0xac>
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_InitTick+0x5e>
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ed8:	e026      	b.n	8000f28 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <HAL_InitTick+0xe4>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <HAL_InitTick+0xdc>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000ee8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef0:	60fb      	str	r3, [r7, #12]
        break;
 8000ef2:	e01a      	b.n	8000f2a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_InitTick+0xdc>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f02:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]
        break;
 8000f0c:	e00d      	b.n	8000f2a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0xdc>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f24:	60fb      	str	r3, [r7, #12]
        break;
 8000f26:	e000      	b.n	8000f2a <HAL_InitTick+0xae>
        break;
 8000f28:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 f91c 	bl	8001168 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e009      	b.n	8000f4e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f42:	f000 f8e9 	bl	8001118 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <HAL_InitTick+0xe8>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	e000e010 	.word	0xe000e010
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000174 	.word	0x20000174

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000174 	.word	0x20000174

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	@ (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff4c 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001126:	f7ff ff63 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 800112a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	6978      	ldr	r0, [r7, #20]
 8001132:	f7ff ffb3 	bl	800109c <NVIC_EncodePriority>
 8001136:	4602      	mov	r2, r0
 8001138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff82 	bl	8001048 <__NVIC_SetPriority>
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff56 	bl	800100c <__NVIC_EnableIRQ>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001178:	d301      	bcc.n	800117e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800117a:	2301      	movs	r3, #1
 800117c:	e00d      	b.n	800119a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_SYSTICK_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_SYSTICK_Config+0x40>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_SYSTICK_Config+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <HAL_SYSTICK_Config+0x40>)
 8001192:	f043 0303 	orr.w	r3, r3, #3
 8001196:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d844      	bhi.n	8001244 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80011ba:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011e3 	.word	0x080011e3
 80011c4:	08001201 	.word	0x08001201
 80011c8:	08001223 	.word	0x08001223
 80011cc:	08001245 	.word	0x08001245
 80011d0:	080011d5 	.word	0x080011d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6013      	str	r3, [r2, #0]
      break;
 80011e0:	e031      	b.n	8001246 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011f4:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011f6:	f023 030c 	bic.w	r3, r3, #12
 80011fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80011fe:	e022      	b.n	8001246 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a13      	ldr	r2, [pc, #76]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001206:	f023 0304 	bic.w	r3, r3, #4
 800120a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800120e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001212:	f023 030c 	bic.w	r3, r3, #12
 8001216:	4a10      	ldr	r2, [pc, #64]	@ (8001258 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001220:	e011      	b.n	8001246 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001230:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001234:	f023 030c 	bic.w	r3, r3, #12
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001242:	e000      	b.n	8001246 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001244:	bf00      	nop
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010
 8001258:	44020c00 	.word	0x44020c00

0800125c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800126e:	2304      	movs	r3, #4
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e01e      	b.n	80012b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001276:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b08      	cmp	r3, #8
 8001284:	d00f      	beq.n	80012a6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d80f      	bhi.n	80012ac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b04      	cmp	r3, #4
 8001296:	d003      	beq.n	80012a0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001298:	e008      	b.n	80012ac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
        break;
 800129e:	e008      	b.n	80012b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
        break;
 80012a4:	e005      	b.n	80012b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80012a6:	2302      	movs	r3, #2
 80012a8:	607b      	str	r3, [r7, #4]
        break;
 80012aa:	e002      	b.n	80012b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
        break;
 80012b0:	bf00      	nop
    }
  }
  return systick_source;
 80012b2:	687b      	ldr	r3, [r7, #4]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e010 	.word	0xe000e010
 80012c4:	44020c00 	.word	0x44020c00

080012c8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80012d0:	f7ff fe5e 	bl	8000f90 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e06b      	b.n	80013b8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d008      	beq.n	80012fe <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e05c      	b.n	80013b8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0204 	orr.w	r2, r2, #4
 800130c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2205      	movs	r2, #5
 8001312:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001316:	e020      	b.n	800135a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001318:	f7ff fe3a 	bl	8000f90 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b05      	cmp	r3, #5
 8001324:	d919      	bls.n	800135a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	f043 0210 	orr.w	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800133e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800134a:	2201      	movs	r2, #1
 800134c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e02e      	b.n	80013b8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0d7      	beq.n	8001318 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0202 	orr.w	r2, r2, #2
 8001376:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2204      	movs	r2, #4
 800137c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001388:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a2:	2201      	movs	r2, #1
 80013a4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e019      	b.n	8001406 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d004      	beq.n	80013e8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2220      	movs	r2, #32
 80013e2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e00e      	b.n	8001406 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2204      	movs	r2, #4
 80013ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e147      	b.n	80016b6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fadc 	bl	80009f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0210 	bic.w	r2, r2, #16
 800144e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff fd9e 	bl	8000f90 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001456:	e012      	b.n	800147e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001458:	f7ff fd9a 	bl	8000f90 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d90b      	bls.n	800147e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e11b      	b.n	80016b6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b08      	cmp	r3, #8
 800148a:	d0e5      	beq.n	8001458 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff fd78 	bl	8000f90 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014a2:	e012      	b.n	80014ca <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014a4:	f7ff fd74 	bl	8000f90 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d90b      	bls.n	80014ca <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0f5      	b.n	80016b6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0e5      	beq.n	80014a4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0202 	orr.w	r2, r2, #2
 80014e6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a74      	ldr	r2, [pc, #464]	@ (80016c0 <HAL_FDCAN_Init+0x2ac>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d103      	bne.n	80014fa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80014f2:	4a74      	ldr	r2, [pc, #464]	@ (80016c4 <HAL_FDCAN_Init+0x2b0>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7c1b      	ldrb	r3, [r3, #16]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d108      	bne.n	8001514 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001510:	619a      	str	r2, [r3, #24]
 8001512:	e007      	b.n	8001524 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001522:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7c5b      	ldrb	r3, [r3, #17]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	e007      	b.n	800154e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800154c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7c9b      	ldrb	r3, [r3, #18]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699a      	ldr	r2, [r3, #24]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001564:	619a      	str	r2, [r3, #24]
 8001566:	e007      	b.n	8001578 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001576:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800159c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0210 	bic.w	r2, r2, #16
 80015ac:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d108      	bne.n	80015c8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0204 	orr.w	r2, r2, #4
 80015c4:	619a      	str	r2, [r3, #24]
 80015c6:	e02c      	b.n	8001622 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d028      	beq.n	8001622 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d01c      	beq.n	8001612 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015e6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0210 	orr.w	r2, r2, #16
 80015f6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d110      	bne.n	8001622 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e007      	b.n	8001622 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699a      	ldr	r2, [r3, #24]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0220 	orr.w	r2, r2, #32
 8001620:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	3b01      	subs	r3, #1
 8001628:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	3b01      	subs	r3, #1
 8001630:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001632:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800163a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	3b01      	subs	r3, #1
 8001644:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800164a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800164c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001656:	d115      	bne.n	8001684 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001662:	3b01      	subs	r3, #1
 8001664:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001666:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	3b01      	subs	r3, #1
 800166e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001670:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	3b01      	subs	r3, #1
 800167a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001680:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001682:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fbfc 	bl	8001e98 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	4000a400 	.word	0x4000a400
 80016c4:	4000a500 	.word	0x4000a500

080016c8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d110      	bne.n	80016fe <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e006      	b.n	800170c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	f043 0204 	orr.w	r2, r3, #4
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d12c      	bne.n	800178a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001744:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e023      	b.n	8001798 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fbec 	bl	8001f44 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800177c:	2201      	movs	r2, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e006      	b.n	8001798 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	f043 0208 	orr.w	r2, r3, #8
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b08b      	sub	sp, #44	@ 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017b8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80017ba:	7efb      	ldrb	r3, [r7, #27]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	f040 80e8 	bne.w	8001992 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b40      	cmp	r3, #64	@ 0x40
 80017c6:	d137      	bne.n	8001838 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0db      	b.n	80019a0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f0:	0e1b      	lsrs	r3, r3, #24
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10a      	bne.n	8001810 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001802:	0a5b      	lsrs	r3, r3, #9
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800180c:	2301      	movs	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
 8001836:	e036      	b.n	80018a6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0a3      	b.n	80019a0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001860:	0e1b      	lsrs	r3, r3, #24
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d10a      	bne.n	8001880 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800187c:	2301      	movs	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e005      	b.n	80018d6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	3304      	adds	r3, #4
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0c1b      	lsrs	r3, r3, #16
 8001904:	f003 020f 	and.w	r2, r3, #15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0e1b      	lsrs	r3, r3, #24
 800192a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0fda      	lsrs	r2, r3, #31
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	3304      	adds	r3, #4
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	e00a      	b.n	8001962 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	441a      	add	r2, r3
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	440b      	add	r3, r1
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	3301      	adds	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <HAL_FDCAN_GetRxMessage+0x20c>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	461a      	mov	r2, r3
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	4293      	cmp	r3, r2
 8001970:	d3ec      	bcc.n	800194c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b40      	cmp	r3, #64	@ 0x40
 8001976:	d105      	bne.n	8001984 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001982:	e004      	b.n	800198e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e006      	b.n	80019a0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001996:	f043 0208 	orr.w	r2, r3, #8
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	372c      	adds	r7, #44	@ 0x2c
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	0800657c 	.word	0x0800657c

080019b0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019c2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d003      	beq.n	80019d2 <HAL_FDCAN_ActivateNotification+0x22>
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	f040 80c8 	bne.w	8001b62 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03b      	beq.n	8001a66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d031      	beq.n	8001a66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d027      	beq.n	8001a66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01d      	beq.n	8001a66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d013      	beq.n	8001a66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00c      	beq.n	8001a76 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d13b      	bne.n	8001b02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d131      	bne.n	8001b02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d127      	bne.n	8001b02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11d      	bne.n	8001b02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d113      	bne.n	8001b02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00c      	beq.n	8001b12 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0202 	orr.w	r2, r2, #2
 8001b10:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e006      	b.n	8001b70 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	f043 0202 	orr.w	r2, r3, #2
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b98:	4013      	ands	r3, r2
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	4013      	ands	r3, r2
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001bd6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bde:	6a3a      	ldr	r2, [r7, #32]
 8001be0:	4013      	ands	r3, r2
 8001be2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bee:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c02:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c0a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2240      	movs	r2, #64	@ 0x40
 8001c26:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f916 	bl	8001e5a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d014      	beq.n	8001c6c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c4a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c64:	6939      	ldr	r1, [r7, #16]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8d8 	bl	8001e1c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8a2 	bl	8001dc6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fe6e 	bl	8000974 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001ca6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f897 	bl	8001ddc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f890 	bl	8001df2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d018      	beq.n	8001d0e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d013      	beq.n	8001d0e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cee:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f87c 	bl	8001e06 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f880 	bl	8001e32 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f878 	bl	8001e46 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00f      	beq.n	8001d80 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d8e:	69f9      	ldr	r1, [r7, #28]
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f876 	bl	8001e82 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a3a      	ldr	r2, [r7, #32]
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f858 	bl	8001e6e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3730      	adds	r7, #48	@ 0x30
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001ea2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eba:	041a      	lsls	r2, r3, #16
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee0:	061a      	lsls	r2, r3, #24
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e005      	b.n	8001f26 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3304      	adds	r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3f3      	bcc.n	8001f1a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	4000ac00 	.word	0x4000ac00

08001f44 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	@ 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f62:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e00a      	b.n	8001f86 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001f78:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001f7e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f84:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f90:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f96:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f9c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e020      	b.n	800201a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3303      	adds	r3, #3
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	440b      	add	r3, r1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ff0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	440b      	add	r3, r1
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ffe:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	440a      	add	r2, r1
 8002006:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002008:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	3304      	adds	r3, #4
 8002012:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3304      	adds	r3, #4
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <FDCAN_CopyMessageToRAM+0xf4>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	461a      	mov	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4293      	cmp	r3, r2
 8002028:	d3d6      	bcc.n	8001fd8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	3724      	adds	r7, #36	@ 0x24
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	0800657c 	.word	0x0800657c

0800203c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800204a:	e136      	b.n	80022ba <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8128 	beq.w	80022b4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x38>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b12      	cmp	r3, #18
 8002072:	d125      	bne.n	80020c0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	6979      	ldr	r1, [r7, #20]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d00b      	beq.n	8002114 <HAL_GPIO_Init+0xd8>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	2b11      	cmp	r3, #17
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d130      	bne.n	8002176 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4013      	ands	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800214a:	2201      	movs	r2, #1
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4013      	ands	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 0201 	and.w	r2, r3, #1
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d017      	beq.n	80021ae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4013      	ands	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07c      	beq.n	80022b4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021ba:	4a47      	ldr	r2, [pc, #284]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3318      	adds	r3, #24
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4013      	ands	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0a9a      	lsrs	r2, r3, #10
 80021e2:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_GPIO_Init+0x2a0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	4093      	lsls	r3, r2
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80021f6:	4938      	ldr	r1, [pc, #224]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3318      	adds	r3, #24
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002204:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002228:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800222e:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4013      	ands	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800225e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4013      	ands	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800227e:	4a16      	ldr	r2, [pc, #88]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 8002288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800228c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4013      	ands	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <HAL_GPIO_Init+0x29c>)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3301      	adds	r3, #1
 80022b8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f aec1 	bne.w	800204c <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	44022000 	.word	0x44022000
 80022dc:	002f7f7f 	.word	0x002f7f7f

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43d9      	mvns	r1, r3
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	400b      	ands	r3, r1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800234e:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800235a:	4a0c      	ldr	r2, [pc, #48]	@ (800238c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f814 	bl	8002390 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002368:	4b08      	ldr	r3, [pc, #32]	@ (800238c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002374:	4a05      	ldr	r2, [pc, #20]	@ (800238c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fae3 	bl	8000948 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	44022000 	.word	0x44022000

08002390 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f000 bc28 	b.w	8002c0c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023bc:	4b94      	ldr	r3, [pc, #592]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f003 0318 	and.w	r3, r3, #24
 80023c4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80023c6:	4b92      	ldr	r3, [pc, #584]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x46>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b18      	cmp	r3, #24
 80023e6:	d114      	bne.n	8002412 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d111      	bne.n	8002412 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f000 bc08 	b.w	8002c0c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80023fc:	4b84      	ldr	r3, [pc, #528]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	4981      	ldr	r1, [pc, #516]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800240c:	4313      	orrs	r3, r2
 800240e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002410:	e040      	b.n	8002494 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d023      	beq.n	8002462 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800241a:	4b7d      	ldr	r3, [pc, #500]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7c      	ldr	r2, [pc, #496]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fdb3 	bl	8000f90 <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800242e:	f7fe fdaf 	bl	8000f90 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e3e5      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002440:	4b73      	ldr	r3, [pc, #460]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800244c:	4b70      	ldr	r3, [pc, #448]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	496d      	ldr	r1, [pc, #436]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800245c:	4313      	orrs	r3, r2
 800245e:	618b      	str	r3, [r1, #24]
 8002460:	e018      	b.n	8002494 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002462:	4b6b      	ldr	r3, [pc, #428]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6a      	ldr	r2, [pc, #424]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800246c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7fe fd8f 	bl	8000f90 <HAL_GetTick>
 8002472:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002476:	f7fe fd8b 	bl	8000f90 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e3c1      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002488:	4b61      	ldr	r3, [pc, #388]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a0 	beq.w	80025e2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x10c>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b18      	cmp	r3, #24
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 8092 	bne.w	80025e2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e3a4      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x132>
 80024cc:	4b50      	ldr	r3, [pc, #320]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e058      	b.n	800258c <HAL_RCC_OscConfig+0x1e4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d112      	bne.n	8002508 <HAL_RCC_OscConfig+0x160>
 80024e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b48      	ldr	r3, [pc, #288]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a47      	ldr	r2, [pc, #284]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80024f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b45      	ldr	r3, [pc, #276]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a44      	ldr	r2, [pc, #272]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e041      	b.n	800258c <HAL_RCC_OscConfig+0x1e4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x190>
 8002512:	4b3f      	ldr	r3, [pc, #252]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a3e      	ldr	r2, [pc, #248]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b3c      	ldr	r3, [pc, #240]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3b      	ldr	r2, [pc, #236]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002524:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a38      	ldr	r2, [pc, #224]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e029      	b.n	800258c <HAL_RCC_OscConfig+0x1e4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002540:	d112      	bne.n	8002568 <HAL_RCC_OscConfig+0x1c0>
 8002542:	4b33      	ldr	r3, [pc, #204]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a32      	ldr	r2, [pc, #200]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2f      	ldr	r2, [pc, #188]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002554:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b2d      	ldr	r3, [pc, #180]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2c      	ldr	r2, [pc, #176]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e011      	b.n	800258c <HAL_RCC_OscConfig+0x1e4>
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a28      	ldr	r2, [pc, #160]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a25      	ldr	r2, [pc, #148]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b23      	ldr	r3, [pc, #140]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a22      	ldr	r2, [pc, #136]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 8002586:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fcfc 	bl	8000f90 <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800259c:	f7fe fcf8 	bl	8000f90 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e32e      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ae:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x1f4>
 80025ba:	e012      	b.n	80025e2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fce8 	bl	8000f90 <HAL_GetTick>
 80025c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fce4 	bl	8000f90 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e31a      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <HAL_RCC_OscConfig+0x268>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 809a 	beq.w	8002724 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x25a>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b18      	cmp	r3, #24
 80025fa:	d149      	bne.n	8002690 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d146      	bne.n	8002690 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d104      	bne.n	8002614 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e2fe      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
 800260e:	bf00      	nop
 8002610:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11c      	bne.n	8002654 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800261a:	4b9a      	ldr	r3, [pc, #616]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0218 	and.w	r2, r3, #24
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	429a      	cmp	r2, r3
 8002628:	d014      	beq.n	8002654 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800262a:	4b96      	ldr	r3, [pc, #600]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0218 	bic.w	r2, r3, #24
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	4993      	ldr	r1, [pc, #588]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800263c:	f000 fdd0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002640:	4b91      	ldr	r3, [pc, #580]	@ (8002888 <HAL_RCC_OscConfig+0x4e0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fc19 	bl	8000e7c <HAL_InitTick>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e2db      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fc9c 	bl	8000f90 <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800265c:	f7fe fc98 	bl	8000f90 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e2ce      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266e:	4b85      	ldr	r3, [pc, #532]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800267a:	4b82      	ldr	r3, [pc, #520]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	497e      	ldr	r1, [pc, #504]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800268e:	e049      	b.n	8002724 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02c      	beq.n	80026f2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002698:	4b7a      	ldr	r3, [pc, #488]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 0218 	bic.w	r2, r3, #24
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4977      	ldr	r1, [pc, #476]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80026aa:	4b76      	ldr	r3, [pc, #472]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a75      	ldr	r2, [pc, #468]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fc6b 	bl	8000f90 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80026be:	f7fe fc67 	bl	8000f90 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e29d      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80026dc:	4b69      	ldr	r3, [pc, #420]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	4966      	ldr	r1, [pc, #408]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	610b      	str	r3, [r1, #16]
 80026f0:	e018      	b.n	8002724 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f2:	4b64      	ldr	r3, [pc, #400]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a63      	ldr	r2, [pc, #396]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe fc47 	bl	8000f90 <HAL_GetTick>
 8002702:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002706:	f7fe fc43 	bl	8000f90 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e279      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002718:	4b5a      	ldr	r3, [pc, #360]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03c      	beq.n	80027aa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01c      	beq.n	8002772 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002738:	4b52      	ldr	r3, [pc, #328]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800273a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800273e:	4a51      	ldr	r2, [pc, #324]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002740:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fc22 	bl	8000f90 <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002750:	f7fe fc1e 	bl	8000f90 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e254      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002762:	4b48      	ldr	r3, [pc, #288]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ef      	beq.n	8002750 <HAL_RCC_OscConfig+0x3a8>
 8002770:	e01b      	b.n	80027aa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002772:	4b44      	ldr	r3, [pc, #272]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002778:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800277a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800277e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fc05 	bl	8000f90 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800278a:	f7fe fc01 	bl	8000f90 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e237      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800279c:	4b39      	ldr	r3, [pc, #228]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800279e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ef      	bne.n	800278a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d2 	beq.w	800295c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027b8:	4b34      	ldr	r3, [pc, #208]	@ (800288c <HAL_RCC_OscConfig+0x4e4>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d118      	bne.n	80027f6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80027c4:	4b31      	ldr	r3, [pc, #196]	@ (800288c <HAL_RCC_OscConfig+0x4e4>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	4a30      	ldr	r2, [pc, #192]	@ (800288c <HAL_RCC_OscConfig+0x4e4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d0:	f7fe fbde 	bl	8000f90 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d8:	f7fe fbda 	bl	8000f90 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e210      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_RCC_OscConfig+0x4e4>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d108      	bne.n	8002810 <HAL_RCC_OscConfig+0x468>
 80027fe:	4b21      	ldr	r3, [pc, #132]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002804:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800280e:	e074      	b.n	80028fa <HAL_RCC_OscConfig+0x552>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d118      	bne.n	800284a <HAL_RCC_OscConfig+0x4a2>
 8002818:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800281a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800281e:	4a19      	ldr	r2, [pc, #100]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002828:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800282a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800282e:	4a15      	ldr	r2, [pc, #84]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002834:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800283a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800283e:	4a11      	ldr	r2, [pc, #68]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002848:	e057      	b.n	80028fa <HAL_RCC_OscConfig+0x552>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d11e      	bne.n	8002890 <HAL_RCC_OscConfig+0x4e8>
 8002852:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002858:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002862:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002868:	4a06      	ldr	r2, [pc, #24]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800286a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800286e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002872:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 8002874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002878:	4a02      	ldr	r2, [pc, #8]	@ (8002884 <HAL_RCC_OscConfig+0x4dc>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002882:	e03a      	b.n	80028fa <HAL_RCC_OscConfig+0x552>
 8002884:	44020c00 	.word	0x44020c00
 8002888:	20000004 	.word	0x20000004
 800288c:	44020800 	.word	0x44020800
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b85      	cmp	r3, #133	@ 0x85
 8002896:	d118      	bne.n	80028ca <HAL_RCC_OscConfig+0x522>
 8002898:	4ba2      	ldr	r3, [pc, #648]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 800289a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800289e:	4aa1      	ldr	r2, [pc, #644]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028a8:	4b9e      	ldr	r3, [pc, #632]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ae:	4a9d      	ldr	r2, [pc, #628]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028b8:	4b9a      	ldr	r3, [pc, #616]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028be:	4a99      	ldr	r2, [pc, #612]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028c8:	e017      	b.n	80028fa <HAL_RCC_OscConfig+0x552>
 80028ca:	4b96      	ldr	r3, [pc, #600]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d0:	4a94      	ldr	r2, [pc, #592]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028da:	4b92      	ldr	r3, [pc, #584]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e0:	4a90      	ldr	r2, [pc, #576]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f0:	4a8c      	ldr	r2, [pc, #560]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80028f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe fb45 	bl	8000f90 <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe fb41 	bl	8000f90 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e175      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002920:	4b80      	ldr	r3, [pc, #512]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ed      	beq.n	800290a <HAL_RCC_OscConfig+0x562>
 800292e:	e015      	b.n	800295c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fb2e 	bl	8000f90 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fb2a 	bl	8000f90 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e15e      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800294e:	4b75      	ldr	r3, [pc, #468]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ed      	bne.n	8002938 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d036      	beq.n	80029d6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d019      	beq.n	80029a4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002970:	4b6c      	ldr	r3, [pc, #432]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6b      	ldr	r2, [pc, #428]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002976:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800297a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fb08 	bl	8000f90 <HAL_GetTick>
 8002980:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002984:	f7fe fb04 	bl	8000f90 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e13a      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002996:	4b63      	ldr	r3, [pc, #396]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x5dc>
 80029a2:	e018      	b.n	80029d6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80029aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe faee 	bl	8000f90 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80029b8:	f7fe faea 	bl	8000f90 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e120      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029ca:	4b56      	ldr	r3, [pc, #344]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8115 	beq.w	8002c0a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b18      	cmp	r3, #24
 80029e4:	f000 80af 	beq.w	8002b46 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	f040 8086 	bne.w	8002afe <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80029f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 80029f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7fe fac7 	bl	8000f90 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a06:	f7fe fac3 	bl	8000f90 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0f9      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a18:	4b42      	ldr	r3, [pc, #264]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002a24:	4b3f      	ldr	r3, [pc, #252]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a2c:	f023 0303 	bic.w	r3, r3, #3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a38:	0212      	lsls	r2, r2, #8
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	4939      	ldr	r1, [pc, #228]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	3b01      	subs	r3, #1
 8002a52:	025b      	lsls	r3, r3, #9
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a72:	492c      	ldr	r1, [pc, #176]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a78:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a7e:	f023 0310 	bic.w	r3, r3, #16
 8002a82:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a88:	4a26      	ldr	r2, [pc, #152]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a8e:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	4a24      	ldr	r2, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a94:	f043 0310 	orr.w	r3, r3, #16
 8002a98:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002a9a:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9e:	f023 020c 	bic.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	491f      	ldr	r1, [pc, #124]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	f023 0220 	bic.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab8:	491a      	ldr	r1, [pc, #104]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002abe:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002aca:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002ad0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fa5b 	bl	8000f90 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fa57 	bl	8000f90 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e08d      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x736>
 8002afc:	e085      	b.n	8002c0a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <HAL_RCC_OscConfig+0x77c>)
 8002b04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fa41 	bl	8000f90 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b12:	f7fe fa3d 	bl	8000f90 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d903      	bls.n	8002b28 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e073      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
 8002b24:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b28:	4b3a      	ldr	r3, [pc, #232]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002b34:	4b37      	ldr	r3, [pc, #220]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	4a36      	ldr	r2, [pc, #216]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002b3a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	6293      	str	r3, [r2, #40]	@ 0x28
 8002b44:	e061      	b.n	8002c0a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b46:	4b33      	ldr	r3, [pc, #204]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b4c:	4b31      	ldr	r3, [pc, #196]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b50:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d031      	beq.n	8002bbe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d12a      	bne.n	8002bbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d122      	bne.n	8002bbe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b82:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d11a      	bne.n	8002bbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	0a5b      	lsrs	r3, r3, #9
 8002b8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d111      	bne.n	8002bbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d108      	bne.n	8002bbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	0e1b      	lsrs	r3, r3, #24
 8002bb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e024      	b.n	8002c0c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bc2:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d01a      	beq.n	8002c0a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002bda:	f023 0310 	bic.w	r3, r3, #16
 8002bde:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe f9d6 	bl	8000f90 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002be6:	bf00      	nop
 8002be8:	f7fe f9d2 	bl	8000f90 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d0f9      	beq.n	8002be8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf8:	4a06      	ldr	r2, [pc, #24]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_RCC_OscConfig+0x86c>)
 8002c04:	f043 0310 	orr.w	r3, r3, #16
 8002c08:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	44020c00 	.word	0x44020c00

08002c18 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e19e      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b83      	ldr	r3, [pc, #524]	@ (8002e3c <HAL_RCC_ClockConfig+0x224>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b80      	ldr	r3, [pc, #512]	@ (8002e3c <HAL_RCC_ClockConfig+0x224>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 020f 	bic.w	r2, r3, #15
 8002c42:	497e      	ldr	r1, [pc, #504]	@ (8002e3c <HAL_RCC_ClockConfig+0x224>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e3c <HAL_RCC_ClockConfig+0x224>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e186      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	4b74      	ldr	r3, [pc, #464]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d909      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002c7a:	4b71      	ldr	r3, [pc, #452]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	496d      	ldr	r1, [pc, #436]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d012      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	4b68      	ldr	r3, [pc, #416]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d909      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002cac:	4b64      	ldr	r3, [pc, #400]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4961      	ldr	r1, [pc, #388]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002cdc:	4b58      	ldr	r3, [pc, #352]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4955      	ldr	r1, [pc, #340]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d908      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 020f 	bic.w	r2, r3, #15
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	494a      	ldr	r1, [pc, #296]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8093 	beq.w	8002e50 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d32:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d121      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e113      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e107      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d62:	4b37      	ldr	r3, [pc, #220]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0fb      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d72:	4b33      	ldr	r3, [pc, #204]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0f3      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002d82:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	492c      	ldr	r1, [pc, #176]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe f8fc 	bl	8000f90 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d112      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe f8f4 	bl	8000f90 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0d7      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dba:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0318 	and.w	r3, r3, #24
 8002dc2:	2b18      	cmp	r3, #24
 8002dc4:	d1ee      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x18c>
 8002dc6:	e043      	b.n	8002e50 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d112      	bne.n	8002df6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fe f8dd 	bl	8000f90 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0c0      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de8:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f003 0318 	and.w	r3, r3, #24
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x1ba>
 8002df4:	e02c      	b.n	8002e50 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d122      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe f8c6 	bl	8000f90 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0a9      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <HAL_RCC_ClockConfig+0x228>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 0318 	and.w	r3, r3, #24
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d1ee      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x1e8>
 8002e22:	e015      	b.n	8002e50 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe f8b4 	bl	8000f90 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d906      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e097      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
 8002e3a:	bf00      	nop
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e44:	4b4b      	ldr	r3, [pc, #300]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 0318 	and.w	r3, r3, #24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e9      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d208      	bcs.n	8002e7e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002e6c:	4b41      	ldr	r3, [pc, #260]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 020f 	bic.w	r2, r3, #15
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	493e      	ldr	r1, [pc, #248]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f78 <HAL_RCC_ClockConfig+0x360>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d210      	bcs.n	8002eae <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f78 <HAL_RCC_ClockConfig+0x360>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 020f 	bic.w	r2, r3, #15
 8002e94:	4938      	ldr	r1, [pc, #224]	@ (8002f78 <HAL_RCC_ClockConfig+0x360>)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9c:	4b36      	ldr	r3, [pc, #216]	@ (8002f78 <HAL_RCC_ClockConfig+0x360>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e05d      	b.n	8002f6a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d208      	bcs.n	8002edc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4927      	ldr	r1, [pc, #156]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d209      	bcs.n	8002f0e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002efa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	491a      	ldr	r1, [pc, #104]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d012      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d209      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f40:	f000 f822 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCC_ClockConfig+0x35c>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490b      	ldr	r1, [pc, #44]	@ (8002f7c <HAL_RCC_ClockConfig+0x364>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <HAL_RCC_ClockConfig+0x368>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_RCC_ClockConfig+0x36c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd ff8c 	bl	8000e7c <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002f68:	7afb      	ldrb	r3, [r7, #11]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	44020c00 	.word	0x44020c00
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	08006564 	.word	0x08006564
 8002f80:	20000000 	.word	0x20000000
 8002f84:	20000004 	.word	0x20000004

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f8e:	4b8c      	ldr	r3, [pc, #560]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0318 	and.w	r3, r3, #24
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002f9a:	4b8a      	ldr	r3, [pc, #552]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e107      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa0:	4b87      	ldr	r3, [pc, #540]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f003 0318 	and.w	r3, r3, #24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d112      	bne.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002fac:	4b84      	ldr	r3, [pc, #528]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fb8:	4b81      	ldr	r3, [pc, #516]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	4a81      	ldr	r2, [pc, #516]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e0f1      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e0ee      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0318 	and.w	r3, r3, #24
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fde:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x244>)
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e0e5      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe4:	4b76      	ldr	r3, [pc, #472]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f003 0318 	and.w	r3, r3, #24
 8002fec:	2b18      	cmp	r3, #24
 8002fee:	f040 80dd 	bne.w	80031ac <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ff2:	4b73      	ldr	r3, [pc, #460]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002ffc:	4b70      	ldr	r3, [pc, #448]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003006:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003008:	4b6d      	ldr	r3, [pc, #436]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003014:	4b6a      	ldr	r3, [pc, #424]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003018:	08db      	lsrs	r3, r3, #3
 800301a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80b7 	beq.w	80031a6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d003      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0xbe>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d056      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x16a>
 8003044:	e077      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003046:	4b5e      	ldr	r3, [pc, #376]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02d      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003052:	4b5b      	ldr	r3, [pc, #364]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	08db      	lsrs	r3, r3, #3
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	4a5a      	ldr	r2, [pc, #360]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x240>)
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307c:	4b50      	ldr	r3, [pc, #320]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800308c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003090:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80031d0 <HAL_RCC_GetSysClockFreq+0x248>
 8003094:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003098:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800309c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80030ac:	e065      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80031d4 <HAL_RCC_GetSysClockFreq+0x24c>
 80030bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c0:	4b3f      	ldr	r3, [pc, #252]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80030d4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80031d0 <HAL_RCC_GetSysClockFreq+0x248>
 80030d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ec:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80030f0:	e043      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80031d8 <HAL_RCC_GetSysClockFreq+0x250>
 8003100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003104:	4b2e      	ldr	r3, [pc, #184]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003114:	ed97 6a02 	vldr	s12, [r7, #8]
 8003118:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80031d0 <HAL_RCC_GetSysClockFreq+0x248>
 800311c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003120:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003124:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003128:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800312c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003130:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003134:	e021      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003140:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031dc <HAL_RCC_GetSysClockFreq+0x254>
 8003144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003148:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800314a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003158:	ed97 6a02 	vldr	s12, [r7, #8]
 800315c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80031d0 <HAL_RCC_GetSysClockFreq+0x248>
 8003160:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003164:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800316c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003174:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003178:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800317c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317e:	0a5b      	lsrs	r3, r3, #9
 8003180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003184:	3301      	adds	r3, #1
 8003186:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003192:	edd7 6a06 	vldr	s13, [r7, #24]
 8003196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800319a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800319e:	ee17 3a90 	vmov	r3, s15
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	e004      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e001      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x240>)
 80031ae:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80031b0:	69fb      	ldr	r3, [r7, #28]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	44020c00 	.word	0x44020c00
 80031c4:	003d0900 	.word	0x003d0900
 80031c8:	03d09000 	.word	0x03d09000
 80031cc:	016e3600 	.word	0x016e3600
 80031d0:	46000000 	.word	0x46000000
 80031d4:	4c742400 	.word	0x4c742400
 80031d8:	4bb71b00 	.word	0x4bb71b00
 80031dc:	4a742400 	.word	0x4a742400

080031e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031e4:	f7ff fed0 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b08      	ldr	r3, [pc, #32]	@ (800320c <HAL_RCC_GetHCLKFreq+0x2c>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80031ee:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031f2:	4907      	ldr	r1, [pc, #28]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x30>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80031f6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	4a05      	ldr	r2, [pc, #20]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x34>)
 8003200:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x34>)
 8003204:	681b      	ldr	r3, [r3, #0]
}
 8003206:	4618      	mov	r0, r3
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	44020c00 	.word	0x44020c00
 8003210:	08006564 	.word	0x08006564
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800321c:	f7ff ffe0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4904      	ldr	r1, [pc, #16]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	44020c00 	.word	0x44020c00
 8003240:	08006574 	.word	0x08006574

08003244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003248:	f7ff ffca 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4904      	ldr	r1, [pc, #16]	@ (800326c <HAL_RCC_GetPCLK2Freq+0x28>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	44020c00 	.word	0x44020c00
 800326c:	08006574 	.word	0x08006574

08003270 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003274:	f7ff ffb4 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_GetPCLK3Freq+0x24>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	0b1b      	lsrs	r3, r3, #12
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	@ (8003298 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	44020c00 	.word	0x44020c00
 8003298:	08006574 	.word	0x08006574

0800329c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b0aa      	sub	sp, #168	@ 0xa8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80032c0:	2500      	movs	r5, #0
 80032c2:	ea54 0305 	orrs.w	r3, r4, r5
 80032c6:	d00b      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80032c8:	4bb8      	ldr	r3, [pc, #736]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032ce:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80032d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	4ab4      	ldr	r2, [pc, #720]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032da:	430b      	orrs	r3, r1
 80032dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f002 0801 	and.w	r8, r2, #1
 80032ec:	f04f 0900 	mov.w	r9, #0
 80032f0:	ea58 0309 	orrs.w	r3, r8, r9
 80032f4:	d038      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80032f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d819      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003300:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	0800333d 	.word	0x0800333d
 800330c:	08003321 	.word	0x08003321
 8003310:	08003335 	.word	0x08003335
 8003314:	0800333d 	.word	0x0800333d
 8003318:	0800333d 	.word	0x0800333d
 800331c:	0800333d 	.word	0x0800333d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003320:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003324:	3308      	adds	r3, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fff2 	bl	8005310 <RCCEx_PLL2_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003332:	e004      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800333a:	e000      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 800333c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003346:	4b99      	ldr	r3, [pc, #612]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800334c:	f023 0107 	bic.w	r1, r3, #7
 8003350:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	4a95      	ldr	r2, [pc, #596]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003358:	430b      	orrs	r3, r1
 800335a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800335e:	e003      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003360:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003364:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f002 0a02 	and.w	sl, r2, #2
 8003374:	f04f 0b00 	mov.w	fp, #0
 8003378:	ea5a 030b 	orrs.w	r3, sl, fp
 800337c:	d03c      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800337e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	2b28      	cmp	r3, #40	@ 0x28
 8003386:	d01b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003388:	2b28      	cmp	r3, #40	@ 0x28
 800338a:	d815      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d019      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d811      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003394:	2b18      	cmp	r3, #24
 8003396:	d017      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003398:	2b18      	cmp	r3, #24
 800339a:	d80d      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x130>
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d109      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033a8:	3308      	adds	r3, #8
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 ffb0 	bl	8005310 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80033b6:	e00a      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033be:	e006      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033c0:	bf00      	nop
 80033c2:	e004      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033c4:	bf00      	nop
 80033c6:	e002      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80033d6:	4b75      	ldr	r3, [pc, #468]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033dc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80033e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	4a71      	ldr	r2, [pc, #452]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033e8:	430b      	orrs	r3, r1
 80033ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033ee:	e003      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f002 0304 	and.w	r3, r2, #4
 8003404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800340e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d040      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003422:	d01e      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003424:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003428:	d817      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800342a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342e:	d01a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003434:	d811      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003436:	2bc0      	cmp	r3, #192	@ 0xc0
 8003438:	d017      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800343a:	2bc0      	cmp	r3, #192	@ 0xc0
 800343c:	d80d      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d015      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003442:	2b40      	cmp	r3, #64	@ 0x40
 8003444:	d109      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003446:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800344a:	3308      	adds	r3, #8
 800344c:	4618      	mov	r0, r3
 800344e:	f001 ff5f 	bl	8005310 <RCCEx_PLL2_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003458:	e00a      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003460:	e006      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003462:	bf00      	nop
 8003464:	e004      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800346e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003470:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10c      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003478:	4b4c      	ldr	r3, [pc, #304]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800347a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800347e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003482:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	4a48      	ldr	r2, [pc, #288]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800348a:	430b      	orrs	r3, r1
 800348c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003490:	e003      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003496:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034b4:	460b      	mov	r3, r1
 80034b6:	4313      	orrs	r3, r2
 80034b8:	d043      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80034ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034c4:	d021      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034ca:	d81a      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d0:	d01d      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x272>
 80034d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d6:	d814      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034dc:	d019      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80034de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034e2:	d80e      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ec:	d109      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034f2:	3308      	adds	r3, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 ff0b 	bl	8005310 <RCCEx_PLL2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003500:	e00a      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003508:	e006      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003518:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10c      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003520:	4b22      	ldr	r3, [pc, #136]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003526:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800352a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003532:	430b      	orrs	r3, r1
 8003534:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800353e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003542:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800354e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003550:	2300      	movs	r3, #0
 8003552:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003554:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003558:	460b      	mov	r3, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	d03e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800355e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003568:	d01b      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800356a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800356e:	d814      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800357a:	d80e      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d017      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003584:	d109      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003586:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800358a:	3308      	adds	r3, #8
 800358c:	4618      	mov	r0, r3
 800358e:	f001 febf 	bl	8005310 <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003598:	e00b      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035a0:	e007      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035a2:	bf00      	nop
 80035a4:	e005      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035a6:	bf00      	nop
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80035aa:	bf00      	nop
 80035ac:	44020c00 	.word	0x44020c00
        break;
 80035b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80035ba:	4ba5      	ldr	r3, [pc, #660]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035c0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	4aa1      	ldr	r2, [pc, #644]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ea:	2300      	movs	r3, #0
 80035ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80035ee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d03b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80035f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003602:	d01b      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003604:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003608:	d814      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800360a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800360e:	d017      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003610:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003614:	d80e      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d014      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800361a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800361e:	d109      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003620:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003624:	3308      	adds	r3, #8
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fe72 	bl	8005310 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003632:	e008      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800363a:	e004      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800363c:	bf00      	nop
 800363e:	e002      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003646:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800364e:	4b80      	ldr	r3, [pc, #512]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003654:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003658:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	4a7c      	ldr	r2, [pc, #496]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003660:	430b      	orrs	r3, r1
 8003662:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003666:	e003      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800366c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003670:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800367c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800367e:	2300      	movs	r3, #0
 8003680:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003682:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d033      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800368c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003696:	d015      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800369c:	d80e      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d012      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80036a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a6:	d109      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ac:	3308      	adds	r3, #8
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 fe2e 	bl	8005310 <RCCEx_PLL2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80036ba:	e006      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036c2:	e002      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80036c4:	bf00      	nop
 80036c6:	e000      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80036c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80036d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036d8:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80036dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80036ea:	e003      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036f0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80036f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	2100      	movs	r1, #0
 80036fe:	6639      	str	r1, [r7, #96]	@ 0x60
 8003700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003704:	667b      	str	r3, [r7, #100]	@ 0x64
 8003706:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800370a:	460b      	mov	r3, r1
 800370c:	4313      	orrs	r3, r2
 800370e:	d033      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003710:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800371a:	d015      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003720:	d80e      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d012      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800372a:	d109      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800372c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003730:	3308      	adds	r3, #8
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fdec 	bl	8005310 <RCCEx_PLL2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800373e:	e006      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003746:	e002      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800374c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800374e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003756:	4b3e      	ldr	r3, [pc, #248]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800375c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003760:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003766:	4a3a      	ldr	r2, [pc, #232]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003768:	430b      	orrs	r3, r1
 800376a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800376e:	e003      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003774:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003778:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	2100      	movs	r1, #0
 8003782:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800378a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003794:	4b2e      	ldr	r3, [pc, #184]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4a2d      	ldr	r2, [pc, #180]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800379a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800379e:	61d3      	str	r3, [r2, #28]
 80037a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037a2:	69d9      	ldr	r1, [r3, #28]
 80037a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ac:	4a28      	ldr	r2, [pc, #160]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80037be:	653b      	str	r3, [r7, #80]	@ 0x50
 80037c0:	2300      	movs	r3, #0
 80037c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80037c4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d046      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80037ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80037d8:	d021      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80037da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80037de:	d81a      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e4:	d01d      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ea:	d814      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80037ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037f0:	d019      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80037f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037f6:	d80e      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d016      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003800:	d109      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003802:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003806:	3308      	adds	r3, #8
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fd81 	bl	8005310 <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003814:	e00a      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800381c:	e006      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800381e:	bf00      	nop
 8003820:	e004      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800382a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003836:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800383a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800383e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003844:	4a02      	ldr	r2, [pc, #8]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003846:	430b      	orrs	r3, r1
 8003848:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800384e:	bf00      	nop
 8003850:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003858:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800385c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800386a:	2300      	movs	r3, #0
 800386c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800386e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d043      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003878:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003882:	d021      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003884:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003888:	d81a      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800388a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800388e:	d01d      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003894:	d814      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003896:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800389a:	d019      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 800389c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038a0:	d80e      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d016      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038aa:	d109      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b0:	3308      	adds	r3, #8
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 fd2c 	bl	8005310 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80038be:	e00a      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038c6:	e006      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038c8:	bf00      	nop
 80038ca:	e004      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038cc:	bf00      	nop
 80038ce:	e002      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80038de:	4bb6      	ldr	r3, [pc, #728]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80038e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	4ab2      	ldr	r2, [pc, #712]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003900:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800390c:	643b      	str	r3, [r7, #64]	@ 0x40
 800390e:	2300      	movs	r3, #0
 8003910:	647b      	str	r3, [r7, #68]	@ 0x44
 8003912:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	d030      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800391c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003922:	2b05      	cmp	r3, #5
 8003924:	d80f      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003926:	2b03      	cmp	r3, #3
 8003928:	d211      	bcs.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800392a:	2b01      	cmp	r3, #1
 800392c:	d911      	bls.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800392e:	2b02      	cmp	r3, #2
 8003930:	d109      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003932:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003936:	3308      	adds	r3, #8
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fce9 	bl	8005310 <RCCEx_PLL2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003944:	e006      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800394c:	e002      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003954:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10c      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800395c:	4b96      	ldr	r3, [pc, #600]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800395e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003962:	f023 0107 	bic.w	r1, r3, #7
 8003966:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800396a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396c:	4a92      	ldr	r2, [pc, #584]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800396e:	430b      	orrs	r3, r1
 8003970:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800397a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800397e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	2100      	movs	r1, #0
 8003988:	63b9      	str	r1, [r7, #56]	@ 0x38
 800398a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800398e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003990:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d022      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800399a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800399e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d005      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039ae:	e002      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80039b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80039be:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039c4:	f023 0108 	bic.w	r1, r3, #8
 80039c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ce:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039d0:	430b      	orrs	r3, r1
 80039d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80039d6:	e003      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039dc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ee:	2300      	movs	r3, #0
 80039f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80039f6:	460b      	mov	r3, r1
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f000 80b0 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80039fe:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a0a:	f7fd fac1 	bl	8000f90 <HAL_GetTick>
 8003a0e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a12:	e00b      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a14:	f7fd fabc 	bl	8000f90 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d903      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a2a:	e005      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a2c:	4b63      	ldr	r3, [pc, #396]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ed      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003a38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 808a 	bne.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a42:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003a50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d022      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a5e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d01b      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a66:	4b54      	ldr	r3, [pc, #336]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a74:	4b50      	ldr	r3, [pc, #320]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7a:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a84:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a94:	4a48      	ldr	r2, [pc, #288]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d019      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fa71 	bl	8000f90 <HAL_GetTick>
 8003aae:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab2:	e00d      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fd fa6c 	bl	8000f90 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d903      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003ace:	e006      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad0:	4b39      	ldr	r3, [pc, #228]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ea      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003ade:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d132      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af4:	d10f      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003af6:	4b30      	ldr	r3, [pc, #192]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	61d3      	str	r3, [r2, #28]
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003b16:	4b28      	ldr	r3, [pc, #160]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b20:	61d3      	str	r3, [r2, #28]
 8003b22:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b28:	4a23      	ldr	r2, [pc, #140]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b32:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b34:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003b38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b44:	430b      	orrs	r3, r1
 8003b46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b4a:	e008      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b4c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b50:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b5a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b74:	460b      	mov	r3, r1
 8003b76:	4313      	orrs	r3, r2
 8003b78:	d038      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b80:	2b30      	cmp	r3, #48	@ 0x30
 8003b82:	d014      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003b84:	2b30      	cmp	r3, #48	@ 0x30
 8003b86:	d80e      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d012      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d80a      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b98:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	4a06      	ldr	r2, [pc, #24]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ba4:	e00d      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bac:	e009      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e007      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003bb6:	bf00      	nop
 8003bb8:	44020c00 	.word	0x44020c00
 8003bbc:	44020800 	.word	0x44020800
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003bca:	4bb5      	ldr	r3, [pc, #724]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bda:	49b1      	ldr	r1, [pc, #708]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003be8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d03c      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d81d      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003c12:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c2d 	.word	0x08003c2d
 8003c1c:	08003c3b 	.word	0x08003c3b
 8003c20:	08003c4f 	.word	0x08003c4f
 8003c24:	08003c57 	.word	0x08003c57
 8003c28:	08003c57 	.word	0x08003c57
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	4a9b      	ldr	r2, [pc, #620]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c36:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c38:	e00e      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c3e:	3308      	adds	r3, #8
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 fb65 	bl	8005310 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e004      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10c      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003c60:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c70:	498b      	ldr	r1, [pc, #556]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c7e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d03c      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d01f      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d819      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003cac:	2b18      	cmp	r3, #24
 8003cae:	d01d      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003cb0:	2b18      	cmp	r3, #24
 8003cb2:	d815      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d007      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003cbc:	e010      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbe:	4b78      	ldr	r3, [pc, #480]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	4a77      	ldr	r2, [pc, #476]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003cca:	e010      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ccc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 fb1c 	bl	8005310 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003cde:	e006      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ce6:	e002      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cfc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003d00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	4966      	ldr	r1, [pc, #408]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d0e:	e003      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d03e      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003d34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d44:	d819      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d48:	d01d      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d4c:	d815      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d007      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003d56:	e010      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d58:	4b51      	ldr	r3, [pc, #324]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	4a50      	ldr	r2, [pc, #320]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003d64:	e010      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 facf 	bl	8005310 <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003d78:	e006      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d80:	e002      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003d90:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d96:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da0:	493f      	ldr	r1, [pc, #252]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003dae:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	2100      	movs	r1, #0
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	d038      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd8:	d00e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dde:	d815      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de8:	d110      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003df6:	e00e      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fa86 	bl	8005310 <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e0a:	e004      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003e1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	491c      	ldr	r1, [pc, #112]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003e36:	e003      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e3c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	6039      	str	r1, [r7, #0]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d039      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e62:	2b30      	cmp	r3, #48	@ 0x30
 8003e64:	d01e      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003e66:	2b30      	cmp	r3, #48	@ 0x30
 8003e68:	d815      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d002      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d007      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003e72:	e010      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e80:	e011      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e86:	3308      	adds	r3, #8
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 fa41 	bl	8005310 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003e94:	e007      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003e9e:	bf00      	nop
 8003ea0:	44020c00 	.word	0x44020c00
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003eae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003eb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003eb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ebe:	4908      	ldr	r1, [pc, #32]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ecc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003ed0:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	37a8      	adds	r7, #168	@ 0xa8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	44020c00 	.word	0x44020c00

08003ee4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b08b      	sub	sp, #44	@ 0x2c
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003eec:	4bae      	ldr	r3, [pc, #696]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003ef6:	4bac      	ldr	r3, [pc, #688]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003f00:	4ba9      	ldr	r3, [pc, #676]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f0a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003f0c:	4ba6      	ldr	r3, [pc, #664]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f18:	4ba3      	ldr	r3, [pc, #652]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	08db      	lsrs	r3, r3, #3
 8003f1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f30:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8126 	beq.w	8004188 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d053      	beq.n	8003fea <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d86f      	bhi.n	8004028 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d02b      	beq.n	8003fac <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003f54:	e068      	b.n	8004028 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f56:	4b94      	ldr	r3, [pc, #592]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	08db      	lsrs	r3, r3, #3
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	4a92      	ldr	r2, [pc, #584]	@ (80041ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f8e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003faa:	e068      	b.n	800407e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80041b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc8:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fcc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003fe8:	e049      	b.n	800407e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80041b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004006:	ed97 6a04 	vldr	s12, [r7, #16]
 800400a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800400e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800401a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004022:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004026:	e02a      	b.n	800407e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004028:	4b5f      	ldr	r3, [pc, #380]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	4a5e      	ldr	r2, [pc, #376]	@ (80041ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
 8004038:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004060:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004078:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800407c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800407e:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800408a:	d121      	bne.n	80040d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800408c:	4b46      	ldr	r3, [pc, #280]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004098:	4b43      	ldr	r3, [pc, #268]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800409a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80040aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80040b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040be:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e006      	b.n	80040d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040d6:	4b34      	ldr	r3, [pc, #208]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040e2:	d121      	bne.n	8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80040e4:	4b30      	ldr	r3, [pc, #192]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d017      	beq.n	8004120 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004106:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800410a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800410e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004116:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	e006      	b.n	800412e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	e002      	b.n	800412e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800412e:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800413a:	d121      	bne.n	8004180 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d017      	beq.n	8004178 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004148:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800414a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800415a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800415e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004162:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800416a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004176:	e010      	b.n	800419a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
}
 800417e:	e00c      	b.n	800419a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
}
 8004186:	e008      	b.n	800419a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
}
 800419a:	bf00      	nop
 800419c:	372c      	adds	r7, #44	@ 0x2c
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	44020c00 	.word	0x44020c00
 80041ac:	03d09000 	.word	0x03d09000
 80041b0:	46000000 	.word	0x46000000
 80041b4:	4a742400 	.word	0x4a742400
 80041b8:	4bb71b00 	.word	0x4bb71b00

080041bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80041bc:	b480      	push	{r7}
 80041be:	b08b      	sub	sp, #44	@ 0x2c
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80041c4:	4bae      	ldr	r3, [pc, #696]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041cc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80041ce:	4bac      	ldr	r3, [pc, #688]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80041d8:	4ba9      	ldr	r3, [pc, #676]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041e2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80041e4:	4ba6      	ldr	r3, [pc, #664]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80041f0:	4ba3      	ldr	r3, [pc, #652]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	08db      	lsrs	r3, r3, #3
 80041f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004208:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8126 	beq.w	8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b03      	cmp	r3, #3
 8004218:	d053      	beq.n	80042c2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d86f      	bhi.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d003      	beq.n	800422e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d02b      	beq.n	8004284 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800422c:	e068      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800422e:	4b94      	ldr	r3, [pc, #592]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	08db      	lsrs	r3, r3, #3
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	4a92      	ldr	r2, [pc, #584]	@ (8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004262:	ed97 6a04 	vldr	s12, [r7, #16]
 8004266:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800426a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004282:	e068      	b.n	8004356 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800448c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80042a4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80042a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80042c0:	e049      	b.n	8004356 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042cc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80042d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042de:	ed97 6a04 	vldr	s12, [r7, #16]
 80042e2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80042e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80042fe:	e02a      	b.n	8004356 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004300:	4b5f      	ldr	r3, [pc, #380]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	08db      	lsrs	r3, r3, #3
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	4a5e      	ldr	r2, [pc, #376]	@ (8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
 8004310:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004334:	ed97 6a04 	vldr	s12, [r7, #16]
 8004338:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800433c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004350:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004354:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004356:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800435e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004362:	d121      	bne.n	80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004364:	4b46      	ldr	r3, [pc, #280]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d017      	beq.n	80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004370:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004374:	0a5b      	lsrs	r3, r3, #9
 8004376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004386:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800438a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800438e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004396:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e006      	b.n	80043ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e002      	b.n	80043ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043ae:	4b34      	ldr	r3, [pc, #208]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ba:	d121      	bne.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80043bc:	4b30      	ldr	r3, [pc, #192]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d017      	beq.n	80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80043da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80043e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ee:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e006      	b.n	8004406 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e002      	b.n	8004406 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004406:	4b1e      	ldr	r3, [pc, #120]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800440e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004412:	d121      	bne.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004414:	4b1a      	ldr	r3, [pc, #104]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d017      	beq.n	8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004420:	4b17      	ldr	r3, [pc, #92]	@ (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	0e1b      	lsrs	r3, r3, #24
 8004426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004436:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800443a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800443e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004446:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800444e:	e010      	b.n	8004472 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	e00c      	b.n	8004472 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
}
 800445e:	e008      	b.n	8004472 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
}
 8004472:	bf00      	nop
 8004474:	372c      	adds	r7, #44	@ 0x2c
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	44020c00 	.word	0x44020c00
 8004484:	03d09000 	.word	0x03d09000
 8004488:	46000000 	.word	0x46000000
 800448c:	4a742400 	.word	0x4a742400
 8004490:	4bb71b00 	.word	0x4bb71b00

08004494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08c      	sub	sp, #48	@ 0x30
 8004498:	af00      	add	r7, sp, #0
 800449a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800449e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80044a6:	430b      	orrs	r3, r1
 80044a8:	d14b      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044aa:	4bc4      	ldr	r3, [pc, #784]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80044b6:	4bc1      	ldr	r3, [pc, #772]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d108      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80044c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ca:	d104      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80044cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d2:	f000 bf14 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80044d6:	4bb9      	ldr	r3, [pc, #740]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044e4:	d108      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ec:	d104      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80044ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f4:	f000 bf03 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80044f8:	4bb0      	ldr	r3, [pc, #704]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004504:	d119      	bne.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450c:	d115      	bne.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800450e:	4bab      	ldr	r3, [pc, #684]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451a:	d30a      	bcc.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800451c:	4ba7      	ldr	r3, [pc, #668]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004526:	4aa6      	ldr	r2, [pc, #664]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800452e:	f000 bee6 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004536:	f000 bee2 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453e:	f000 bede 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004546:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 800454a:	ea52 0301 	orrs.w	r3, r2, r1
 800454e:	f000 838e 	beq.w	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004556:	2a01      	cmp	r2, #1
 8004558:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 800455c:	f080 86cc 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004564:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004568:	ea52 0301 	orrs.w	r3, r2, r1
 800456c:	f000 82aa 	beq.w	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004574:	2a01      	cmp	r2, #1
 8004576:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 800457a:	f080 86bd 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800457e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004582:	f1a3 0110 	sub.w	r1, r3, #16
 8004586:	ea52 0301 	orrs.w	r3, r2, r1
 800458a:	f000 8681 	beq.w	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800458e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004592:	2a01      	cmp	r2, #1
 8004594:	f173 0310 	sbcs.w	r3, r3, #16
 8004598:	f080 86ae 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800459c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a0:	1f19      	subs	r1, r3, #4
 80045a2:	ea52 0301 	orrs.w	r3, r2, r1
 80045a6:	f000 84b1 	beq.w	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80045aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ae:	2a01      	cmp	r2, #1
 80045b0:	f173 0304 	sbcs.w	r3, r3, #4
 80045b4:	f080 86a0 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045bc:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80045c0:	430b      	orrs	r3, r1
 80045c2:	f000 85aa 	beq.w	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80045c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ca:	497e      	ldr	r1, [pc, #504]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80045cc:	428a      	cmp	r2, r1
 80045ce:	f173 0300 	sbcs.w	r3, r3, #0
 80045d2:	f080 8691 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045da:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80045de:	430b      	orrs	r3, r1
 80045e0:	f000 8532 	beq.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80045e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e8:	4977      	ldr	r1, [pc, #476]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80045ea:	428a      	cmp	r2, r1
 80045ec:	f173 0300 	sbcs.w	r3, r3, #0
 80045f0:	f080 8682 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f000 84bc 	beq.w	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004606:	4971      	ldr	r1, [pc, #452]	@ (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004608:	428a      	cmp	r2, r1
 800460a:	f173 0300 	sbcs.w	r3, r3, #0
 800460e:	f080 8673 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004616:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800461a:	430b      	orrs	r3, r1
 800461c:	f000 85f2 	beq.w	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004624:	496a      	ldr	r1, [pc, #424]	@ (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004626:	428a      	cmp	r2, r1
 8004628:	f173 0300 	sbcs.w	r3, r3, #0
 800462c:	f080 8664 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004634:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004638:	430b      	orrs	r3, r1
 800463a:	f000 81e5 	beq.w	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800463e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004642:	4964      	ldr	r1, [pc, #400]	@ (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004644:	428a      	cmp	r2, r1
 8004646:	f173 0300 	sbcs.w	r3, r3, #0
 800464a:	f080 8655 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800464e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004652:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004656:	430b      	orrs	r3, r1
 8004658:	f000 83cc 	beq.w	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800465c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004660:	495d      	ldr	r1, [pc, #372]	@ (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004662:	428a      	cmp	r2, r1
 8004664:	f173 0300 	sbcs.w	r3, r3, #0
 8004668:	f080 8646 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800466c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004670:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004674:	430b      	orrs	r3, r1
 8004676:	f000 8331 	beq.w	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800467a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467e:	4957      	ldr	r1, [pc, #348]	@ (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004680:	428a      	cmp	r2, r1
 8004682:	f173 0300 	sbcs.w	r3, r3, #0
 8004686:	f080 8637 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800468a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800468e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004692:	430b      	orrs	r3, r1
 8004694:	f000 82bb 	beq.w	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469c:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80046a0:	f173 0300 	sbcs.w	r3, r3, #0
 80046a4:	f080 8628 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80046b0:	430b      	orrs	r3, r1
 80046b2:	f000 826d 	beq.w	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80046b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ba:	f244 0101 	movw	r1, #16385	@ 0x4001
 80046be:	428a      	cmp	r2, r1
 80046c0:	f173 0300 	sbcs.w	r3, r3, #0
 80046c4:	f080 8618 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80046d0:	430b      	orrs	r3, r1
 80046d2:	f000 821e 	beq.w	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80046d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046da:	f242 0101 	movw	r1, #8193	@ 0x2001
 80046de:	428a      	cmp	r2, r1
 80046e0:	f173 0300 	sbcs.w	r3, r3, #0
 80046e4:	f080 8608 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ec:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80046f0:	430b      	orrs	r3, r1
 80046f2:	f000 8137 	beq.w	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80046f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046fa:	f241 0101 	movw	r1, #4097	@ 0x1001
 80046fe:	428a      	cmp	r2, r1
 8004700:	f173 0300 	sbcs.w	r3, r3, #0
 8004704:	f080 85f8 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800470c:	1f11      	subs	r1, r2, #4
 800470e:	430b      	orrs	r3, r1
 8004710:	f000 80d2 	beq.w	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004718:	2a05      	cmp	r2, #5
 800471a:	f173 0300 	sbcs.w	r3, r3, #0
 800471e:	f080 85eb 	bcs.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004726:	1e51      	subs	r1, r2, #1
 8004728:	430b      	orrs	r3, r1
 800472a:	d006      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800472c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004730:	1e91      	subs	r1, r2, #2
 8004732:	430b      	orrs	r3, r1
 8004734:	d06c      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004736:	f000 bddf 	b.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800473a:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800473c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800474c:	f7fe fd7a 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 8004750:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004752:	f000 bdd4 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004756:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800475e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004762:	d10a      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	2b01      	cmp	r3, #1
 8004768:	d107      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800476a:	f107 030c 	add.w	r3, r7, #12
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fd24 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004778:	e048      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	2b03      	cmp	r3, #3
 800478a:	d109      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800478c:	4b0b      	ldr	r3, [pc, #44]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	08db      	lsrs	r3, r3, #3
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800479e:	e035      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80047a0:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ac:	d11c      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d119      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80047b4:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b8:	e028      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80047ba:	bf00      	nop
 80047bc:	44020c00 	.word	0x44020c00
 80047c0:	016e3600 	.word	0x016e3600
 80047c4:	20000001 	.word	0x20000001
 80047c8:	10000001 	.word	0x10000001
 80047cc:	08000001 	.word	0x08000001
 80047d0:	04000001 	.word	0x04000001
 80047d4:	00200001 	.word	0x00200001
 80047d8:	00040001 	.word	0x00040001
 80047dc:	00020001 	.word	0x00020001
 80047e0:	03d09000 	.word	0x03d09000
 80047e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80047e8:	4b9f      	ldr	r3, [pc, #636]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d106      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d103      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80047fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004802:	e003      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004808:	f000 bd79 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800480c:	f000 bd77 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004810:	4b95      	ldr	r3, [pc, #596]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004816:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004822:	f7fe fcf9 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004826:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004828:	f000 bd69 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800482c:	4b8e      	ldr	r3, [pc, #568]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004834:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004838:	d10a      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	2b08      	cmp	r3, #8
 800483e:	d107      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fcb9 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800484e:	e031      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004850:	4b85      	ldr	r3, [pc, #532]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d10c      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	2b18      	cmp	r3, #24
 8004860:	d109      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004862:	4b81      	ldr	r3, [pc, #516]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	08db      	lsrs	r3, r3, #3
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	4a7f      	ldr	r2, [pc, #508]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004874:	e01e      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004876:	4b7c      	ldr	r3, [pc, #496]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800487e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004882:	d105      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	2b20      	cmp	r3, #32
 8004888:	d102      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800488a:	4b79      	ldr	r3, [pc, #484]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488e:	e011      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004890:	4b75      	ldr	r3, [pc, #468]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	2b28      	cmp	r3, #40	@ 0x28
 80048a2:	d103      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80048a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048aa:	e003      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048b0:	f000 bd25 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048b4:	f000 bd23 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048be:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80048c2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d104      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ca:	f7fe fca5 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 80048ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80048d0:	f000 bd15 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80048d4:	4b64      	ldr	r3, [pc, #400]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048e0:	d10a      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	2b40      	cmp	r3, #64	@ 0x40
 80048e6:	d107      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fc65 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f6:	e033      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80048f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d10c      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	2bc0      	cmp	r3, #192	@ 0xc0
 8004908:	d109      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800490a:	4b57      	ldr	r3, [pc, #348]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	08db      	lsrs	r3, r3, #3
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	4a55      	ldr	r2, [pc, #340]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800491c:	e020      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800491e:	4b52      	ldr	r3, [pc, #328]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492a:	d106      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004932:	d102      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004934:	4b4e      	ldr	r3, [pc, #312]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004938:	e012      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800493a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800493c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b02      	cmp	r3, #2
 8004946:	d107      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800494e:	d103      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004956:	e003      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800495c:	f000 bccf 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004960:	f000 bccd 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004964:	4b40      	ldr	r3, [pc, #256]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800496a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004976:	f7fe fc7b 	bl	8003270 <HAL_RCC_GetPCLK3Freq>
 800497a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800497c:	f000 bcbf 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004986:	d108      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fc15 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004996:	f000 bcb2 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800499a:	4b33      	ldr	r3, [pc, #204]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d10d      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049ac:	d109      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c0:	e020      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80049c2:	4b29      	ldr	r3, [pc, #164]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ce:	d106      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049d6:	d102      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80049d8:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049dc:	e012      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80049de:	4b22      	ldr	r3, [pc, #136]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d107      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049f2:	d103      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80049f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a00:	f000 bc7d 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a04:	f000 bc7b 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004a08:	4b17      	ldr	r3, [pc, #92]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004a1a:	f7fe fbe1 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8004a1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004a20:	f000 bc6d 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d104      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a2a:	f7fe faad 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8004a2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004a30:	f000 bc65 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d108      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a3a:	f107 030c 	add.w	r3, r7, #12
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fbbc 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a48:	f000 bc59 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a58:	d10e      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d10b      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004a60:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a64:	e02c      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004a66:	bf00      	nop
 8004a68:	44020c00 	.word	0x44020c00
 8004a6c:	03d09000 	.word	0x03d09000
 8004a70:	003d0900 	.word	0x003d0900
 8004a74:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004a78:	4b95      	ldr	r3, [pc, #596]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d109      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a8a:	4b91      	ldr	r3, [pc, #580]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	08db      	lsrs	r3, r3, #3
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	4a8f      	ldr	r2, [pc, #572]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a96:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a9c:	e010      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004a9e:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d102      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004ab2:	4b89      	ldr	r3, [pc, #548]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab6:	e003      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004abc:	f000 bc1f 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ac0:	f000 bc1d 	b.w	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004ac4:	4b82      	ldr	r3, [pc, #520]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d106      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aea:	e011      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004aec:	4b78      	ldr	r3, [pc, #480]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004af2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004afa:	d106      	bne.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d103      	bne.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004b02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b08:	e002      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004b0e:	e3f6      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b10:	e3f5      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b12:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe fb78 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004b28:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b2a:	e3e8      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b32:	d107      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fb3f 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b42:	e3dc      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004b44:	4b62      	ldr	r3, [pc, #392]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b56:	d109      	bne.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b58:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
 8004b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b6a:	e010      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004b6c:	4b58      	ldr	r3, [pc, #352]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b78:	d106      	bne.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b80:	d102      	bne.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004b82:	4b55      	ldr	r3, [pc, #340]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b86:	e002      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b8c:	e3b7      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b8e:	e3b6      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b90:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b96:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ba2:	f7fe fb39 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004ba6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ba8:	e3a9      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb2:	f107 030c 	add.w	r3, r7, #12
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fb00 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bc0:	e39d      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004bc2:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d10d      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bd4:	d109      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004be8:	e010      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004bea:	4b39      	ldr	r3, [pc, #228]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004c00:	4b35      	ldr	r3, [pc, #212]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c04:	e002      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c0a:	e378      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c0c:	e377      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004c0e:	4b30      	ldr	r3, [pc, #192]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c14:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004c18:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe fafa 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004c24:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c26:	e36a      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c2e:	d107      	bne.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c30:	f107 030c 	add.w	r3, r7, #12
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fac1 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c3e:	e35e      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004c40:	4b23      	ldr	r3, [pc, #140]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d10d      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c52:	d109      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c54:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c66:	e34a      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c6c:	e347      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004c6e:	4b18      	ldr	r3, [pc, #96]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c74:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004c78:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004c80:	f7fe faf6 	bl	8003270 <HAL_RCC_GetPCLK3Freq>
 8004c84:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c86:	e33a      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fa91 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c9e:	e32e      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d10d      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb2:	d109      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	08db      	lsrs	r3, r3, #3
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	4a05      	ldr	r2, [pc, #20]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cc6:	e31a      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ccc:	e317      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004cce:	bf00      	nop
 8004cd0:	44020c00 	.word	0x44020c00
 8004cd4:	03d09000 	.word	0x03d09000
 8004cd8:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004cdc:	4b9b      	ldr	r3, [pc, #620]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004cde:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ce2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004cee:	d044      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004cf6:	d879      	bhi.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfe:	d02d      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d871      	bhi.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d0e:	d017      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d16:	d869      	bhi.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d24:	d004      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004d26:	e061      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004d28:	f7fe faa2 	bl	8003270 <HAL_RCC_GetPCLK3Freq>
 8004d2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004d2e:	e060      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fa41 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d3e:	e058      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d40:	4b82      	ldr	r3, [pc, #520]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d103      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d54:	e04d      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d5a:	e04a      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d6a:	d103      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004d6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d72:	e03e      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d78:	e03b      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d7a:	4b74      	ldr	r3, [pc, #464]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d80:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d86:	4b71      	ldr	r3, [pc, #452]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d10c      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d98:	4b6c      	ldr	r3, [pc, #432]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	4a6b      	ldr	r2, [pc, #428]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004daa:	e01e      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dac:	4b67      	ldr	r3, [pc, #412]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db8:	d106      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004dc2:	4b64      	ldr	r3, [pc, #400]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc6:	e010      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dc8:	4b60      	ldr	r3, [pc, #384]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dde:	4b5e      	ldr	r3, [pc, #376]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004de2:	e002      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004de8:	e003      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004dea:	e002      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004df0:	bf00      	nop
          }
        }
        break;
 8004df2:	e284      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004df4:	4b55      	ldr	r3, [pc, #340]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004df6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004dfa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e06:	d044      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e0e:	d879      	bhi.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e16:	d02d      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e1e:	d871      	bhi.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e26:	d017      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e2e:	d869      	bhi.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3c:	d004      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004e3e:	e061      	b.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe f9ea 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004e44:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004e46:	e060      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff f9b5 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e56:	e058      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e58:	4b3c      	ldr	r3, [pc, #240]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d103      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e6c:	e04d      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e72:	e04a      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004e74:	4b35      	ldr	r3, [pc, #212]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e82:	d103      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004e84:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e8a:	e03e      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e90:	e03b      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e92:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e98:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eb0:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	08db      	lsrs	r3, r3, #3
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	4a25      	ldr	r2, [pc, #148]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ec2:	e01e      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ec4:	4b21      	ldr	r3, [pc, #132]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed0:	d106      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed8:	d102      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004eda:	4b1e      	ldr	r3, [pc, #120]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ede:	e010      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eec:	d106      	bne.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ef4:	d102      	bne.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004ef6:	4b18      	ldr	r3, [pc, #96]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004efa:	e002      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f08:	bf00      	nop
          }
        }
        break;
 8004f0a:	e1f8      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004f18:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f24:	d105      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004f30:	e1e5      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f38:	d110      	bne.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f3a:	f107 0318 	add.w	r3, r7, #24
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe ffd0 	bl	8003ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f48:	e1d9      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f4a:	bf00      	nop
 8004f4c:	44020c00 	.word	0x44020c00
 8004f50:	03d09000 	.word	0x03d09000
 8004f54:	003d0900 	.word	0x003d0900
 8004f58:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f62:	d107      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f64:	f107 030c 	add.w	r3, r7, #12
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff f927 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f72:	e1c4      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f78:	e1c1      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004f7a:	4b9d      	ldr	r3, [pc, #628]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d859      	bhi.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fa9 	.word	0x08004fa9
 8004f98:	08004fb9 	.word	0x08004fb9
 8004f9c:	08005041 	.word	0x08005041
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fcf 	.word	0x08004fcf
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fa8:	f107 0318 	add.w	r3, r7, #24
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe ff99 	bl	8003ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fb6:	e046      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fb8:	f107 030c 	add.w	r3, r7, #12
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff f8fd 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fc6:	e03e      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fcc:	e03b      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fce:	4b88      	ldr	r3, [pc, #544]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fd4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fda:	4b85      	ldr	r3, [pc, #532]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fec:	4b80      	ldr	r3, [pc, #512]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	08db      	lsrs	r3, r3, #3
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	4a80      	ldr	r2, [pc, #512]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffe:	e01e      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005000:	4b7b      	ldr	r3, [pc, #492]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800500c:	d106      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005014:	d102      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005016:	4b79      	ldr	r3, [pc, #484]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800501a:	e010      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800501c:	4b74      	ldr	r3, [pc, #464]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005030:	d102      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005032:	4b73      	ldr	r3, [pc, #460]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005036:	e002      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800503c:	e003      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800503e:	e002      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005044:	bf00      	nop
          }
        }
        break;
 8005046:	e15a      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005048:	4b69      	ldr	r3, [pc, #420]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800504a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800504e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	2b20      	cmp	r3, #32
 8005058:	d022      	beq.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	2b20      	cmp	r3, #32
 800505e:	d858      	bhi.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005062:	2b18      	cmp	r3, #24
 8005064:	d019      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005068:	2b18      	cmp	r3, #24
 800506a:	d852      	bhi.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b08      	cmp	r3, #8
 8005076:	d008      	beq.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005078:	e04b      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800507a:	f107 0318 	add.w	r3, r7, #24
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe ff30 	bl	8003ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005088:	e046      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800508a:	f107 030c 	add.w	r3, r7, #12
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f894 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005098:	e03e      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800509a:	4b56      	ldr	r3, [pc, #344]	@ (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800509c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800509e:	e03b      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050a0:	4b53      	ldr	r3, [pc, #332]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050ac:	4b50      	ldr	r3, [pc, #320]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d10c      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050be:	4b4c      	ldr	r3, [pc, #304]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	08db      	lsrs	r3, r3, #3
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	4a4b      	ldr	r2, [pc, #300]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d0:	e01e      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050d2:	4b47      	ldr	r3, [pc, #284]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050de:	d106      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e6:	d102      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050e8:	4b44      	ldr	r3, [pc, #272]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80050ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ec:	e010      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050ee:	4b40      	ldr	r3, [pc, #256]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050fa:	d106      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005102:	d102      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005104:	4b3e      	ldr	r3, [pc, #248]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800510e:	e003      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005110:	e002      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005116:	bf00      	nop
          }
        }
        break;
 8005118:	e0f1      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800511a:	4b35      	ldr	r3, [pc, #212]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800511c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005120:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800512c:	d023      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005134:	d858      	bhi.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	2bc0      	cmp	r3, #192	@ 0xc0
 800513a:	d019      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005140:	d852      	bhi.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514a:	2b40      	cmp	r3, #64	@ 0x40
 800514c:	d008      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800514e:	e04b      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fec5 	bl	8003ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800515e:	e046      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005160:	f107 030c 	add.w	r3, r7, #12
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f829 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800516e:	e03e      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005170:	4b20      	ldr	r3, [pc, #128]	@ (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005174:	e03b      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005176:	4b1e      	ldr	r3, [pc, #120]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800517c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005182:	4b1b      	ldr	r3, [pc, #108]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d10c      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005194:	4b16      	ldr	r3, [pc, #88]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	08db      	lsrs	r3, r3, #3
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	4a16      	ldr	r2, [pc, #88]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a6:	e01e      	b.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051a8:	4b11      	ldr	r3, [pc, #68]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b4:	d106      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051bc:	d102      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80051be:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051c2:	e010      	b.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051c4:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051d0:	d106      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051d8:	d102      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80051da:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051de:	e002      	b.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80051e4:	e003      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80051e6:	e002      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051ec:	bf00      	nop
          }
        }
        break;
 80051ee:	e086      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80051f0:	44020c00 	.word	0x44020c00
 80051f4:	00bb8000 	.word	0x00bb8000
 80051f8:	03d09000 	.word	0x03d09000
 80051fc:	003d0900 	.word	0x003d0900
 8005200:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005204:	4b40      	ldr	r3, [pc, #256]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800520a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005210:	4b3d      	ldr	r3, [pc, #244]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800521c:	d105      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005224:	4b39      	ldr	r3, [pc, #228]	@ (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005228:	e031      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800522a:	4b37      	ldr	r3, [pc, #220]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005236:	d10a      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	2b10      	cmp	r3, #16
 800523c:	d107      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800523e:	f107 0318 	add.w	r3, r7, #24
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fe4e 	bl	8003ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800524c:	e01f      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800524e:	4b2e      	ldr	r3, [pc, #184]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	d106      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	2b20      	cmp	r3, #32
 8005260:	d103      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8005262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005268:	e011      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800526a:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800526c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005274:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005278:	d106      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800527a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527c:	2b30      	cmp	r3, #48	@ 0x30
 800527e:	d103      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005280:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005286:	e002      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800528c:	e037      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800528e:	e036      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005292:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005296:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d107      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052a2:	f107 0318 	add.w	r3, r7, #24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe fe1c 	bl	8003ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80052b0:	e025      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052be:	d10a      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d107      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052c6:	f107 030c 	add.w	r3, r7, #12
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe ff76 	bl	80041bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052d4:	e00f      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80052d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e2:	d105      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	2b30      	cmp	r3, #48	@ 0x30
 80052e8:	d102      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80052ea:	4b08      	ldr	r3, [pc, #32]	@ (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ee:	e002      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80052f4:	e003      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80052f6:	e002      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052fc:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80052fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005300:	4618      	mov	r0, r3
 8005302:	3730      	adds	r7, #48	@ 0x30
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	44020c00 	.word	0x44020c00
 800530c:	02dc6c00 	.word	0x02dc6c00

08005310 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005318:	4b48      	ldr	r3, [pc, #288]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a47      	ldr	r2, [pc, #284]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 800531e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005322:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005324:	f7fb fe34 	bl	8000f90 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800532a:	e008      	b.n	800533e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800532c:	f7fb fe30 	bl	8000f90 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e07a      	b.n	8005434 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800533e:	4b3f      	ldr	r3, [pc, #252]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800534a:	4b3c      	ldr	r3, [pc, #240]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6811      	ldr	r1, [r2, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6852      	ldr	r2, [r2, #4]
 800535e:	0212      	lsls	r2, r2, #8
 8005360:	430a      	orrs	r2, r1
 8005362:	4936      	ldr	r1, [pc, #216]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	3b01      	subs	r3, #1
 800536e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	3b01      	subs	r3, #1
 8005378:	025b      	lsls	r3, r3, #9
 800537a:	b29b      	uxth	r3, r3
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	3b01      	subs	r3, #1
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	3b01      	subs	r3, #1
 8005392:	061b      	lsls	r3, r3, #24
 8005394:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005398:	4928      	ldr	r1, [pc, #160]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800539e:	4b27      	ldr	r3, [pc, #156]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	f023 020c 	bic.w	r2, r3, #12
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	4924      	ldr	r1, [pc, #144]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80053b0:	4b22      	ldr	r3, [pc, #136]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	f023 0220 	bic.w	r2, r3, #32
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	491f      	ldr	r1, [pc, #124]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80053c2:	4b1e      	ldr	r3, [pc, #120]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	491c      	ldr	r1, [pc, #112]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80053d0:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d4:	4a19      	ldr	r2, [pc, #100]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80053dc:	4b17      	ldr	r3, [pc, #92]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6a12      	ldr	r2, [r2, #32]
 80053ec:	00d2      	lsls	r2, r2, #3
 80053ee:	4913      	ldr	r1, [pc, #76]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	4a10      	ldr	r2, [pc, #64]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 80053fa:	f043 0310 	orr.w	r3, r3, #16
 80053fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005400:	4b0e      	ldr	r3, [pc, #56]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a0d      	ldr	r2, [pc, #52]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 8005406:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800540a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800540c:	f7fb fdc0 	bl	8000f90 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005412:	e008      	b.n	8005426 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005414:	f7fb fdbc 	bl	8000f90 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e006      	b.n	8005434 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005426:	4b05      	ldr	r3, [pc, #20]	@ (800543c <RCCEx_PLL2_Config+0x12c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0

}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	44020c00 	.word	0x44020c00

08005440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e042      	b.n	80054d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fb fb37 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2224      	movs	r2, #36	@ 0x24
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fcb4 	bl	8005df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fb33 	bl	8005afc <UART_SetConfig>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e01b      	b.n	80054d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fd33 	bl	8005f3c <UART_CheckIdleState>
 80054d6:	4603      	mov	r3, r0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b0ae      	sub	sp, #184	@ 0xb8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800550a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800550e:	4013      	ands	r3, r2
 8005510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11b      	bne.n	8005554 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800551c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 82ac 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
      }
      return;
 8005552:	e2a6      	b.n	8005aa2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80fd 	beq.w	8005758 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800555e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005562:	4b7a      	ldr	r3, [pc, #488]	@ (800574c <HAL_UART_IRQHandler+0x26c>)
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800556a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800556e:	4b78      	ldr	r3, [pc, #480]	@ (8005750 <HAL_UART_IRQHandler+0x270>)
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80f0 	beq.w	8005758 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d011      	beq.n	80055a8 <HAL_UART_IRQHandler+0xc8>
 8005584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559e:	f043 0201 	orr.w	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d011      	beq.n	80055d8 <HAL_UART_IRQHandler+0xf8>
 80055b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2202      	movs	r2, #2
 80055c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d011      	beq.n	8005608 <HAL_UART_IRQHandler+0x128>
 80055e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2204      	movs	r2, #4
 80055f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f043 0202 	orr.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d017      	beq.n	8005644 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005624:	4b49      	ldr	r3, [pc, #292]	@ (800574c <HAL_UART_IRQHandler+0x26c>)
 8005626:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2208      	movs	r2, #8
 8005632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	f043 0208 	orr.w	r2, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800564c:	2b00      	cmp	r3, #0
 800564e:	d012      	beq.n	8005676 <HAL_UART_IRQHandler+0x196>
 8005650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005654:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00c      	beq.n	8005676 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8212 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d013      	beq.n	80056b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800568e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800569a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800569e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ca:	2b40      	cmp	r3, #64	@ 0x40
 80056cc:	d005      	beq.n	80056da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d02e      	beq.n	8005738 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fd45 	bl	800616a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ea:	2b40      	cmp	r3, #64	@ 0x40
 80056ec:	d120      	bne.n	8005730 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d017      	beq.n	8005728 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fe:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <HAL_UART_IRQHandler+0x274>)
 8005700:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005708:	4618      	mov	r0, r3
 800570a:	f7fb fe59 	bl	80013c0 <HAL_DMA_Abort_IT>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005722:	4610      	mov	r0, r2
 8005724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005726:	e00f      	b.n	8005748 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9d1 	bl	8005ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572e:	e00b      	b.n	8005748 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f9cd 	bl	8005ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005736:	e007      	b.n	8005748 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9c9 	bl	8005ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005746:	e1ae      	b.n	8005aa6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	bf00      	nop
    return;
 800574a:	e1ac      	b.n	8005aa6 <HAL_UART_IRQHandler+0x5c6>
 800574c:	10000001 	.word	0x10000001
 8005750:	04000120 	.word	0x04000120
 8005754:	08006237 	.word	0x08006237

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575c:	2b01      	cmp	r3, #1
 800575e:	f040 8142 	bne.w	80059e6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 813b 	beq.w	80059e6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8134 	beq.w	80059e6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2210      	movs	r2, #16
 8005784:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005790:	2b40      	cmp	r3, #64	@ 0x40
 8005792:	f040 80aa 	bne.w	80058ea <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80057a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8084 	beq.w	80058b6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057b4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d27c      	bcs.n	80058b6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80057c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ce:	2b81      	cmp	r3, #129	@ 0x81
 80057d0:	d060      	beq.n	8005894 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	677b      	str	r3, [r7, #116]	@ 0x74
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057f8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e2      	bne.n	80057d2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3308      	adds	r3, #8
 8005812:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800581c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005830:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005832:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005836:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800583e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e3      	bne.n	800580c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005862:	f023 0310 	bic.w	r3, r3, #16
 8005866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005874:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005876:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800587a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e4      	bne.n	8005852 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800588e:	4618      	mov	r0, r3
 8005890:	f7fb fd1a 	bl	80012c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f918 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058b4:	e0f9      	b.n	8005aaa <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058bc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80058c0:	429a      	cmp	r2, r3
 80058c2:	f040 80f2 	bne.w	8005aaa <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ce:	2b81      	cmp	r3, #129	@ 0x81
 80058d0:	f040 80eb 	bne.w	8005aaa <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8fe 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
      return;
 80058e8:	e0df      	b.n	8005aaa <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80d1 	beq.w	8005aae <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800590c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80cc 	beq.w	8005aae <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800592a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005938:	647b      	str	r3, [r7, #68]	@ 0x44
 800593a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800593e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e4      	bne.n	8005916 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3308      	adds	r3, #8
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	623b      	str	r3, [r7, #32]
   return(result);
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005974:	633a      	str	r2, [r7, #48]	@ 0x30
 8005976:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800597a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e1      	bne.n	800594c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f023 0310 	bic.w	r3, r3, #16
 80059b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	69b9      	ldr	r1, [r7, #24]
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	617b      	str	r3, [r7, #20]
   return(result);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e4      	bne.n	800599c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059d8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f880 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059e4:	e063      	b.n	8005aae <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <HAL_UART_IRQHandler+0x530>
 80059f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fc51 	bl	80062b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a0e:	e051      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d014      	beq.n	8005a46 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d03a      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
    }
    return;
 8005a44:	e035      	b.n	8005ab2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_UART_IRQHandler+0x586>
 8005a52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fbfb 	bl	800625a <UART_EndTransmit_IT>
    return;
 8005a64:	e026      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_UART_IRQHandler+0x5a6>
 8005a72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fc2a 	bl	80062d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a84:	e016      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d010      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
 8005a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da0c      	bge.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fc12 	bl	80062c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aa0:	e008      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005aa2:	bf00      	nop
 8005aa4:	e006      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005aa6:	bf00      	nop
 8005aa8:	e004      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005aaa:	bf00      	nop
 8005aac:	e002      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005aae:	bf00      	nop
 8005ab0:	e000      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005ab2:	bf00      	nop
  }
}
 8005ab4:	37b8      	adds	r7, #184	@ 0xb8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b094      	sub	sp, #80	@ 0x50
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	498a      	ldr	r1, [pc, #552]	@ (8005d54 <UART_SetConfig+0x258>)
 8005b2c:	4019      	ands	r1, r3
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	68d9      	ldr	r1, [r3, #12]
 8005b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	ea40 0301 	orr.w	r3, r0, r1
 8005b4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d58 <UART_SetConfig+0x25c>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d004      	beq.n	8005b6a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b62:	6a1a      	ldr	r2, [r3, #32]
 8005b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b66:	4313      	orrs	r3, r2
 8005b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005b74:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	f023 000f 	bic.w	r0, r3, #15
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	ea40 0301 	orr.w	r3, r0, r1
 8005b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d5c <UART_SetConfig+0x260>)
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d102      	bne.n	8005baa <UART_SetConfig+0xae>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba8:	e01a      	b.n	8005be0 <UART_SetConfig+0xe4>
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4b6c      	ldr	r3, [pc, #432]	@ (8005d60 <UART_SetConfig+0x264>)
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d102      	bne.n	8005bba <UART_SetConfig+0xbe>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb8:	e012      	b.n	8005be0 <UART_SetConfig+0xe4>
 8005bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4b69      	ldr	r3, [pc, #420]	@ (8005d64 <UART_SetConfig+0x268>)
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d102      	bne.n	8005bca <UART_SetConfig+0xce>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc8:	e00a      	b.n	8005be0 <UART_SetConfig+0xe4>
 8005bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b62      	ldr	r3, [pc, #392]	@ (8005d58 <UART_SetConfig+0x25c>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d103      	bne.n	8005bdc <UART_SetConfig+0xe0>
 8005bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bda:	e001      	b.n	8005be0 <UART_SetConfig+0xe4>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b5c      	ldr	r3, [pc, #368]	@ (8005d58 <UART_SetConfig+0x25c>)
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d171      	bne.n	8005cce <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bec:	2200      	movs	r2, #0
 8005bee:	623b      	str	r3, [r7, #32]
 8005bf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bf2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005bf6:	f7fe fc4d 	bl	8004494 <HAL_RCCEx_GetPeriphCLKFreq>
 8005bfa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80e2 	beq.w	8005dc8 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	4a57      	ldr	r2, [pc, #348]	@ (8005d68 <UART_SetConfig+0x26c>)
 8005c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c16:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d305      	bcc.n	8005c34 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d903      	bls.n	8005c3c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005c3a:	e0c5      	b.n	8005dc8 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c3e:	2200      	movs	r2, #0
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	61fa      	str	r2, [r7, #28]
 8005c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c48:	4a47      	ldr	r2, [pc, #284]	@ (8005d68 <UART_SetConfig+0x26c>)
 8005c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2200      	movs	r2, #0
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	617a      	str	r2, [r7, #20]
 8005c56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c5e:	f7fa fb1b 	bl	8000298 <__aeabi_uldivmod>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	020b      	lsls	r3, r1, #8
 8005c74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c78:	0202      	lsls	r2, r0, #8
 8005c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c7c:	6849      	ldr	r1, [r1, #4]
 8005c7e:	0849      	lsrs	r1, r1, #1
 8005c80:	2000      	movs	r0, #0
 8005c82:	460c      	mov	r4, r1
 8005c84:	4605      	mov	r5, r0
 8005c86:	eb12 0804 	adds.w	r8, r2, r4
 8005c8a:	eb43 0905 	adc.w	r9, r3, r5
 8005c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	60fa      	str	r2, [r7, #12]
 8005c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	f7fa fafa 	bl	8000298 <__aeabi_uldivmod>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4613      	mov	r3, r2
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cb2:	d308      	bcc.n	8005cc6 <UART_SetConfig+0x1ca>
 8005cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cba:	d204      	bcs.n	8005cc6 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005cc2:	60da      	str	r2, [r3, #12]
 8005cc4:	e080      	b.n	8005dc8 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ccc:	e07c      	b.n	8005dc8 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd6:	d149      	bne.n	8005d6c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cda:	2200      	movs	r2, #0
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce4:	f7fe fbd6 	bl	8004494 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ce8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d06b      	beq.n	8005dc8 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d68 <UART_SetConfig+0x26c>)
 8005cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d02:	005a      	lsls	r2, r3, #1
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	441a      	add	r2, r3
 8005d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d916      	bls.n	8005d4a <UART_SetConfig+0x24e>
 8005d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d22:	d212      	bcs.n	8005d4a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f023 030f 	bic.w	r3, r3, #15
 8005d2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e03e      	b.n	8005dc8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005d50:	e03a      	b.n	8005dc8 <UART_SetConfig+0x2cc>
 8005d52:	bf00      	nop
 8005d54:	cfff69f3 	.word	0xcfff69f3
 8005d58:	44002400 	.word	0x44002400
 8005d5c:	40013800 	.word	0x40013800
 8005d60:	40004400 	.word	0x40004400
 8005d64:	40004800 	.word	0x40004800
 8005d68:	0800658c 	.word	0x0800658c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d6e:	2200      	movs	r2, #0
 8005d70:	469a      	mov	sl, r3
 8005d72:	4693      	mov	fp, r2
 8005d74:	4650      	mov	r0, sl
 8005d76:	4659      	mov	r1, fp
 8005d78:	f7fe fb8c 	bl	8004494 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d7c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d021      	beq.n	8005dc8 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d88:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <UART_SetConfig+0x2f8>)
 8005d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	441a      	add	r2, r3
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005daa:	2b0f      	cmp	r3, #15
 8005dac:	d909      	bls.n	8005dc2 <UART_SetConfig+0x2c6>
 8005dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db4:	d205      	bcs.n	8005dc2 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e002      	b.n	8005dc8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dda:	2200      	movs	r2, #0
 8005ddc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de0:	2200      	movs	r2, #0
 8005de2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005de4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3750      	adds	r7, #80	@ 0x50
 8005dec:	46bd      	mov	sp, r7
 8005dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005df2:	bf00      	nop
 8005df4:	0800658c 	.word	0x0800658c

08005df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01a      	beq.n	8005f0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ef6:	d10a      	bne.n	8005f0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b098      	sub	sp, #96	@ 0x60
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f4c:	f7fb f820 	bl	8000f90 <HAL_GetTick>
 8005f50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d12f      	bne.n	8005fc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f88e 	bl	8006090 <UART_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d022      	beq.n	8005fc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e6      	bne.n	8005f7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e063      	b.n	8006088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d149      	bne.n	8006062 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f857 	bl	8006090 <UART_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d03c      	beq.n	8006062 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006006:	633b      	str	r3, [r7, #48]	@ 0x30
 8006008:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800600c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e6      	bne.n	8005fe8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	60fb      	str	r3, [r7, #12]
   return(result);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800603a:	61fa      	str	r2, [r7, #28]
 800603c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	69b9      	ldr	r1, [r7, #24]
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	617b      	str	r3, [r7, #20]
   return(result);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e5      	bne.n	800601a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e012      	b.n	8006088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3758      	adds	r7, #88	@ 0x58
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a0:	e04f      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d04b      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060aa:	f7fa ff71 	bl	8000f90 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e04e      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d037      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b80      	cmp	r3, #128	@ 0x80
 80060d6:	d034      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	d031      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d110      	bne.n	800610e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f838 	bl	800616a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2208      	movs	r2, #8
 80060fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e029      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800611c:	d111      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f81e 	bl	800616a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e00f      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	429a      	cmp	r2, r3
 800615e:	d0a0      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800616a:	b480      	push	{r7}
 800616c:	b095      	sub	sp, #84	@ 0x54
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006190:	643b      	str	r3, [r7, #64]	@ 0x40
 8006192:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006196:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e6      	bne.n	8006172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e3      	bne.n	80061a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d118      	bne.n	8006216 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6979      	ldr	r1, [r7, #20]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	613b      	str	r3, [r7, #16]
   return(result);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e6      	bne.n	80061e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800622a:	bf00      	nop
 800622c:	3754      	adds	r7, #84	@ 0x54
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006242:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fc3f 	bl	8005ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b088      	sub	sp, #32
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	613b      	str	r3, [r7, #16]
   return(result);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff fc0a 	bl	8005abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a8:	bf00      	nop
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_UARTEx_DisableFifoMode+0x16>
 80062fe:	2302      	movs	r3, #2
 8006300:	e027      	b.n	8006352 <HAL_UARTEx_DisableFifoMode+0x66>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2224      	movs	r2, #36	@ 0x24
 800630e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006372:	2302      	movs	r3, #2
 8006374:	e02d      	b.n	80063d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2224      	movs	r2, #36	@ 0x24
 8006382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f850 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e02d      	b.n	800644e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2224      	movs	r2, #36	@ 0x24
 80063fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f812 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006464:	2b00      	cmp	r3, #0
 8006466:	d108      	bne.n	800647a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006478:	e031      	b.n	80064de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800647a:	2308      	movs	r3, #8
 800647c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800647e:	2308      	movs	r3, #8
 8006480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	0e5b      	lsrs	r3, r3, #25
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	0f5b      	lsrs	r3, r3, #29
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	7b3a      	ldrb	r2, [r7, #12]
 80064a6:	4911      	ldr	r1, [pc, #68]	@ (80064ec <UARTEx_SetNbDataToProcess+0x94>)
 80064a8:	5c8a      	ldrb	r2, [r1, r2]
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064ae:	7b3a      	ldrb	r2, [r7, #12]
 80064b0:	490f      	ldr	r1, [pc, #60]	@ (80064f0 <UARTEx_SetNbDataToProcess+0x98>)
 80064b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	7b7a      	ldrb	r2, [r7, #13]
 80064c4:	4909      	ldr	r1, [pc, #36]	@ (80064ec <UARTEx_SetNbDataToProcess+0x94>)
 80064c6:	5c8a      	ldrb	r2, [r1, r2]
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064cc:	7b7a      	ldrb	r2, [r7, #13]
 80064ce:	4908      	ldr	r1, [pc, #32]	@ (80064f0 <UARTEx_SetNbDataToProcess+0x98>)
 80064d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	080065a4 	.word	0x080065a4
 80064f0:	080065ac 	.word	0x080065ac

080064f4 <memset>:
 80064f4:	4402      	add	r2, r0
 80064f6:	4603      	mov	r3, r0
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d100      	bne.n	80064fe <memset+0xa>
 80064fc:	4770      	bx	lr
 80064fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006502:	e7f9      	b.n	80064f8 <memset+0x4>

08006504 <__libc_init_array>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4d0d      	ldr	r5, [pc, #52]	@ (800653c <__libc_init_array+0x38>)
 8006508:	2600      	movs	r6, #0
 800650a:	4c0d      	ldr	r4, [pc, #52]	@ (8006540 <__libc_init_array+0x3c>)
 800650c:	1b64      	subs	r4, r4, r5
 800650e:	10a4      	asrs	r4, r4, #2
 8006510:	42a6      	cmp	r6, r4
 8006512:	d109      	bne.n	8006528 <__libc_init_array+0x24>
 8006514:	4d0b      	ldr	r5, [pc, #44]	@ (8006544 <__libc_init_array+0x40>)
 8006516:	2600      	movs	r6, #0
 8006518:	4c0b      	ldr	r4, [pc, #44]	@ (8006548 <__libc_init_array+0x44>)
 800651a:	f000 f817 	bl	800654c <_init>
 800651e:	1b64      	subs	r4, r4, r5
 8006520:	10a4      	asrs	r4, r4, #2
 8006522:	42a6      	cmp	r6, r4
 8006524:	d105      	bne.n	8006532 <__libc_init_array+0x2e>
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	f855 3b04 	ldr.w	r3, [r5], #4
 800652c:	3601      	adds	r6, #1
 800652e:	4798      	blx	r3
 8006530:	e7ee      	b.n	8006510 <__libc_init_array+0xc>
 8006532:	f855 3b04 	ldr.w	r3, [r5], #4
 8006536:	3601      	adds	r6, #1
 8006538:	4798      	blx	r3
 800653a:	e7f2      	b.n	8006522 <__libc_init_array+0x1e>
 800653c:	080065bc 	.word	0x080065bc
 8006540:	080065bc 	.word	0x080065bc
 8006544:	080065bc 	.word	0x080065bc
 8006548:	080065c0 	.word	0x080065c0

0800654c <_init>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr

08006558 <_fini>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	bf00      	nop
 800655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655e:	bc08      	pop	{r3}
 8006560:	469e      	mov	lr, r3
 8006562:	4770      	bx	lr
