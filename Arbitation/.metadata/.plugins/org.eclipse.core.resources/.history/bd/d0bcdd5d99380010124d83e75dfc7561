
Three_NODE_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000640c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006664  08006664  00007664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b4  080066b4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080066b4  080066b4  000076b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066bc  080066bc  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066bc  080066bc  000076bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066c0  080066c0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080066c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  080066d0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080066d0  00008178  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011665  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e6  00000000  00000000  000196a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  0001c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffdc  00000000  00000000  0001ce1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c9d  00000000  00000000  0003cdfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6126  00000000  00000000  0004da97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113bbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003248  00000000  00000000  00113c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00116e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	0800664c 	.word	0x0800664c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	0800664c 	.word	0x0800664c

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SystemClock_Config>:
 */
#include "RCC_clock.h"


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	@ 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2250      	movs	r2, #80	@ 0x50
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 f818 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <SystemClock_Config+0xdc>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005de:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xdc>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xdc>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xdc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d1f9      	bne.n	80005f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000626:	230c      	movs	r3, #12
 8000628:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062a:	2300      	movs	r3, #0
 800062c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f001 ff36 	bl	80024a8 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    //Error_Handler();
	while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <SystemClock_Config+0x92>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fb57 	bl	8002d18 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    //Error_Handler();
	while(1);
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <SystemClock_Config+0xc0>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <SystemClock_Config+0xe0>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	44020800 	.word	0x44020800
 8000690:	40022000 	.word	0x40022000

08000694 <MX_GPIO_Init>:
 *      Author: Admin
 */
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b47      	ldr	r3, [pc, #284]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a45      	ldr	r2, [pc, #276]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b43      	ldr	r3, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c8:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a3e      	ldr	r2, [pc, #248]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0x134>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000714:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000728:	f001 fe5a 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	4827      	ldr	r0, [pc, #156]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000732:	f001 fe55 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0x144>)
 800074c:	f001 fcf6 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000768:	f001 fce8 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076c:	2308      	movs	r3, #8
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000784:	f001 fcda 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000788:	2320      	movs	r3, #32
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 800079c:	f001 fcce 	bl	800213c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2010      	movs	r0, #16
 80007a6:	f000 fcdd 	bl	8001164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 fcf4 	bl	8001198 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	2018      	movs	r0, #24
 80007b6:	f000 fcd5 	bl	8001164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80007ba:	2018      	movs	r0, #24
 80007bc:	f000 fcec 	bl	8001198 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	@ 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	44020c00 	.word	0x44020c00
 80007cc:	42020000 	.word	0x42020000
 80007d0:	42020400 	.word	0x42020400
 80007d4:	10210000 	.word	0x10210000
 80007d8:	42020800 	.word	0x42020800

080007dc <main>:
CAN_SET CAN_Payload;



int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb4a 	bl	8000e78 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f7ff fee4 	bl	80005b0 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff54 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007ec:	f000 f80a 	bl	8000804 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 facc 	bl	8000d8c <MX_USART3_UART_Init>

  CAN_Payload.dataTx[0] = 0x0;
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <main+0x24>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <main+0x20>
 8000800:	2000008c 	.word	0x2000008c

08000804 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800080a:	4a29      	ldr	r2, [pc, #164]	@ (80008b0 <MX_FDCAN1_Init+0xac>)
 800080c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800080e:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800081a:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000822:	2200      	movs	r2, #0
 8000824:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000828:	2200      	movs	r2, #0
 800082a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000834:	2219      	movs	r2, #25
 8000836:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800083a:	2201      	movs	r2, #1
 800083c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800083e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000840:	220d      	movs	r2, #13
 8000842:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000846:	2202      	movs	r2, #2
 8000848:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800084c:	2201      	movs	r2, #1
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000852:	2201      	movs	r2, #1
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800085e:	2201      	movs	r2, #1
 8000860:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000864:	2200      	movs	r2, #0
 8000866:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000876:	f000 fdf3 	bl	8001460 <HAL_FDCAN_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000880:	f000 f8d2 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000886:	f000 ff9f 	bl	80017c8 <HAL_FDCAN_Start>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_FDCAN1_Init+0x90>
  	 /* Notification Error */
  	Error_Handler();
 8000890:	f000 f8ca 	bl	8000a28 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800089a:	f001 f909 	bl	8001ab0 <HAL_FDCAN_ActivateNotification>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_FDCAN1_Init+0xa4>
  {
	/* Notification Error */
	Error_Handler();
 80008a4:	f000 f8c0 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000028 	.word	0x20000028
 80008b0:	4000a400 	.word	0x4000a400

080008b4 <SetFilter>:



/* USER CODE BEGIN 4 */
void SetFilter(uint16_t ID ,uint16_t msk){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	80fb      	strh	r3, [r7, #6]
 80008c0:	4613      	mov	r3, r2
 80008c2:	80bb      	strh	r3, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = ID;
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = msk;
 80008d8:	88bb      	ldrh	r3, [r7, #4]
 80008da:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <SetFilter+0x48>)
 80008e4:	f000 ff16 	bl	8001714 <HAL_FDCAN_ConfigFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SetFilter+0x3e>
	{
	  /* Filter configuration Error */
	  Error_Handler();
 80008ee:	f000 f89b 	bl	8000a28 <Error_Handler>
	}
}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000028 	.word	0x20000028

08000900 <Test_Priority>:



void Test_Priority(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	#ifdef NODE_A
		CAN_Payload.msgID = 0x11;
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <Test_Priority+0x18>)
 8000906:	2211      	movs	r2, #17
 8000908:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		SetFilter(0x10,0x0);
 800090c:	2100      	movs	r1, #0
 800090e:	2010      	movs	r0, #16
 8000910:	f7ff ffd0 	bl	80008b4 <SetFilter>
	#ifdef NODE_C
		CAN_Payload.msgID = 0x13;
		SetFilter(0x11,0x0);
	#endif

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000008c 	.word	0x2000008c

0800091c <TX_Send_CAN>:



void TX_Send_CAN(){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

    /* ----- Prepare CAN data --------------------------------------- */
    CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID; //CAN_Payload.msgID
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <TX_Send_CAN+0x6c>)
 8000922:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000926:	461a      	mov	r2, r3
 8000928:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <TX_Send_CAN+0x6c>)
 800092a:	601a      	str	r2, [r3, #0]
    CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <TX_Send_CAN+0x6c>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <TX_Send_CAN+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;        // 8-byte payloaD
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <TX_Send_CAN+0x6c>)
 800093a:	2201      	movs	r2, #1
 800093c:	60da      	str	r2, [r3, #12]
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <TX_Send_CAN+0x6c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 8000944:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <TX_Send_CAN+0x6c>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
    CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <TX_Send_CAN+0x6c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000950:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <TX_Send_CAN+0x6c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
    CAN_Payload.TxHeader.MessageMarker = 0;
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <TX_Send_CAN+0x6c>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]

    CAN_Payload.dataTx[0] ^= 1;
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <TX_Send_CAN+0x6c>)
 800095e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <TX_Send_CAN+0x6c>)
 800096a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 800096e:	4a07      	ldr	r2, [pc, #28]	@ (800098c <TX_Send_CAN+0x70>)
 8000970:	4905      	ldr	r1, [pc, #20]	@ (8000988 <TX_Send_CAN+0x6c>)
 8000972:	4807      	ldr	r0, [pc, #28]	@ (8000990 <TX_Send_CAN+0x74>)
 8000974:	f000 ff50 	bl	8001818 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <TX_Send_CAN+0x66>
    {
    	Error_Handler();
 800097e:	f000 f853 	bl	8000a28 <Error_Handler>
    }
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000008c 	.word	0x2000008c
 800098c:	200000da 	.word	0x200000da
 8000990:	20000028 	.word	0x20000028

08000994 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_5) {
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d103      	bne.n	80009ac <HAL_GPIO_EXTI_Falling_Callback+0x18>
		Test_Priority();
 80009a4:	f7ff ffac 	bl	8000900 <Test_Priority>
		TX_Send_CAN();
 80009a8:	f7ff ffb8 	bl	800091c <TX_Send_CAN>

	}
	if(GPIO_Pin == GPIO_PIN_13){
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009b2:	d101      	bne.n	80009b8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		TX_Send_CAN();
 80009b4:	f7ff ffb2 	bl	800091c <TX_Send_CAN>
	}
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d014      	beq.n	80009fe <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 80009d4:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80009d6:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80009d8:	2140      	movs	r1, #64	@ 0x40
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 ff60 	bl	80018a0 <HAL_FDCAN_GetRxMessage>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 80009e6:	f000 f81f 	bl	8000a28 <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80009ea:	2200      	movs	r2, #0
 80009ec:	2101      	movs	r1, #1
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f001 f85e 	bl	8001ab0 <HAL_FDCAN_ActivateNotification>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 80009fa:	f000 f815 	bl	8000a28 <Error_Handler>
		}
	}
	if(CAN_Payload.dataRx[0] == 0x1){
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000a00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d103      	bne.n	8000a10 <HAL_FDCAN_RxFifo0Callback+0x50>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000a0c:	f001 fd00 	bl	8002410 <HAL_GPIO_TogglePin>
	}
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000dc 	.word	0x200000dc
 8000a1c:	200000b0 	.word	0x200000b0
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	42020000 	.word	0x42020000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ac      	sub	sp, #176	@ 0xb0
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2288      	movs	r2, #136	@ 0x88
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f005 fdc5 	bl	80065f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <HAL_FDCAN_MspInit+0xd4>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d14d      	bne.n	8000b10 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	f04f 0304 	mov.w	r3, #4
 8000a7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fc86 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000a96:	f7ff ffc7 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <HAL_FDCAN_MspInit+0xd8>)
 8000a9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <HAL_FDCAN_MspInit+0xd8>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <HAL_FDCAN_MspInit+0xd8>)
 8000aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_FDCAN_MspInit+0xd8>)
 8000aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <HAL_FDCAN_MspInit+0xd8>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ac8:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <HAL_FDCAN_MspInit+0xd8>)
 8000aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad6:	23c0      	movs	r3, #192	@ 0xc0
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aee:	2309      	movs	r3, #9
 8000af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <HAL_FDCAN_MspInit+0xdc>)
 8000afc:	f001 fb1e 	bl	800213c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2103      	movs	r1, #3
 8000b04:	2027      	movs	r0, #39	@ 0x27
 8000b06:	f000 fb2d 	bl	8001164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b0a:	2027      	movs	r0, #39	@ 0x27
 8000b0c:	f000 fb44 	bl	8001198 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000b10:	bf00      	nop
 8000b12:	37b0      	adds	r7, #176	@ 0xb0
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	4000a400 	.word	0x4000a400
 8000b1c:	44020c00 	.word	0x44020c00
 8000b20:	42020800 	.word	0x42020800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0ac      	sub	sp, #176	@ 0xb0
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2288      	movs	r2, #136	@ 0x88
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f005 fd55 	bl	80065f4 <memset>
  if(huart->Instance==USART3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf8 <HAL_UART_MspInit+0xd4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d14c      	bne.n	8000bee <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b54:	f04f 0204 	mov.w	r2, #4
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fc17 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b74:	f7ff ff58 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b78:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <HAL_UART_MspInit+0xd8>)
 8000b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bfc <HAL_UART_MspInit+0xd8>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_UART_MspInit+0xd8>)
 8000b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <HAL_UART_MspInit+0xd8>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9c:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_UART_MspInit+0xd8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_UART_MspInit+0xd8>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000bb4:	2318      	movs	r3, #24
 8000bb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000bcc:	230d      	movs	r3, #13
 8000bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <HAL_UART_MspInit+0xdc>)
 8000bda:	f001 faaf 	bl	800213c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2102      	movs	r1, #2
 8000be2:	203c      	movs	r0, #60	@ 0x3c
 8000be4:	f000 fabe 	bl	8001164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000be8:	203c      	movs	r0, #60	@ 0x3c
 8000bea:	f000 fad5 	bl	8001198 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bee:	bf00      	nop
 8000bf0:	37b0      	adds	r7, #176	@ 0xb0
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40004800 	.word	0x40004800
 8000bfc:	44020c00 	.word	0x44020c00
 8000c00:	42020000 	.word	0x42020000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 f9ab 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c66:	2020      	movs	r0, #32
 8000c68:	f001 fbec 	bl	8002444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000c74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c78:	f001 fbe4 	bl	8002444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c86:	f000 fff9 	bl	8001c7c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000028 	.word	0x20000028

08000c94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <USART3_IRQHandler+0x10>)
 8000c9a:	f004 fca1 	bl	80055e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000e0 	.word	0x200000e0

08000ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cae:	4b30      	ldr	r3, [pc, #192]	@ (8000d70 <SystemInit+0xc8>)
 8000cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8000d70 <SystemInit+0xc8>)
 8000cb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <SystemInit+0xcc>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d74 <SystemInit+0xcc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000cca:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <SystemInit+0xcc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000cd0:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <SystemInit+0xcc>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4927      	ldr	r1, [pc, #156]	@ (8000d74 <SystemInit+0xcc>)
 8000cd6:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <SystemInit+0xd0>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <SystemInit+0xcc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <SystemInit+0xcc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <SystemInit+0xcc>)
 8000cea:	4a24      	ldr	r2, [pc, #144]	@ (8000d7c <SystemInit+0xd4>)
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <SystemInit+0xcc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <SystemInit+0xcc>)
 8000cf6:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <SystemInit+0xd4>)
 8000cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <SystemInit+0xcc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d00:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <SystemInit+0xcc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <SystemInit+0xcc>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <SystemInit+0xcc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <SystemInit+0xc8>)
 8000d14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d18:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <SystemInit+0xd8>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d22:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d2a:	d003      	beq.n	8000d34 <SystemInit+0x8c>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d32:	d117      	bne.n	8000d64 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <SystemInit+0xd8>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <SystemInit+0xd8>)
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <SystemInit+0xdc>)
 8000d44:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <SystemInit+0xd8>)
 8000d48:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <SystemInit+0xe0>)
 8000d4a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <SystemInit+0xd8>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <SystemInit+0xd8>)
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <SystemInit+0xd8>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <SystemInit+0xd8>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	61d3      	str	r3, [r2, #28]
  }
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	44020c00 	.word	0x44020c00
 8000d78:	fae2eae3 	.word	0xfae2eae3
 8000d7c:	01010280 	.word	0x01010280
 8000d80:	40022000 	.word	0x40022000
 8000d84:	08192a3b 	.word	0x08192a3b
 8000d88:	4c5d6e7f 	.word	0x4c5d6e7f

08000d8c <MX_USART3_UART_Init>:
#include "uart.h"

UART_HandleTypeDef huart3;

void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d92:	4a23      	ldr	r2, [pc, #140]	@ (8000e20 <MX_USART3_UART_Init+0x94>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd4:	4811      	ldr	r0, [pc, #68]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd6:	f004 fbb3 	bl	8005540 <HAL_UART_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART3_UART_Init+0x58>
  {
	  //Error_Handler();
	  	while(1);
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MX_USART3_UART_Init+0x54>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de4:	2100      	movs	r1, #0
 8000de6:	480d      	ldr	r0, [pc, #52]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000de8:	f005 fb39 	bl	800645e <HAL_UARTEx_SetTxFifoThreshold>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x6a>
  {
	  //Error_Handler();
	  	while(1);
 8000df2:	bf00      	nop
 8000df4:	e7fd      	b.n	8000df2 <MX_USART3_UART_Init+0x66>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dfa:	f005 fb6e 	bl	80064da <HAL_UARTEx_SetRxFifoThreshold>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART3_UART_Init+0x7c>
  {
	  //Error_Handler();
	  	while(1);
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MX_USART3_UART_Init+0x78>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000e0a:	f005 faef 	bl	80063ec <HAL_UARTEx_DisableFifoMode>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x8c>
  {
	  //Error_Handler();
	  	while(1);
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MX_USART3_UART_Init+0x88>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000e0 	.word	0x200000e0
 8000e20:	40004800 	.word	0x40004800

08000e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e2a:	e003      	b.n	8000e34 <LoopCopyDataInit>

08000e2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e32:	3104      	adds	r1, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e34:	480b      	ldr	r0, [pc, #44]	@ (8000e64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e3c:	d3f6      	bcc.n	8000e2c <CopyDataInit>
	ldr	r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e40:	e002      	b.n	8000e48 <LoopFillZerobss>

08000e42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e44:	f842 3b04 	str.w	r3, [r2], #4

08000e48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <LoopForever+0x16>)
	cmp	r2, r3
 8000e4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e4c:	d3f9      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4e:	f7ff ff2b 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f005 fbd7 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e56:	f7ff fcc1 	bl	80007dc <main>

08000e5a <LoopForever>:

LoopForever:
    b LoopForever
 8000e5a:	e7fe      	b.n	8000e5a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e5c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000e60:	080066c4 	.word	0x080066c4
	ldr	r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e68:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e6c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e70:	20000178 	.word	0x20000178

08000e74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f966 	bl	800114e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e82:	f002 f901 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8000e86:	4602      	mov	r2, r0
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <HAL_Init+0x44>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	490b      	ldr	r1, [pc, #44]	@ (8000ec0 <HAL_Init+0x48>)
 8000e92:	5ccb      	ldrb	r3, [r1, r3]
 8000e94:	fa22 f303 	lsr.w	r3, r2, r3
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x4c>)
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e9c:	2004      	movs	r0, #4
 8000e9e:	f000 f9ab 	bl	80011f8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f810 	bl	8000ec8 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e002      	b.n	8000eb8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb2:	f7ff fdbf 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	44020c00 	.word	0x44020c00
 8000ec0:	08006664 	.word	0x08006664
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ed4:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e05c      	b.n	8000f9a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ee0:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <HAL_InitTick+0xe0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d10c      	bne.n	8000f06 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000eec:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <HAL_InitTick+0xe4>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e037      	b.n	8000f76 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000f06:	f000 f9cf 	bl	80012a8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000f0a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d023      	beq.n	8000f5a <HAL_InitTick+0x92>
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d82d      	bhi.n	8000f74 <HAL_InitTick+0xac>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_InitTick+0x5e>
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d00d      	beq.n	8000f40 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000f24:	e026      	b.n	8000f74 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <HAL_InitTick+0xe4>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3c:	60fb      	str	r3, [r7, #12]
        break;
 8000f3e:	e01a      	b.n	8000f76 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f4e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	60fb      	str	r3, [r7, #12]
        break;
 8000f58:	e00d      	b.n	8000f76 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	60fb      	str	r3, [r7, #12]
        break;
 8000f72:	e000      	b.n	8000f76 <HAL_InitTick+0xae>
        break;
 8000f74:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 f91c 	bl	80011b4 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e009      	b.n	8000f9a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	2200      	movs	r2, #0
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	f000 f8e9 	bl	8001164 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000f92:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <HAL_InitTick+0xe8>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	e000e010 	.word	0xe000e010
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000174 	.word	0x20000174

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000174 	.word	0x20000174

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	@ (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	@ (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	@ 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff4c 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001172:	f7ff ff63 	bl	800103c <__NVIC_GetPriorityGrouping>
 8001176:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff ffb3 	bl	80010e8 <NVIC_EncodePriority>
 8001182:	4602      	mov	r2, r0
 8001184:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff82 	bl	8001094 <__NVIC_SetPriority>
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff56 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00d      	b.n	80011e6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_SYSTICK_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_SYSTICK_Config+0x40>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_SYSTICK_Config+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <HAL_SYSTICK_Config+0x40>)
 80011de:	f043 0303 	orr.w	r3, r3, #3
 80011e2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d844      	bhi.n	8001290 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001206:	a201      	add	r2, pc, #4	@ (adr r2, 800120c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800122f 	.word	0x0800122f
 8001210:	0800124d 	.word	0x0800124d
 8001214:	0800126f 	.word	0x0800126f
 8001218:	08001291 	.word	0x08001291
 800121c:	08001221 	.word	0x08001221
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6013      	str	r3, [r2, #0]
      break;
 800122c:	e031      	b.n	8001292 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800123c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001242:	f023 030c 	bic.w	r3, r3, #12
 8001246:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800124a:	e022      	b.n	8001292 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001252:	f023 0304 	bic.w	r3, r3, #4
 8001256:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800125a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800125e:	f023 030c 	bic.w	r3, r3, #12
 8001262:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800126c:	e011      	b.n	8001292 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001274:	f023 0304 	bic.w	r3, r3, #4
 8001278:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800127c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001280:	f023 030c 	bic.w	r3, r3, #12
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800128e:	e000      	b.n	8001292 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001290:	bf00      	nop
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010
 80012a4:	44020c00 	.word	0x44020c00

080012a8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80012ba:	2304      	movs	r3, #4
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e01e      	b.n	80012fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80012c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d00f      	beq.n	80012f2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d80f      	bhi.n	80012f8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d003      	beq.n	80012ec <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80012e4:	e008      	b.n	80012f8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
        break;
 80012ea:	e008      	b.n	80012fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80012ec:	2301      	movs	r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
        break;
 80012f0:	e005      	b.n	80012fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80012f2:	2302      	movs	r3, #2
 80012f4:	607b      	str	r3, [r7, #4]
        break;
 80012f6:	e002      	b.n	80012fe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
        break;
 80012fc:	bf00      	nop
    }
  }
  return systick_source;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e010 	.word	0xe000e010
 8001310:	44020c00 	.word	0x44020c00

08001314 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800131c:	f7ff fe5e 	bl	8000fdc <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e06b      	b.n	8001404 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d008      	beq.n	800134a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2220      	movs	r2, #32
 800133c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e05c      	b.n	8001404 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0204 	orr.w	r2, r2, #4
 8001358:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001362:	e020      	b.n	80013a6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001364:	f7ff fe3a 	bl	8000fdc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b05      	cmp	r3, #5
 8001370:	d919      	bls.n	80013a6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f043 0210 	orr.w	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2203      	movs	r2, #3
 8001382:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001396:	2201      	movs	r2, #1
 8001398:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e02e      	b.n	8001404 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0d7      	beq.n	8001364 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0202 	orr.w	r2, r2, #2
 80013c2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2204      	movs	r2, #4
 80013c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80013d4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ee:	2201      	movs	r2, #1
 80013f0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e019      	b.n	8001452 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d004      	beq.n	8001434 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2220      	movs	r2, #32
 800142e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e00e      	b.n	8001452 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2204      	movs	r2, #4
 8001438:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e147      	b.n	8001702 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fadc 	bl	8000a44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0210 	bic.w	r2, r2, #16
 800149a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff fd9e 	bl	8000fdc <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014a2:	e012      	b.n	80014ca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014a4:	f7ff fd9a 	bl	8000fdc <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d90b      	bls.n	80014ca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e11b      	b.n	8001702 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d0e5      	beq.n	80014a4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff fd78 	bl	8000fdc <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014ee:	e012      	b.n	8001516 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014f0:	f7ff fd74 	bl	8000fdc <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	d90b      	bls.n	8001516 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0f5      	b.n	8001702 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0e5      	beq.n	80014f0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0202 	orr.w	r2, r2, #2
 8001532:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a74      	ldr	r2, [pc, #464]	@ (800170c <HAL_FDCAN_Init+0x2ac>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d103      	bne.n	8001546 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800153e:	4a74      	ldr	r2, [pc, #464]	@ (8001710 <HAL_FDCAN_Init+0x2b0>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7c1b      	ldrb	r3, [r3, #16]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d108      	bne.n	8001560 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800155c:	619a      	str	r2, [r3, #24]
 800155e:	e007      	b.n	8001570 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800156e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7c5b      	ldrb	r3, [r3, #17]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d108      	bne.n	800158a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	e007      	b.n	800159a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001598:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7c9b      	ldrb	r3, [r3, #18]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015b0:	619a      	str	r2, [r3, #24]
 80015b2:	e007      	b.n	80015c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699a      	ldr	r2, [r3, #24]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80015e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0210 	bic.w	r2, r2, #16
 80015f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d108      	bne.n	8001614 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0204 	orr.w	r2, r2, #4
 8001610:	619a      	str	r2, [r3, #24]
 8001612:	e02c      	b.n	800166e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d028      	beq.n	800166e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d01c      	beq.n	800165e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001632:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0210 	orr.w	r2, r2, #16
 8001642:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d110      	bne.n	800166e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0220 	orr.w	r2, r2, #32
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	e007      	b.n	800166e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0220 	orr.w	r2, r2, #32
 800166c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	3b01      	subs	r3, #1
 8001674:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	3b01      	subs	r3, #1
 800167c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800167e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001686:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	3b01      	subs	r3, #1
 8001690:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001696:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001698:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80016a2:	d115      	bne.n	80016d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ae:	3b01      	subs	r3, #1
 80016b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	3b01      	subs	r3, #1
 80016ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fc56 	bl	8001f98 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	4000a400 	.word	0x4000a400
 8001710:	4000a500 	.word	0x4000a500

08001714 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001724:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d002      	beq.n	8001732 <HAL_FDCAN_ConfigFilter+0x1e>
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d13d      	bne.n	80017ae <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d119      	bne.n	800176e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001746:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800174e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e01d      	b.n	80017aa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	075a      	lsls	r2, r3, #29
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	079a      	lsls	r2, r3, #30
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3304      	adds	r3, #4
 80017a2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e006      	b.n	80017bc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b2:	f043 0202 	orr.w	r2, r3, #2
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
  }
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d110      	bne.n	80017fe <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e006      	b.n	800180c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001802:	f043 0204 	orr.w	r2, r3, #4
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d12c      	bne.n	800188a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001844:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e023      	b.n	8001898 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fbec 	bl	8002044 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800187c:	2201      	movs	r2, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e006      	b.n	8001898 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188e:	f043 0208 	orr.w	r2, r3, #8
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b08b      	sub	sp, #44	@ 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018b8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80018ba:	7efb      	ldrb	r3, [r7, #27]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	f040 80e8 	bne.w	8001a92 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b40      	cmp	r3, #64	@ 0x40
 80018c6:	d137      	bne.n	8001938 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0db      	b.n	8001aa0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018f0:	0e1b      	lsrs	r3, r3, #24
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10a      	bne.n	8001910 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001902:	0a5b      	lsrs	r3, r3, #9
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800190c:	2301      	movs	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4413      	add	r3, r2
 8001922:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
 8001936:	e036      	b.n	80019a6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0a3      	b.n	8001aa0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001960:	0e1b      	lsrs	r3, r3, #24
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10a      	bne.n	8001980 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d107      	bne.n	80019ca <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0c9b      	lsrs	r3, r3, #18
 80019c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e005      	b.n	80019d6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	3304      	adds	r3, #4
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	f003 020f 	and.w	r2, r3, #15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e1b      	lsrs	r3, r3, #24
 8001a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0fda      	lsrs	r2, r3, #31
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	3304      	adds	r3, #4
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	e00a      	b.n	8001a62 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	441a      	add	r2, r3
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	440b      	add	r3, r1
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	623b      	str	r3, [r7, #32]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_FDCAN_GetRxMessage+0x20c>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d3ec      	bcc.n	8001a4c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b40      	cmp	r3, #64	@ 0x40
 8001a76:	d105      	bne.n	8001a84 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001a82:	e004      	b.n	8001a8e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e006      	b.n	8001aa0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	f043 0208 	orr.w	r2, r3, #8
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
  }
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	372c      	adds	r7, #44	@ 0x2c
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	0800667c 	.word	0x0800667c

08001ab0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ac2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d003      	beq.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x22>
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 80c8 	bne.w	8001c62 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03b      	beq.n	8001b66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d031      	beq.n	8001b66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d027      	beq.n	8001b66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01d      	beq.n	8001b66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d013      	beq.n	8001b66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00c      	beq.n	8001b76 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d107      	bne.n	8001b76 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13b      	bne.n	8001c02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d131      	bne.n	8001c02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d127      	bne.n	8001c02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d11d      	bne.n	8001c02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d113      	bne.n	8001c02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0202 	orr.w	r2, r2, #2
 8001c10:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e006      	b.n	8001c70 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	@ 0x30
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c98:	4013      	ands	r3, r2
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc8:	4013      	ands	r3, r2
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001cd6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001cee:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d02:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d0a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2240      	movs	r2, #64	@ 0x40
 8001d26:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f916 	bl	8001f5a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d019      	beq.n	8001d6c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d014      	beq.n	8001d6c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d4a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d64:	6939      	ldr	r1, [r7, #16]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8d8 	bl	8001f1c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8a2 	bl	8001ec6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fe14 	bl	80009c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f897 	bl	8001edc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f890 	bl	8001ef2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d018      	beq.n	8001e0e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d013      	beq.n	8001e0e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001dee:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2280      	movs	r2, #128	@ 0x80
 8001e04:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f87c 	bl	8001f06 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f880 	bl	8001f32 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00c      	beq.n	8001e56 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f878 	bl	8001f46 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00f      	beq.n	8001e80 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e8e:	69f9      	ldr	r1, [r7, #28]
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f876 	bl	8001f82 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f858 	bl	8001f6e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3730      	adds	r7, #48	@ 0x30
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001fa0:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001fa2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fba:	041a      	lsls	r2, r3, #16
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fd8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe0:	061a      	lsls	r2, r3, #24
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e005      	b.n	8002026 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3304      	adds	r3, #4
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	429a      	cmp	r2, r3
 8002030:	d3f3      	bcc.n	800201a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	4000ac00 	.word	0x4000ac00

08002044 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002062:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800206a:	4313      	orrs	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e00a      	b.n	8002086 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002078:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800207e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002080:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002084:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002090:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002096:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800209c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3304      	adds	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	3304      	adds	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e020      	b.n	800211a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3303      	adds	r3, #3
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3302      	adds	r3, #2
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	440b      	add	r3, r1
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020f0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	440b      	add	r3, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020fe:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	440a      	add	r2, r1
 8002106:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002108:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3304      	adds	r3, #4
 8002112:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3304      	adds	r3, #4
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a06      	ldr	r2, [pc, #24]	@ (8002138 <FDCAN_CopyMessageToRAM+0xf4>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	461a      	mov	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	4293      	cmp	r3, r2
 8002128:	d3d6      	bcc.n	80020d8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	3724      	adds	r7, #36	@ 0x24
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	0800667c 	.word	0x0800667c

0800213c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800214a:	e136      	b.n	80023ba <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8128 	beq.w	80023b4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x38>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b12      	cmp	r3, #18
 8002172:	d125      	bne.n	80021c0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4013      	ands	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4013      	ands	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d00b      	beq.n	8002214 <HAL_GPIO_Init+0xd8>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d007      	beq.n	8002214 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002208:	2b11      	cmp	r3, #17
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d130      	bne.n	8002276 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224a:	2201      	movs	r2, #1
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4013      	ands	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 0201 	and.w	r2, r3, #1
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d017      	beq.n	80022ae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4013      	ands	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d07c      	beq.n	80023b4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022ba:	4a47      	ldr	r2, [pc, #284]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3318      	adds	r3, #24
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4013      	ands	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0a9a      	lsrs	r2, r3, #10
 80022e2:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <HAL_GPIO_Init+0x2a0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	f002 0203 	and.w	r2, r2, #3
 80022ec:	00d2      	lsls	r2, r2, #3
 80022ee:	4093      	lsls	r3, r2
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022f6:	4938      	ldr	r1, [pc, #224]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3318      	adds	r3, #24
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002304:	4b34      	ldr	r3, [pc, #208]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43db      	mvns	r3, r3
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002328:	4a2b      	ldr	r2, [pc, #172]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	43db      	mvns	r3, r3
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4013      	ands	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002352:	4a21      	ldr	r2, [pc, #132]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 800235a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800235e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4013      	ands	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800237e:	4a16      	ldr	r2, [pc, #88]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002386:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 8002388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800238c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4013      	ands	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80023ac:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <HAL_GPIO_Init+0x29c>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	3301      	adds	r3, #1
 80023b8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f47f aec1 	bne.w	800214c <HAL_GPIO_Init+0x10>
  }
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	44022000 	.word	0x44022000
 80023dc:	002f7f7f 	.word	0x002f7f7f

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023fc:	e002      	b.n	8002404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43d9      	mvns	r1, r3
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	400b      	ands	r3, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800245a:	4a0c      	ldr	r2, [pc, #48]	@ (800248c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f814 	bl	8002490 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002474:	4a05      	ldr	r2, [pc, #20]	@ (800248c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fa89 	bl	8000994 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	44022000 	.word	0x44022000

08002490 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f000 bc28 	b.w	8002d0c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024bc:	4b94      	ldr	r3, [pc, #592]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f003 0318 	and.w	r3, r3, #24
 80024c4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80024c6:	4b92      	ldr	r3, [pc, #584]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d05b      	beq.n	8002594 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x46>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2b18      	cmp	r3, #24
 80024e6:	d114      	bne.n	8002512 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d111      	bne.n	8002512 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f000 bc08 	b.w	8002d0c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80024fc:	4b84      	ldr	r3, [pc, #528]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	4981      	ldr	r1, [pc, #516]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800250c:	4313      	orrs	r3, r2
 800250e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002510:	e040      	b.n	8002594 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d023      	beq.n	8002562 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800251a:	4b7d      	ldr	r3, [pc, #500]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7c      	ldr	r2, [pc, #496]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fd59 	bl	8000fdc <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800252e:	f7fe fd55 	bl	8000fdc <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e3e5      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002540:	4b73      	ldr	r3, [pc, #460]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800254c:	4b70      	ldr	r3, [pc, #448]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	496d      	ldr	r1, [pc, #436]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800255c:	4313      	orrs	r3, r2
 800255e:	618b      	str	r3, [r1, #24]
 8002560:	e018      	b.n	8002594 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002562:	4b6b      	ldr	r3, [pc, #428]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6a      	ldr	r2, [pc, #424]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe fd35 	bl	8000fdc <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002576:	f7fe fd31 	bl	8000fdc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e3c1      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002588:	4b61      	ldr	r3, [pc, #388]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a0 	beq.w	80026e2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x10c>
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b18      	cmp	r3, #24
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 8092 	bne.w	80026e2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e3a4      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x132>
 80025cc:	4b50      	ldr	r3, [pc, #320]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e058      	b.n	800268c <HAL_RCC_OscConfig+0x1e4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d112      	bne.n	8002608 <HAL_RCC_OscConfig+0x160>
 80025e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80025e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b48      	ldr	r3, [pc, #288]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a47      	ldr	r2, [pc, #284]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80025f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b45      	ldr	r3, [pc, #276]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a44      	ldr	r2, [pc, #272]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e041      	b.n	800268c <HAL_RCC_OscConfig+0x1e4>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x190>
 8002612:	4b3f      	ldr	r3, [pc, #252]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a3e      	ldr	r2, [pc, #248]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b3c      	ldr	r3, [pc, #240]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a3b      	ldr	r2, [pc, #236]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b39      	ldr	r3, [pc, #228]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a38      	ldr	r2, [pc, #224]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e029      	b.n	800268c <HAL_RCC_OscConfig+0x1e4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
 8002642:	4b33      	ldr	r3, [pc, #204]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a32      	ldr	r2, [pc, #200]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b30      	ldr	r3, [pc, #192]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2f      	ldr	r2, [pc, #188]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2c      	ldr	r2, [pc, #176]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e011      	b.n	800268c <HAL_RCC_OscConfig+0x1e4>
 8002668:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a28      	ldr	r2, [pc, #160]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a25      	ldr	r2, [pc, #148]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a22      	ldr	r2, [pc, #136]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 8002686:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fca2 	bl	8000fdc <HAL_GetTick>
 8002698:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800269c:	f7fe fc9e 	bl	8000fdc <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e32e      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ae:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x1f4>
 80026ba:	e012      	b.n	80026e2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fc8e 	bl	8000fdc <HAL_GetTick>
 80026c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80026c4:	f7fe fc8a 	bl	8000fdc <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	@ 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e31a      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_RCC_OscConfig+0x268>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 809a 	beq.w	8002824 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x25a>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b18      	cmp	r3, #24
 80026fa:	d149      	bne.n	8002790 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d146      	bne.n	8002790 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e2fe      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
 800270e:	bf00      	nop
 8002710:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800271a:	4b9a      	ldr	r3, [pc, #616]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0218 	and.w	r2, r3, #24
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	429a      	cmp	r2, r3
 8002728:	d014      	beq.n	8002754 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800272a:	4b96      	ldr	r3, [pc, #600]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0218 	bic.w	r2, r3, #24
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	4993      	ldr	r1, [pc, #588]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800273c:	f000 fdd0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002740:	4b91      	ldr	r3, [pc, #580]	@ (8002988 <HAL_RCC_OscConfig+0x4e0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fbbf 	bl	8000ec8 <HAL_InitTick>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e2db      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fc42 	bl	8000fdc <HAL_GetTick>
 8002758:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800275c:	f7fe fc3e 	bl	8000fdc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e2ce      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276e:	4b85      	ldr	r3, [pc, #532]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800277a:	4b82      	ldr	r3, [pc, #520]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	497e      	ldr	r1, [pc, #504]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800278e:	e049      	b.n	8002824 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002798:	4b7a      	ldr	r3, [pc, #488]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 0218 	bic.w	r2, r3, #24
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4977      	ldr	r1, [pc, #476]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80027aa:	4b76      	ldr	r3, [pc, #472]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a75      	ldr	r2, [pc, #468]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fc11 	bl	8000fdc <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80027be:	f7fe fc0d 	bl	8000fdc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e29d      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80027dc:	4b69      	ldr	r3, [pc, #420]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	4966      	ldr	r1, [pc, #408]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	610b      	str	r3, [r1, #16]
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b64      	ldr	r3, [pc, #400]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a63      	ldr	r2, [pc, #396]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fbed 	bl	8000fdc <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002806:	f7fe fbe9 	bl	8000fdc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e279      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002818:	4b5a      	ldr	r3, [pc, #360]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03c      	beq.n	80028aa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01c      	beq.n	8002872 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002838:	4b52      	ldr	r3, [pc, #328]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800283a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800283e:	4a51      	ldr	r2, [pc, #324]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002840:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002844:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fbc8 	bl	8000fdc <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002850:	f7fe fbc4 	bl	8000fdc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e254      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002862:	4b48      	ldr	r3, [pc, #288]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x3a8>
 8002870:	e01b      	b.n	80028aa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b44      	ldr	r3, [pc, #272]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002878:	4a42      	ldr	r2, [pc, #264]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800287a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800287e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fbab 	bl	8000fdc <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800288a:	f7fe fba7 	bl	8000fdc <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e237      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800289c:	4b39      	ldr	r3, [pc, #228]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800289e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ef      	bne.n	800288a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80d2 	beq.w	8002a5c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028b8:	4b34      	ldr	r3, [pc, #208]	@ (800298c <HAL_RCC_OscConfig+0x4e4>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d118      	bne.n	80028f6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80028c4:	4b31      	ldr	r3, [pc, #196]	@ (800298c <HAL_RCC_OscConfig+0x4e4>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	4a30      	ldr	r2, [pc, #192]	@ (800298c <HAL_RCC_OscConfig+0x4e4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d0:	f7fe fb84 	bl	8000fdc <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d8:	f7fe fb80 	bl	8000fdc <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e210      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80028ea:	4b28      	ldr	r3, [pc, #160]	@ (800298c <HAL_RCC_OscConfig+0x4e4>)
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d108      	bne.n	8002910 <HAL_RCC_OscConfig+0x468>
 80028fe:	4b21      	ldr	r3, [pc, #132]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002904:	4a1f      	ldr	r2, [pc, #124]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800290e:	e074      	b.n	80029fa <HAL_RCC_OscConfig+0x552>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d118      	bne.n	800294a <HAL_RCC_OscConfig+0x4a2>
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800291a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800291e:	4a19      	ldr	r2, [pc, #100]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002928:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800292a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800292e:	4a15      	ldr	r2, [pc, #84]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002934:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002938:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800293a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800293e:	4a11      	ldr	r2, [pc, #68]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002948:	e057      	b.n	80029fa <HAL_RCC_OscConfig+0x552>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d11e      	bne.n	8002990 <HAL_RCC_OscConfig+0x4e8>
 8002952:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002958:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002968:	4a06      	ldr	r2, [pc, #24]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800296a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800296e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002978:	4a02      	ldr	r2, [pc, #8]	@ (8002984 <HAL_RCC_OscConfig+0x4dc>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002982:	e03a      	b.n	80029fa <HAL_RCC_OscConfig+0x552>
 8002984:	44020c00 	.word	0x44020c00
 8002988:	20000004 	.word	0x20000004
 800298c:	44020800 	.word	0x44020800
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b85      	cmp	r3, #133	@ 0x85
 8002996:	d118      	bne.n	80029ca <HAL_RCC_OscConfig+0x522>
 8002998:	4ba2      	ldr	r3, [pc, #648]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 800299a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800299e:	4aa1      	ldr	r2, [pc, #644]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029a8:	4b9e      	ldr	r3, [pc, #632]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ae:	4a9d      	ldr	r2, [pc, #628]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029b8:	4b9a      	ldr	r3, [pc, #616]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029be:	4a99      	ldr	r2, [pc, #612]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029c8:	e017      	b.n	80029fa <HAL_RCC_OscConfig+0x552>
 80029ca:	4b96      	ldr	r3, [pc, #600]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d0:	4a94      	ldr	r2, [pc, #592]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029da:	4b92      	ldr	r3, [pc, #584]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029e0:	4a90      	ldr	r2, [pc, #576]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029f0:	4a8c      	ldr	r2, [pc, #560]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 80029f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe faeb 	bl	8000fdc <HAL_GetTick>
 8002a06:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fae7 	bl	8000fdc <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e175      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a20:	4b80      	ldr	r3, [pc, #512]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ed      	beq.n	8002a0a <HAL_RCC_OscConfig+0x562>
 8002a2e:	e015      	b.n	8002a5c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fad4 	bl	8000fdc <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fad0 	bl	8000fdc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e15e      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4e:	4b75      	ldr	r3, [pc, #468]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ed      	bne.n	8002a38 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d036      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d019      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a70:	4b6c      	ldr	r3, [pc, #432]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6b      	ldr	r2, [pc, #428]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002a76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe faae 	bl	8000fdc <HAL_GetTick>
 8002a80:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a84:	f7fe faaa 	bl	8000fdc <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e13a      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a96:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x5dc>
 8002aa2:	e018      	b.n	8002ad6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5e      	ldr	r2, [pc, #376]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002aaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fa94 	bl	8000fdc <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002ab8:	f7fe fa90 	bl	8000fdc <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e120      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002aca:	4b56      	ldr	r3, [pc, #344]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8115 	beq.w	8002d0a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b18      	cmp	r3, #24
 8002ae4:	f000 80af 	beq.w	8002c46 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	f040 8086 	bne.w	8002bfe <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002af2:	4b4c      	ldr	r3, [pc, #304]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4b      	ldr	r2, [pc, #300]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fa6d 	bl	8000fdc <HAL_GetTick>
 8002b02:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fa69 	bl	8000fdc <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0f9      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b18:	4b42      	ldr	r3, [pc, #264]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002b24:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b2c:	f023 0303 	bic.w	r3, r3, #3
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b38:	0212      	lsls	r2, r2, #8
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	4939      	ldr	r1, [pc, #228]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b50:	3b01      	subs	r3, #1
 8002b52:	025b      	lsls	r3, r3, #9
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b72:	492c      	ldr	r1, [pc, #176]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002b78:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	4a29      	ldr	r2, [pc, #164]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	4a26      	ldr	r2, [pc, #152]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002b8e:	4b25      	ldr	r3, [pc, #148]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	4a24      	ldr	r2, [pc, #144]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002b9a:	4b22      	ldr	r3, [pc, #136]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	f023 020c 	bic.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	491f      	ldr	r1, [pc, #124]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	f023 0220 	bic.w	r2, r3, #32
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	491a      	ldr	r1, [pc, #104]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002bca:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002bd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fa01 	bl	8000fdc <HAL_GetTick>
 8002bda:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002bde:	f7fe f9fd 	bl	8000fdc <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e08d      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x736>
 8002bfc:	e085      	b.n	8002d0a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <HAL_RCC_OscConfig+0x77c>)
 8002c04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe f9e7 	bl	8000fdc <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002c12:	f7fe f9e3 	bl	8000fdc <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d903      	bls.n	8002c28 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e073      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
 8002c24:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c28:	4b3a      	ldr	r3, [pc, #232]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ee      	bne.n	8002c12 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002c34:	4b37      	ldr	r3, [pc, #220]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	4a36      	ldr	r2, [pc, #216]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002c3a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	6293      	str	r3, [r2, #40]	@ 0x28
 8002c44:	e061      	b.n	8002d0a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002c46:	4b33      	ldr	r3, [pc, #204]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c4c:	4b31      	ldr	r3, [pc, #196]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c50:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d031      	beq.n	8002cbe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d12a      	bne.n	8002cbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d122      	bne.n	8002cbe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c82:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d11a      	bne.n	8002cbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d111      	bne.n	8002cbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d108      	bne.n	8002cbe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	0e1b      	lsrs	r3, r3, #24
 8002cb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e024      	b.n	8002d0c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cc2:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc6:	08db      	lsrs	r3, r3, #3
 8002cc8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d01a      	beq.n	8002d0a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002cda:	f023 0310 	bic.w	r3, r3, #16
 8002cde:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f97c 	bl	8000fdc <HAL_GetTick>
 8002ce4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002ce6:	bf00      	nop
 8002ce8:	f7fe f978 	bl	8000fdc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d0f9      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	4a06      	ldr	r2, [pc, #24]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_RCC_OscConfig+0x86c>)
 8002d04:	f043 0310 	orr.w	r3, r3, #16
 8002d08:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	44020c00 	.word	0x44020c00

08002d18 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e19e      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b83      	ldr	r3, [pc, #524]	@ (8002f3c <HAL_RCC_ClockConfig+0x224>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b80      	ldr	r3, [pc, #512]	@ (8002f3c <HAL_RCC_ClockConfig+0x224>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 020f 	bic.w	r2, r3, #15
 8002d42:	497e      	ldr	r1, [pc, #504]	@ (8002f3c <HAL_RCC_ClockConfig+0x224>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f3c <HAL_RCC_ClockConfig+0x224>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e186      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	4b74      	ldr	r3, [pc, #464]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d909      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002d7a:	4b71      	ldr	r3, [pc, #452]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	496d      	ldr	r1, [pc, #436]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d909      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002dac:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4961      	ldr	r1, [pc, #388]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d908      	bls.n	8002dee <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ddc:	4b58      	ldr	r3, [pc, #352]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4955      	ldr	r1, [pc, #340]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4b50      	ldr	r3, [pc, #320]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d908      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 020f 	bic.w	r2, r3, #15
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	494a      	ldr	r1, [pc, #296]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8093 	beq.w	8002f50 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e32:	4b43      	ldr	r3, [pc, #268]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d121      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e113      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d115      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e107      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002e62:	4b37      	ldr	r3, [pc, #220]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0fb      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e72:	4b33      	ldr	r3, [pc, #204]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0f3      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	492c      	ldr	r1, [pc, #176]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e94:	f7fe f8a2 	bl	8000fdc <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe f89a 	bl	8000fdc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0d7      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eba:	4b21      	ldr	r3, [pc, #132]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 0318 	and.w	r3, r3, #24
 8002ec2:	2b18      	cmp	r3, #24
 8002ec4:	d1ee      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x18c>
 8002ec6:	e043      	b.n	8002f50 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d112      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed2:	f7fe f883 	bl	8000fdc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0c0      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee8:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 0318 	and.w	r3, r3, #24
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x1ba>
 8002ef4:	e02c      	b.n	8002f50 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d122      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f00:	f7fe f86c 	bl	8000fdc <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0a9      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <HAL_RCC_ClockConfig+0x228>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 0318 	and.w	r3, r3, #24
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d1ee      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x1e8>
 8002f22:	e015      	b.n	8002f50 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe f85a 	bl	8000fdc <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d906      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e097      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
 8002f3a:	bf00      	nop
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f44:	4b4b      	ldr	r3, [pc, #300]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f003 0318 	and.w	r3, r3, #24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e9      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b44      	ldr	r3, [pc, #272]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d208      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002f6c:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 020f 	bic.w	r2, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	493e      	ldr	r1, [pc, #248]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003078 <HAL_RCC_ClockConfig+0x360>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d210      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <HAL_RCC_ClockConfig+0x360>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 020f 	bic.w	r2, r3, #15
 8002f94:	4938      	ldr	r1, [pc, #224]	@ (8003078 <HAL_RCC_ClockConfig+0x360>)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9c:	4b36      	ldr	r3, [pc, #216]	@ (8003078 <HAL_RCC_ClockConfig+0x360>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e05d      	b.n	800306a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d208      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002fca:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	4927      	ldr	r1, [pc, #156]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d012      	beq.n	800300e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d209      	bcs.n	800300e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	491a      	ldr	r1, [pc, #104]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 800300a:	4313      	orrs	r3, r2
 800300c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003028:	429a      	cmp	r2, r3
 800302a:	d209      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800302c:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	490e      	ldr	r1, [pc, #56]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003040:	f000 f822 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490b      	ldr	r1, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x364>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <HAL_RCC_ClockConfig+0x368>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_ClockConfig+0x36c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd ff32 	bl	8000ec8 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
 8003066:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003068:	7afb      	ldrb	r3, [r7, #11]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	44020c00 	.word	0x44020c00
 8003078:	40022000 	.word	0x40022000
 800307c:	08006664 	.word	0x08006664
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800308e:	4b8c      	ldr	r3, [pc, #560]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 0318 	and.w	r3, r3, #24
 8003096:	2b08      	cmp	r3, #8
 8003098:	d102      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800309a:	4b8a      	ldr	r3, [pc, #552]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x23c>)
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	e107      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a0:	4b87      	ldr	r3, [pc, #540]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0318 	and.w	r3, r3, #24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80030ac:	4b84      	ldr	r3, [pc, #528]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80030b8:	4b81      	ldr	r3, [pc, #516]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	08db      	lsrs	r3, r3, #3
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	4a81      	ldr	r2, [pc, #516]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x240>)
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e0f1      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80030cc:	4b7e      	ldr	r3, [pc, #504]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x240>)
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e0ee      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030d2:	4b7b      	ldr	r3, [pc, #492]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 0318 	and.w	r3, r3, #24
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030de:	4b7b      	ldr	r3, [pc, #492]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x244>)
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e0e5      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e4:	4b76      	ldr	r3, [pc, #472]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 0318 	and.w	r3, r3, #24
 80030ec:	2b18      	cmp	r3, #24
 80030ee:	f040 80dd 	bne.w	80032ac <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030f2:	4b73      	ldr	r3, [pc, #460]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80030fc:	4b70      	ldr	r3, [pc, #448]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003106:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003108:	4b6d      	ldr	r3, [pc, #436]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003114:	4b6a      	ldr	r3, [pc, #424]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80b7 	beq.w	80032a6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0xbe>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d056      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x16a>
 8003144:	e077      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003146:	4b5e      	ldr	r3, [pc, #376]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02d      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003152:	4b5b      	ldr	r3, [pc, #364]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	4a5a      	ldr	r2, [pc, #360]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x240>)
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317c:	4b50      	ldr	r3, [pc, #320]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800317e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800318c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003190:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80032d0 <HAL_RCC_GetSysClockFreq+0x248>
 8003194:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003198:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800319c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80031ac:	e065      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x24c>
 80031bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c0:	4b3f      	ldr	r3, [pc, #252]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 80031c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80032d0 <HAL_RCC_GetSysClockFreq+0x248>
 80031d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ec:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80031f0:	e043      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80032d8 <HAL_RCC_GetSysClockFreq+0x250>
 8003200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003204:	4b2e      	ldr	r3, [pc, #184]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003214:	ed97 6a02 	vldr	s12, [r7, #8]
 8003218:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80032d0 <HAL_RCC_GetSysClockFreq+0x248>
 800321c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003220:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003228:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003234:	e021      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003240:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032dc <HAL_RCC_GetSysClockFreq+0x254>
 8003244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003248:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003258:	ed97 6a02 	vldr	s12, [r7, #8]
 800325c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80032d0 <HAL_RCC_GetSysClockFreq+0x248>
 8003260:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003264:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800326c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003274:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003278:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800327a:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x238>)
 800327c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327e:	0a5b      	lsrs	r3, r3, #9
 8003280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003284:	3301      	adds	r3, #1
 8003286:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003292:	edd7 6a06 	vldr	s13, [r7, #24]
 8003296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800329a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800329e:	ee17 3a90 	vmov	r3, s15
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e004      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	e001      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x240>)
 80032ae:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80032b0:	69fb      	ldr	r3, [r7, #28]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	@ 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	44020c00 	.word	0x44020c00
 80032c4:	003d0900 	.word	0x003d0900
 80032c8:	03d09000 	.word	0x03d09000
 80032cc:	016e3600 	.word	0x016e3600
 80032d0:	46000000 	.word	0x46000000
 80032d4:	4c742400 	.word	0x4c742400
 80032d8:	4bb71b00 	.word	0x4bb71b00
 80032dc:	4a742400 	.word	0x4a742400

080032e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032e4:	f7ff fed0 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b08      	ldr	r3, [pc, #32]	@ (800330c <HAL_RCC_GetHCLKFreq+0x2c>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80032ee:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032f2:	4907      	ldr	r1, [pc, #28]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x30>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80032f6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a05      	ldr	r2, [pc, #20]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x34>)
 8003300:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003302:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x34>)
 8003304:	681b      	ldr	r3, [r3, #0]
}
 8003306:	4618      	mov	r0, r3
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	44020c00 	.word	0x44020c00
 8003310:	08006664 	.word	0x08006664
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800331c:	f7ff ffe0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4904      	ldr	r1, [pc, #16]	@ (8003340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	44020c00 	.word	0x44020c00
 8003340:	08006674 	.word	0x08006674

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003348:	f7ff ffca 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4904      	ldr	r1, [pc, #16]	@ (800336c <HAL_RCC_GetPCLK2Freq+0x28>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	44020c00 	.word	0x44020c00
 800336c:	08006674 	.word	0x08006674

08003370 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003374:	f7ff ffb4 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_GetPCLK3Freq+0x24>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	0b1b      	lsrs	r3, r3, #12
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4904      	ldr	r1, [pc, #16]	@ (8003398 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	44020c00 	.word	0x44020c00
 8003398:	08006674 	.word	0x08006674

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b0aa      	sub	sp, #168	@ 0xa8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80033c0:	2500      	movs	r5, #0
 80033c2:	ea54 0305 	orrs.w	r3, r4, r5
 80033c6:	d00b      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80033c8:	4bb8      	ldr	r3, [pc, #736]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ce:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80033d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d8:	4ab4      	ldr	r2, [pc, #720]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f002 0801 	and.w	r8, r2, #1
 80033ec:	f04f 0900 	mov.w	r9, #0
 80033f0:	ea58 0309 	orrs.w	r3, r8, r9
 80033f4:	d038      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80033f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d819      	bhi.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003400:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	0800343d 	.word	0x0800343d
 800340c:	08003421 	.word	0x08003421
 8003410:	08003435 	.word	0x08003435
 8003414:	0800343d 	.word	0x0800343d
 8003418:	0800343d 	.word	0x0800343d
 800341c:	0800343d 	.word	0x0800343d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003420:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003424:	3308      	adds	r3, #8
 8003426:	4618      	mov	r0, r3
 8003428:	f001 fff2 	bl	8005410 <RCCEx_PLL2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003432:	e004      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800343a:	e000      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 800343c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003446:	4b99      	ldr	r3, [pc, #612]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800344c:	f023 0107 	bic.w	r1, r3, #7
 8003450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003456:	4a95      	ldr	r2, [pc, #596]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003458:	430b      	orrs	r3, r1
 800345a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003464:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003468:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f002 0a02 	and.w	sl, r2, #2
 8003474:	f04f 0b00 	mov.w	fp, #0
 8003478:	ea5a 030b 	orrs.w	r3, sl, fp
 800347c:	d03c      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800347e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	2b28      	cmp	r3, #40	@ 0x28
 8003486:	d01b      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003488:	2b28      	cmp	r3, #40	@ 0x28
 800348a:	d815      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d019      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003490:	2b20      	cmp	r3, #32
 8003492:	d811      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003494:	2b18      	cmp	r3, #24
 8003496:	d017      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003498:	2b18      	cmp	r3, #24
 800349a:	d80d      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d109      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a8:	3308      	adds	r3, #8
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 ffb0 	bl	8005410 <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80034b6:	e00a      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034be:	e006      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034c0:	bf00      	nop
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034c4:	bf00      	nop
 80034c6:	e002      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80034cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80034d6:	4b75      	ldr	r3, [pc, #468]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034dc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80034e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	4a71      	ldr	r2, [pc, #452]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034ee:	e003      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f002 0304 	and.w	r3, r2, #4
 8003504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800350e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003512:	460b      	mov	r3, r1
 8003514:	4313      	orrs	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003518:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800351c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003522:	d01e      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003524:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003528:	d817      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800352a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352e:	d01a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003534:	d811      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003536:	2bc0      	cmp	r3, #192	@ 0xc0
 8003538:	d017      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800353a:	2bc0      	cmp	r3, #192	@ 0xc0
 800353c:	d80d      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003542:	2b40      	cmp	r3, #64	@ 0x40
 8003544:	d109      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003546:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800354a:	3308      	adds	r3, #8
 800354c:	4618      	mov	r0, r3
 800354e:	f001 ff5f 	bl	8005410 <RCCEx_PLL2_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003558:	e00a      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003560:	e006      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003562:	bf00      	nop
 8003564:	e004      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800356e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003570:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10c      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003578:	4b4c      	ldr	r3, [pc, #304]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800357a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800357e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003582:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	4a48      	ldr	r2, [pc, #288]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800358a:	430b      	orrs	r3, r1
 800358c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003596:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800359a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80035a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d043      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80035ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035c4:	d021      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035ca:	d81a      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80035cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035d0:	d01d      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x272>
 80035d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035d6:	d814      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80035d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035dc:	d019      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80035de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035e2:	d80e      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d016      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80035e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035ec:	d109      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035f2:	3308      	adds	r3, #8
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 ff0b 	bl	8005410 <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003600:	e00a      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003608:	e006      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800360a:	bf00      	nop
 800360c:	e004      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003618:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10c      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003620:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003626:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800362a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	4a1e      	ldr	r2, [pc, #120]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003632:	430b      	orrs	r3, r1
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800363e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003642:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800364e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003650:	2300      	movs	r3, #0
 8003652:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003654:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003658:	460b      	mov	r3, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	d03e      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800365e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003668:	d01b      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800366a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800366e:	d814      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003674:	d017      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800367a:	d80e      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d017      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003684:	d109      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003686:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800368a:	3308      	adds	r3, #8
 800368c:	4618      	mov	r0, r3
 800368e:	f001 febf 	bl	8005410 <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003698:	e00b      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036a0:	e007      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80036a2:	bf00      	nop
 80036a4:	e005      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80036a6:	bf00      	nop
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80036aa:	bf00      	nop
 80036ac:	44020c00 	.word	0x44020c00
        break;
 80036b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80036ba:	4ba5      	ldr	r3, [pc, #660]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036c0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80036c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	4aa1      	ldr	r2, [pc, #644]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036cc:	430b      	orrs	r3, r1
 80036ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80036d2:	e003      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ea:	2300      	movs	r3, #0
 80036ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80036ee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d03b      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80036f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003702:	d01b      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003704:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003708:	d814      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800370a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800370e:	d017      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003710:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003714:	d80e      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d014      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800371a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800371e:	d109      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003720:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003724:	3308      	adds	r3, #8
 8003726:	4618      	mov	r0, r3
 8003728:	f001 fe72 	bl	8005410 <RCCEx_PLL2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003732:	e008      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800373a:	e004      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800373c:	bf00      	nop
 800373e:	e002      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003746:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800374e:	4b80      	ldr	r3, [pc, #512]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003754:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003758:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800375c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375e:	4a7c      	ldr	r2, [pc, #496]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003760:	430b      	orrs	r3, r1
 8003762:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003766:	e003      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800376c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800377c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800377e:	2300      	movs	r3, #0
 8003780:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003782:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003786:	460b      	mov	r3, r1
 8003788:	4313      	orrs	r3, r2
 800378a:	d033      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800378c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003796:	d015      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800379c:	d80e      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80037a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a6:	d109      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ac:	3308      	adds	r3, #8
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fe2e 	bl	8005410 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80037ba:	e006      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037c2:	e002      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80037c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80037d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037d8:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80037dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037f0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80037f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	2100      	movs	r1, #0
 80037fe:	6639      	str	r1, [r7, #96]	@ 0x60
 8003800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003804:	667b      	str	r3, [r7, #100]	@ 0x64
 8003806:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d033      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003810:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800381a:	d015      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800381c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003820:	d80e      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d012      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800382a:	d109      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800382c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003830:	3308      	adds	r3, #8
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fdec 	bl	8005410 <RCCEx_PLL2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800383e:	e006      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003846:	e002      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800384c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800384e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003856:	4b3e      	ldr	r3, [pc, #248]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800385c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003860:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003866:	4a3a      	ldr	r2, [pc, #232]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003868:	430b      	orrs	r3, r1
 800386a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003874:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003878:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	2100      	movs	r1, #0
 8003882:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800388a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800388e:	460b      	mov	r3, r1
 8003890:	4313      	orrs	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003894:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a2d      	ldr	r2, [pc, #180]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800389a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800389e:	61d3      	str	r3, [r2, #28]
 80038a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ac:	4a28      	ldr	r2, [pc, #160]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038ae:	430b      	orrs	r3, r1
 80038b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80038be:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c0:	2300      	movs	r3, #0
 80038c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80038c4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80038c8:	460b      	mov	r3, r1
 80038ca:	4313      	orrs	r3, r2
 80038cc:	d046      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80038ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80038d8:	d021      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80038da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80038de:	d81a      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e4:	d01d      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ea:	d814      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80038ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038f0:	d019      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80038f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038f6:	d80e      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d016      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80038fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003900:	d109      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003902:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003906:	3308      	adds	r3, #8
 8003908:	4618      	mov	r0, r3
 800390a:	f001 fd81 	bl	8005410 <RCCEx_PLL2_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003914:	e00a      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10f      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003936:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800393a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800393e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003944:	4a02      	ldr	r2, [pc, #8]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003946:	430b      	orrs	r3, r1
 8003948:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800394e:	bf00      	nop
 8003950:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003958:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800395c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800396a:	2300      	movs	r3, #0
 800396c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800396e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d043      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003978:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003982:	d021      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003984:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003988:	d81a      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800398a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398e:	d01d      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003994:	d814      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800399a:	d019      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 800399c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039a0:	d80e      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	d109      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039b0:	3308      	adds	r3, #8
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 fd2c 	bl	8005410 <RCCEx_PLL2_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80039be:	e00a      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039c6:	e006      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039c8:	bf00      	nop
 80039ca:	e004      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039cc:	bf00      	nop
 80039ce:	e002      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039d0:	bf00      	nop
 80039d2:	e000      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80039d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80039de:	4bb6      	ldr	r3, [pc, #728]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80039e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	4ab2      	ldr	r2, [pc, #712]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80039f6:	e003      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a0e:	2300      	movs	r3, #0
 8003a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a16:	460b      	mov	r3, r1
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	d030      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d80f      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d211      	bcs.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d911      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d109      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a36:	3308      	adds	r3, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fce9 	bl	8005410 <RCCEx_PLL2_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a44:	e006      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a54:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10c      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a5c:	4b96      	ldr	r3, [pc, #600]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a62:	f023 0107 	bic.w	r1, r3, #7
 8003a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a6c:	4a92      	ldr	r2, [pc, #584]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a76:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a7a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	2100      	movs	r1, #0
 8003a88:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a94:	460b      	mov	r3, r1
 8003a96:	4313      	orrs	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003abe:	4b7e      	ldr	r3, [pc, #504]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ac4:	f023 0108 	bic.w	r1, r3, #8
 8003ac8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ace:	4a7a      	ldr	r2, [pc, #488]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003adc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aee:	2300      	movs	r3, #0
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003af6:	460b      	mov	r3, r1
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f000 80b0 	beq.w	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003afe:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b0a:	f7fd fa67 	bl	8000fdc <HAL_GetTick>
 8003b0e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b12:	e00b      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fd fa62 	bl	8000fdc <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d903      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b2a:	e005      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b2c:	4b63      	ldr	r3, [pc, #396]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ed      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003b38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f040 808a 	bne.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b42:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d022      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b5e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d01b      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b66:	4b54      	ldr	r3, [pc, #336]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b74:	4b50      	ldr	r3, [pc, #320]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b84:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b8a:	4a4b      	ldr	r2, [pc, #300]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b94:	4a48      	ldr	r2, [pc, #288]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d019      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd fa17 	bl	8000fdc <HAL_GetTick>
 8003bae:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb2:	e00d      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fa12 	bl	8000fdc <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d903      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003bce:	e006      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd0:	4b39      	ldr	r3, [pc, #228]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ea      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003bde:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d132      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003bf6:	4b30      	ldr	r3, [pc, #192]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	61d3      	str	r3, [r2, #28]
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003c16:	4b28      	ldr	r3, [pc, #160]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4a27      	ldr	r2, [pc, #156]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c20:	61d3      	str	r3, [r2, #28]
 8003c22:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c28:	4a23      	ldr	r2, [pc, #140]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c32:	4b21      	ldr	r3, [pc, #132]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c34:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c44:	430b      	orrs	r3, r1
 8003c46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c4a:	e008      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c4c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c50:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c5a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c74:	460b      	mov	r3, r1
 8003c76:	4313      	orrs	r3, r2
 8003c78:	d038      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003c7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c80:	2b30      	cmp	r3, #48	@ 0x30
 8003c82:	d014      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003c84:	2b30      	cmp	r3, #48	@ 0x30
 8003c86:	d80e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d012      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d80a      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c98:	4b07      	ldr	r3, [pc, #28]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	4a06      	ldr	r2, [pc, #24]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00d      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cac:	e009      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e007      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e005      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003cb6:	bf00      	nop
 8003cb8:	44020c00 	.word	0x44020c00
 8003cbc:	44020800 	.word	0x44020800
        break;
 8003cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003cca:	4bb5      	ldr	r3, [pc, #724]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	49b1      	ldr	r1, [pc, #708]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003ce2:	e003      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ce8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003cec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d03c      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d81d      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d2d 	.word	0x08003d2d
 8003d1c:	08003d3b 	.word	0x08003d3b
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003d57 	.word	0x08003d57
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	4a9b      	ldr	r2, [pc, #620]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d36:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d38:	e00e      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d3e:	3308      	adds	r3, #8
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 fb65 	bl	8005410 <RCCEx_PLL2_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d4c:	e004      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003d60:	4b8f      	ldr	r3, [pc, #572]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d66:	f023 0207 	bic.w	r2, r3, #7
 8003d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d70:	498b      	ldr	r1, [pc, #556]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d7e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d03c      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d01f      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d819      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003dac:	2b18      	cmp	r3, #24
 8003dae:	d01d      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003db0:	2b18      	cmp	r3, #24
 8003db2:	d815      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d007      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003dbc:	e010      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbe:	4b78      	ldr	r3, [pc, #480]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	4a77      	ldr	r2, [pc, #476]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003dca:	e010      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fb1c 	bl	8005410 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003dde:	e006      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003de6:	e002      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003de8:	bf00      	nop
 8003dea:	e000      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003df6:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dfc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4966      	ldr	r1, [pc, #408]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003e18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	d03e      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e44:	d819      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003e46:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e48:	d01d      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e4c:	d815      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	d007      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003e56:	e010      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e58:	4b51      	ldr	r3, [pc, #324]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	4a50      	ldr	r2, [pc, #320]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e64:	e010      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 facf 	bl	8005410 <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003e90:	4b43      	ldr	r3, [pc, #268]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e96:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea0:	493f      	ldr	r1, [pc, #252]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003eae:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003eb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	d038      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ede:	d815      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee8:	d110      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eea:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ef6:	e00e      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003efc:	3308      	adds	r3, #8
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fa86 	bl	8005410 <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003f1e:	4b20      	ldr	r3, [pc, #128]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2e:	491c      	ldr	r1, [pc, #112]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003f36:	e003      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f3c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6039      	str	r1, [r7, #0]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d039      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003f5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f62:	2b30      	cmp	r3, #48	@ 0x30
 8003f64:	d01e      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003f66:	2b30      	cmp	r3, #48	@ 0x30
 8003f68:	d815      	bhi.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d002      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d007      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003f72:	e010      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f78:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f80:	e011      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f86:	3308      	adds	r3, #8
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 fa41 	bl	8005410 <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003f94:	e007      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003f9e:	bf00      	nop
 8003fa0:	44020c00 	.word	0x44020c00
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003fae:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbe:	4908      	ldr	r1, [pc, #32]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fcc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003fd0:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	37a8      	adds	r7, #168	@ 0xa8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fde:	bf00      	nop
 8003fe0:	44020c00 	.word	0x44020c00

08003fe4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b08b      	sub	sp, #44	@ 0x2c
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003fec:	4bae      	ldr	r3, [pc, #696]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003ff6:	4bac      	ldr	r3, [pc, #688]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004000:	4ba9      	ldr	r3, [pc, #676]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800400a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800400c:	4ba6      	ldr	r3, [pc, #664]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004018:	4ba3      	ldr	r3, [pc, #652]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004030:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8126 	beq.w	8004288 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b03      	cmp	r3, #3
 8004040:	d053      	beq.n	80040ea <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d86f      	bhi.n	8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d003      	beq.n	8004056 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d02b      	beq.n	80040ac <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004054:	e068      	b.n	8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004056:	4b94      	ldr	r3, [pc, #592]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	4a92      	ldr	r2, [pc, #584]	@ (80042ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408a:	ed97 6a04 	vldr	s12, [r7, #16]
 800408e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80042b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800409e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80040aa:	e068      	b.n	800417e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80042b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80040cc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80040d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80040e8:	e049      	b.n	800417e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80042b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80040f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a04 	vldr	s12, [r7, #16]
 800410a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80042b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004126:	e02a      	b.n	800417e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004128:	4b5f      	ldr	r3, [pc, #380]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	08db      	lsrs	r3, r3, #3
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	4a5e      	ldr	r2, [pc, #376]	@ (80042ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004160:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80042b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004178:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800417c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800417e:	4b4a      	ldr	r3, [pc, #296]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800418a:	d121      	bne.n	80041d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800418c:	4b46      	ldr	r3, [pc, #280]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d017      	beq.n	80041c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004198:	4b43      	ldr	r3, [pc, #268]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800419a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80041aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80041b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e006      	b.n	80041d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e002      	b.n	80041d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80041d6:	4b34      	ldr	r3, [pc, #208]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e2:	d121      	bne.n	8004228 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80041e4:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d017      	beq.n	8004220 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041f0:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004206:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800420a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800420e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004216:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	e006      	b.n	800422e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	e002      	b.n	800422e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800422e:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800423a:	d121      	bne.n	8004280 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800423c:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d017      	beq.n	8004278 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004248:	4b17      	ldr	r3, [pc, #92]	@ (80042a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800424a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800425a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800425e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004262:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004276:	e010      	b.n	800429a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
}
 800427e:	e00c      	b.n	800429a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	609a      	str	r2, [r3, #8]
}
 8004286:	e008      	b.n	800429a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
}
 800429a:	bf00      	nop
 800429c:	372c      	adds	r7, #44	@ 0x2c
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	44020c00 	.word	0x44020c00
 80042ac:	03d09000 	.word	0x03d09000
 80042b0:	46000000 	.word	0x46000000
 80042b4:	4a742400 	.word	0x4a742400
 80042b8:	4bb71b00 	.word	0x4bb71b00

080042bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80042bc:	b480      	push	{r7}
 80042be:	b08b      	sub	sp, #44	@ 0x2c
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80042c4:	4bae      	ldr	r3, [pc, #696]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042cc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80042ce:	4bac      	ldr	r3, [pc, #688]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80042d8:	4ba9      	ldr	r3, [pc, #676]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80042e4:	4ba6      	ldr	r3, [pc, #664]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80042f0:	4ba3      	ldr	r3, [pc, #652]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	08db      	lsrs	r3, r3, #3
 80042f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	fb02 f303 	mul.w	r3, r2, r3
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004308:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8126 	beq.w	8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d053      	beq.n	80043c2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d86f      	bhi.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d003      	beq.n	800432e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d02b      	beq.n	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800432c:	e068      	b.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800432e:	4b94      	ldr	r3, [pc, #592]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	08db      	lsrs	r3, r3, #3
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	4a92      	ldr	r2, [pc, #584]	@ (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800433a:	fa22 f303 	lsr.w	r3, r2, r3
 800433e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a04 	vldr	s12, [r7, #16]
 8004366:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004382:	e068      	b.n	8004456 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800458c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80043a4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80043a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80043c0:	e049      	b.n	8004456 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043cc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80043d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a04 	vldr	s12, [r7, #16]
 80043e2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80043fe:	e02a      	b.n	8004456 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004400:	4b5f      	ldr	r3, [pc, #380]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	4a5e      	ldr	r2, [pc, #376]	@ (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004434:	ed97 6a04 	vldr	s12, [r7, #16]
 8004438:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800443c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004450:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004454:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004456:	4b4a      	ldr	r3, [pc, #296]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800445e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004462:	d121      	bne.n	80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004464:	4b46      	ldr	r3, [pc, #280]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d017      	beq.n	80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004470:	4b43      	ldr	r3, [pc, #268]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004474:	0a5b      	lsrs	r3, r3, #9
 8004476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004486:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800448a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800448e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004496:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e006      	b.n	80044ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044ae:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ba:	d121      	bne.n	8004500 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80044bc:	4b30      	ldr	r3, [pc, #192]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d017      	beq.n	80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80044c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80044da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80044e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80044e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ee:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	e006      	b.n	8004506 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	e002      	b.n	8004506 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004506:	4b1e      	ldr	r3, [pc, #120]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800450e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004512:	d121      	bne.n	8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004514:	4b1a      	ldr	r3, [pc, #104]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d017      	beq.n	8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004520:	4b17      	ldr	r3, [pc, #92]	@ (8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004524:	0e1b      	lsrs	r3, r3, #24
 8004526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004536:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800453a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800453e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004546:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800454e:	e010      	b.n	8004572 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
}
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
}
 800455e:	e008      	b.n	8004572 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	372c      	adds	r7, #44	@ 0x2c
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	44020c00 	.word	0x44020c00
 8004584:	03d09000 	.word	0x03d09000
 8004588:	46000000 	.word	0x46000000
 800458c:	4a742400 	.word	0x4a742400
 8004590:	4bb71b00 	.word	0x4bb71b00

08004594 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	@ 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800459e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80045a6:	430b      	orrs	r3, r1
 80045a8:	d14b      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80045aa:	4bc4      	ldr	r3, [pc, #784]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80045b6:	4bc1      	ldr	r3, [pc, #772]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d108      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ca:	d104      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80045cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d2:	f000 bf14 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80045d6:	4bb9      	ldr	r3, [pc, #740]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e4:	d108      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ec:	d104      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80045ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f4:	f000 bf03 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80045f8:	4bb0      	ldr	r3, [pc, #704]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004604:	d119      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800460c:	d115      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800460e:	4bab      	ldr	r3, [pc, #684]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461a:	d30a      	bcc.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800461c:	4ba7      	ldr	r3, [pc, #668]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004626:	4aa6      	ldr	r2, [pc, #664]	@ (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800462e:	f000 bee6 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004636:	f000 bee2 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463e:	f000 bede 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004646:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 800464a:	ea52 0301 	orrs.w	r3, r2, r1
 800464e:	f000 838e 	beq.w	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004656:	2a01      	cmp	r2, #1
 8004658:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 800465c:	f080 86cc 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004664:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004668:	ea52 0301 	orrs.w	r3, r2, r1
 800466c:	f000 82aa 	beq.w	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004674:	2a01      	cmp	r2, #1
 8004676:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 800467a:	f080 86bd 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800467e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004682:	f1a3 0110 	sub.w	r1, r3, #16
 8004686:	ea52 0301 	orrs.w	r3, r2, r1
 800468a:	f000 8681 	beq.w	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800468e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004692:	2a01      	cmp	r2, #1
 8004694:	f173 0310 	sbcs.w	r3, r3, #16
 8004698:	f080 86ae 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800469c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a0:	1f19      	subs	r1, r3, #4
 80046a2:	ea52 0301 	orrs.w	r3, r2, r1
 80046a6:	f000 84b1 	beq.w	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80046aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ae:	2a01      	cmp	r2, #1
 80046b0:	f173 0304 	sbcs.w	r3, r3, #4
 80046b4:	f080 86a0 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046bc:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80046c0:	430b      	orrs	r3, r1
 80046c2:	f000 85aa 	beq.w	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80046c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ca:	497e      	ldr	r1, [pc, #504]	@ (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80046cc:	428a      	cmp	r2, r1
 80046ce:	f173 0300 	sbcs.w	r3, r3, #0
 80046d2:	f080 8691 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046da:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80046de:	430b      	orrs	r3, r1
 80046e0:	f000 8532 	beq.w	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80046e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e8:	4977      	ldr	r1, [pc, #476]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80046ea:	428a      	cmp	r2, r1
 80046ec:	f173 0300 	sbcs.w	r3, r3, #0
 80046f0:	f080 8682 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80046fc:	430b      	orrs	r3, r1
 80046fe:	f000 84bc 	beq.w	800507a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004706:	4971      	ldr	r1, [pc, #452]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004708:	428a      	cmp	r2, r1
 800470a:	f173 0300 	sbcs.w	r3, r3, #0
 800470e:	f080 8673 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004716:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800471a:	430b      	orrs	r3, r1
 800471c:	f000 85f2 	beq.w	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004724:	496a      	ldr	r1, [pc, #424]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004726:	428a      	cmp	r2, r1
 8004728:	f173 0300 	sbcs.w	r3, r3, #0
 800472c:	f080 8664 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004734:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004738:	430b      	orrs	r3, r1
 800473a:	f000 81e5 	beq.w	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800473e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004742:	4964      	ldr	r1, [pc, #400]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004744:	428a      	cmp	r2, r1
 8004746:	f173 0300 	sbcs.w	r3, r3, #0
 800474a:	f080 8655 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800474e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004752:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004756:	430b      	orrs	r3, r1
 8004758:	f000 83cc 	beq.w	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800475c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004760:	495d      	ldr	r1, [pc, #372]	@ (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004762:	428a      	cmp	r2, r1
 8004764:	f173 0300 	sbcs.w	r3, r3, #0
 8004768:	f080 8646 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800476c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004770:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004774:	430b      	orrs	r3, r1
 8004776:	f000 8331 	beq.w	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800477a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477e:	4957      	ldr	r1, [pc, #348]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004780:	428a      	cmp	r2, r1
 8004782:	f173 0300 	sbcs.w	r3, r3, #0
 8004786:	f080 8637 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800478a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800478e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004792:	430b      	orrs	r3, r1
 8004794:	f000 82bb 	beq.w	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800479c:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80047a0:	f173 0300 	sbcs.w	r3, r3, #0
 80047a4:	f080 8628 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80047b0:	430b      	orrs	r3, r1
 80047b2:	f000 826d 	beq.w	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80047b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ba:	f244 0101 	movw	r1, #16385	@ 0x4001
 80047be:	428a      	cmp	r2, r1
 80047c0:	f173 0300 	sbcs.w	r3, r3, #0
 80047c4:	f080 8618 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80047d0:	430b      	orrs	r3, r1
 80047d2:	f000 821e 	beq.w	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80047d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047da:	f242 0101 	movw	r1, #8193	@ 0x2001
 80047de:	428a      	cmp	r2, r1
 80047e0:	f173 0300 	sbcs.w	r3, r3, #0
 80047e4:	f080 8608 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80047e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ec:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80047f0:	430b      	orrs	r3, r1
 80047f2:	f000 8137 	beq.w	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80047f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047fa:	f241 0101 	movw	r1, #4097	@ 0x1001
 80047fe:	428a      	cmp	r2, r1
 8004800:	f173 0300 	sbcs.w	r3, r3, #0
 8004804:	f080 85f8 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800480c:	1f11      	subs	r1, r2, #4
 800480e:	430b      	orrs	r3, r1
 8004810:	f000 80d2 	beq.w	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004818:	2a05      	cmp	r2, #5
 800481a:	f173 0300 	sbcs.w	r3, r3, #0
 800481e:	f080 85eb 	bcs.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004826:	1e51      	subs	r1, r2, #1
 8004828:	430b      	orrs	r3, r1
 800482a:	d006      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800482c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004830:	1e91      	subs	r1, r2, #2
 8004832:	430b      	orrs	r3, r1
 8004834:	d06c      	beq.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004836:	f000 bddf 	b.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800483a:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800483c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe fd7a 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8004850:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004852:	f000 bdd4 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004856:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004862:	d10a      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	2b01      	cmp	r3, #1
 8004868:	d107      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fd24 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004878:	e048      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d10c      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	2b03      	cmp	r3, #3
 800488a:	d109      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	08db      	lsrs	r3, r3, #3
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489e:	e035      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80048a0:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d119      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b8:	e028      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80048ba:	bf00      	nop
 80048bc:	44020c00 	.word	0x44020c00
 80048c0:	016e3600 	.word	0x016e3600
 80048c4:	20000001 	.word	0x20000001
 80048c8:	10000001 	.word	0x10000001
 80048cc:	08000001 	.word	0x08000001
 80048d0:	04000001 	.word	0x04000001
 80048d4:	00200001 	.word	0x00200001
 80048d8:	00040001 	.word	0x00040001
 80048dc:	00020001 	.word	0x00020001
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80048e8:	4b9f      	ldr	r3, [pc, #636]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d106      	bne.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d103      	bne.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80048fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004902:	e003      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004908:	f000 bd79 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800490c:	f000 bd77 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004910:	4b95      	ldr	r3, [pc, #596]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800491a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004922:	f7fe fcf9 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004926:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004928:	f000 bd69 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800492c:	4b8e      	ldr	r3, [pc, #568]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004938:	d10a      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	2b08      	cmp	r3, #8
 800493e:	d107      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fcb9 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800494e:	e031      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004950:	4b85      	ldr	r3, [pc, #532]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d10c      	bne.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	2b18      	cmp	r3, #24
 8004960:	d109      	bne.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004962:	4b81      	ldr	r3, [pc, #516]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	4a7f      	ldr	r2, [pc, #508]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004974:	e01e      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004976:	4b7c      	ldr	r3, [pc, #496]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800497e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004982:	d105      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	2b20      	cmp	r3, #32
 8004988:	d102      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800498a:	4b79      	ldr	r3, [pc, #484]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800498e:	e011      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004990:	4b75      	ldr	r3, [pc, #468]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d106      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	2b28      	cmp	r3, #40	@ 0x28
 80049a2:	d103      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80049a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049aa:	e003      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049b0:	f000 bd25 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80049b4:	f000 bd23 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80049b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049be:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80049ca:	f7fe fca5 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80049ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80049d0:	f000 bd15 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80049d4:	4b64      	ldr	r3, [pc, #400]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049e0:	d10a      	bne.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	2b40      	cmp	r3, #64	@ 0x40
 80049e6:	d107      	bne.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049e8:	f107 030c 	add.w	r3, r7, #12
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fc65 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f6:	e033      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80049f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d10c      	bne.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a08:	d109      	bne.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a0a:	4b57      	ldr	r3, [pc, #348]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	4a55      	ldr	r2, [pc, #340]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1c:	e020      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004a1e:	4b52      	ldr	r3, [pc, #328]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a32:	d102      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004a34:	4b4e      	ldr	r3, [pc, #312]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a38:	e012      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d107      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a4e:	d103      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a56:	e003      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a5c:	f000 bccf 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a60:	f000 bccd 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a64:	4b40      	ldr	r3, [pc, #256]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a6a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004a76:	f7fe fc7b 	bl	8003370 <HAL_RCC_GetPCLK3Freq>
 8004a7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a7c:	f000 bcbf 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a86:	d108      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a88:	f107 030c 	add.w	r3, r7, #12
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fc15 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a96:	f000 bcb2 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004a9a:	4b33      	ldr	r3, [pc, #204]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d10d      	bne.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004aae:	4b2e      	ldr	r3, [pc, #184]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	08db      	lsrs	r3, r3, #3
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004aba:	fa22 f303 	lsr.w	r3, r2, r3
 8004abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac0:	e020      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004ac2:	4b29      	ldr	r3, [pc, #164]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ace:	d106      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ad6:	d102      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004ad8:	4b25      	ldr	r3, [pc, #148]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004adc:	e012      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004ade:	4b22      	ldr	r3, [pc, #136]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d107      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004af2:	d103      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b00:	f000 bc7d 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b04:	f000 bc7b 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004b08:	4b17      	ldr	r3, [pc, #92]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004b1a:	f7fe fbe1 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8004b1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004b20:	f000 bc6d 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d104      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b2a:	f7fe faad 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8004b2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004b30:	f000 bc65 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d108      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b3a:	f107 030c 	add.w	r3, r7, #12
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fbbc 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b48:	f000 bc59 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b58:	d10e      	bne.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d10b      	bne.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004b60:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b64:	e02c      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004b66:	bf00      	nop
 8004b68:	44020c00 	.word	0x44020c00
 8004b6c:	03d09000 	.word	0x03d09000
 8004b70:	003d0900 	.word	0x003d0900
 8004b74:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004b78:	4b95      	ldr	r3, [pc, #596]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d109      	bne.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b8a:	4b91      	ldr	r3, [pc, #580]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	4a8f      	ldr	r2, [pc, #572]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b9c:	e010      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004b9e:	4b8c      	ldr	r3, [pc, #560]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d102      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004bb2:	4b89      	ldr	r3, [pc, #548]	@ (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bbc:	f000 bc1f 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004bc0:	f000 bc1d 	b.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004bc4:	4b82      	ldr	r3, [pc, #520]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d106      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004be4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004bec:	4b78      	ldr	r3, [pc, #480]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d103      	bne.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004c02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c08:	e002      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004c0e:	e3f6      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c10:	e3f5      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c12:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7fe fb78 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004c28:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c2a:	e3e8      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c32:	d107      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fb3f 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c42:	e3dc      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004c44:	4b62      	ldr	r3, [pc, #392]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c56:	d109      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c58:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c6a:	e010      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004c6c:	4b58      	ldr	r3, [pc, #352]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c78:	d106      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c80:	d102      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004c82:	4b55      	ldr	r3, [pc, #340]	@ (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c86:	e002      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c8c:	e3b7      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c8e:	e3b6      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004c90:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c96:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ca2:	f7fe fb39 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004ca6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ca8:	e3a9      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fb00 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cc0:	e39d      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004cc2:	4b43      	ldr	r3, [pc, #268]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d10d      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cd4:	d109      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	08db      	lsrs	r3, r3, #3
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	4a3c      	ldr	r2, [pc, #240]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce8:	e010      	b.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004cea:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cfe:	d102      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004d00:	4b35      	ldr	r3, [pc, #212]	@ (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d04:	e002      	b.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d0a:	e378      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d0c:	e377      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004d0e:	4b30      	ldr	r3, [pc, #192]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d14:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fe fafa 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004d24:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d26:	e36a      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fac1 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d3e:	e35e      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004d40:	4b23      	ldr	r3, [pc, #140]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d10d      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d52:	d109      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d54:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	08db      	lsrs	r3, r3, #3
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d66:	e34a      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d6c:	e347      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004d6e:	4b18      	ldr	r3, [pc, #96]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d74:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004d80:	f7fe faf6 	bl	8003370 <HAL_RCC_GetPCLK3Freq>
 8004d84:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d86:	e33a      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fa91 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d9e:	e32e      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004da0:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	08db      	lsrs	r3, r3, #3
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	4a05      	ldr	r2, [pc, #20]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004dc6:	e31a      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004dcc:	e317      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004dce:	bf00      	nop
 8004dd0:	44020c00 	.word	0x44020c00
 8004dd4:	03d09000 	.word	0x03d09000
 8004dd8:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ddc:	4b9b      	ldr	r3, [pc, #620]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dde:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004de2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004dee:	d044      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004df6:	d879      	bhi.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfe:	d02d      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e06:	d871      	bhi.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e0e:	d017      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e16:	d869      	bhi.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e24:	d004      	beq.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004e26:	e061      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004e28:	f7fe faa2 	bl	8003370 <HAL_RCC_GetPCLK3Freq>
 8004e2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004e2e:	e060      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e30:	f107 030c 	add.w	r3, r7, #12
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fa41 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e3e:	e058      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e40:	4b82      	ldr	r3, [pc, #520]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d103      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e54:	e04d      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e5a:	e04a      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6a:	d103      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004e6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e72:	e03e      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e78:	e03b      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e7a:	4b74      	ldr	r3, [pc, #464]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e80:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e86:	4b71      	ldr	r3, [pc, #452]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d10c      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e98:	4b6c      	ldr	r3, [pc, #432]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	08db      	lsrs	r3, r3, #3
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	4a6b      	ldr	r2, [pc, #428]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eaa:	e01e      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004eac:	4b67      	ldr	r3, [pc, #412]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec0:	d102      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ec2:	4b64      	ldr	r3, [pc, #400]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ec6:	e010      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ec8:	4b60      	ldr	r3, [pc, #384]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004edc:	d102      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004ede:	4b5e      	ldr	r3, [pc, #376]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee2:	e002      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004ee8:	e003      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004eea:	e002      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ef0:	bf00      	nop
          }
        }
        break;
 8004ef2:	e284      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004ef4:	4b55      	ldr	r3, [pc, #340]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004efa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f06:	d044      	beq.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f0e:	d879      	bhi.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f16:	d02d      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f1e:	d871      	bhi.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f26:	d017      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f2e:	d869      	bhi.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004f3e:	e061      	b.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7fe f9ea 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004f44:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004f46:	e060      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f48:	f107 030c 	add.w	r3, r7, #12
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff f9b5 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f56:	e058      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f58:	4b3c      	ldr	r3, [pc, #240]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d103      	bne.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f6c:	e04d      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f72:	e04a      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004f74:	4b35      	ldr	r3, [pc, #212]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f82:	d103      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004f84:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f8a:	e03e      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f90:	e03b      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f92:	4b2e      	ldr	r3, [pc, #184]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f98:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f9c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fb0:	4b26      	ldr	r3, [pc, #152]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	08db      	lsrs	r3, r3, #3
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	4a25      	ldr	r2, [pc, #148]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc2:	e01e      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fc4:	4b21      	ldr	r3, [pc, #132]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fd0:	d106      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004fda:	4b1e      	ldr	r3, [pc, #120]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fde:	e010      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fec:	d106      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ff4:	d102      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004ff6:	4b18      	ldr	r3, [pc, #96]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffa:	e002      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005000:	e003      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8005002:	e002      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005008:	bf00      	nop
          }
        }
        break;
 800500a:	e1f8      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800500c:	4b0f      	ldr	r3, [pc, #60]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800500e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005018:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005024:	d105      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 800502c:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800502e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005030:	e1e5      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005038:	d110      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800503a:	f107 0318 	add.w	r3, r7, #24
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe ffd0 	bl	8003fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005048:	e1d9      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800504a:	bf00      	nop
 800504c:	44020c00 	.word	0x44020c00
 8005050:	03d09000 	.word	0x03d09000
 8005054:	003d0900 	.word	0x003d0900
 8005058:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005062:	d107      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff f927 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005072:	e1c4      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005078:	e1c1      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800507a:	4b9d      	ldr	r3, [pc, #628]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800507c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	2b04      	cmp	r3, #4
 800508a:	d859      	bhi.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800508c:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050a9 	.word	0x080050a9
 8005098:	080050b9 	.word	0x080050b9
 800509c:	08005141 	.word	0x08005141
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050cf 	.word	0x080050cf
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050a8:	f107 0318 	add.w	r3, r7, #24
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe ff99 	bl	8003fe4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050b6:	e046      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff f8fd 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050c6:	e03e      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80050c8:	4b8a      	ldr	r3, [pc, #552]	@ (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80050ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050cc:	e03b      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050ce:	4b88      	ldr	r3, [pc, #544]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050d4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050da:	4b85      	ldr	r3, [pc, #532]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d10c      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050ec:	4b80      	ldr	r3, [pc, #512]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	4a80      	ldr	r2, [pc, #512]	@ (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fe:	e01e      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005100:	4b7b      	ldr	r3, [pc, #492]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800510c:	d106      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005114:	d102      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005116:	4b79      	ldr	r3, [pc, #484]	@ (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511a:	e010      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800511c:	4b74      	ldr	r3, [pc, #464]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005128:	d106      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005130:	d102      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005132:	4b73      	ldr	r3, [pc, #460]	@ (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005136:	e002      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800513e:	e002      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005144:	bf00      	nop
          }
        }
        break;
 8005146:	e15a      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005148:	4b69      	ldr	r3, [pc, #420]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800514a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800514e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	2b20      	cmp	r3, #32
 8005158:	d022      	beq.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	2b20      	cmp	r3, #32
 800515e:	d858      	bhi.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	2b18      	cmp	r3, #24
 8005164:	d019      	beq.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005168:	2b18      	cmp	r3, #24
 800516a:	d852      	bhi.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005174:	2b08      	cmp	r3, #8
 8005176:	d008      	beq.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005178:	e04b      	b.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800517a:	f107 0318 	add.w	r3, r7, #24
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe ff30 	bl	8003fe4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005188:	e046      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff f894 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005198:	e03e      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800519a:	4b56      	ldr	r3, [pc, #344]	@ (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800519c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800519e:	e03b      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051a0:	4b53      	ldr	r3, [pc, #332]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051ac:	4b50      	ldr	r3, [pc, #320]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d10c      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051be:	4b4c      	ldr	r3, [pc, #304]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	4a4b      	ldr	r2, [pc, #300]	@ (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d0:	e01e      	b.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051d2:	4b47      	ldr	r3, [pc, #284]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051de:	d106      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e6:	d102      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80051e8:	4b44      	ldr	r3, [pc, #272]	@ (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ec:	e010      	b.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051ee:	4b40      	ldr	r3, [pc, #256]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051fa:	d106      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005202:	d102      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005204:	4b3e      	ldr	r3, [pc, #248]	@ (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005208:	e002      	b.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800520e:	e003      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005216:	bf00      	nop
          }
        }
        break;
 8005218:	e0f1      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800521a:	4b35      	ldr	r3, [pc, #212]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800521c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005220:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522c:	d023      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005234:	d858      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2bc0      	cmp	r3, #192	@ 0xc0
 800523a:	d019      	beq.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005240:	d852      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d008      	beq.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800524e:	e04b      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005250:	f107 0318 	add.w	r3, r7, #24
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fec5 	bl	8003fe4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800525e:	e046      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005260:	f107 030c 	add.w	r3, r7, #12
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff f829 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800526e:	e03e      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005270:	4b20      	ldr	r3, [pc, #128]	@ (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005274:	e03b      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005276:	4b1e      	ldr	r3, [pc, #120]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800527c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005282:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005294:	4b16      	ldr	r3, [pc, #88]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	08db      	lsrs	r3, r3, #3
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	4a16      	ldr	r2, [pc, #88]	@ (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a6:	e01e      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052a8:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b4:	d106      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052bc:	d102      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80052be:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80052c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c2:	e010      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052c4:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d8:	d102      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80052da:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052de:	e002      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80052e4:	e003      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80052ec:	bf00      	nop
          }
        }
        break;
 80052ee:	e086      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80052f0:	44020c00 	.word	0x44020c00
 80052f4:	00bb8000 	.word	0x00bb8000
 80052f8:	03d09000 	.word	0x03d09000
 80052fc:	003d0900 	.word	0x003d0900
 8005300:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005304:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800530a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005310:	4b3d      	ldr	r3, [pc, #244]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531c:	d105      	bne.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005324:	4b39      	ldr	r3, [pc, #228]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005328:	e031      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800532a:	4b37      	ldr	r3, [pc, #220]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005336:	d10a      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	2b10      	cmp	r3, #16
 800533c:	d107      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800533e:	f107 0318 	add.w	r3, r7, #24
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe fe4e 	bl	8003fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800534c:	e01f      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800534e:	4b2e      	ldr	r3, [pc, #184]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b02      	cmp	r3, #2
 800535a:	d106      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	2b20      	cmp	r3, #32
 8005360:	d103      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005368:	e011      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800536a:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005378:	d106      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	2b30      	cmp	r3, #48	@ 0x30
 800537e:	d103      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005380:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005386:	e002      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800538c:	e037      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800538e:	e036      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005392:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005396:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d107      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053a2:	f107 0318 	add.w	r3, r7, #24
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fe1c 	bl	8003fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80053b0:	e025      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80053b2:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053be:	d10a      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d107      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c6:	f107 030c 	add.w	r3, r7, #12
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe ff76 	bl	80042bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d4:	e00f      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80053d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	2b30      	cmp	r3, #48	@ 0x30
 80053e8:	d102      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80053ea:	4b08      	ldr	r3, [pc, #32]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ee:	e002      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80053f4:	e003      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80053f6:	e002      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053fc:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	@ 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	44020c00 	.word	0x44020c00
 800540c:	02dc6c00 	.word	0x02dc6c00

08005410 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005418:	4b48      	ldr	r3, [pc, #288]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a47      	ldr	r2, [pc, #284]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 800541e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005422:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005424:	f7fb fdda 	bl	8000fdc <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800542a:	e008      	b.n	800543e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800542c:	f7fb fdd6 	bl	8000fdc <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e07a      	b.n	8005534 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800543e:	4b3f      	ldr	r3, [pc, #252]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800544a:	4b3c      	ldr	r3, [pc, #240]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6811      	ldr	r1, [r2, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6852      	ldr	r2, [r2, #4]
 800545e:	0212      	lsls	r2, r2, #8
 8005460:	430a      	orrs	r2, r1
 8005462:	4936      	ldr	r1, [pc, #216]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 8005464:	4313      	orrs	r3, r2
 8005466:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	3b01      	subs	r3, #1
 800546e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	3b01      	subs	r3, #1
 8005478:	025b      	lsls	r3, r3, #9
 800547a:	b29b      	uxth	r3, r3
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	3b01      	subs	r3, #1
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	3b01      	subs	r3, #1
 8005492:	061b      	lsls	r3, r3, #24
 8005494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005498:	4928      	ldr	r1, [pc, #160]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800549e:	4b27      	ldr	r3, [pc, #156]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	f023 020c 	bic.w	r2, r3, #12
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	4924      	ldr	r1, [pc, #144]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80054b0:	4b22      	ldr	r3, [pc, #136]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	f023 0220 	bic.w	r2, r3, #32
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	491f      	ldr	r1, [pc, #124]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80054c2:	4b1e      	ldr	r3, [pc, #120]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	491c      	ldr	r1, [pc, #112]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80054d0:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	4a19      	ldr	r2, [pc, #100]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054d6:	f023 0310 	bic.w	r3, r3, #16
 80054da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80054dc:	4b17      	ldr	r3, [pc, #92]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6a12      	ldr	r2, [r2, #32]
 80054ec:	00d2      	lsls	r2, r2, #3
 80054ee:	4913      	ldr	r1, [pc, #76]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80054f4:	4b11      	ldr	r3, [pc, #68]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f8:	4a10      	ldr	r2, [pc, #64]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 80054fa:	f043 0310 	orr.w	r3, r3, #16
 80054fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005500:	4b0e      	ldr	r3, [pc, #56]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a0d      	ldr	r2, [pc, #52]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 8005506:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800550a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800550c:	f7fb fd66 	bl	8000fdc <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005512:	e008      	b.n	8005526 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005514:	f7fb fd62 	bl	8000fdc <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e006      	b.n	8005534 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005526:	4b05      	ldr	r3, [pc, #20]	@ (800553c <RCCEx_PLL2_Config+0x12c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0

}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	44020c00 	.word	0x44020c00

08005540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e042      	b.n	80055d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fb fadd 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2224      	movs	r2, #36	@ 0x24
 800556e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fcb4 	bl	8005ef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fb33 	bl	8005bfc <UART_SetConfig>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e01b      	b.n	80055d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fd33 	bl	800603c <UART_CheckIdleState>
 80055d6:	4603      	mov	r3, r0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b0ae      	sub	sp, #184	@ 0xb8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800560a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800560e:	4013      	ands	r3, r2
 8005610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11b      	bne.n	8005654 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800561c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d015      	beq.n	8005654 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 82ac 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
      }
      return;
 8005652:	e2a6      	b.n	8005ba2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005654:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80fd 	beq.w	8005858 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800565e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005662:	4b7a      	ldr	r3, [pc, #488]	@ (800584c <HAL_UART_IRQHandler+0x26c>)
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800566a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800566e:	4b78      	ldr	r3, [pc, #480]	@ (8005850 <HAL_UART_IRQHandler+0x270>)
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80f0 	beq.w	8005858 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d011      	beq.n	80056a8 <HAL_UART_IRQHandler+0xc8>
 8005684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2201      	movs	r2, #1
 8005696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <HAL_UART_IRQHandler+0xf8>
 80056b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2202      	movs	r2, #2
 80056c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d011      	beq.n	8005708 <HAL_UART_IRQHandler+0x128>
 80056e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2204      	movs	r2, #4
 80056f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fe:	f043 0202 	orr.w	r2, r3, #2
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d017      	beq.n	8005744 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005720:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005724:	4b49      	ldr	r3, [pc, #292]	@ (800584c <HAL_UART_IRQHandler+0x26c>)
 8005726:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2208      	movs	r2, #8
 8005732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573a:	f043 0208 	orr.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800574c:	2b00      	cmp	r3, #0
 800574e:	d012      	beq.n	8005776 <HAL_UART_IRQHandler+0x196>
 8005750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00c      	beq.n	8005776 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576c:	f043 0220 	orr.w	r2, r3, #32
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8212 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d013      	beq.n	80057b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800578e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800579a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800579e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ca:	2b40      	cmp	r3, #64	@ 0x40
 80057cc:	d005      	beq.n	80057da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d02e      	beq.n	8005838 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fd45 	bl	800626a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d120      	bne.n	8005830 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d017      	beq.n	8005828 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <HAL_UART_IRQHandler+0x274>)
 8005800:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005808:	4618      	mov	r0, r3
 800580a:	f7fb fdff 	bl	800140c <HAL_DMA_Abort_IT>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d019      	beq.n	8005848 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005822:	4610      	mov	r0, r2
 8005824:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005826:	e00f      	b.n	8005848 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f9d1 	bl	8005bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582e:	e00b      	b.n	8005848 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f9cd 	bl	8005bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005836:	e007      	b.n	8005848 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f9c9 	bl	8005bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005846:	e1ae      	b.n	8005ba6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	bf00      	nop
    return;
 800584a:	e1ac      	b.n	8005ba6 <HAL_UART_IRQHandler+0x5c6>
 800584c:	10000001 	.word	0x10000001
 8005850:	04000120 	.word	0x04000120
 8005854:	08006337 	.word	0x08006337

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800585c:	2b01      	cmp	r3, #1
 800585e:	f040 8142 	bne.w	8005ae6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 813b 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8134 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2210      	movs	r2, #16
 8005884:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005890:	2b40      	cmp	r3, #64	@ 0x40
 8005892:	f040 80aa 	bne.w	80059ea <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80058a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8084 	beq.w	80059b6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058b4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d27c      	bcs.n	80059b6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80058c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ce:	2b81      	cmp	r3, #129	@ 0x81
 80058d0:	d060      	beq.n	8005994 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058f8:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005906:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e2      	bne.n	80058d2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3308      	adds	r3, #8
 8005912:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800591c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800591e:	f023 0301 	bic.w	r3, r3, #1
 8005922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005930:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005932:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005936:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800593e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e3      	bne.n	800590c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005962:	f023 0310 	bic.w	r3, r3, #16
 8005966:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005976:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800597a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e4      	bne.n	8005952 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598e:	4618      	mov	r0, r3
 8005990:	f7fb fcc0 	bl	8001314 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f918 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059b4:	e0f9      	b.n	8005baa <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059bc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80059c0:	429a      	cmp	r2, r3
 80059c2:	f040 80f2 	bne.w	8005baa <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ce:	2b81      	cmp	r3, #129	@ 0x81
 80059d0:	f040 80eb 	bne.w	8005baa <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8fe 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
      return;
 80059e8:	e0df      	b.n	8005baa <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 80d1 	beq.w	8005bae <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8005a0c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80cc 	beq.w	8005bae <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e4      	bne.n	8005a16 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	f023 0301 	bic.w	r3, r3, #1
 8005a66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005a74:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e1      	bne.n	8005a4c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f023 0310 	bic.w	r3, r3, #16
 8005ab0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	617b      	str	r3, [r7, #20]
   return(result);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e4      	bne.n	8005a9c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ad8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f880 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ae4:	e063      	b.n	8005bae <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00e      	beq.n	8005b10 <HAL_UART_IRQHandler+0x530>
 8005af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d008      	beq.n	8005b10 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc51 	bl	80063b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b0e:	e051      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d014      	beq.n	8005b46 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d03a      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
    }
    return;
 8005b44:	e035      	b.n	8005bb2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <HAL_UART_IRQHandler+0x586>
 8005b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fbfb 	bl	800635a <UART_EndTransmit_IT>
    return;
 8005b64:	e026      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <HAL_UART_IRQHandler+0x5a6>
 8005b72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fc2a 	bl	80063d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b84:	e016      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
 8005b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da0c      	bge.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fc12 	bl	80063c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba0:	e008      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005ba2:	bf00      	nop
 8005ba4:	e006      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005ba6:	bf00      	nop
 8005ba8:	e004      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005baa:	bf00      	nop
 8005bac:	e002      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005bb2:	bf00      	nop
  }
}
 8005bb4:	37b8      	adds	r7, #184	@ 0xb8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop

08005bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c00:	b094      	sub	sp, #80	@ 0x50
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	498a      	ldr	r1, [pc, #552]	@ (8005e54 <UART_SetConfig+0x258>)
 8005c2c:	4019      	ands	r1, r3
 8005c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c44:	68d9      	ldr	r1, [r3, #12]
 8005c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	ea40 0301 	orr.w	r3, r0, r1
 8005c4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e58 <UART_SetConfig+0x25c>)
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d004      	beq.n	8005c6a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c66:	4313      	orrs	r3, r2
 8005c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005c74:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	f023 000f 	bic.w	r0, r3, #15
 8005c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	ea40 0301 	orr.w	r3, r0, r1
 8005c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b6f      	ldr	r3, [pc, #444]	@ (8005e5c <UART_SetConfig+0x260>)
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d102      	bne.n	8005caa <UART_SetConfig+0xae>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca8:	e01a      	b.n	8005ce0 <UART_SetConfig+0xe4>
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b6c      	ldr	r3, [pc, #432]	@ (8005e60 <UART_SetConfig+0x264>)
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d102      	bne.n	8005cba <UART_SetConfig+0xbe>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb8:	e012      	b.n	8005ce0 <UART_SetConfig+0xe4>
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b69      	ldr	r3, [pc, #420]	@ (8005e64 <UART_SetConfig+0x268>)
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d102      	bne.n	8005cca <UART_SetConfig+0xce>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc8:	e00a      	b.n	8005ce0 <UART_SetConfig+0xe4>
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b62      	ldr	r3, [pc, #392]	@ (8005e58 <UART_SetConfig+0x25c>)
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d103      	bne.n	8005cdc <UART_SetConfig+0xe0>
 8005cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cda:	e001      	b.n	8005ce0 <UART_SetConfig+0xe4>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8005e58 <UART_SetConfig+0x25c>)
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d171      	bne.n	8005dce <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cec:	2200      	movs	r2, #0
 8005cee:	623b      	str	r3, [r7, #32]
 8005cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cf2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005cf6:	f7fe fc4d 	bl	8004594 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cfa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80e2 	beq.w	8005ec8 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	4a57      	ldr	r2, [pc, #348]	@ (8005e68 <UART_SetConfig+0x26c>)
 8005d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d305      	bcc.n	8005d34 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005d3a:	e0c5      	b.n	8005ec8 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d3e:	2200      	movs	r2, #0
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	4a47      	ldr	r2, [pc, #284]	@ (8005e68 <UART_SetConfig+0x26c>)
 8005d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2200      	movs	r2, #0
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	617a      	str	r2, [r7, #20]
 8005d56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d5e:	f7fa fa9b 	bl	8000298 <__aeabi_uldivmod>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	020b      	lsls	r3, r1, #8
 8005d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d78:	0202      	lsls	r2, r0, #8
 8005d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d7c:	6849      	ldr	r1, [r1, #4]
 8005d7e:	0849      	lsrs	r1, r1, #1
 8005d80:	2000      	movs	r0, #0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4605      	mov	r5, r0
 8005d86:	eb12 0804 	adds.w	r8, r2, r4
 8005d8a:	eb43 0905 	adc.w	r9, r3, r5
 8005d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	60fa      	str	r2, [r7, #12]
 8005d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	4649      	mov	r1, r9
 8005da0:	f7fa fa7a 	bl	8000298 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005db2:	d308      	bcc.n	8005dc6 <UART_SetConfig+0x1ca>
 8005db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dba:	d204      	bcs.n	8005dc6 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e080      	b.n	8005ec8 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005dcc:	e07c      	b.n	8005ec8 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd6:	d149      	bne.n	8005e6c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dda:	2200      	movs	r2, #0
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de4:	f7fe fbd6 	bl	8004594 <HAL_RCCEx_GetPeriphCLKFreq>
 8005de8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d06b      	beq.n	8005ec8 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e68 <UART_SetConfig+0x26c>)
 8005df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e02:	005a      	lsls	r2, r3, #1
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	441a      	add	r2, r3
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e18:	2b0f      	cmp	r3, #15
 8005e1a:	d916      	bls.n	8005e4a <UART_SetConfig+0x24e>
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e22:	d212      	bcs.n	8005e4a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f023 030f 	bic.w	r3, r3, #15
 8005e2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	e03e      	b.n	8005ec8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e50:	e03a      	b.n	8005ec8 <UART_SetConfig+0x2cc>
 8005e52:	bf00      	nop
 8005e54:	cfff69f3 	.word	0xcfff69f3
 8005e58:	44002400 	.word	0x44002400
 8005e5c:	40013800 	.word	0x40013800
 8005e60:	40004400 	.word	0x40004400
 8005e64:	40004800 	.word	0x40004800
 8005e68:	0800668c 	.word	0x0800668c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e6e:	2200      	movs	r2, #0
 8005e70:	469a      	mov	sl, r3
 8005e72:	4693      	mov	fp, r2
 8005e74:	4650      	mov	r0, sl
 8005e76:	4659      	mov	r1, fp
 8005e78:	f7fe fb8c 	bl	8004594 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e7c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d021      	beq.n	8005ec8 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <UART_SetConfig+0x2f8>)
 8005e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	441a      	add	r2, r3
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eaa:	2b0f      	cmp	r3, #15
 8005eac:	d909      	bls.n	8005ec2 <UART_SetConfig+0x2c6>
 8005eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb4:	d205      	bcs.n	8005ec2 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	e002      	b.n	8005ec8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eda:	2200      	movs	r2, #0
 8005edc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3750      	adds	r7, #80	@ 0x50
 8005eec:	46bd      	mov	sp, r7
 8005eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef2:	bf00      	nop
 8005ef4:	0800668c 	.word	0x0800668c

08005ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01a      	beq.n	800600e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ff6:	d10a      	bne.n	800600e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
  }
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b098      	sub	sp, #96	@ 0x60
 8006040:	af02      	add	r7, sp, #8
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800604c:	f7fa ffc6 	bl	8000fdc <HAL_GetTick>
 8006050:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b08      	cmp	r3, #8
 800605e:	d12f      	bne.n	80060c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006068:	2200      	movs	r2, #0
 800606a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f88e 	bl	8006190 <UART_WaitOnFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d022      	beq.n	80060c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800608e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006098:	647b      	str	r3, [r7, #68]	@ 0x44
 800609a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800609e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e6      	bne.n	800607a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e063      	b.n	8006188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d149      	bne.n	8006162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d6:	2200      	movs	r2, #0
 80060d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f857 	bl	8006190 <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d03c      	beq.n	8006162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	623b      	str	r3, [r7, #32]
   return(result);
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006106:	633b      	str	r3, [r7, #48]	@ 0x30
 8006108:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800610c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e6      	bne.n	80060e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	60fb      	str	r3, [r7, #12]
   return(result);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f023 0301 	bic.w	r3, r3, #1
 8006130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800613a:	61fa      	str	r2, [r7, #28]
 800613c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	69b9      	ldr	r1, [r7, #24]
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	617b      	str	r3, [r7, #20]
   return(result);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e012      	b.n	8006188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3758      	adds	r7, #88	@ 0x58
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a0:	e04f      	b.n	8006242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d04b      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fa ff17 	bl	8000fdc <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e04e      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d037      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b80      	cmp	r3, #128	@ 0x80
 80061d6:	d034      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b40      	cmp	r3, #64	@ 0x40
 80061dc:	d031      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d110      	bne.n	800620e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2208      	movs	r2, #8
 80061f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f838 	bl	800626a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2208      	movs	r2, #8
 80061fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e029      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800621c:	d111      	bne.n	8006242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f81e 	bl	800626a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e00f      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4013      	ands	r3, r2
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	bf0c      	ite	eq
 8006252:	2301      	moveq	r3, #1
 8006254:	2300      	movne	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	429a      	cmp	r2, r3
 800625e:	d0a0      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800626a:	b480      	push	{r7}
 800626c:	b095      	sub	sp, #84	@ 0x54
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006290:	643b      	str	r3, [r7, #64]	@ 0x40
 8006292:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e6      	bne.n	8006272 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3308      	adds	r3, #8
 80062aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3308      	adds	r3, #8
 80062c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e3      	bne.n	80062a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d118      	bne.n	8006316 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f023 0310 	bic.w	r3, r3, #16
 80062f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6979      	ldr	r1, [r7, #20]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	613b      	str	r3, [r7, #16]
   return(result);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e6      	bne.n	80062e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800632a:	bf00      	nop
 800632c:	3754      	adds	r7, #84	@ 0x54
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff fc3f 	bl	8005bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b088      	sub	sp, #32
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6979      	ldr	r1, [r7, #20]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	613b      	str	r3, [r7, #16]
   return(result);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e6      	bne.n	8006362 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fc0a 	bl	8005bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063a8:	bf00      	nop
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_UARTEx_DisableFifoMode+0x16>
 80063fe:	2302      	movs	r3, #2
 8006400:	e027      	b.n	8006452 <HAL_UARTEx_DisableFifoMode+0x66>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2224      	movs	r2, #36	@ 0x24
 800640e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006430:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006472:	2302      	movs	r3, #2
 8006474:	e02d      	b.n	80064d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2224      	movs	r2, #36	@ 0x24
 8006482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f850 	bl	8006558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e02d      	b.n	800654e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2224      	movs	r2, #36	@ 0x24
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f812 	bl	8006558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006578:	e031      	b.n	80065de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800657a:	2308      	movs	r3, #8
 800657c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800657e:	2308      	movs	r3, #8
 8006580:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	0e5b      	lsrs	r3, r3, #25
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	0f5b      	lsrs	r3, r3, #29
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	7b3a      	ldrb	r2, [r7, #12]
 80065a6:	4911      	ldr	r1, [pc, #68]	@ (80065ec <UARTEx_SetNbDataToProcess+0x94>)
 80065a8:	5c8a      	ldrb	r2, [r1, r2]
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065ae:	7b3a      	ldrb	r2, [r7, #12]
 80065b0:	490f      	ldr	r1, [pc, #60]	@ (80065f0 <UARTEx_SetNbDataToProcess+0x98>)
 80065b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	7b7a      	ldrb	r2, [r7, #13]
 80065c4:	4909      	ldr	r1, [pc, #36]	@ (80065ec <UARTEx_SetNbDataToProcess+0x94>)
 80065c6:	5c8a      	ldrb	r2, [r1, r2]
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065cc:	7b7a      	ldrb	r2, [r7, #13]
 80065ce:	4908      	ldr	r1, [pc, #32]	@ (80065f0 <UARTEx_SetNbDataToProcess+0x98>)
 80065d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	080066a4 	.word	0x080066a4
 80065f0:	080066ac 	.word	0x080066ac

080065f4 <memset>:
 80065f4:	4402      	add	r2, r0
 80065f6:	4603      	mov	r3, r0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4d0d      	ldr	r5, [pc, #52]	@ (800663c <__libc_init_array+0x38>)
 8006608:	2600      	movs	r6, #0
 800660a:	4c0d      	ldr	r4, [pc, #52]	@ (8006640 <__libc_init_array+0x3c>)
 800660c:	1b64      	subs	r4, r4, r5
 800660e:	10a4      	asrs	r4, r4, #2
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	4d0b      	ldr	r5, [pc, #44]	@ (8006644 <__libc_init_array+0x40>)
 8006616:	2600      	movs	r6, #0
 8006618:	4c0b      	ldr	r4, [pc, #44]	@ (8006648 <__libc_init_array+0x44>)
 800661a:	f000 f817 	bl	800664c <_init>
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	3601      	adds	r6, #1
 800662e:	4798      	blx	r3
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	3601      	adds	r6, #1
 8006638:	4798      	blx	r3
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	080066bc 	.word	0x080066bc
 8006640:	080066bc 	.word	0x080066bc
 8006644:	080066bc 	.word	0x080066bc
 8006648:	080066c0 	.word	0x080066c0

0800664c <_init>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr

08006658 <_fini>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr
