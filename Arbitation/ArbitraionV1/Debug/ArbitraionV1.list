
ArbitraionV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006638  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006890  08006890  00007890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f4  080068f4  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068fc  080068fc  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068fc  080068fc  000078fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006904  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08006914  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08006914  0000818c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113f6  00000000  00000000  00008046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6e  00000000  00000000  0001943c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0001b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000955  00000000  00000000  0001bed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f879  00000000  00000000  0001c825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4a2  00000000  00000000  0003c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6431  00000000  00000000  0004b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  001119b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00114c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000010 	.word	0x20000010
 8000274:	00000000 	.word	0x00000000
 8000278:	08006878 	.word	0x08006878

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000014 	.word	0x20000014
 8000294:	08006878 	.word	0x08006878

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fde9 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f8d7 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f9eb 	bl	8000998 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005c2:	f000 f945 	bl	8000850 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80005c6:	f000 f99b 	bl	8000900 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BCD_Display(Counter+1);
 80005ca:	4b61      	ldr	r3, [pc, #388]	@ (8000750 <main+0x1a0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fafa 	bl	8000bcc <BCD_Display>
  HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin,RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	21e0      	movs	r1, #224	@ 0xe0
 80005dc:	485d      	ldr	r0, [pc, #372]	@ (8000754 <main+0x1a4>)
 80005de:	f002 f82f 	bl	8002640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e8:	485b      	ldr	r0, [pc, #364]	@ (8000758 <main+0x1a8>)
 80005ea:	f002 f829 	bl	8002640 <HAL_GPIO_WritePin>


  for (uint8_t i = 0; i < 8 ;i++){
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	e008      	b.n	8000606 <main+0x56>
	  CAN_Payload.dataTx[i] = i;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	4a59      	ldr	r2, [pc, #356]	@ (800075c <main+0x1ac>)
 80005f8:	4413      	add	r3, r2
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  for (uint8_t i = 0; i < 8 ;i++){
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3301      	adds	r3, #1
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b07      	cmp	r3, #7
 800060a:	d9f3      	bls.n	80005f4 <main+0x44>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while(flag == 1){
 800060c:	e099      	b.n	8000742 <main+0x192>
		switch (mode)
 800060e:	4b54      	ldr	r3, [pc, #336]	@ (8000760 <main+0x1b0>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	3b01      	subs	r3, #1
 8000616:	2b03      	cmp	r3, #3
 8000618:	f200 8082 	bhi.w	8000720 <main+0x170>
 800061c:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <main+0x74>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000635 	.word	0x08000635
 8000628:	08000665 	.word	0x08000665
 800062c:	08000695 	.word	0x08000695
 8000630:	080006d1 	.word	0x080006d1
    		{
    		case ID_VS_ID:
    			HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin,RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	21e0      	movs	r1, #224	@ 0xe0
 8000638:	4846      	ldr	r0, [pc, #280]	@ (8000754 <main+0x1a4>)
 800063a:	f002 f801 	bl	8002640 <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOA,BLUE_LED_Pin,SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2120      	movs	r1, #32
 8000642:	4844      	ldr	r0, [pc, #272]	@ (8000754 <main+0x1a4>)
 8000644:	f001 fffc 	bl	8002640 <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800064e:	4842      	ldr	r0, [pc, #264]	@ (8000758 <main+0x1a8>)
 8000650:	f001 fff6 	bl	8002640 <HAL_GPIO_WritePin>
    			Pri_ID();
 8000654:	f000 fafa 	bl	8000c4c <Pri_ID>
    			prev_mode = mode;
 8000658:	4b41      	ldr	r3, [pc, #260]	@ (8000760 <main+0x1b0>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <main+0x1b4>)
 8000660:	701a      	strb	r2, [r3, #0]
    			break;
 8000662:	e05e      	b.n	8000722 <main+0x172>
    		case STD_VS_EXD:
    			HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin,RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	21e0      	movs	r1, #224	@ 0xe0
 8000668:	483a      	ldr	r0, [pc, #232]	@ (8000754 <main+0x1a4>)
 800066a:	f001 ffe9 	bl	8002640 <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOA,RED_LED_Pin,SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	4838      	ldr	r0, [pc, #224]	@ (8000754 <main+0x1a4>)
 8000674:	f001 ffe4 	bl	8002640 <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800067e:	4836      	ldr	r0, [pc, #216]	@ (8000758 <main+0x1a8>)
 8000680:	f001 ffde 	bl	8002640 <HAL_GPIO_WritePin>
    			Std_Ext();
 8000684:	f000 fb14 	bl	8000cb0 <Std_Ext>
    			prev_mode = mode;
 8000688:	4b35      	ldr	r3, [pc, #212]	@ (8000760 <main+0x1b0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <main+0x1b4>)
 8000690:	701a      	strb	r2, [r3, #0]
    			break;
 8000692:	e046      	b.n	8000722 <main+0x172>
    		case ID_Pass_ARB:
    			HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin,RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	21e0      	movs	r1, #224	@ 0xe0
 8000698:	482e      	ldr	r0, [pc, #184]	@ (8000754 <main+0x1a4>)
 800069a:	f001 ffd1 	bl	8002640 <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOA,YELLOW_LED_Pin,SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	482c      	ldr	r0, [pc, #176]	@ (8000754 <main+0x1a4>)
 80006a4:	f001 ffcc 	bl	8002640 <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ae:	482a      	ldr	r0, [pc, #168]	@ (8000758 <main+0x1a8>)
 80006b0:	f001 ffc6 	bl	8002640 <HAL_GPIO_WritePin>
    			Pass_Arb();
 80006b4:	f000 fae6 	bl	8000c84 <Pass_Arb>
    			prev_mode = mode;
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <main+0x1b0>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <main+0x1b4>)
 80006c0:	701a      	strb	r2, [r3, #0]
    			Counter = 0;
 80006c2:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <main+0x1a0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
    			BCD_Display(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fa7f 	bl	8000bcc <BCD_Display>
    			break;
 80006ce:	e028      	b.n	8000722 <main+0x172>
    		case CHANGE_ADD:
    			HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin,RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	21e0      	movs	r1, #224	@ 0xe0
 80006d4:	481f      	ldr	r0, [pc, #124]	@ (8000754 <main+0x1a4>)
 80006d6:	f001 ffb3 	bl	8002640 <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e0:	481d      	ldr	r0, [pc, #116]	@ (8000758 <main+0x1a8>)
 80006e2:	f001 ffad 	bl	8002640 <HAL_GPIO_WritePin>
    			if(prev_mode == ID_Pass_ARB ){
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <main+0x1b4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d103      	bne.n	80006f6 <main+0x146>
    				Counter = 0;
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <main+0x1a0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e00c      	b.n	8000710 <main+0x160>
    			}else{
    				Counter++;
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <main+0x1a0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <main+0x1a0>)
 8000700:	701a      	strb	r2, [r3, #0]
    				if (Counter >= (sizeof(pri_id_address) / sizeof(pri_id_address[0]))) {
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <main+0x1a0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d902      	bls.n	8000710 <main+0x160>
    					Counter = 0;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <main+0x1a0>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
    				}
    			}
    			BCD_Display(Counter+1);
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <main+0x1a0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fa57 	bl	8000bcc <BCD_Display>
    			break;
 800071e:	e000      	b.n	8000722 <main+0x172>
    		default:
    			break;
 8000720:	bf00      	nop
    		}
		if(mode == CHANGE_ADD){
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <main+0x1b0>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b04      	cmp	r3, #4
 800072a:	d107      	bne.n	800073c <main+0x18c>
			flag = 1;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <main+0x1b8>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
			mode = prev_mode;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <main+0x1b4>)
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <main+0x1b0>)
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	e002      	b.n	8000742 <main+0x192>
		}else {
			flag = 0;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <main+0x1b8>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
	while(flag == 1){
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <main+0x1b8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b01      	cmp	r3, #1
 800074a:	f43f af60 	beq.w	800060e <main+0x5e>
 800074e:	e7f8      	b.n	8000742 <main+0x192>
 8000750:	20000184 	.word	0x20000184
 8000754:	42020000 	.word	0x42020000
 8000758:	42020800 	.word	0x42020800
 800075c:	2000002c 	.word	0x2000002c
 8000760:	20000000 	.word	0x20000000
 8000764:	20000002 	.word	0x20000002
 8000768:	20000001 	.word	0x20000001

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2250      	movs	r2, #80	@ 0x50
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f006 f850 	bl	8006820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000792:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <SystemClock_Config+0xdc>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800079a:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <SystemClock_Config+0xdc>)
 800079c:	f043 0320 	orr.w	r3, r3, #32
 80007a0:	6113      	str	r3, [r2, #16]
 80007a2:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <SystemClock_Config+0xdc>)
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ae:	bf00      	nop
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xdc>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d1f9      	bne.n	80007b0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80007ca:	2303      	movs	r3, #3
 80007cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80007ce:	2303      	movs	r3, #3
 80007d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007d2:	2332      	movs	r3, #50	@ 0x32
 80007d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80007e2:	230c      	movs	r3, #12
 80007e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 ff6e 	bl	80026d4 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007fe:	f000 fac9 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	231f      	movs	r3, #31
 8000804:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2105      	movs	r1, #5
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fb8f 	bl	8002f44 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800082c:	f000 fab2 	bl	8000d94 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <SystemClock_Config+0xe0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <SystemClock_Config+0xe0>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	3770      	adds	r7, #112	@ 0x70
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	44020800 	.word	0x44020800
 800084c:	40022000 	.word	0x40022000

08000850 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000854:	4b28      	ldr	r3, [pc, #160]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000856:	4a29      	ldr	r2, [pc, #164]	@ (80008fc <MX_FDCAN1_Init+0xac>)
 8000858:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000860:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000866:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800086c:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 800086e:	2200      	movs	r2, #0
 8000870:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000874:	2200      	movs	r2, #0
 8000876:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000878:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 800087a:	2200      	movs	r2, #0
 800087c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 125;
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000880:	227d      	movs	r2, #125	@ 0x7d
 8000882:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000886:	2201      	movs	r2, #1
 8000888:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 800088c:	220d      	movs	r2, #13
 800088e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000892:	2202      	movs	r2, #2
 8000894:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 8000898:	2201      	movs	r2, #1
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 800089e:	2201      	movs	r2, #1
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008c2:	f000 ff57 	bl	8001774 <HAL_FDCAN_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008cc:	f000 fa62 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80008d0:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008d2:	f001 f8a9 	bl	8001a28 <HAL_FDCAN_Start>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_FDCAN1_Init+0x90>
    	 /* Notification Error */
    	Error_Handler();
 80008dc:	f000 fa5a 	bl	8000d94 <Error_Handler>
   }
   if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_FDCAN1_Init+0xa8>)
 80008e6:	f001 fa13 	bl	8001d10 <HAL_FDCAN_ActivateNotification>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_FDCAN1_Init+0xa4>
   {
 	  /* Notification Error */
  	Error_Handler();
 80008f0:	f000 fa50 	bl	8000d94 <Error_Handler>
   }

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	4000a400 	.word	0x4000a400

08000900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_USART3_UART_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800094a:	f004 ff0f 	bl	800576c <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 fa1e 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800095c:	f005 fe95 	bl	800668a <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 fa15 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800096e:	f005 feca 	bl	8006706 <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 fa0c 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800097e:	f005 fe4b 	bl	8006618 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 fa04 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000f0 	.word	0x200000f0
 8000994:	40004800 	.word	0x40004800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b4:	4a68      	ldr	r2, [pc, #416]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009be:	4b66      	ldr	r3, [pc, #408]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009cc:	4b62      	ldr	r3, [pc, #392]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d2:	4a61      	ldr	r2, [pc, #388]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b5b      	ldr	r3, [pc, #364]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f0:	4a59      	ldr	r2, [pc, #356]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009fa:	4b57      	ldr	r3, [pc, #348]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 80009fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b53      	ldr	r3, [pc, #332]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 8000a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0e:	4a52      	ldr	r2, [pc, #328]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a18:	4b4f      	ldr	r3, [pc, #316]	@ (8000b58 <MX_GPIO_Init+0x1c0>)
 8000a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin|BCD_BIT1_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000a2c:	484b      	ldr	r0, [pc, #300]	@ (8000b5c <MX_GPIO_Init+0x1c4>)
 8000a2e:	f001 fe07 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BCD_BIT2_GPIO_Port, BCD_BIT2_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a38:	4849      	ldr	r0, [pc, #292]	@ (8000b60 <MX_GPIO_Init+0x1c8>)
 8000a3a:	f001 fe01 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BCD_BIT0_Pin|BCD_BIT3_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8000a44:	4847      	ldr	r0, [pc, #284]	@ (8000b64 <MX_GPIO_Init+0x1cc>)
 8000a46:	f001 fdfb 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_BLUE_USER_BUTTON_Pin EXTI8_BUTTON1_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin|EXTI8_BUTTON1_Pin;
 8000a4a:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <MX_GPIO_Init+0x1d0>)
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4841      	ldr	r0, [pc, #260]	@ (8000b64 <MX_GPIO_Init+0x1cc>)
 8000a60:	f001 fc9c 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_LED_Pin RED_LED_Pin YELLOW_LED_Pin BCD_BIT1_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin|BCD_BIT1_Pin;
 8000a64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4837      	ldr	r0, [pc, #220]	@ (8000b5c <MX_GPIO_Init+0x1c4>)
 8000a7e:	f001 fc8d 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : BCD_BIT2_Pin */
  GPIO_InitStruct.Pin = BCD_BIT2_Pin;
 8000a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BCD_BIT2_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4831      	ldr	r0, [pc, #196]	@ (8000b60 <MX_GPIO_Init+0x1c8>)
 8000a9c:	f001 fc7e 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 EXTI3_BUTTON2_Pin EXTI4_BUTTON4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|EXTI3_BUTTON2_Pin|EXTI4_BUTTON4_Pin;
 8000aa0:	f248 0318 	movw	r3, #32792	@ 0x8018
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <MX_GPIO_Init+0x1d0>)
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482a      	ldr	r0, [pc, #168]	@ (8000b60 <MX_GPIO_Init+0x1c8>)
 8000ab6:	f001 fc71 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : BCD_BIT0_Pin BCD_BIT3_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BCD_BIT0_Pin|BCD_BIT3_Pin|GREEN_LED_Pin;
 8000aba:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4824      	ldr	r0, [pc, #144]	@ (8000b64 <MX_GPIO_Init+0x1cc>)
 8000ad4:	f001 fc62 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI5_BUTTON3_Pin */
  GPIO_InitStruct.Pin = EXTI5_BUTTON3_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <MX_GPIO_Init+0x1d0>)
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI5_BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481d      	ldr	r0, [pc, #116]	@ (8000b60 <MX_GPIO_Init+0x1c8>)
 8000aec:	f001 fc56 	bl	800239c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	200e      	movs	r0, #14
 8000af6:	f000 fcbf 	bl	8001478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000afa:	200e      	movs	r0, #14
 8000afc:	f000 fcd6 	bl	80014ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	200f      	movs	r0, #15
 8000b06:	f000 fcb7 	bl	8001478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 fcce 	bl	80014ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2010      	movs	r0, #16
 8000b16:	f000 fcaf 	bl	8001478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000b1a:	2010      	movs	r0, #16
 8000b1c:	f000 fcc6 	bl	80014ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2013      	movs	r0, #19
 8000b26:	f000 fca7 	bl	8001478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8000b2a:	2013      	movs	r0, #19
 8000b2c:	f000 fcbe 	bl	80014ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2018      	movs	r0, #24
 8000b36:	f000 fc9f 	bl	8001478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b3a:	2018      	movs	r0, #24
 8000b3c:	f000 fcb6 	bl	80014ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	201a      	movs	r0, #26
 8000b46:	f000 fc97 	bl	8001478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 8000b4a:	201a      	movs	r0, #26
 8000b4c:	f000 fcae 	bl	80014ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	44020c00 	.word	0x44020c00
 8000b5c:	42020000 	.word	0x42020000
 8000b60:	42020400 	.word	0x42020400
 8000b64:	42020800 	.word	0x42020800
 8000b68:	10210000 	.word	0x10210000

08000b6c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == EXTI8_BUTTON1_Pin) {
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b7c:	d102      	bne.n	8000b84 <HAL_GPIO_EXTI_Falling_Callback+0x18>
			mode = ID_VS_ID;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == EXTI3_BUTTON2_Pin) {
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_EXTI_Falling_Callback+0x24>
			mode = STD_VS_EXD;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == EXTI4_BUTTON4_Pin) {
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d102      	bne.n	8000b9c <HAL_GPIO_EXTI_Falling_Callback+0x30>
			mode = CHANGE_ADD;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000b98:	2204      	movs	r2, #4
 8000b9a:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == B1_BLUE_USER_BUTTON_Pin) {
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ba2:	d102      	bne.n	8000baa <HAL_GPIO_EXTI_Falling_Callback+0x3e>
			mode = ID_Pass_ARB;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == GPIO_PIN_15) {
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_EXTI_Falling_Callback+0x4a>
			TX_Send_CAN();
 8000bb2:	f000 f899 	bl	8000ce8 <TX_Send_CAN>
		}
	flag = 1;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000001 	.word	0x20000001

08000bcc <BCD_Display>:


void BCD_Display(uint8_t bcd_value)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    bcd_value &= 0x0F;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(BCD_BIT0_GPIO_Port, BCD_BIT0_Pin, (bcd_value & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 2⁰
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	2140      	movs	r1, #64	@ 0x40
 8000bea:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <BCD_Display+0x74>)
 8000bec:	f001 fd28 	bl	8002640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BCD_BIT1_GPIO_Port, BCD_BIT1_Pin, (bcd_value & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 2¹
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	105b      	asrs	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c02:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <BCD_Display+0x78>)
 8000c04:	f001 fd1c 	bl	8002640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BCD_BIT2_GPIO_Port, BCD_BIT2_Pin, (bcd_value & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 2²
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	109b      	asrs	r3, r3, #2
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c1a:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <BCD_Display+0x7c>)
 8000c1c:	f001 fd10 	bl	8002640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BCD_BIT3_GPIO_Port, BCD_BIT3_Pin, (bcd_value & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 2³
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	10db      	asrs	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	2180      	movs	r1, #128	@ 0x80
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <BCD_Display+0x74>)
 8000c32:	f001 fd05 	bl	8002640 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	42020800 	.word	0x42020800
 8000c44:	42020000 	.word	0x42020000
 8000c48:	42020400 	.word	0x42020400

08000c4c <Pri_ID>:

void Pri_ID(){
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	 CAN_Payload.msgID = pri_id_address[Counter];
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <Pri_ID+0x2c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <Pri_ID+0x30>)
 8000c58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <Pri_ID+0x34>)
 8000c60:	64da      	str	r2, [r3, #76]	@ 0x4c
	 CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <Pri_ID+0x34>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
	 CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <Pri_ID+0x34>)
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	60da      	str	r2, [r3, #12]
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000184 	.word	0x20000184
 8000c7c:	08006890 	.word	0x08006890
 8000c80:	2000002c 	.word	0x2000002c

08000c84 <Pass_Arb>:

void Pass_Arb(){
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	CAN_Payload.msgID = 0x5A3;
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <Pass_Arb+0x28>)
 8000c8a:	f240 52a3 	movw	r2, #1443	@ 0x5a3
 8000c8e:	64da      	str	r2, [r3, #76]	@ 0x4c
	CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <Pass_Arb+0x28>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <Pass_Arb+0x28>)
 8000c98:	2208      	movs	r2, #8
 8000c9a:	60da      	str	r2, [r3, #12]
#ifdef NODE_A
	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;
#endif

#ifdef NODE_B
	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <Pass_Arb+0x28>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	60da      	str	r2, [r3, #12]
#endif

}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	2000002c 	.word	0x2000002c

08000cb0 <Std_Ext>:

void Std_Ext(){
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
#ifdef NODE_A
	CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
#endif

#ifdef NODE_B
	CAN_Payload.TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <Std_Ext+0x2c>)
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cba:	605a      	str	r2, [r3, #4]
#endif
	CAN_Payload.msgID = std_ext_address[Counter];
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <Std_Ext+0x30>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <Std_Ext+0x34>)
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <Std_Ext+0x2c>)
 8000cca:	64d3      	str	r3, [r2, #76]	@ 0x4c

	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <Std_Ext+0x2c>)
 8000cce:	2208      	movs	r2, #8
 8000cd0:	60da      	str	r2, [r3, #12]
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	2000002c 	.word	0x2000002c
 8000ce0:	20000184 	.word	0x20000184
 8000ce4:	08006898 	.word	0x08006898

08000ce8 <TX_Send_CAN>:


void TX_Send_CAN(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* ----- Prepare CAN data --------------------------------------- */
  CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID; //CAN_Payload.msgID
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf0:	4a11      	ldr	r2, [pc, #68]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000cf2:	6013      	str	r3, [r2, #0]
  CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;        // 8-byte payloaD
 8000cf4:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
  CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  CAN_Payload.TxHeader.MessageMarker = 0;
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  CAN_Payload.dataTx[0] ^= 1;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <TX_Send_CAN+0x54>)
 8000d2c:	4902      	ldr	r1, [pc, #8]	@ (8000d38 <TX_Send_CAN+0x50>)
 8000d2e:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <TX_Send_CAN+0x58>)
 8000d30:	f000 fea2 	bl	8001a78 <HAL_FDCAN_AddMessageToTxFifoQ>
  {

  }

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000002c 	.word	0x2000002c
 8000d3c:	2000007c 	.word	0x2000007c
 8000d40:	2000008c 	.word	0x2000008c

08000d44 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d014      	beq.n	8000d82 <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 fece 	bl	8001b00 <HAL_FDCAN_GetRxMessage>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 8000d6a:	f000 f813 	bl	8000d94 <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2101      	movs	r1, #1
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 ffcc 	bl	8001d10 <HAL_FDCAN_ActivateNotification>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 8000d7e:	f000 f809 	bl	8000d94 <Error_Handler>
		}
	}
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000084 	.word	0x20000084
 8000d90:	20000050 	.word	0x20000050

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <Error_Handler+0x8>

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ac      	sub	sp, #176	@ 0xb0
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2288      	movs	r2, #136	@ 0x88
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 fd25 	bl	8006820 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a2b      	ldr	r2, [pc, #172]	@ (8000e88 <HAL_FDCAN_MspInit+0xd8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d14e      	bne.n	8000e7e <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0304 	mov.w	r3, #4
 8000de8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000dec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fbe6 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000e02:	f7ff ffc7 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <HAL_FDCAN_MspInit+0xdc>)
 8000e08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e8c <HAL_FDCAN_MspInit+0xdc>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e12:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_FDCAN_MspInit+0xdc>)
 8000e18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_FDCAN_MspInit+0xdc>)
 8000e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e2a:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <HAL_FDCAN_MspInit+0xdc>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_FDCAN_MspInit+0xdc>)
 8000e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB12     ------> FDCAN1_RX
    PB7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_7;
 8000e42:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
 8000e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e5c:	2309      	movs	r3, #9
 8000e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e66:	4619      	mov	r1, r3
 8000e68:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <HAL_FDCAN_MspInit+0xe0>)
 8000e6a:	f001 fa97 	bl	800239c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2027      	movs	r0, #39	@ 0x27
 8000e74:	f000 fb00 	bl	8001478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e78:	2027      	movs	r0, #39	@ 0x27
 8000e7a:	f000 fb17 	bl	80014ac <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	37b0      	adds	r7, #176	@ 0xb0
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	4000a400 	.word	0x4000a400
 8000e8c:	44020c00 	.word	0x44020c00
 8000e90:	42020400 	.word	0x42020400

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0ac      	sub	sp, #176	@ 0xb0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2288      	movs	r2, #136	@ 0x88
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f005 fcb3 	bl	8006820 <memset>
  if(huart->Instance==USART3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8000f68 <HAL_UART_MspInit+0xd4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d14c      	bne.n	8000f5e <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec4:	f04f 0204 	mov.w	r2, #4
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fb75 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000ee4:	f7ff ff56 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee8:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <HAL_UART_MspInit+0xd8>)
 8000eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000eee:	4a1f      	ldr	r2, [pc, #124]	@ (8000f6c <HAL_UART_MspInit+0xd8>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_UART_MspInit+0xd8>)
 8000efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0xd8>)
 8000f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f0c:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <HAL_UART_MspInit+0xd8>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_UART_MspInit+0xd8>)
 8000f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000f24:	2318      	movs	r3, #24
 8000f26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000f3c:	230d      	movs	r3, #13
 8000f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <HAL_UART_MspInit+0xdc>)
 8000f4a:	f001 fa27 	bl	800239c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	203c      	movs	r0, #60	@ 0x3c
 8000f54:	f000 fa90 	bl	8001478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f58:	203c      	movs	r0, #60	@ 0x3c
 8000f5a:	f000 faa7 	bl	80014ac <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f5e:	bf00      	nop
 8000f60:	37b0      	adds	r7, #176	@ 0xb0
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	44020c00 	.word	0x44020c00
 8000f70:	42020000 	.word	0x42020000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 f97d 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI3_BUTTON2_Pin);
 8000fd6:	2008      	movs	r0, #8
 8000fd8:	f001 fb4a 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI4_BUTTON4_Pin);
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f001 fb43 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}

08000fee <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI5_BUTTON3_Pin);
 8000ff2:	2020      	movs	r0, #32
 8000ff4:	f001 fb3c 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI8_BUTTON1_Pin);
 8001000:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001004:	f001 fb34 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8001010:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001014:	f001 fb2c 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001020:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001024:	f001 fb24 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <FDCAN1_IT0_IRQHandler+0x10>)
 8001032:	f000 ff53 	bl	8001edc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000008c 	.word	0x2000008c

08001040 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <USART3_IRQHandler+0x10>)
 8001046:	f004 fbe1 	bl	800580c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000f0 	.word	0x200000f0

08001054 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <SystemInit+0xc8>)
 800105c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001060:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <SystemInit+0xc8>)
 8001062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001066:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800106a:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <SystemInit+0xcc>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001070:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <SystemInit+0xcc>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001076:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <SystemInit+0xcc>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <SystemInit+0xcc>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4927      	ldr	r1, [pc, #156]	@ (8001120 <SystemInit+0xcc>)
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <SystemInit+0xd0>)
 8001084:	4013      	ands	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <SystemInit+0xcc>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <SystemInit+0xcc>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <SystemInit+0xcc>)
 8001096:	4a24      	ldr	r2, [pc, #144]	@ (8001128 <SystemInit+0xd4>)
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <SystemInit+0xcc>)
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <SystemInit+0xcc>)
 80010a2:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <SystemInit+0xd4>)
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <SystemInit+0xcc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <SystemInit+0xcc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <SystemInit+0xcc>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <SystemInit+0xcc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <SystemInit+0xc8>)
 80010c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <SystemInit+0xd8>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80010ce:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80010d6:	d003      	beq.n	80010e0 <SystemInit+0x8c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80010de:	d117      	bne.n	8001110 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <SystemInit+0xd8>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <SystemInit+0xd8>)
 80010ee:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <SystemInit+0xdc>)
 80010f0:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <SystemInit+0xd8>)
 80010f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <SystemInit+0xe0>)
 80010f6:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <SystemInit+0xd8>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <SystemInit+0xd8>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <SystemInit+0xd8>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	4a08      	ldr	r2, [pc, #32]	@ (800112c <SystemInit+0xd8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	61d3      	str	r3, [r2, #28]
  }
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	44020c00 	.word	0x44020c00
 8001124:	fae2eae3 	.word	0xfae2eae3
 8001128:	01010280 	.word	0x01010280
 800112c:	40022000 	.word	0x40022000
 8001130:	08192a3b 	.word	0x08192a3b
 8001134:	4c5d6e7f 	.word	0x4c5d6e7f

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001170 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800113c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113e:	e003      	b.n	8001148 <LoopCopyDataInit>

08001140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001146:	3104      	adds	r1, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001148:	480b      	ldr	r0, [pc, #44]	@ (8001178 <LoopForever+0xa>)
	ldr	r3, =_edata
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <LoopForever+0xe>)
	adds	r2, r0, r1
 800114c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001150:	d3f6      	bcc.n	8001140 <CopyDataInit>
	ldr	r2, =_sbss
 8001152:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001154:	e002      	b.n	800115c <LoopFillZerobss>

08001156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <LoopForever+0x16>)
	cmp	r2, r3
 800115e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001160:	d3f9      	bcc.n	8001156 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001162:	f7ff ff77 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001166:	f005 fb63 	bl	8006830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116a:	f7ff fa21 	bl	80005b0 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001170:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001174:	08006904 	.word	0x08006904
	ldr	r0, =_sdata
 8001178:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800117c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001180:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001184:	2000018c 	.word	0x2000018c

08001188 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_IRQHandler>
	...

0800118c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f966 	bl	8001462 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001196:	f002 f88d 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_Init+0x44>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	490b      	ldr	r1, [pc, #44]	@ (80011d4 <HAL_Init+0x48>)
 80011a6:	5ccb      	ldrb	r3, [r1, r3]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_Init+0x4c>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011b0:	2004      	movs	r0, #4
 80011b2:	f000 f9ab 	bl	800150c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f810 	bl	80011dc <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e002      	b.n	80011cc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fdeb 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	44020c00 	.word	0x44020c00
 80011d4:	080068a4 	.word	0x080068a4
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011e8:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <HAL_InitTick+0xdc>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e05c      	b.n	80012ae <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011f4:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <HAL_InitTick+0xe0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d10c      	bne.n	800121a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001200:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <HAL_InitTick+0xe4>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e037      	b.n	800128a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800121a:	f000 f9cf 	bl	80015bc <HAL_SYSTICK_GetCLKSourceConfig>
 800121e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d023      	beq.n	800126e <HAL_InitTick+0x92>
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d82d      	bhi.n	8001288 <HAL_InitTick+0xac>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_InitTick+0x5e>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d00d      	beq.n	8001254 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001238:	e026      	b.n	8001288 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800123a:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <HAL_InitTick+0xe4>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001248:	fbb3 f3f1 	udiv	r3, r3, r1
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001250:	60fb      	str	r3, [r7, #12]
        break;
 8001252:	e01a      	b.n	800128a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001262:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	60fb      	str	r3, [r7, #12]
        break;
 800126c:	e00d      	b.n	800128a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001278:	fbb3 f3f2 	udiv	r3, r3, r2
 800127c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	60fb      	str	r3, [r7, #12]
        break;
 8001286:	e000      	b.n	800128a <HAL_InitTick+0xae>
        break;
 8001288:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f91c 	bl	80014c8 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e009      	b.n	80012ae <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129a:	2200      	movs	r2, #0
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f04f 30ff 	mov.w	r0, #4294967295
 80012a2:	f000 f8e9 	bl	8001478 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <HAL_InitTick+0xe8>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000000c 	.word	0x2000000c
 80012bc:	e000e010 	.word	0xe000e010
 80012c0:	20000004 	.word	0x20000004
 80012c4:	20000008 	.word	0x20000008

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000188 	.word	0x20000188

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000188 	.word	0x20000188

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	@ (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff4c 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001486:	f7ff ff63 	bl	8001350 <__NVIC_GetPriorityGrouping>
 800148a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	6978      	ldr	r0, [r7, #20]
 8001492:	f7ff ffb3 	bl	80013fc <NVIC_EncodePriority>
 8001496:	4602      	mov	r2, r0
 8001498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff82 	bl	80013a8 <__NVIC_SetPriority>
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff56 	bl	800136c <__NVIC_EnableIRQ>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d8:	d301      	bcc.n	80014de <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80014da:	2301      	movs	r3, #1
 80014dc:	e00d      	b.n	80014fa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <HAL_SYSTICK_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_SYSTICK_Config+0x40>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_SYSTICK_Config+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <HAL_SYSTICK_Config+0x40>)
 80014f2:	f043 0303 	orr.w	r3, r3, #3
 80014f6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b04      	cmp	r3, #4
 8001518:	d844      	bhi.n	80015a4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800151a:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001543 	.word	0x08001543
 8001524:	08001561 	.word	0x08001561
 8001528:	08001583 	.word	0x08001583
 800152c:	080015a5 	.word	0x080015a5
 8001530:	08001535 	.word	0x08001535
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6013      	str	r3, [r2, #0]
      break;
 8001540:	e031      	b.n	80015a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001550:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001554:	4a18      	ldr	r2, [pc, #96]	@ (80015b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001556:	f023 030c 	bic.w	r3, r3, #12
 800155a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800155e:	e022      	b.n	80015a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001566:	f023 0304 	bic.w	r3, r3, #4
 800156a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800156e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001572:	f023 030c 	bic.w	r3, r3, #12
 8001576:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001580:	e011      	b.n	80015a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001582:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001594:	f023 030c 	bic.w	r3, r3, #12
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015a2:	e000      	b.n	80015a6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80015a4:	bf00      	nop
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010
 80015b8:	44020c00 	.word	0x44020c00

080015bc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80015ce:	2304      	movs	r3, #4
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e01e      	b.n	8001612 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80015d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d00f      	beq.n	8001606 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d80f      	bhi.n	800160c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d003      	beq.n	8001600 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80015f8:	e008      	b.n	800160c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
        break;
 80015fe:	e008      	b.n	8001612 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001600:	2301      	movs	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
        break;
 8001604:	e005      	b.n	8001612 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001606:	2302      	movs	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
        break;
 800160a:	e002      	b.n	8001612 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
        break;
 8001610:	bf00      	nop
    }
  }
  return systick_source;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e010 	.word	0xe000e010
 8001624:	44020c00 	.word	0x44020c00

08001628 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001630:	f7ff fe5e 	bl	80012f0 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e06b      	b.n	8001718 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d008      	beq.n	800165e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e05c      	b.n	8001718 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0204 	orr.w	r2, r2, #4
 800166c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2205      	movs	r2, #5
 8001672:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001676:	e020      	b.n	80016ba <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001678:	f7ff fe3a 	bl	80012f0 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b05      	cmp	r3, #5
 8001684:	d919      	bls.n	80016ba <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f043 0210 	orr.w	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2203      	movs	r2, #3
 8001696:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800169e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016aa:	2201      	movs	r2, #1
 80016ac:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e02e      	b.n	8001718 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0d7      	beq.n	8001678 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0202 	orr.w	r2, r2, #2
 80016d6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2204      	movs	r2, #4
 80016dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80016e8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001702:	2201      	movs	r2, #1
 8001704:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e019      	b.n	8001766 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d004      	beq.n	8001748 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2220      	movs	r2, #32
 8001742:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e00e      	b.n	8001766 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2204      	movs	r2, #4
 800174c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e147      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fb08 	bl	8000db0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0210 	bic.w	r2, r2, #16
 80017ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7ff fd9e 	bl	80012f0 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017b6:	e012      	b.n	80017de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017b8:	f7ff fd9a 	bl	80012f0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	d90b      	bls.n	80017de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e11b      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d0e5      	beq.n	80017b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017fc:	f7ff fd78 	bl	80012f0 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001802:	e012      	b.n	800182a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001804:	f7ff fd74 	bl	80012f0 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d90b      	bls.n	800182a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0f5      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0e5      	beq.n	8001804 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0202 	orr.w	r2, r2, #2
 8001846:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a74      	ldr	r2, [pc, #464]	@ (8001a20 <HAL_FDCAN_Init+0x2ac>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d103      	bne.n	800185a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001852:	4a74      	ldr	r2, [pc, #464]	@ (8001a24 <HAL_FDCAN_Init+0x2b0>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7c1b      	ldrb	r3, [r3, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d108      	bne.n	8001874 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	e007      	b.n	8001884 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001882:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7c5b      	ldrb	r3, [r3, #17]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	e007      	b.n	80018ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7c9b      	ldrb	r3, [r3, #18]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018c4:	619a      	str	r2, [r3, #24]
 80018c6:	e007      	b.n	80018d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80018fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0210 	bic.w	r2, r2, #16
 800190c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	e02c      	b.n	8001982 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d028      	beq.n	8001982 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d01c      	beq.n	8001972 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001946:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0210 	orr.w	r2, r2, #16
 8001956:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d110      	bne.n	8001982 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	e007      	b.n	8001982 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0220 	orr.w	r2, r2, #32
 8001980:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	3b01      	subs	r3, #1
 8001988:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	3b01      	subs	r3, #1
 8001990:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001992:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800199a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019b6:	d115      	bne.n	80019e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	3b01      	subs	r3, #1
 80019c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	3b01      	subs	r3, #1
 80019ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	3b01      	subs	r3, #1
 80019da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fbfc 	bl	80021f8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	4000a400 	.word	0x4000a400
 8001a24:	4000a500 	.word	0x4000a500

08001a28 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d110      	bne.n	8001a5e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e006      	b.n	8001a6c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a62:	f043 0204 	orr.w	r2, r3, #4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
  }
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d12c      	bne.n	8001aea <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e023      	b.n	8001af8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fbec 	bl	80022a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001adc:	2201      	movs	r2, #1
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e006      	b.n	8001af8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	f043 0208 	orr.w	r2, r3, #8
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	@ 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b18:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001b1a:	7efb      	ldrb	r3, [r7, #27]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	f040 80e8 	bne.w	8001cf2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b40      	cmp	r3, #64	@ 0x40
 8001b26:	d137      	bne.n	8001b98 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0db      	b.n	8001d00 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b50:	0e1b      	lsrs	r3, r3, #24
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10a      	bne.n	8001b70 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	4413      	add	r3, r2
 8001b82:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b96:	e036      	b.n	8001c06 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0a3      	b.n	8001d00 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bc0:	0e1b      	lsrs	r3, r3, #24
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d10a      	bne.n	8001be0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0c9b      	lsrs	r3, r3, #18
 8001c20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e005      	b.n	8001c36 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	3304      	adds	r3, #4
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0e1b      	lsrs	r3, r3, #24
 8001c8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0fda      	lsrs	r2, r3, #31
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	e00a      	b.n	8001cc2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d3ec      	bcc.n	8001cac <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b40      	cmp	r3, #64	@ 0x40
 8001cd6:	d105      	bne.n	8001ce4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001ce2:	e004      	b.n	8001cee <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e006      	b.n	8001d00 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf6:	f043 0208 	orr.w	r2, r3, #8
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	372c      	adds	r7, #44	@ 0x2c
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	080068bc 	.word	0x080068bc

08001d10 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d22:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d003      	beq.n	8001d32 <HAL_FDCAN_ActivateNotification+0x22>
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	f040 80c8 	bne.w	8001ec2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03b      	beq.n	8001dc6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d031      	beq.n	8001dc6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d027      	beq.n	8001dc6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01d      	beq.n	8001dc6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d013      	beq.n	8001dc6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00c      	beq.n	8001dd6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d13b      	bne.n	8001e62 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d131      	bne.n	8001e62 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d127      	bne.n	8001e62 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11d      	bne.n	8001e62 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d113      	bne.n	8001e62 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0202 	orr.w	r2, r2, #2
 8001e70:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e006      	b.n	8001ed0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eea:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ef8:	4013      	ands	r3, r2
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f10:	4013      	ands	r3, r2
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	4013      	ands	r3, r2
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f32:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001f36:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	6a3a      	ldr	r2, [r7, #32]
 8001f40:	4013      	ands	r3, r2
 8001f42:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f4e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2240      	movs	r2, #64	@ 0x40
 8001f86:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f916 	bl	80021ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d019      	beq.n	8001fcc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d014      	beq.n	8001fcc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001faa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fc2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8d8 	bl	800217c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fd8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8a2 	bl	8002126 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fea6 	bl	8000d44 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002004:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002006:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f897 	bl	800213c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00c      	beq.n	8002032 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f890 	bl	8002152 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d018      	beq.n	800206e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d013      	beq.n	800206e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800204e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2280      	movs	r2, #128	@ 0x80
 8002064:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f87c 	bl	8002166 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00c      	beq.n	8002092 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800208a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f880 	bl	8002192 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00c      	beq.n	80020b6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020ae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f878 	bl	80021a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00f      	beq.n	80020e0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020ee:	69f9      	ldr	r1, [r7, #28]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f876 	bl	80021e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f858 	bl	80021ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800211e:	bf00      	nop
 8002120:	3730      	adds	r7, #48	@ 0x30
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002200:	4b27      	ldr	r3, [pc, #156]	@ (80022a0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002202:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002212:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221a:	041a      	lsls	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002238:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	061a      	lsls	r2, r3, #24
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e005      	b.n	8002286 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3304      	adds	r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3f3      	bcc.n	800227a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	4000ac00 	.word	0x4000ac00

080022a4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80022c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e00a      	b.n	80022e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80022d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80022de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80022f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80022fc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	3304      	adds	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3304      	adds	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e020      	b.n	800237a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3303      	adds	r3, #3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3302      	adds	r3, #2
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	440b      	add	r3, r1
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002350:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	440b      	add	r3, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800235e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	440a      	add	r2, r1
 8002366:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002368:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	3304      	adds	r3, #4
 8002372:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3304      	adds	r3, #4
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4a06      	ldr	r2, [pc, #24]	@ (8002398 <FDCAN_CopyMessageToRAM+0xf4>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	461a      	mov	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	4293      	cmp	r3, r2
 8002388:	d3d6      	bcc.n	8002338 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	3724      	adds	r7, #36	@ 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	080068bc 	.word	0x080068bc

0800239c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023aa:	e136      	b.n	800261a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8128 	beq.w	8002614 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x38>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d125      	bne.n	8002420 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4013      	ands	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	6979      	ldr	r1, [r7, #20]
 800241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d00b      	beq.n	8002474 <HAL_GPIO_Init+0xd8>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002468:	2b11      	cmp	r3, #17
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d130      	bne.n	80024d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024aa:	2201      	movs	r2, #1
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4013      	ands	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 0201 	and.w	r2, r3, #1
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d017      	beq.n	800250e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4013      	ands	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d07c      	beq.n	8002614 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800251a:	4a47      	ldr	r2, [pc, #284]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3318      	adds	r3, #24
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4013      	ands	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0a9a      	lsrs	r2, r3, #10
 8002542:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <HAL_GPIO_Init+0x2a0>)
 8002544:	4013      	ands	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	f002 0203 	and.w	r2, r2, #3
 800254c:	00d2      	lsls	r2, r2, #3
 800254e:	4093      	lsls	r3, r2
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002556:	4938      	ldr	r1, [pc, #224]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3318      	adds	r3, #24
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002564:	4b34      	ldr	r3, [pc, #208]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43db      	mvns	r3, r3
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002588:	4a2b      	ldr	r2, [pc, #172]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43db      	mvns	r3, r3
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4013      	ands	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80025b2:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 80025ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4013      	ands	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80025de:	4a16      	ldr	r2, [pc, #88]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80025e6:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 80025e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800260c:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <HAL_GPIO_Init+0x29c>)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3301      	adds	r3, #1
 8002618:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	f47f aec1 	bne.w	80023ac <HAL_GPIO_Init+0x10>
  }
}
 800262a:	bf00      	nop
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	44022000 	.word	0x44022000
 800263c:	002f7f7f 	.word	0x002f7f7f

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800265c:	e002      	b.n	8002664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002686:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f814 	bl	80026bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80026a0:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fa5f 	bl	8000b6c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	44022000 	.word	0x44022000

080026bc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f000 bc28 	b.w	8002f38 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e8:	4b94      	ldr	r3, [pc, #592]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f003 0318 	and.w	r3, r3, #24
 80026f0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80026f2:	4b92      	ldr	r3, [pc, #584]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x46>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2b18      	cmp	r3, #24
 8002712:	d114      	bne.n	800273e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d111      	bne.n	800273e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f000 bc08 	b.w	8002f38 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002728:	4b84      	ldr	r3, [pc, #528]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	4981      	ldr	r1, [pc, #516]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002738:	4313      	orrs	r3, r2
 800273a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800273c:	e040      	b.n	80027c0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d023      	beq.n	800278e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002746:	4b7d      	ldr	r3, [pc, #500]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7c      	ldr	r2, [pc, #496]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fdcd 	bl	80012f0 <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800275a:	f7fe fdc9 	bl	80012f0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e3e5      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800276c:	4b73      	ldr	r3, [pc, #460]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002778:	4b70      	ldr	r3, [pc, #448]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	496d      	ldr	r1, [pc, #436]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002788:	4313      	orrs	r3, r2
 800278a:	618b      	str	r3, [r1, #24]
 800278c:	e018      	b.n	80027c0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800278e:	4b6b      	ldr	r3, [pc, #428]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6a      	ldr	r2, [pc, #424]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fda9 	bl	80012f0 <HAL_GetTick>
 800279e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80027a2:	f7fe fda5 	bl	80012f0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e3c1      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80027b4:	4b61      	ldr	r3, [pc, #388]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a0 	beq.w	800290e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_OscConfig+0x10c>
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b18      	cmp	r3, #24
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 8092 	bne.w	800290e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e3a4      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x132>
 80027f8:	4b50      	ldr	r3, [pc, #320]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4f      	ldr	r2, [pc, #316]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e058      	b.n	80028b8 <HAL_RCC_OscConfig+0x1e4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d112      	bne.n	8002834 <HAL_RCC_OscConfig+0x160>
 800280e:	4b4b      	ldr	r3, [pc, #300]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4a      	ldr	r2, [pc, #296]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b48      	ldr	r3, [pc, #288]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a47      	ldr	r2, [pc, #284]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002820:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b45      	ldr	r3, [pc, #276]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a44      	ldr	r2, [pc, #272]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e041      	b.n	80028b8 <HAL_RCC_OscConfig+0x1e4>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x190>
 800283e:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3e      	ldr	r2, [pc, #248]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b3c      	ldr	r3, [pc, #240]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3b      	ldr	r2, [pc, #236]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002850:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b39      	ldr	r3, [pc, #228]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a38      	ldr	r2, [pc, #224]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e029      	b.n	80028b8 <HAL_RCC_OscConfig+0x1e4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800286c:	d112      	bne.n	8002894 <HAL_RCC_OscConfig+0x1c0>
 800286e:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a32      	ldr	r2, [pc, #200]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b30      	ldr	r3, [pc, #192]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2f      	ldr	r2, [pc, #188]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002880:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b2d      	ldr	r3, [pc, #180]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2c      	ldr	r2, [pc, #176]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e011      	b.n	80028b8 <HAL_RCC_OscConfig+0x1e4>
 8002894:	4b29      	ldr	r3, [pc, #164]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a28      	ldr	r2, [pc, #160]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b26      	ldr	r3, [pc, #152]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a25      	ldr	r2, [pc, #148]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b23      	ldr	r3, [pc, #140]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a22      	ldr	r2, [pc, #136]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80028b2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fd16 	bl	80012f0 <HAL_GetTick>
 80028c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80028c8:	f7fe fd12 	bl	80012f0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	@ 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e32e      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x1f4>
 80028e6:	e012      	b.n	800290e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fd02 	bl	80012f0 <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fcfe 	bl	80012f0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e31a      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <HAL_RCC_OscConfig+0x268>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 809a 	beq.w	8002a50 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x25a>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	2b18      	cmp	r3, #24
 8002926:	d149      	bne.n	80029bc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d146      	bne.n	80029bc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e2fe      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
 800293a:	bf00      	nop
 800293c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11c      	bne.n	8002980 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002946:	4b9a      	ldr	r3, [pc, #616]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0218 	and.w	r2, r3, #24
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	429a      	cmp	r2, r3
 8002954:	d014      	beq.n	8002980 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002956:	4b96      	ldr	r3, [pc, #600]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0218 	bic.w	r2, r3, #24
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4993      	ldr	r1, [pc, #588]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002968:	f000 fdd0 	bl	800350c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800296c:	4b91      	ldr	r3, [pc, #580]	@ (8002bb4 <HAL_RCC_OscConfig+0x4e0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fc33 	bl	80011dc <HAL_InitTick>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2db      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fcb6 	bl	80012f0 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002988:	f7fe fcb2 	bl	80012f0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e2ce      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299a:	4b85      	ldr	r3, [pc, #532]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80029a6:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	041b      	lsls	r3, r3, #16
 80029b4:	497e      	ldr	r1, [pc, #504]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80029ba:	e049      	b.n	8002a50 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80029c4:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 0218 	bic.w	r2, r3, #24
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4977      	ldr	r1, [pc, #476]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80029d6:	4b76      	ldr	r3, [pc, #472]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fc85 	bl	80012f0 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80029ea:	f7fe fc81 	bl	80012f0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e29d      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002a08:	4b69      	ldr	r3, [pc, #420]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	4966      	ldr	r1, [pc, #408]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	610b      	str	r3, [r1, #16]
 8002a1c:	e018      	b.n	8002a50 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1e:	4b64      	ldr	r3, [pc, #400]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a63      	ldr	r2, [pc, #396]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fc61 	bl	80012f0 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a32:	f7fe fc5d 	bl	80012f0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e279      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a44:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a64:	4b52      	ldr	r3, [pc, #328]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a6a:	4a51      	ldr	r2, [pc, #324]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fc3c 	bl	80012f0 <HAL_GetTick>
 8002a78:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fc38 	bl	80012f0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e254      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a8e:	4b48      	ldr	r3, [pc, #288]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ef      	beq.n	8002a7c <HAL_RCC_OscConfig+0x3a8>
 8002a9c:	e01b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9e:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aa4:	4a42      	ldr	r2, [pc, #264]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002aa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7fe fc1f 	bl	80012f0 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fc1b 	bl	80012f0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e237      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ace:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ef      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80d2 	beq.w	8002c88 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <HAL_RCC_OscConfig+0x4e4>)
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d118      	bne.n	8002b22 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002af0:	4b31      	ldr	r3, [pc, #196]	@ (8002bb8 <HAL_RCC_OscConfig+0x4e4>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	4a30      	ldr	r2, [pc, #192]	@ (8002bb8 <HAL_RCC_OscConfig+0x4e4>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afc:	f7fe fbf8 	bl	80012f0 <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fbf4 	bl	80012f0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e210      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002b16:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <HAL_RCC_OscConfig+0x4e4>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d108      	bne.n	8002b3c <HAL_RCC_OscConfig+0x468>
 8002b2a:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b30:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b3a:	e074      	b.n	8002c26 <HAL_RCC_OscConfig+0x552>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d118      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4a2>
 8002b44:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b4a:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b54:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b5a:	4a15      	ldr	r2, [pc, #84]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b6a:	4a11      	ldr	r2, [pc, #68]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b74:	e057      	b.n	8002c26 <HAL_RCC_OscConfig+0x552>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d11e      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4e8>
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b84:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b8e:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b94:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba4:	4a02      	ldr	r2, [pc, #8]	@ (8002bb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x552>
 8002bb0:	44020c00 	.word	0x44020c00
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	44020800 	.word	0x44020800
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b85      	cmp	r3, #133	@ 0x85
 8002bc2:	d118      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x522>
 8002bc4:	4ba2      	ldr	r3, [pc, #648]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bca:	4aa1      	ldr	r2, [pc, #644]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bd4:	4b9e      	ldr	r3, [pc, #632]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bda:	4a9d      	ldr	r2, [pc, #628]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002be4:	4b9a      	ldr	r3, [pc, #616]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bea:	4a99      	ldr	r2, [pc, #612]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bf4:	e017      	b.n	8002c26 <HAL_RCC_OscConfig+0x552>
 8002bf6:	4b96      	ldr	r3, [pc, #600]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bfc:	4a94      	ldr	r2, [pc, #592]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c06:	4b92      	ldr	r3, [pc, #584]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c0c:	4a90      	ldr	r2, [pc, #576]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002c0e:	f023 0304 	bic.w	r3, r3, #4
 8002c12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c16:	4b8e      	ldr	r3, [pc, #568]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c1c:	4a8c      	ldr	r2, [pc, #560]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fb5f 	bl	80012f0 <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fb5b 	bl	80012f0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e175      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4c:	4b80      	ldr	r3, [pc, #512]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ed      	beq.n	8002c36 <HAL_RCC_OscConfig+0x562>
 8002c5a:	e015      	b.n	8002c88 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fb48 	bl	80012f0 <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7fe fb44 	bl	80012f0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e15e      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7a:	4b75      	ldr	r3, [pc, #468]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ed      	bne.n	8002c64 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d036      	beq.n	8002d02 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d019      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002ca2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fb22 	bl	80012f0 <HAL_GetTick>
 8002cac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002cb0:	f7fe fb1e 	bl	80012f0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e13a      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x5dc>
 8002cce:	e018      	b.n	8002d02 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fb08 	bl	80012f0 <HAL_GetTick>
 8002ce0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002ce4:	f7fe fb04 	bl	80012f0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e120      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002cf6:	4b56      	ldr	r3, [pc, #344]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8115 	beq.w	8002f36 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b18      	cmp	r3, #24
 8002d10:	f000 80af 	beq.w	8002e72 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	f040 8086 	bne.w	8002e2a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4b      	ldr	r2, [pc, #300]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fae1 	bl	80012f0 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fadd 	bl	80012f0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0f9      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d44:	4b42      	ldr	r3, [pc, #264]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002d50:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d58:	f023 0303 	bic.w	r3, r3, #3
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d64:	0212      	lsls	r2, r2, #8
 8002d66:	430a      	orrs	r2, r1
 8002d68:	4939      	ldr	r1, [pc, #228]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	025b      	lsls	r3, r3, #9
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	3b01      	subs	r3, #1
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d9e:	492c      	ldr	r1, [pc, #176]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002da4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002daa:	f023 0310 	bic.w	r3, r3, #16
 8002dae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db4:	4a26      	ldr	r2, [pc, #152]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002dba:	4b25      	ldr	r3, [pc, #148]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	4a24      	ldr	r2, [pc, #144]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dc0:	f043 0310 	orr.w	r3, r3, #16
 8002dc4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	f023 020c 	bic.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	491f      	ldr	r1, [pc, #124]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	f023 0220 	bic.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de4:	491a      	ldr	r1, [pc, #104]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dea:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	4a18      	ldr	r2, [pc, #96]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002df6:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a15      	ldr	r2, [pc, #84]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fa75 	bl	80012f0 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002e0a:	f7fe fa71 	bl	80012f0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e08d      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x736>
 8002e28:	e085      	b.n	8002f36 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a08      	ldr	r2, [pc, #32]	@ (8002e50 <HAL_RCC_OscConfig+0x77c>)
 8002e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe fa5b 	bl	80012f0 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe fa57 	bl	80012f0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d903      	bls.n	8002e54 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e073      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
 8002e50:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e54:	4b3a      	ldr	r3, [pc, #232]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002e60:	4b37      	ldr	r3, [pc, #220]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	4a36      	ldr	r2, [pc, #216]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002e66:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e70:	e061      	b.n	8002f36 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002e72:	4b33      	ldr	r3, [pc, #204]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e78:	4b31      	ldr	r3, [pc, #196]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d031      	beq.n	8002eea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d12a      	bne.n	8002eea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d122      	bne.n	8002eea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eae:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d11a      	bne.n	8002eea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	0a5b      	lsrs	r3, r3, #9
 8002eb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d111      	bne.n	8002eea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d108      	bne.n	8002eea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	0e1b      	lsrs	r3, r3, #24
 8002edc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e024      	b.n	8002f38 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002eee:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d01a      	beq.n	8002f36 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002f00:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	4a0e      	ldr	r2, [pc, #56]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f9f0 	bl	80012f0 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002f12:	bf00      	nop
 8002f14:	f7fe f9ec 	bl	80012f0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d0f9      	beq.n	8002f14 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002f2a:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_RCC_OscConfig+0x86c>)
 8002f30:	f043 0310 	orr.w	r3, r3, #16
 8002f34:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	44020c00 	.word	0x44020c00

08002f44 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e19e      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f58:	4b83      	ldr	r3, [pc, #524]	@ (8003168 <HAL_RCC_ClockConfig+0x224>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d910      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b80      	ldr	r3, [pc, #512]	@ (8003168 <HAL_RCC_ClockConfig+0x224>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 020f 	bic.w	r2, r3, #15
 8002f6e:	497e      	ldr	r1, [pc, #504]	@ (8003168 <HAL_RCC_ClockConfig+0x224>)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b7c      	ldr	r3, [pc, #496]	@ (8003168 <HAL_RCC_ClockConfig+0x224>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e186      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	4b74      	ldr	r3, [pc, #464]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d909      	bls.n	8002fba <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002fa6:	4b71      	ldr	r3, [pc, #452]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	496d      	ldr	r1, [pc, #436]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d012      	beq.n	8002fec <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	4b68      	ldr	r3, [pc, #416]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d909      	bls.n	8002fec <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	4961      	ldr	r1, [pc, #388]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003004:	429a      	cmp	r2, r3
 8003006:	d908      	bls.n	800301a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003008:	4b58      	ldr	r3, [pc, #352]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4955      	ldr	r1, [pc, #340]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003016:	4313      	orrs	r3, r2
 8003018:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d010      	beq.n	8003048 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	4b50      	ldr	r3, [pc, #320]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	429a      	cmp	r2, r3
 8003034:	d908      	bls.n	8003048 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003036:	4b4d      	ldr	r3, [pc, #308]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 020f 	bic.w	r2, r3, #15
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	494a      	ldr	r1, [pc, #296]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003044:	4313      	orrs	r3, r2
 8003046:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8093 	beq.w	800317c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800305e:	4b43      	ldr	r3, [pc, #268]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d121      	bne.n	80030ae <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e113      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003076:	4b3d      	ldr	r3, [pc, #244]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e107      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800308e:	4b37      	ldr	r3, [pc, #220]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0fb      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309e:	4b33      	ldr	r3, [pc, #204]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0f3      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80030ae:	4b2f      	ldr	r3, [pc, #188]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	492c      	ldr	r1, [pc, #176]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fe f916 	bl	80012f0 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030d0:	f7fe f90e 	bl	80012f0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0d7      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e6:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0318 	and.w	r3, r3, #24
 80030ee:	2b18      	cmp	r3, #24
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x18c>
 80030f2:	e043      	b.n	800317c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d112      	bne.n	8003122 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030fe:	f7fe f8f7 	bl	80012f0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0c0      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 0318 	and.w	r3, r3, #24
 800311c:	2b10      	cmp	r3, #16
 800311e:	d1ee      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
 8003120:	e02c      	b.n	800317c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d122      	bne.n	8003170 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe f8e0 	bl	80012f0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0a9      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003142:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <HAL_RCC_ClockConfig+0x228>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 0318 	and.w	r3, r3, #24
 800314a:	2b08      	cmp	r3, #8
 800314c:	d1ee      	bne.n	800312c <HAL_RCC_ClockConfig+0x1e8>
 800314e:	e015      	b.n	800317c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7fe f8ce 	bl	80012f0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d906      	bls.n	8003170 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e097      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
 8003166:	bf00      	nop
 8003168:	40022000 	.word	0x40022000
 800316c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003170:	4b4b      	ldr	r3, [pc, #300]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 0318 	and.w	r3, r3, #24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e9      	bne.n	8003150 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b44      	ldr	r3, [pc, #272]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003198:	4b41      	ldr	r3, [pc, #260]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f023 020f 	bic.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	493e      	ldr	r1, [pc, #248]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031aa:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <HAL_RCC_ClockConfig+0x360>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d210      	bcs.n	80031da <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b8:	4b3a      	ldr	r3, [pc, #232]	@ (80032a4 <HAL_RCC_ClockConfig+0x360>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 020f 	bic.w	r2, r3, #15
 80031c0:	4938      	ldr	r1, [pc, #224]	@ (80032a4 <HAL_RCC_ClockConfig+0x360>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c8:	4b36      	ldr	r3, [pc, #216]	@ (80032a4 <HAL_RCC_ClockConfig+0x360>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e05d      	b.n	8003296 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	4b2d      	ldr	r3, [pc, #180]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d208      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80031f6:	4b2a      	ldr	r3, [pc, #168]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	4927      	ldr	r1, [pc, #156]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d012      	beq.n	800323a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	4b21      	ldr	r3, [pc, #132]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003222:	429a      	cmp	r2, r3
 8003224:	d209      	bcs.n	800323a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003226:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	491a      	ldr	r1, [pc, #104]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 8003236:	4313      	orrs	r3, r2
 8003238:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003254:	429a      	cmp	r2, r3
 8003256:	d209      	bcs.n	800326c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	490e      	ldr	r1, [pc, #56]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800326c:	f000 f822 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <HAL_RCC_ClockConfig+0x35c>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	490b      	ldr	r1, [pc, #44]	@ (80032a8 <HAL_RCC_ClockConfig+0x364>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <HAL_RCC_ClockConfig+0x368>)
 8003284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x36c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd ffa6 	bl	80011dc <HAL_InitTick>
 8003290:	4603      	mov	r3, r0
 8003292:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003294:	7afb      	ldrb	r3, [r7, #11]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	44020c00 	.word	0x44020c00
 80032a4:	40022000 	.word	0x40022000
 80032a8:	080068a4 	.word	0x080068a4
 80032ac:	20000004 	.word	0x20000004
 80032b0:	20000008 	.word	0x20000008

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80032ba:	4b8c      	ldr	r3, [pc, #560]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0318 	and.w	r3, r3, #24
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032c6:	4b8a      	ldr	r3, [pc, #552]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x23c>)
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e107      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032cc:	4b87      	ldr	r3, [pc, #540]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f003 0318 	and.w	r3, r3, #24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80032d8:	4b84      	ldr	r3, [pc, #528]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80032e4:	4b81      	ldr	r3, [pc, #516]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	08db      	lsrs	r3, r3, #3
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	4a81      	ldr	r2, [pc, #516]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	e0f1      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80032f8:	4b7e      	ldr	r3, [pc, #504]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e0ee      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032fe:	4b7b      	ldr	r3, [pc, #492]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0318 	and.w	r3, r3, #24
 8003306:	2b10      	cmp	r3, #16
 8003308:	d102      	bne.n	8003310 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800330a:	4b7b      	ldr	r3, [pc, #492]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x244>)
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	e0e5      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003310:	4b76      	ldr	r3, [pc, #472]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0318 	and.w	r3, r3, #24
 8003318:	2b18      	cmp	r3, #24
 800331a:	f040 80dd 	bne.w	80034d8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800331e:	4b73      	ldr	r3, [pc, #460]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003328:	4b70      	ldr	r3, [pc, #448]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003332:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003334:	4b6d      	ldr	r3, [pc, #436]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003340:	4b6a      	ldr	r3, [pc, #424]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003344:	08db      	lsrs	r3, r3, #3
 8003346:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	fb02 f303 	mul.w	r3, r2, r3
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003358:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80b7 	beq.w	80034d2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d003      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0xbe>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d056      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x16a>
 8003370:	e077      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003372:	4b5e      	ldr	r3, [pc, #376]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02d      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800337e:	4b5b      	ldr	r3, [pc, #364]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	08db      	lsrs	r3, r3, #3
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	4a5a      	ldr	r2, [pc, #360]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x240>)
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	ee07 3a90 	vmov	s15, r3
 80033a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a8:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 80033aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80033bc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80034fc <HAL_RCC_GetSysClockFreq+0x248>
 80033c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80033c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80033d8:	e065      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	ee07 3a90 	vmov	s15, r3
 80033e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003500 <HAL_RCC_GetSysClockFreq+0x24c>
 80033e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ec:	4b3f      	ldr	r3, [pc, #252]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 80033ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80033fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003400:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80034fc <HAL_RCC_GetSysClockFreq+0x248>
 8003404:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003408:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800340c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003410:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003418:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800341c:	e043      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003428:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003504 <HAL_RCC_GetSysClockFreq+0x250>
 800342c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003430:	4b2e      	ldr	r3, [pc, #184]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003440:	ed97 6a02 	vldr	s12, [r7, #8]
 8003444:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80034fc <HAL_RCC_GetSysClockFreq+0x248>
 8003448:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800344c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003450:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003454:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003460:	e021      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x254>
 8003470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003484:	ed97 6a02 	vldr	s12, [r7, #8]
 8003488:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80034fc <HAL_RCC_GetSysClockFreq+0x248>
 800348c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003490:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003498:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800349c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80034a4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80034a6:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x238>)
 80034a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034aa:	0a5b      	lsrs	r3, r3, #9
 80034ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034b0:	3301      	adds	r3, #1
 80034b2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034be:	edd7 6a06 	vldr	s13, [r7, #24]
 80034c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ca:	ee17 3a90 	vmov	r3, s15
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	e004      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	e001      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80034d8:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80034da:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80034dc:	69fb      	ldr	r3, [r7, #28]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	@ 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	44020c00 	.word	0x44020c00
 80034f0:	003d0900 	.word	0x003d0900
 80034f4:	03d09000 	.word	0x03d09000
 80034f8:	016e3600 	.word	0x016e3600
 80034fc:	46000000 	.word	0x46000000
 8003500:	4c742400 	.word	0x4c742400
 8003504:	4bb71b00 	.word	0x4bb71b00
 8003508:	4a742400 	.word	0x4a742400

0800350c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003510:	f7ff fed0 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800351a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800351e:	4907      	ldr	r1, [pc, #28]	@ (800353c <HAL_RCC_GetHCLKFreq+0x30>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003522:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x34>)
 800352c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800352e:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x34>)
 8003530:	681b      	ldr	r3, [r3, #0]
}
 8003532:	4618      	mov	r0, r3
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	44020c00 	.word	0x44020c00
 800353c:	080068a4 	.word	0x080068a4
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003548:	f7ff ffe0 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	44020c00 	.word	0x44020c00
 800356c:	080068b4 	.word	0x080068b4

08003570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003574:	f7ff ffca 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4904      	ldr	r1, [pc, #16]	@ (8003598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	44020c00 	.word	0x44020c00
 8003598:	080068b4 	.word	0x080068b4

0800359c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80035a0:	f7ff ffb4 	bl	800350c <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	0b1b      	lsrs	r3, r3, #12
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4904      	ldr	r1, [pc, #16]	@ (80035c4 <HAL_RCC_GetPCLK3Freq+0x28>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	44020c00 	.word	0x44020c00
 80035c4:	080068b4 	.word	0x080068b4

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80035c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035cc:	b0aa      	sub	sp, #168	@ 0xa8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80035ec:	2500      	movs	r5, #0
 80035ee:	ea54 0305 	orrs.w	r3, r4, r5
 80035f2:	d00b      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80035f4:	4bb8      	ldr	r3, [pc, #736]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035fa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80035fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	4ab4      	ldr	r2, [pc, #720]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003606:	430b      	orrs	r3, r1
 8003608:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800360c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f002 0801 	and.w	r8, r2, #1
 8003618:	f04f 0900 	mov.w	r9, #0
 800361c:	ea58 0309 	orrs.w	r3, r8, r9
 8003620:	d038      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003622:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003628:	2b05      	cmp	r3, #5
 800362a:	d819      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003669 	.word	0x08003669
 8003638:	0800364d 	.word	0x0800364d
 800363c:	08003661 	.word	0x08003661
 8003640:	08003669 	.word	0x08003669
 8003644:	08003669 	.word	0x08003669
 8003648:	08003669 	.word	0x08003669
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800364c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003650:	3308      	adds	r3, #8
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fff2 	bl	800563c <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800365e:	e004      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003672:	4b99      	ldr	r3, [pc, #612]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003678:	f023 0107 	bic.w	r1, r3, #7
 800367c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	4a95      	ldr	r2, [pc, #596]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003684:	430b      	orrs	r3, r1
 8003686:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003690:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003694:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f002 0a02 	and.w	sl, r2, #2
 80036a0:	f04f 0b00 	mov.w	fp, #0
 80036a4:	ea5a 030b 	orrs.w	r3, sl, fp
 80036a8:	d03c      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80036aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	2b28      	cmp	r3, #40	@ 0x28
 80036b2:	d01b      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x124>
 80036b4:	2b28      	cmp	r3, #40	@ 0x28
 80036b6:	d815      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d019      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d811      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80036c0:	2b18      	cmp	r3, #24
 80036c2:	d017      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80036c4:	2b18      	cmp	r3, #24
 80036c6:	d80d      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d109      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036d4:	3308      	adds	r3, #8
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 ffb0 	bl	800563c <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80036e2:	e00a      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036ea:	e006      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80036ec:	bf00      	nop
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003702:	4b75      	ldr	r3, [pc, #468]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003708:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800370c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	4a71      	ldr	r2, [pc, #452]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003714:	430b      	orrs	r3, r1
 8003716:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800371a:	e003      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003720:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003724:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f002 0304 	and.w	r3, r2, #4
 8003730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800373a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800373e:	460b      	mov	r3, r1
 8003740:	4313      	orrs	r3, r2
 8003742:	d040      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003744:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800374e:	d01e      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003750:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003754:	d817      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800375a:	d01a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800375c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003760:	d811      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003762:	2bc0      	cmp	r3, #192	@ 0xc0
 8003764:	d017      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003766:	2bc0      	cmp	r3, #192	@ 0xc0
 8003768:	d80d      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d015      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	d109      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003772:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003776:	3308      	adds	r3, #8
 8003778:	4618      	mov	r0, r3
 800377a:	f001 ff5f 	bl	800563c <RCCEx_PLL2_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003784:	e00a      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800378c:	e006      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800378e:	bf00      	nop
 8003790:	e004      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800379a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80037a4:	4b4c      	ldr	r3, [pc, #304]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037aa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	4a48      	ldr	r2, [pc, #288]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037c2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d043      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80037e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80037f0:	d021      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80037f6:	d81a      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80037f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037fc:	d01d      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80037fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003802:	d814      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003804:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003808:	d019      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800380a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800380e:	d80e      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d016      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003818:	d109      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800381a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800381e:	3308      	adds	r3, #8
 8003820:	4618      	mov	r0, r3
 8003822:	f001 ff0b 	bl	800563c <RCCEx_PLL2_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800382c:	e00a      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003836:	bf00      	nop
 8003838:	e004      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003844:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10c      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800384c:	4b22      	ldr	r3, [pc, #136]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800384e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003852:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003856:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	4a1e      	ldr	r2, [pc, #120]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800385e:	430b      	orrs	r3, r1
 8003860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800386a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800387a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800387c:	2300      	movs	r3, #0
 800387e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003880:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003884:	460b      	mov	r3, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	d03e      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800388a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800388e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003890:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003894:	d01b      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003896:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800389a:	d814      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800389c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a0:	d017      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80038a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a6:	d80e      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d017      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b0:	d109      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b6:	3308      	adds	r3, #8
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 febf 	bl	800563c <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80038c4:	e00b      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038cc:	e007      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80038ce:	bf00      	nop
 80038d0:	e005      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80038d2:	bf00      	nop
 80038d4:	e003      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x316>
 80038d6:	bf00      	nop
 80038d8:	44020c00 	.word	0x44020c00
        break;
 80038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80038e6:	4ba5      	ldr	r3, [pc, #660]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	4aa1      	ldr	r2, [pc, #644]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003904:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003908:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003914:	673b      	str	r3, [r7, #112]	@ 0x70
 8003916:	2300      	movs	r3, #0
 8003918:	677b      	str	r3, [r7, #116]	@ 0x74
 800391a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d03b      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800392e:	d01b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003930:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003934:	d814      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003936:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800393a:	d017      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800393c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003940:	d80e      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d014      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003946:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800394a:	d109      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800394c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003950:	3308      	adds	r3, #8
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fe72 	bl	800563c <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800395e:	e008      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003966:	e004      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003968:	bf00      	nop
 800396a:	e002      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003972:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10c      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800397a:	4b80      	ldr	r3, [pc, #512]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800397c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003980:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003984:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800398c:	430b      	orrs	r3, r1
 800398e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003992:	e003      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003998:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800399c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80039a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039aa:	2300      	movs	r3, #0
 80039ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d033      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80039b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039c2:	d015      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80039c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039c8:	d80e      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80039ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039d2:	d109      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d8:	3308      	adds	r3, #8
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 fe2e 	bl	800563c <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80039e6:	e006      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039ee:	e002      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80039f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80039fe:	4b5f      	ldr	r3, [pc, #380]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a04:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a10:	430b      	orrs	r3, r1
 8003a12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	6639      	str	r1, [r7, #96]	@ 0x60
 8003a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a30:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d033      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003a3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a46:	d015      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003a48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a4c:	d80e      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003a52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a56:	d109      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 fdec 	bl	800563c <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003a6a:	e006      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003a74:	bf00      	nop
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003a78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003a7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003a82:	4b3e      	ldr	r3, [pc, #248]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a88:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a92:	4a3a      	ldr	r2, [pc, #232]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a9a:	e003      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003aa0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	2100      	movs	r1, #0
 8003aae:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ab6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003aba:	460b      	mov	r3, r1
 8003abc:	4313      	orrs	r3, r2
 8003abe:	d00e      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ac6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003aca:	61d3      	str	r3, [r2, #28]
 8003acc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ace:	69d9      	ldr	r1, [r3, #28]
 8003ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ad8:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aec:	2300      	movs	r3, #0
 8003aee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003af4:	460b      	mov	r3, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	d046      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b00:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003b04:	d021      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003b06:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003b0a:	d81a      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b10:	d01d      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b16:	d814      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b1c:	d019      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b22:	d80e      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d016      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b32:	3308      	adds	r3, #8
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fd81 	bl	800563c <RCCEx_PLL2_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003b40:	e00a      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10f      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003b60:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003b66:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b70:	4a02      	ldr	r2, [pc, #8]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003b78:	e006      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b7a:	bf00      	nop
 8003b7c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b84:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b96:	2300      	movs	r3, #0
 8003b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	d043      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003bae:	d021      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003bb0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003bb4:	d81a      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bba:	d01d      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bc0:	d814      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003bc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bc6:	d019      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003bc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bcc:	d80e      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd6:	d109      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bdc:	3308      	adds	r3, #8
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fd2c 	bl	800563c <RCCEx_PLL2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003bea:	e00a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bf2:	e006      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003bf4:	bf00      	nop
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003bf8:	bf00      	nop
 8003bfa:	e002      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c0a:	4bb6      	ldr	r3, [pc, #728]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	4ab2      	ldr	r2, [pc, #712]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003c22:	e003      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c28:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d030      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d80f      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d211      	bcs.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d911      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c62:	3308      	adds	r3, #8
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fce9 	bl	800563c <RCCEx_PLL2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c70:	e006      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c78:	e002      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c80:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10c      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003c88:	4b96      	ldr	r3, [pc, #600]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c8e:	f023 0107 	bic.w	r1, r3, #7
 8003c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c98:	4a92      	ldr	r2, [pc, #584]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ca6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cda:	e002      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003cea:	4b7e      	ldr	r3, [pc, #504]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cf0:	f023 0108 	bic.w	r1, r3, #8
 8003cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cfa:	4a7a      	ldr	r2, [pc, #488]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d08:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f000 80b0 	beq.w	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d36:	f7fd fadb 	bl	80012f0 <HAL_GetTick>
 8003d3a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d40:	f7fd fad6 	bl	80012f0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d903      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d56:	e005      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d58:	4b63      	ldr	r3, [pc, #396]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ed      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003d64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 808a 	bne.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d022      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d01b      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d92:	4b54      	ldr	r3, [pc, #336]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003da0:	4b50      	ldr	r3, [pc, #320]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da6:	4a4f      	ldr	r2, [pc, #316]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003db0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db6:	4a4b      	ldr	r2, [pc, #300]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dc0:	4a48      	ldr	r2, [pc, #288]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d019      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fa8b 	bl	80012f0 <HAL_GetTick>
 8003dda:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dde:	e00d      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fd fa86 	bl	80012f0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d903      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003dfa:	e006      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	4b39      	ldr	r3, [pc, #228]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ea      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003e0a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d132      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003e12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e20:	d10f      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003e22:	4b30      	ldr	r3, [pc, #192]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	61d3      	str	r3, [r2, #28]
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003e42:	4b28      	ldr	r3, [pc, #160]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4a27      	ldr	r2, [pc, #156]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e4c:	61d3      	str	r3, [r2, #28]
 8003e4e:	4b25      	ldr	r3, [pc, #148]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e54:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e5e:	4b21      	ldr	r3, [pc, #132]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e60:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e76:	e008      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e78:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e7c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e86:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d038      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d014      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003eb0:	2b30      	cmp	r3, #48	@ 0x30
 8003eb2:	d80e      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d012      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d80a      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec4:	4b07      	ldr	r3, [pc, #28]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	4a06      	ldr	r2, [pc, #24]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ece:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ed0:	e00d      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ed8:	e009      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003eda:	bf00      	nop
 8003edc:	e007      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003ee2:	bf00      	nop
 8003ee4:	44020c00 	.word	0x44020c00
 8003ee8:	44020800 	.word	0x44020800
        break;
 8003eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003ef6:	4bb5      	ldr	r3, [pc, #724]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003efc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f06:	49b1      	ldr	r1, [pc, #708]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d03c      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d81d      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f44 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f59 	.word	0x08003f59
 8003f48:	08003f67 	.word	0x08003f67
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f58:	4b9c      	ldr	r3, [pc, #624]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	4a9b      	ldr	r2, [pc, #620]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003f64:	e00e      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fb65 	bl	800563c <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f84:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f92:	f023 0207 	bic.w	r2, r3, #7
 8003f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f9c:	498b      	ldr	r1, [pc, #556]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003faa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	d03c      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d01f      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d819      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003fd8:	2b18      	cmp	r3, #24
 8003fda:	d01d      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003fdc:	2b18      	cmp	r3, #24
 8003fde:	d815      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d007      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003fe8:	e010      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fea:	4b78      	ldr	r3, [pc, #480]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	4a77      	ldr	r2, [pc, #476]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e010      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 fb1c 	bl	800563c <RCCEx_PLL2_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800400a:	e006      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004012:	e002      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8004018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004022:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004028:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800402c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	4966      	ldr	r1, [pc, #408]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800403a:	e003      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004040:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800405a:	460b      	mov	r3, r1
 800405c:	4313      	orrs	r3, r2
 800405e:	d03e      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004060:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406a:	d020      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800406c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004070:	d819      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004072:	2bc0      	cmp	r3, #192	@ 0xc0
 8004074:	d01d      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004076:	2bc0      	cmp	r3, #192	@ 0xc0
 8004078:	d815      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800407e:	2b40      	cmp	r3, #64	@ 0x40
 8004080:	d007      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004082:	e010      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004084:	4b51      	ldr	r3, [pc, #324]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	4a50      	ldr	r2, [pc, #320]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800408a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800408e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004090:	e010      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004092:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004096:	3308      	adds	r3, #8
 8004098:	4618      	mov	r0, r3
 800409a:	f001 facf 	bl	800563c <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80040a4:	e006      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80040b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10c      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80040bc:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80040be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040c2:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80040c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040cc:	493f      	ldr	r1, [pc, #252]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040da:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	2100      	movs	r1, #0
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040f4:	460b      	mov	r3, r1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	d038      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80040fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004104:	d00e      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8004106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800410a:	d815      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004114:	d110      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004116:	4b2d      	ldr	r3, [pc, #180]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411a:	4a2c      	ldr	r2, [pc, #176]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800411c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004120:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004122:	e00e      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004128:	3308      	adds	r3, #8
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fa86 	bl	800563c <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800414a:	4b20      	ldr	r3, [pc, #128]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800414c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004154:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	491c      	ldr	r1, [pc, #112]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004162:	e003      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004168:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800416c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	2100      	movs	r1, #0
 8004176:	6039      	str	r1, [r7, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d039      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004188:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800418c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800418e:	2b30      	cmp	r3, #48	@ 0x30
 8004190:	d01e      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004192:	2b30      	cmp	r3, #48	@ 0x30
 8004194:	d815      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8004196:	2b10      	cmp	r3, #16
 8004198:	d002      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800419a:	2b20      	cmp	r3, #32
 800419c:	d007      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800419e:	e010      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a0:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	4a09      	ldr	r2, [pc, #36]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80041a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80041ac:	e011      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041b2:	3308      	adds	r3, #8
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fa41 	bl	800563c <RCCEx_PLL2_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80041c0:	e007      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80041ca:	bf00      	nop
 80041cc:	44020c00 	.word	0x44020c00
        break;
 80041d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80041da:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80041dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ea:	4908      	ldr	r1, [pc, #32]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80041f2:	e003      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041f8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80041fc:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8004200:	4618      	mov	r0, r3
 8004202:	37a8      	adds	r7, #168	@ 0xa8
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420a:	bf00      	nop
 800420c:	44020c00 	.word	0x44020c00

08004210 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004210:	b480      	push	{r7}
 8004212:	b08b      	sub	sp, #44	@ 0x2c
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004218:	4bae      	ldr	r3, [pc, #696]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800421a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004222:	4bac      	ldr	r3, [pc, #688]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800422c:	4ba9      	ldr	r3, [pc, #676]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004236:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004238:	4ba6      	ldr	r3, [pc, #664]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004244:	4ba3      	ldr	r3, [pc, #652]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8126 	beq.w	80044b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b03      	cmp	r3, #3
 800426c:	d053      	beq.n	8004316 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d86f      	bhi.n	8004354 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d003      	beq.n	8004282 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d02b      	beq.n	80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004280:	e068      	b.n	8004354 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004282:	4b94      	ldr	r3, [pc, #592]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	08db      	lsrs	r3, r3, #3
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	4a92      	ldr	r2, [pc, #584]	@ (80044d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80042ba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80044dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80042d6:	e068      	b.n	80043aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80044e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80042f8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80044dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80042fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004304:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004310:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004314:	e049      	b.n	80043aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004320:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80044e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a04 	vldr	s12, [r7, #16]
 8004336:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80044dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004352:	e02a      	b.n	80043aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004354:	4b5f      	ldr	r3, [pc, #380]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	08db      	lsrs	r3, r3, #3
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	4a5e      	ldr	r2, [pc, #376]	@ (80044d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
 8004364:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004388:	ed97 6a04 	vldr	s12, [r7, #16]
 800438c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80044dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004398:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80043a8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043aa:	4b4a      	ldr	r3, [pc, #296]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043b6:	d121      	bne.n	80043fc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80043b8:	4b46      	ldr	r3, [pc, #280]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043c4:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c8:	0a5b      	lsrs	r3, r3, #9
 80043ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80043d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043da:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80043de:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e006      	b.n	8004402 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e002      	b.n	8004402 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004402:	4b34      	ldr	r3, [pc, #208]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800440e:	d121      	bne.n	8004454 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004410:	4b30      	ldr	r3, [pc, #192]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d017      	beq.n	800444c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800441c:	4b2d      	ldr	r3, [pc, #180]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800441e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800442e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004432:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004436:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800443a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004442:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	e006      	b.n	800445a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	e002      	b.n	800445a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800445a:	4b1e      	ldr	r3, [pc, #120]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004466:	d121      	bne.n	80044ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004468:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d017      	beq.n	80044a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004474:	4b17      	ldr	r3, [pc, #92]	@ (80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004478:	0e1b      	lsrs	r3, r3, #24
 800447a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800448a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800448e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80044a2:	e010      	b.n	80044c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
}
 80044aa:	e00c      	b.n	80044c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
}
 80044b2:	e008      	b.n	80044c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
}
 80044c6:	bf00      	nop
 80044c8:	372c      	adds	r7, #44	@ 0x2c
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	44020c00 	.word	0x44020c00
 80044d8:	03d09000 	.word	0x03d09000
 80044dc:	46000000 	.word	0x46000000
 80044e0:	4a742400 	.word	0x4a742400
 80044e4:	4bb71b00 	.word	0x4bb71b00

080044e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b08b      	sub	sp, #44	@ 0x2c
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80044f0:	4bae      	ldr	r3, [pc, #696]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80044fa:	4bac      	ldr	r3, [pc, #688]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004504:	4ba9      	ldr	r3, [pc, #676]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800450e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004510:	4ba6      	ldr	r3, [pc, #664]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800451c:	4ba3      	ldr	r3, [pc, #652]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	ee07 3a90 	vmov	s15, r3
 8004530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004534:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8126 	beq.w	800478c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d053      	beq.n	80045ee <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d86f      	bhi.n	800462c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d003      	beq.n	800455a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d02b      	beq.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004558:	e068      	b.n	800462c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800455a:	4b94      	ldr	r3, [pc, #592]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	4a92      	ldr	r2, [pc, #584]	@ (80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004592:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80045ae:	e068      	b.n	8004682 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80045d0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80045d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80045ec:	e049      	b.n	8004682 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80045fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a04 	vldr	s12, [r7, #16]
 800460e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800462a:	e02a      	b.n	8004682 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800462c:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	4a5e      	ldr	r2, [pc, #376]	@ (80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004660:	ed97 6a04 	vldr	s12, [r7, #16]
 8004664:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004670:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004680:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004682:	4b4a      	ldr	r3, [pc, #296]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800468a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800468e:	d121      	bne.n	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004690:	4b46      	ldr	r3, [pc, #280]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d017      	beq.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800469c:	4b43      	ldr	r3, [pc, #268]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800469e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a0:	0a5b      	lsrs	r3, r3, #9
 80046a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80046ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046b2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80046b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80046ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e006      	b.n	80046da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e002      	b.n	80046da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046da:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e6:	d121      	bne.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80046e8:	4b30      	ldr	r3, [pc, #192]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d017      	beq.n	8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046f4:	4b2d      	ldr	r3, [pc, #180]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80046f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800470a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800470e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	e006      	b.n	8004732 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	e002      	b.n	8004732 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004732:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473e:	d121      	bne.n	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004740:	4b1a      	ldr	r3, [pc, #104]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d017      	beq.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	0e1b      	lsrs	r3, r3, #24
 8004752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800475e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004762:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004766:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800476a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004772:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800477a:	e010      	b.n	800479e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
}
 8004782:	e00c      	b.n	800479e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	e008      	b.n	800479e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
}
 800479e:	bf00      	nop
 80047a0:	372c      	adds	r7, #44	@ 0x2c
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	44020c00 	.word	0x44020c00
 80047b0:	03d09000 	.word	0x03d09000
 80047b4:	46000000 	.word	0x46000000
 80047b8:	4a742400 	.word	0x4a742400
 80047bc:	4bb71b00 	.word	0x4bb71b00

080047c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08c      	sub	sp, #48	@ 0x30
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80047ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ce:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80047d2:	430b      	orrs	r3, r1
 80047d4:	d14b      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80047d6:	4bc4      	ldr	r3, [pc, #784]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80047e2:	4bc1      	ldr	r3, [pc, #772]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d108      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80047f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f6:	d104      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80047f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fe:	f000 bf14 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004802:	4bb9      	ldr	r3, [pc, #740]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800480c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004810:	d108      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004818:	d104      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800481a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800481e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004820:	f000 bf03 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004824:	4bb0      	ldr	r3, [pc, #704]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004830:	d119      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004838:	d115      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800483a:	4bab      	ldr	r3, [pc, #684]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004846:	d30a      	bcc.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004848:	4ba7      	ldr	r3, [pc, #668]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	0a1b      	lsrs	r3, r3, #8
 800484e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004852:	4aa6      	ldr	r2, [pc, #664]	@ (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800485a:	f000 bee6 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004862:	f000 bee2 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800486a:	f000 bede 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800486e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004872:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004876:	ea52 0301 	orrs.w	r3, r2, r1
 800487a:	f000 838e 	beq.w	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800487e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004882:	2a01      	cmp	r2, #1
 8004884:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004888:	f080 86cc 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800488c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004890:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004894:	ea52 0301 	orrs.w	r3, r2, r1
 8004898:	f000 82aa 	beq.w	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800489c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a0:	2a01      	cmp	r2, #1
 80048a2:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80048a6:	f080 86bd 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80048aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ae:	f1a3 0110 	sub.w	r1, r3, #16
 80048b2:	ea52 0301 	orrs.w	r3, r2, r1
 80048b6:	f000 8681 	beq.w	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80048ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048be:	2a01      	cmp	r2, #1
 80048c0:	f173 0310 	sbcs.w	r3, r3, #16
 80048c4:	f080 86ae 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80048c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048cc:	1f19      	subs	r1, r3, #4
 80048ce:	ea52 0301 	orrs.w	r3, r2, r1
 80048d2:	f000 84b1 	beq.w	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80048d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048da:	2a01      	cmp	r2, #1
 80048dc:	f173 0304 	sbcs.w	r3, r3, #4
 80048e0:	f080 86a0 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80048e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80048ec:	430b      	orrs	r3, r1
 80048ee:	f000 85aa 	beq.w	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80048f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f6:	497e      	ldr	r1, [pc, #504]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80048f8:	428a      	cmp	r2, r1
 80048fa:	f173 0300 	sbcs.w	r3, r3, #0
 80048fe:	f080 8691 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004906:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800490a:	430b      	orrs	r3, r1
 800490c:	f000 8532 	beq.w	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004914:	4977      	ldr	r1, [pc, #476]	@ (8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8004916:	428a      	cmp	r2, r1
 8004918:	f173 0300 	sbcs.w	r3, r3, #0
 800491c:	f080 8682 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004924:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004928:	430b      	orrs	r3, r1
 800492a:	f000 84bc 	beq.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800492e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004932:	4971      	ldr	r1, [pc, #452]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004934:	428a      	cmp	r2, r1
 8004936:	f173 0300 	sbcs.w	r3, r3, #0
 800493a:	f080 8673 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800493e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004942:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004946:	430b      	orrs	r3, r1
 8004948:	f000 85f2 	beq.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 800494c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004950:	496a      	ldr	r1, [pc, #424]	@ (8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004952:	428a      	cmp	r2, r1
 8004954:	f173 0300 	sbcs.w	r3, r3, #0
 8004958:	f080 8664 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800495c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004960:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004964:	430b      	orrs	r3, r1
 8004966:	f000 81e5 	beq.w	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800496a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496e:	4964      	ldr	r1, [pc, #400]	@ (8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004970:	428a      	cmp	r2, r1
 8004972:	f173 0300 	sbcs.w	r3, r3, #0
 8004976:	f080 8655 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800497a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800497e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004982:	430b      	orrs	r3, r1
 8004984:	f000 83cc 	beq.w	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498c:	495d      	ldr	r1, [pc, #372]	@ (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800498e:	428a      	cmp	r2, r1
 8004990:	f173 0300 	sbcs.w	r3, r3, #0
 8004994:	f080 8646 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800499c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80049a0:	430b      	orrs	r3, r1
 80049a2:	f000 8331 	beq.w	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80049a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049aa:	4957      	ldr	r1, [pc, #348]	@ (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80049ac:	428a      	cmp	r2, r1
 80049ae:	f173 0300 	sbcs.w	r3, r3, #0
 80049b2:	f080 8637 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ba:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80049be:	430b      	orrs	r3, r1
 80049c0:	f000 82bb 	beq.w	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80049c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c8:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80049cc:	f173 0300 	sbcs.w	r3, r3, #0
 80049d0:	f080 8628 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80049dc:	430b      	orrs	r3, r1
 80049de:	f000 826d 	beq.w	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80049e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80049ea:	428a      	cmp	r2, r1
 80049ec:	f173 0300 	sbcs.w	r3, r3, #0
 80049f0:	f080 8618 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80049fc:	430b      	orrs	r3, r1
 80049fe:	f000 821e 	beq.w	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a06:	f242 0101 	movw	r1, #8193	@ 0x2001
 8004a0a:	428a      	cmp	r2, r1
 8004a0c:	f173 0300 	sbcs.w	r3, r3, #0
 8004a10:	f080 8608 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	f000 8137 	beq.w	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a26:	f241 0101 	movw	r1, #4097	@ 0x1001
 8004a2a:	428a      	cmp	r2, r1
 8004a2c:	f173 0300 	sbcs.w	r3, r3, #0
 8004a30:	f080 85f8 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a38:	1f11      	subs	r1, r2, #4
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	f000 80d2 	beq.w	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a44:	2a05      	cmp	r2, #5
 8004a46:	f173 0300 	sbcs.w	r3, r3, #0
 8004a4a:	f080 85eb 	bcs.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a52:	1e51      	subs	r1, r2, #1
 8004a54:	430b      	orrs	r3, r1
 8004a56:	d006      	beq.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5c:	1e91      	subs	r1, r2, #2
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	d06c      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004a62:	f000 bddf 	b.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004a66:	4b20      	ldr	r3, [pc, #128]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7fe fd7a 	bl	8003570 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a7e:	f000 bdd4 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004a82:	4b19      	ldr	r3, [pc, #100]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a8e:	d10a      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a96:	f107 030c 	add.w	r3, r7, #12
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fd24 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa4:	e048      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004aa6:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d109      	bne.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	08db      	lsrs	r3, r3, #3
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	4a12      	ldr	r2, [pc, #72]	@ (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aca:	e035      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad8:	d11c      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d119      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae4:	e028      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004ae6:	bf00      	nop
 8004ae8:	44020c00 	.word	0x44020c00
 8004aec:	016e3600 	.word	0x016e3600
 8004af0:	20000001 	.word	0x20000001
 8004af4:	10000001 	.word	0x10000001
 8004af8:	08000001 	.word	0x08000001
 8004afc:	04000001 	.word	0x04000001
 8004b00:	00200001 	.word	0x00200001
 8004b04:	00040001 	.word	0x00040001
 8004b08:	00020001 	.word	0x00020001
 8004b0c:	03d09000 	.word	0x03d09000
 8004b10:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004b14:	4b9f      	ldr	r3, [pc, #636]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d106      	bne.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d103      	bne.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2e:	e003      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b34:	f000 bd79 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b38:	f000 bd77 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b3c:	4b95      	ldr	r3, [pc, #596]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b4e:	f7fe fcf9 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004b52:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b54:	f000 bd69 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004b58:	4b8e      	ldr	r3, [pc, #568]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b64:	d10a      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b6c:	f107 030c 	add.w	r3, r7, #12
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fcb9 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b7a:	e031      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004b7c:	4b85      	ldr	r3, [pc, #532]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	2b18      	cmp	r3, #24
 8004b8c:	d109      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b8e:	4b81      	ldr	r3, [pc, #516]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	08db      	lsrs	r3, r3, #3
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	4a7f      	ldr	r2, [pc, #508]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba0:	e01e      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d102      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004bb6:	4b79      	ldr	r3, [pc, #484]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bba:	e011      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004bbc:	4b75      	ldr	r3, [pc, #468]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d106      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	2b28      	cmp	r3, #40	@ 0x28
 8004bce:	d103      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd6:	e003      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bdc:	f000 bd25 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004be0:	f000 bd23 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004be4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004bee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bf6:	f7fe fca5 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004bfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004bfc:	f000 bd15 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004c00:	4b64      	ldr	r3, [pc, #400]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c0c:	d10a      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d107      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c14:	f107 030c 	add.w	r3, r7, #12
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fc65 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c22:	e033      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004c24:	4b5b      	ldr	r3, [pc, #364]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c34:	d109      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c36:	4b57      	ldr	r3, [pc, #348]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	08db      	lsrs	r3, r3, #3
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	4a55      	ldr	r2, [pc, #340]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004c42:	fa22 f303 	lsr.w	r3, r2, r3
 8004c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c48:	e020      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004c4a:	4b52      	ldr	r3, [pc, #328]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c56:	d106      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004c60:	4b4e      	ldr	r3, [pc, #312]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c64:	e012      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004c66:	4b4b      	ldr	r3, [pc, #300]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d107      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004c7a:	d103      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004c7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c82:	e003      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c88:	f000 bccf 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c8c:	f000 bccd 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004c90:	4b40      	ldr	r3, [pc, #256]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c96:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004ca2:	f7fe fc7b 	bl	800359c <HAL_RCC_GetPCLK3Freq>
 8004ca6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ca8:	f000 bcbf 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cb2:	d108      	bne.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fc15 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cc2:	f000 bcb2 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004cc6:	4b33      	ldr	r3, [pc, #204]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d10d      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cd8:	d109      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cda:	4b2e      	ldr	r3, [pc, #184]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	08db      	lsrs	r3, r3, #3
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cec:	e020      	b.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004cee:	4b29      	ldr	r3, [pc, #164]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d02:	d102      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004d04:	4b25      	ldr	r3, [pc, #148]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d08:	e012      	b.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d107      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d1e:	d103      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004d20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d26:	e003      	b.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d2c:	f000 bc7d 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d30:	f000 bc7b 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004d34:	4b17      	ldr	r3, [pc, #92]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004d46:	f7fe fbe1 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8004d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004d4c:	f000 bc6d 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d104      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d56:	f7fe faad 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004d5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004d5c:	f000 bc65 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d108      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fbbc 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d74:	f000 bc59 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004d78:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d84:	d10e      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d10b      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d90:	e02c      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004d92:	bf00      	nop
 8004d94:	44020c00 	.word	0x44020c00
 8004d98:	03d09000 	.word	0x03d09000
 8004d9c:	003d0900 	.word	0x003d0900
 8004da0:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004da4:	4b95      	ldr	r3, [pc, #596]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d10c      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d109      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004db6:	4b91      	ldr	r3, [pc, #580]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	08db      	lsrs	r3, r3, #3
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	4a8f      	ldr	r2, [pc, #572]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc8:	e010      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004dca:	4b8c      	ldr	r3, [pc, #560]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	2b05      	cmp	r3, #5
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004dde:	4b89      	ldr	r3, [pc, #548]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004de2:	e003      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004de8:	f000 bc1f 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004dec:	f000 bc1d 	b.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004df0:	4b82      	ldr	r3, [pc, #520]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004dfc:	4b7f      	ldr	r3, [pc, #508]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004e10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e16:	e011      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004e18:	4b78      	ldr	r3, [pc, #480]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e26:	d106      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d103      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004e2e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e34:	e002      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004e3a:	e3f6      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004e3c:	e3f5      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e50:	f7fe fb78 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004e54:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004e56:	e3e8      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fb3f 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e6e:	e3dc      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004e70:	4b62      	ldr	r3, [pc, #392]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d10d      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e82:	d109      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e84:	4b5d      	ldr	r3, [pc, #372]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	4a5c      	ldr	r2, [pc, #368]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
 8004e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e96:	e010      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004e98:	4b58      	ldr	r3, [pc, #352]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eac:	d102      	bne.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004eae:	4b55      	ldr	r3, [pc, #340]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb2:	e002      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004eb8:	e3b7      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004eba:	e3b6      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ebe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ec2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ece:	f7fe fb39 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004ed2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ed4:	e3a9      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004edc:	d107      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ede:	f107 030c 	add.w	r3, r7, #12
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fb00 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004eec:	e39d      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004eee:	4b43      	ldr	r3, [pc, #268]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d10d      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f00:	d109      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f02:	4b3e      	ldr	r3, [pc, #248]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	08db      	lsrs	r3, r3, #3
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f14:	e010      	b.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004f16:	4b39      	ldr	r3, [pc, #228]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f22:	d106      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004f2c:	4b35      	ldr	r3, [pc, #212]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f30:	e002      	b.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f36:	e378      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f38:	e377      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004f3a:	4b30      	ldr	r3, [pc, #192]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f40:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7fe fafa 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004f50:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f52:	e36a      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f5a:	d107      	bne.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f5c:	f107 030c 	add.w	r3, r7, #12
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fac1 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f6a:	e35e      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004f6c:	4b23      	ldr	r3, [pc, #140]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d10d      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f7e:	d109      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f80:	4b1e      	ldr	r3, [pc, #120]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f92:	e34a      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f98:	e347      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004f9a:	4b18      	ldr	r3, [pc, #96]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fa0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004fac:	f7fe faf6 	bl	800359c <HAL_RCC_GetPCLK3Freq>
 8004fb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004fb2:	e33a      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fba:	d107      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fbc:	f107 030c 	add.w	r3, r7, #12
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fa91 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fca:	e32e      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fde:	d109      	bne.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fe0:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	4a05      	ldr	r2, [pc, #20]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ff2:	e31a      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ff8:	e317      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ffa:	bf00      	nop
 8004ffc:	44020c00 	.word	0x44020c00
 8005000:	03d09000 	.word	0x03d09000
 8005004:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005008:	4b9b      	ldr	r3, [pc, #620]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800500a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800500e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800501a:	d044      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005022:	d879      	bhi.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502a:	d02d      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	d871      	bhi.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800503a:	d017      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005042:	d869      	bhi.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005050:	d004      	beq.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8005052:	e061      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005054:	f7fe faa2 	bl	800359c <HAL_RCC_GetPCLK3Freq>
 8005058:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800505a:	e060      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fa41 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800506a:	e058      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800506c:	4b82      	ldr	r3, [pc, #520]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800506e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b02      	cmp	r3, #2
 8005078:	d103      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 800507a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005080:	e04d      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005086:	e04a      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005088:	4b7b      	ldr	r3, [pc, #492]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800508a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800508e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005096:	d103      	bne.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8005098:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800509c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800509e:	e03e      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050a4:	e03b      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050a6:	4b74      	ldr	r3, [pc, #464]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80050a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050b2:	4b71      	ldr	r3, [pc, #452]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	08db      	lsrs	r3, r3, #3
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d6:	e01e      	b.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050d8:	4b67      	ldr	r3, [pc, #412]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050e4:	d106      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ec:	d102      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050ee:	4b64      	ldr	r3, [pc, #400]	@ (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f2:	e010      	b.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050f4:	4b60      	ldr	r3, [pc, #384]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005100:	d106      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005108:	d102      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800510a:	4b5e      	ldr	r3, [pc, #376]	@ (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800510e:	e002      	b.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005114:	e003      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8005116:	e002      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800511c:	bf00      	nop
          }
        }
        break;
 800511e:	e284      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005120:	4b55      	ldr	r3, [pc, #340]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005122:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005126:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005132:	d044      	beq.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800513a:	d879      	bhi.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005142:	d02d      	beq.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800514a:	d871      	bhi.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005152:	d017      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800515a:	d869      	bhi.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005168:	d004      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800516a:	e061      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800516c:	f7fe f9ea 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8005170:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8005172:	e060      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff f9b5 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005182:	e058      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005184:	4b3c      	ldr	r3, [pc, #240]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d103      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8005192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005198:	e04d      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800519e:	e04a      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80051a0:	4b35      	ldr	r3, [pc, #212]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ae:	d103      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 80051b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80051b6:	e03e      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051bc:	e03b      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051be:	4b2e      	ldr	r3, [pc, #184]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051dc:	4b26      	ldr	r3, [pc, #152]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	08db      	lsrs	r3, r3, #3
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	4a25      	ldr	r2, [pc, #148]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ee:	e01e      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051f0:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051fc:	d106      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005204:	d102      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005206:	4b1e      	ldr	r3, [pc, #120]	@ (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520a:	e010      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800520c:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005218:	d106      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005220:	d102      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005222:	4b18      	ldr	r3, [pc, #96]	@ (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005226:	e002      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800522e:	e002      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005234:	bf00      	nop
          }
        }
        break;
 8005236:	e1f8      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005238:	4b0f      	ldr	r3, [pc, #60]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800523a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800523e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005242:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005250:	d105      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8005258:	4b0a      	ldr	r3, [pc, #40]	@ (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800525a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800525c:	e1e5      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005264:	d110      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005266:	f107 0318 	add.w	r3, r7, #24
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe ffd0 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005274:	e1d9      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005276:	bf00      	nop
 8005278:	44020c00 	.word	0x44020c00
 800527c:	03d09000 	.word	0x03d09000
 8005280:	003d0900 	.word	0x003d0900
 8005284:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800528e:	d107      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005290:	f107 030c 	add.w	r3, r7, #12
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff f927 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800529e:	e1c4      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052a4:	e1c1      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80052a6:	4b9d      	ldr	r3, [pc, #628]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d859      	bhi.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80052b8:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052d5 	.word	0x080052d5
 80052c4:	080052e5 	.word	0x080052e5
 80052c8:	0800536d 	.word	0x0800536d
 80052cc:	080052f5 	.word	0x080052f5
 80052d0:	080052fb 	.word	0x080052fb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052d4:	f107 0318 	add.w	r3, r7, #24
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe ff99 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80052e2:	e046      	b.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff f8fd 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80052f2:	e03e      	b.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80052f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80052f8:	e03b      	b.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052fa:	4b88      	ldr	r3, [pc, #544]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005300:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005306:	4b85      	ldr	r3, [pc, #532]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d10c      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005318:	4b80      	ldr	r3, [pc, #512]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	4a80      	ldr	r2, [pc, #512]	@ (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800532a:	e01e      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800532c:	4b7b      	ldr	r3, [pc, #492]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005338:	d106      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005340:	d102      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005342:	4b79      	ldr	r3, [pc, #484]	@ (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005346:	e010      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005348:	4b74      	ldr	r3, [pc, #464]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005354:	d106      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800535c:	d102      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800535e:	4b73      	ldr	r3, [pc, #460]	@ (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005362:	e002      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005368:	e003      	b.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800536a:	e002      	b.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005370:	bf00      	nop
          }
        }
        break;
 8005372:	e15a      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005374:	4b69      	ldr	r3, [pc, #420]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800537a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800537e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	2b20      	cmp	r3, #32
 8005384:	d022      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	2b20      	cmp	r3, #32
 800538a:	d858      	bhi.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	2b18      	cmp	r3, #24
 8005390:	d019      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	2b18      	cmp	r3, #24
 8005396:	d852      	bhi.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d008      	beq.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80053a4:	e04b      	b.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053a6:	f107 0318 	add.w	r3, r7, #24
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe ff30 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80053b4:	e046      	b.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b6:	f107 030c 	add.w	r3, r7, #12
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff f894 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80053c4:	e03e      	b.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80053c6:	4b56      	ldr	r3, [pc, #344]	@ (8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80053ca:	e03b      	b.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053cc:	4b53      	ldr	r3, [pc, #332]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053d2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053d8:	4b50      	ldr	r3, [pc, #320]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d10c      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053ea:	4b4c      	ldr	r3, [pc, #304]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	08db      	lsrs	r3, r3, #3
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80053f6:	fa22 f303 	lsr.w	r3, r2, r3
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053fc:	e01e      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053fe:	4b47      	ldr	r3, [pc, #284]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800540a:	d106      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005412:	d102      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005414:	4b44      	ldr	r3, [pc, #272]	@ (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005418:	e010      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800541a:	4b40      	ldr	r3, [pc, #256]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005426:	d106      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800542e:	d102      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005430:	4b3e      	ldr	r3, [pc, #248]	@ (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005434:	e002      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800543a:	e003      	b.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800543c:	e002      	b.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005442:	bf00      	nop
          }
        }
        break;
 8005444:	e0f1      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005446:	4b35      	ldr	r3, [pc, #212]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800544c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005458:	d023      	beq.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800545a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005460:	d858      	bhi.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005464:	2bc0      	cmp	r3, #192	@ 0xc0
 8005466:	d019      	beq.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	2bc0      	cmp	r3, #192	@ 0xc0
 800546c:	d852      	bhi.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	2b40      	cmp	r3, #64	@ 0x40
 8005478:	d008      	beq.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800547a:	e04b      	b.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800547c:	f107 0318 	add.w	r3, r7, #24
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fec5 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800548a:	e046      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff f829 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800549a:	e03e      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800549c:	4b20      	ldr	r3, [pc, #128]	@ (8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800549e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80054a0:	e03b      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054a2:	4b1e      	ldr	r3, [pc, #120]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054ae:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054c0:	4b16      	ldr	r3, [pc, #88]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	4a16      	ldr	r2, [pc, #88]	@ (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d2:	e01e      	b.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054d4:	4b11      	ldr	r3, [pc, #68]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e0:	d106      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e8:	d102      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80054ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ee:	e010      	b.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054f0:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054fc:	d106      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005504:	d102      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800550a:	e002      	b.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005510:	e003      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005512:	e002      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005518:	bf00      	nop
          }
        }
        break;
 800551a:	e086      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800551c:	44020c00 	.word	0x44020c00
 8005520:	00bb8000 	.word	0x00bb8000
 8005524:	03d09000 	.word	0x03d09000
 8005528:	003d0900 	.word	0x003d0900
 800552c:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005530:	4b40      	ldr	r3, [pc, #256]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005536:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800553c:	4b3d      	ldr	r3, [pc, #244]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005548:	d105      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800554a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005550:	4b39      	ldr	r3, [pc, #228]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005554:	e031      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005556:	4b37      	ldr	r3, [pc, #220]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005562:	d10a      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	2b10      	cmp	r3, #16
 8005568:	d107      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800556a:	f107 0318 	add.w	r3, r7, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fe4e 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005578:	e01f      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800557a:	4b2e      	ldr	r3, [pc, #184]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800557c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b02      	cmp	r3, #2
 8005586:	d106      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	2b20      	cmp	r3, #32
 800558c:	d103      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005594:	e011      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005596:	4b27      	ldr	r3, [pc, #156]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800559c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a4:	d106      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	2b30      	cmp	r3, #48	@ 0x30
 80055aa:	d103      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80055ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b2:	e002      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80055b8:	e037      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80055ba:	e036      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80055bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80055be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d107      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055ce:	f107 0318 	add.w	r3, r7, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fe1c 	bl	8004210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80055dc:	e025      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80055de:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ea:	d10a      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d107      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f2:	f107 030c 	add.w	r3, r7, #12
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe ff76 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005600:	e00f      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005602:	4b0c      	ldr	r3, [pc, #48]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800560a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800560e:	d105      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	2b30      	cmp	r3, #48	@ 0x30
 8005614:	d102      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8005616:	4b08      	ldr	r3, [pc, #32]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800561a:	e002      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8005620:	e003      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005622:	e002      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005628:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800562a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800562c:	4618      	mov	r0, r3
 800562e:	3730      	adds	r7, #48	@ 0x30
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	44020c00 	.word	0x44020c00
 8005638:	02dc6c00 	.word	0x02dc6c00

0800563c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005644:	4b48      	ldr	r3, [pc, #288]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a47      	ldr	r2, [pc, #284]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 800564a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800564e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005650:	f7fb fe4e 	bl	80012f0 <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005656:	e008      	b.n	800566a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005658:	f7fb fe4a 	bl	80012f0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e07a      	b.n	8005760 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800566a:	4b3f      	ldr	r3, [pc, #252]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005676:	4b3c      	ldr	r3, [pc, #240]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6852      	ldr	r2, [r2, #4]
 800568a:	0212      	lsls	r2, r2, #8
 800568c:	430a      	orrs	r2, r1
 800568e:	4936      	ldr	r1, [pc, #216]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	3b01      	subs	r3, #1
 800569a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	025b      	lsls	r3, r3, #9
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	3b01      	subs	r3, #1
 80056be:	061b      	lsls	r3, r3, #24
 80056c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056c4:	4928      	ldr	r1, [pc, #160]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80056ca:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	f023 020c 	bic.w	r2, r3, #12
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	4924      	ldr	r1, [pc, #144]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80056dc:	4b22      	ldr	r3, [pc, #136]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	f023 0220 	bic.w	r2, r3, #32
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	491f      	ldr	r1, [pc, #124]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80056ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	491c      	ldr	r1, [pc, #112]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80056fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	4a19      	ldr	r2, [pc, #100]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005708:	4b17      	ldr	r3, [pc, #92]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005710:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6a12      	ldr	r2, [r2, #32]
 8005718:	00d2      	lsls	r2, r2, #3
 800571a:	4913      	ldr	r1, [pc, #76]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 800571c:	4313      	orrs	r3, r2
 800571e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005720:	4b11      	ldr	r3, [pc, #68]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	4a10      	ldr	r2, [pc, #64]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005726:	f043 0310 	orr.w	r3, r3, #16
 800572a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800572c:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a0d      	ldr	r2, [pc, #52]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005736:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005738:	f7fb fdda 	bl	80012f0 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800573e:	e008      	b.n	8005752 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005740:	f7fb fdd6 	bl	80012f0 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e006      	b.n	8005760 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005752:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <RCCEx_PLL2_Config+0x12c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0

}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	44020c00 	.word	0x44020c00

0800576c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e042      	b.n	8005804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fb fb7f 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2224      	movs	r2, #36	@ 0x24
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fcb4 	bl	8006124 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fb33 	bl	8005e28 <UART_SetConfig>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e01b      	b.n	8005804 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fd33 	bl	8006268 <UART_CheckIdleState>
 8005802:	4603      	mov	r3, r0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b0ae      	sub	sp, #184	@ 0xb8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005836:	f640 030f 	movw	r3, #2063	@ 0x80f
 800583a:	4013      	ands	r3, r2
 800583c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11b      	bne.n	8005880 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 82ac 	beq.w	8005dce <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
      }
      return;
 800587e:	e2a6      	b.n	8005dce <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80fd 	beq.w	8005a84 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800588a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800588e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a78 <HAL_UART_IRQHandler+0x26c>)
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800589a:	4b78      	ldr	r3, [pc, #480]	@ (8005a7c <HAL_UART_IRQHandler+0x270>)
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80f0 	beq.w	8005a84 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d011      	beq.n	80058d4 <HAL_UART_IRQHandler+0xc8>
 80058b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2201      	movs	r2, #1
 80058c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f043 0201 	orr.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d011      	beq.n	8005904 <HAL_UART_IRQHandler+0xf8>
 80058e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2202      	movs	r2, #2
 80058f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fa:	f043 0204 	orr.w	r2, r3, #4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d011      	beq.n	8005934 <HAL_UART_IRQHandler+0x128>
 8005910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2204      	movs	r2, #4
 8005922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	f043 0202 	orr.w	r2, r3, #2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005934:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d017      	beq.n	8005970 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800594c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005950:	4b49      	ldr	r3, [pc, #292]	@ (8005a78 <HAL_UART_IRQHandler+0x26c>)
 8005952:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2208      	movs	r2, #8
 800595e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005966:	f043 0208 	orr.w	r2, r3, #8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005978:	2b00      	cmp	r3, #0
 800597a:	d012      	beq.n	80059a2 <HAL_UART_IRQHandler+0x196>
 800597c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8212 	beq.w	8005dd2 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d013      	beq.n	80059e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f6:	2b40      	cmp	r3, #64	@ 0x40
 80059f8:	d005      	beq.n	8005a06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02e      	beq.n	8005a64 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fd45 	bl	8006496 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b40      	cmp	r3, #64	@ 0x40
 8005a18:	d120      	bne.n	8005a5c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d017      	beq.n	8005a54 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a2a:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <HAL_UART_IRQHandler+0x274>)
 8005a2c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fb fe73 	bl	8001720 <HAL_DMA_Abort_IT>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d019      	beq.n	8005a74 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a52:	e00f      	b.n	8005a74 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9d1 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5a:	e00b      	b.n	8005a74 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f9cd 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a62:	e007      	b.n	8005a74 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f9c9 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a72:	e1ae      	b.n	8005dd2 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	bf00      	nop
    return;
 8005a76:	e1ac      	b.n	8005dd2 <HAL_UART_IRQHandler+0x5c6>
 8005a78:	10000001 	.word	0x10000001
 8005a7c:	04000120 	.word	0x04000120
 8005a80:	08006563 	.word	0x08006563

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	f040 8142 	bne.w	8005d12 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 813b 	beq.w	8005d12 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8134 	beq.w	8005d12 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	f040 80aa 	bne.w	8005c16 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005acc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8005ad0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8084 	beq.w	8005be2 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ae0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d27c      	bcs.n	8005be2 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005aee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afa:	2b81      	cmp	r3, #129	@ 0x81
 8005afc:	d060      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b24:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e2      	bne.n	8005afe <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005b5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e3      	bne.n	8005b38 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b8e:	f023 0310 	bic.w	r3, r3, #16
 8005b92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ba2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e4      	bne.n	8005b7e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fb fd34 	bl	8001628 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f918 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005be0:	e0f9      	b.n	8005dd6 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005be8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005bec:	429a      	cmp	r2, r3
 8005bee:	f040 80f2 	bne.w	8005dd6 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfa:	2b81      	cmp	r3, #129	@ 0x81
 8005bfc:	f040 80eb 	bne.w	8005dd6 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f8fe 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
      return;
 8005c14:	e0df      	b.n	8005dd6 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80d1 	beq.w	8005dda <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8005c38:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80cc 	beq.w	8005dda <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e4      	bne.n	8005c42 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	623b      	str	r3, [r7, #32]
   return(result);
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005ca0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e1      	bne.n	8005c78 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	69b9      	ldr	r1, [r7, #24]
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e4      	bne.n	8005cc8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d04:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f880 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d10:	e063      	b.n	8005dda <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <HAL_UART_IRQHandler+0x530>
 8005d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d008      	beq.n	8005d3c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fc51 	bl	80065dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d3a:	e051      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d014      	beq.n	8005d72 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d03a      	beq.n	8005dde <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
    }
    return;
 8005d70:	e035      	b.n	8005dde <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_UART_IRQHandler+0x586>
 8005d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fbfb 	bl	8006586 <UART_EndTransmit_IT>
    return;
 8005d90:	e026      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_UART_IRQHandler+0x5a6>
 8005d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005da2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fc2a 	bl	8006604 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005db0:	e016      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005db6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d010      	beq.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
 8005dbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da0c      	bge.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fc12 	bl	80065f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dcc:	e008      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005dce:	bf00      	nop
 8005dd0:	e006      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005dd2:	bf00      	nop
 8005dd4:	e004      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005dd6:	bf00      	nop
 8005dd8:	e002      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005dde:	bf00      	nop
  }
}
 8005de0:	37b8      	adds	r7, #184	@ 0xb8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b094      	sub	sp, #80	@ 0x50
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	498a      	ldr	r1, [pc, #552]	@ (8006080 <UART_SetConfig+0x258>)
 8005e58:	4019      	ands	r1, r3
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e70:	68d9      	ldr	r1, [r3, #12]
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	ea40 0301 	orr.w	r3, r0, r1
 8005e7a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b7f      	ldr	r3, [pc, #508]	@ (8006084 <UART_SetConfig+0x25c>)
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d004      	beq.n	8005e96 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e92:	4313      	orrs	r3, r2
 8005e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005ea0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	f023 000f 	bic.w	r0, r3, #15
 8005eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	ea40 0301 	orr.w	r3, r0, r1
 8005ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b6f      	ldr	r3, [pc, #444]	@ (8006088 <UART_SetConfig+0x260>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d102      	bne.n	8005ed6 <UART_SetConfig+0xae>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ed4:	e01a      	b.n	8005f0c <UART_SetConfig+0xe4>
 8005ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b6c      	ldr	r3, [pc, #432]	@ (800608c <UART_SetConfig+0x264>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d102      	bne.n	8005ee6 <UART_SetConfig+0xbe>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ee4:	e012      	b.n	8005f0c <UART_SetConfig+0xe4>
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b69      	ldr	r3, [pc, #420]	@ (8006090 <UART_SetConfig+0x268>)
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d102      	bne.n	8005ef6 <UART_SetConfig+0xce>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef4:	e00a      	b.n	8005f0c <UART_SetConfig+0xe4>
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b62      	ldr	r3, [pc, #392]	@ (8006084 <UART_SetConfig+0x25c>)
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d103      	bne.n	8005f08 <UART_SetConfig+0xe0>
 8005f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f06:	e001      	b.n	8005f0c <UART_SetConfig+0xe4>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b5c      	ldr	r3, [pc, #368]	@ (8006084 <UART_SetConfig+0x25c>)
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d171      	bne.n	8005ffa <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f18:	2200      	movs	r2, #0
 8005f1a:	623b      	str	r3, [r7, #32]
 8005f1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f22:	f7fe fc4d 	bl	80047c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f26:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80e2 	beq.w	80060f4 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	4a57      	ldr	r2, [pc, #348]	@ (8006094 <UART_SetConfig+0x26c>)
 8005f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d305      	bcc.n	8005f60 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d903      	bls.n	8005f68 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f66:	e0c5      	b.n	80060f4 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	61fa      	str	r2, [r7, #28]
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	4a47      	ldr	r2, [pc, #284]	@ (8006094 <UART_SetConfig+0x26c>)
 8005f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	617a      	str	r2, [r7, #20]
 8005f82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f8a:	f7fa f985 	bl	8000298 <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	020b      	lsls	r3, r1, #8
 8005fa0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fa4:	0202      	lsls	r2, r0, #8
 8005fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fa8:	6849      	ldr	r1, [r1, #4]
 8005faa:	0849      	lsrs	r1, r1, #1
 8005fac:	2000      	movs	r0, #0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	eb12 0804 	adds.w	r8, r2, r4
 8005fb6:	eb43 0905 	adc.w	r9, r3, r5
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	60fa      	str	r2, [r7, #12]
 8005fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fc8:	4640      	mov	r0, r8
 8005fca:	4649      	mov	r1, r9
 8005fcc:	f7fa f964 	bl	8000298 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fde:	d308      	bcc.n	8005ff2 <UART_SetConfig+0x1ca>
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe6:	d204      	bcs.n	8005ff2 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	e080      	b.n	80060f4 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ff8:	e07c      	b.n	80060f4 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006002:	d149      	bne.n	8006098 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006006:	2200      	movs	r2, #0
 8006008:	603b      	str	r3, [r7, #0]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006010:	f7fe fbd6 	bl	80047c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006014:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d06b      	beq.n	80060f4 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <UART_SetConfig+0x26c>)
 8006022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006026:	461a      	mov	r2, r3
 8006028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800602a:	fbb3 f3f2 	udiv	r3, r3, r2
 800602e:	005a      	lsls	r2, r3, #1
 8006030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	441a      	add	r2, r3
 8006038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006040:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006044:	2b0f      	cmp	r3, #15
 8006046:	d916      	bls.n	8006076 <UART_SetConfig+0x24e>
 8006048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800604e:	d212      	bcs.n	8006076 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006052:	b29b      	uxth	r3, r3
 8006054:	f023 030f 	bic.w	r3, r3, #15
 8006058:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800605a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	b29b      	uxth	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	b29a      	uxth	r2, r3
 8006066:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006068:	4313      	orrs	r3, r2
 800606a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006072:	60da      	str	r2, [r3, #12]
 8006074:	e03e      	b.n	80060f4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800607c:	e03a      	b.n	80060f4 <UART_SetConfig+0x2cc>
 800607e:	bf00      	nop
 8006080:	cfff69f3 	.word	0xcfff69f3
 8006084:	44002400 	.word	0x44002400
 8006088:	40013800 	.word	0x40013800
 800608c:	40004400 	.word	0x40004400
 8006090:	40004800 	.word	0x40004800
 8006094:	080068cc 	.word	0x080068cc
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609a:	2200      	movs	r2, #0
 800609c:	469a      	mov	sl, r3
 800609e:	4693      	mov	fp, r2
 80060a0:	4650      	mov	r0, sl
 80060a2:	4659      	mov	r1, fp
 80060a4:	f7fe fb8c 	bl	80047c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80060a8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80060aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d021      	beq.n	80060f4 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006120 <UART_SetConfig+0x2f8>)
 80060b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060be:	fbb3 f2f2 	udiv	r2, r3, r2
 80060c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	441a      	add	r2, r3
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d909      	bls.n	80060ee <UART_SetConfig+0x2c6>
 80060da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e0:	d205      	bcs.n	80060ee <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	e002      	b.n	80060f4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	2201      	movs	r2, #1
 80060f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006106:	2200      	movs	r2, #0
 8006108:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800610a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610c:	2200      	movs	r2, #0
 800610e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006110:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006114:	4618      	mov	r0, r3
 8006116:	3750      	adds	r7, #80	@ 0x50
 8006118:	46bd      	mov	sp, r7
 800611a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800611e:	bf00      	nop
 8006120:	080068cc 	.word	0x080068cc

08006124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01a      	beq.n	800623a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006222:	d10a      	bne.n	800623a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
  }
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b098      	sub	sp, #96	@ 0x60
 800626c:	af02      	add	r7, sp, #8
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006278:	f7fb f83a 	bl	80012f0 <HAL_GetTick>
 800627c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b08      	cmp	r3, #8
 800628a:	d12f      	bne.n	80062ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800628c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006294:	2200      	movs	r2, #0
 8006296:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f88e 	bl	80063bc <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d022      	beq.n	80062ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e063      	b.n	80063b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d149      	bne.n	800638e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006302:	2200      	movs	r2, #0
 8006304:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f857 	bl	80063bc <UART_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d03c      	beq.n	800638e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	623b      	str	r3, [r7, #32]
   return(result);
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006332:	633b      	str	r3, [r7, #48]	@ 0x30
 8006334:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e6      	bne.n	8006314 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	60fb      	str	r3, [r7, #12]
   return(result);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006366:	61fa      	str	r2, [r7, #28]
 8006368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	617b      	str	r3, [r7, #20]
   return(result);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e5      	bne.n	8006346 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e012      	b.n	80063b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3758      	adds	r7, #88	@ 0x58
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063cc:	e04f      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d04b      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d6:	f7fa ff8b 	bl	80012f0 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <UART_WaitOnFlagUntilTimeout+0x30>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e04e      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d037      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b80      	cmp	r3, #128	@ 0x80
 8006402:	d034      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b40      	cmp	r3, #64	@ 0x40
 8006408:	d031      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d110      	bne.n	800643a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2208      	movs	r2, #8
 800641e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f838 	bl	8006496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2208      	movs	r2, #8
 800642a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e029      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006448:	d111      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f81e 	bl	8006496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e00f      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	429a      	cmp	r2, r3
 800648a:	d0a0      	beq.n	80063ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006496:	b480      	push	{r7}
 8006498:	b095      	sub	sp, #84	@ 0x54
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80064be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e6      	bne.n	800649e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064e6:	f023 0301 	bic.w	r3, r3, #1
 80064ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3308      	adds	r3, #8
 80064f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e3      	bne.n	80064d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d118      	bne.n	8006542 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	60bb      	str	r3, [r7, #8]
   return(result);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f023 0310 	bic.w	r3, r3, #16
 8006524:	647b      	str	r3, [r7, #68]	@ 0x44
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6979      	ldr	r1, [r7, #20]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	613b      	str	r3, [r7, #16]
   return(result);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e6      	bne.n	8006510 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006556:	bf00      	nop
 8006558:	3754      	adds	r7, #84	@ 0x54
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff fc3f 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657e:	bf00      	nop
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b088      	sub	sp, #32
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60bb      	str	r3, [r7, #8]
   return(result);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6979      	ldr	r1, [r7, #20]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff fc0a 	bl	8005de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d4:	bf00      	nop
 80065d6:	3720      	adds	r7, #32
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_UARTEx_DisableFifoMode+0x16>
 800662a:	2302      	movs	r3, #2
 800662c:	e027      	b.n	800667e <HAL_UARTEx_DisableFifoMode+0x66>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2224      	movs	r2, #36	@ 0x24
 800663a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800665c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800669e:	2302      	movs	r3, #2
 80066a0:	e02d      	b.n	80066fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2224      	movs	r2, #36	@ 0x24
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0201 	bic.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f850 	bl	8006784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800671a:	2302      	movs	r3, #2
 800671c:	e02d      	b.n	800677a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2224      	movs	r2, #36	@ 0x24
 800672a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f812 	bl	8006784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006790:	2b00      	cmp	r3, #0
 8006792:	d108      	bne.n	80067a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067a4:	e031      	b.n	800680a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067a6:	2308      	movs	r3, #8
 80067a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067aa:	2308      	movs	r3, #8
 80067ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	0e5b      	lsrs	r3, r3, #25
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	0f5b      	lsrs	r3, r3, #29
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	7b3a      	ldrb	r2, [r7, #12]
 80067d2:	4911      	ldr	r1, [pc, #68]	@ (8006818 <UARTEx_SetNbDataToProcess+0x94>)
 80067d4:	5c8a      	ldrb	r2, [r1, r2]
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067da:	7b3a      	ldrb	r2, [r7, #12]
 80067dc:	490f      	ldr	r1, [pc, #60]	@ (800681c <UARTEx_SetNbDataToProcess+0x98>)
 80067de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	7b7a      	ldrb	r2, [r7, #13]
 80067f0:	4909      	ldr	r1, [pc, #36]	@ (8006818 <UARTEx_SetNbDataToProcess+0x94>)
 80067f2:	5c8a      	ldrb	r2, [r1, r2]
 80067f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067f8:	7b7a      	ldrb	r2, [r7, #13]
 80067fa:	4908      	ldr	r1, [pc, #32]	@ (800681c <UARTEx_SetNbDataToProcess+0x98>)
 80067fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006802:	b29a      	uxth	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	080068e4 	.word	0x080068e4
 800681c:	080068ec 	.word	0x080068ec

08006820 <memset>:
 8006820:	4402      	add	r2, r0
 8006822:	4603      	mov	r3, r0
 8006824:	4293      	cmp	r3, r2
 8006826:	d100      	bne.n	800682a <memset+0xa>
 8006828:	4770      	bx	lr
 800682a:	f803 1b01 	strb.w	r1, [r3], #1
 800682e:	e7f9      	b.n	8006824 <memset+0x4>

08006830 <__libc_init_array>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	4d0d      	ldr	r5, [pc, #52]	@ (8006868 <__libc_init_array+0x38>)
 8006834:	2600      	movs	r6, #0
 8006836:	4c0d      	ldr	r4, [pc, #52]	@ (800686c <__libc_init_array+0x3c>)
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	42a6      	cmp	r6, r4
 800683e:	d109      	bne.n	8006854 <__libc_init_array+0x24>
 8006840:	4d0b      	ldr	r5, [pc, #44]	@ (8006870 <__libc_init_array+0x40>)
 8006842:	2600      	movs	r6, #0
 8006844:	4c0b      	ldr	r4, [pc, #44]	@ (8006874 <__libc_init_array+0x44>)
 8006846:	f000 f817 	bl	8006878 <_init>
 800684a:	1b64      	subs	r4, r4, r5
 800684c:	10a4      	asrs	r4, r4, #2
 800684e:	42a6      	cmp	r6, r4
 8006850:	d105      	bne.n	800685e <__libc_init_array+0x2e>
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	f855 3b04 	ldr.w	r3, [r5], #4
 8006858:	3601      	adds	r6, #1
 800685a:	4798      	blx	r3
 800685c:	e7ee      	b.n	800683c <__libc_init_array+0xc>
 800685e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006862:	3601      	adds	r6, #1
 8006864:	4798      	blx	r3
 8006866:	e7f2      	b.n	800684e <__libc_init_array+0x1e>
 8006868:	080068fc 	.word	0x080068fc
 800686c:	080068fc 	.word	0x080068fc
 8006870:	080068fc 	.word	0x080068fc
 8006874:	08006900 	.word	0x08006900

08006878 <_init>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr

08006884 <_fini>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr
