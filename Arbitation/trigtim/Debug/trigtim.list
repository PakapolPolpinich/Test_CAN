
trigtim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa0  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080041f8  080041f8  000051f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004218  08004218  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004218  08004218  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004218  08004218  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004218  08004218  00005218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800421c  0800421c  0000521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004220  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  0800422c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800422c  00006134  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010280  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3a  00000000  00000000  000162c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00017f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1b  00000000  00000000  00018d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc92  00000000  00000000  00019883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f666  00000000  00000000  00039515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd919  00000000  00000000  00048b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e14  00000000  00000000  001164d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0011a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080041e0 	.word	0x080041e0

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080041e0 	.word	0x080041e0

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fbce 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f81e 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 f938 	bl	8000518 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002a8:	f000 f88c 	bl	80003c4 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80002ac:	f000 f8e2 	bl	8000474 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <main+0x40>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f06f 0201 	mvn.w	r2, #1
 80002b8:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 80002ba:	4807      	ldr	r0, [pc, #28]	@ (80002d8 <main+0x40>)
 80002bc:	f003 fada 	bl	8003874 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (can_send_flag == 1 ){
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <main+0x44>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d1fa      	bne.n	80002c0 <main+0x28>
		  TX_Send_CAN();
 80002ca:	f000 f9a9 	bl	8000620 <TX_Send_CAN>
		  can_send_flag = 0;
 80002ce:	4b03      	ldr	r3, [pc, #12]	@ (80002dc <main+0x44>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
	  if (can_send_flag == 1 ){
 80002d4:	e7f4      	b.n	80002c0 <main+0x28>
 80002d6:	bf00      	nop
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	2000012c 	.word	0x2000012c

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b09c      	sub	sp, #112	@ 0x70
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0320 	add.w	r3, r7, #32
 80002ea:	2250      	movs	r2, #80	@ 0x50
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 ff4a 	bl	8004188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 0308 	add.w	r3, r7, #8
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000306:	4b2d      	ldr	r3, [pc, #180]	@ (80003bc <SystemClock_Config+0xdc>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800030e:	4a2b      	ldr	r2, [pc, #172]	@ (80003bc <SystemClock_Config+0xdc>)
 8000310:	f043 0320 	orr.w	r3, r3, #32
 8000314:	6113      	str	r3, [r2, #16]
 8000316:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <SystemClock_Config+0xdc>)
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000322:	bf00      	nop
 8000324:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <SystemClock_Config+0xdc>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	2b08      	cmp	r3, #8
 800032e:	d1f9      	bne.n	8000324 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000330:	2301      	movs	r3, #1
 8000332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000334:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000338:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800033e:	2303      	movs	r3, #3
 8000340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000342:	2303      	movs	r3, #3
 8000344:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000346:	2332      	movs	r3, #50	@ 0x32
 8000348:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800034a:	2302      	movs	r3, #2
 800034c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800034e:	2302      	movs	r3, #2
 8000350:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000352:	2302      	movs	r3, #2
 8000354:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000356:	230c      	movs	r3, #12
 8000358:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800035a:	2300      	movs	r3, #0
 800035c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0320 	add.w	r3, r7, #32
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fc38 	bl	8001bdc <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000372:	f000 f9b3 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	231f      	movs	r3, #31
 8000378:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2303      	movs	r3, #3
 800037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2105      	movs	r1, #5
 8000394:	4618      	mov	r0, r3
 8000396:	f002 f859 	bl	800244c <HAL_RCC_ClockConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003a0:	f000 f99c 	bl	80006dc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <SystemClock_Config+0xe0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003ac:	4a04      	ldr	r2, [pc, #16]	@ (80003c0 <SystemClock_Config+0xe0>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	3770      	adds	r7, #112	@ 0x70
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	44020800 	.word	0x44020800
 80003c0:	40022000 	.word	0x40022000

080003c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003c8:	4b28      	ldr	r3, [pc, #160]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003ca:	4a29      	ldr	r2, [pc, #164]	@ (8000470 <MX_FDCAN1_Init+0xac>)
 80003cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003ce:	4b27      	ldr	r3, [pc, #156]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003d4:	4b25      	ldr	r3, [pc, #148]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003da:	4b24      	ldr	r3, [pc, #144]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003e0:	4b22      	ldr	r3, [pc, #136]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003e6:	4b21      	ldr	r3, [pc, #132]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003f4:	2219      	movs	r2, #25
 80003f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000400:	220d      	movs	r2, #13
 8000402:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000404:	4b19      	ldr	r3, [pc, #100]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000406:	2202      	movs	r2, #2
 8000408:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 800040c:	2201      	movs	r2, #1
 800040e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000410:	4b16      	ldr	r3, [pc, #88]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000412:	2201      	movs	r2, #1
 8000414:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000418:	2201      	movs	r2, #1
 800041a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800041c:	4b13      	ldr	r3, [pc, #76]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 800041e:	2201      	movs	r2, #1
 8000420:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000422:	4b12      	ldr	r3, [pc, #72]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000424:	2200      	movs	r2, #0
 8000426:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000428:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 800042a:	2200      	movs	r2, #0
 800042c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000430:	2200      	movs	r2, #0
 8000432:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000434:	480d      	ldr	r0, [pc, #52]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000436:	f000 fd4f 	bl	8000ed8 <HAL_FDCAN_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000440:	f000 f94c 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000444:	4809      	ldr	r0, [pc, #36]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 8000446:	f000 fea1 	bl	800118c <HAL_FDCAN_Start>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_FDCAN1_Init+0x90>
    	 /* Notification Error */
    	Error_Handler();
 8000450:	f000 f944 	bl	80006dc <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	4804      	ldr	r0, [pc, #16]	@ (800046c <MX_FDCAN1_Init+0xa8>)
 800045a:	f000 ff03 	bl	8001264 <HAL_FDCAN_ActivateNotification>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_FDCAN1_Init+0xa4>
    {
  	/* Notification Error */
  	Error_Handler();
 8000464:	f000 f93a 	bl	80006dc <Error_Handler>
    }
  /* USER CODE END FDCAN1_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000028 	.word	0x20000028
 8000470:	4000a400 	.word	0x4000a400

08000474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048a:	463b      	mov	r3, r7
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000494:	4b1f      	ldr	r3, [pc, #124]	@ (8000514 <MX_TIM2_Init+0xa0>)
 8000496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800049a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 800049c:	4b1d      	ldr	r3, [pc, #116]	@ (8000514 <MX_TIM2_Init+0xa0>)
 800049e:	22c7      	movs	r2, #199	@ 0xc7
 80004a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000514 <MX_TIM2_Init+0xa0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80004a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000514 <MX_TIM2_Init+0xa0>)
 80004aa:	2227      	movs	r2, #39	@ 0x27
 80004ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ae:	4b19      	ldr	r3, [pc, #100]	@ (8000514 <MX_TIM2_Init+0xa0>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b4:	4b17      	ldr	r3, [pc, #92]	@ (8000514 <MX_TIM2_Init+0xa0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ba:	4816      	ldr	r0, [pc, #88]	@ (8000514 <MX_TIM2_Init+0xa0>)
 80004bc:	f003 f982 	bl	80037c4 <HAL_TIM_Base_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004c6:	f000 f909 	bl	80006dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80004ca:	2306      	movs	r3, #6
 80004cc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80004ce:	2360      	movs	r3, #96	@ 0x60
 80004d0:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 80004d2:	2302      	movs	r3, #2
 80004d4:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	4619      	mov	r1, r3
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <MX_TIM2_Init+0xa0>)
 80004e2:	f003 fb6a 	bl	8003bba <HAL_TIM_SlaveConfigSynchro>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80004ec:	f000 f8f6 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f8:	463b      	mov	r3, r7
 80004fa:	4619      	mov	r1, r3
 80004fc:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_TIM2_Init+0xa0>)
 80004fe:	f003 fd95 	bl	800402c <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000508:	f000 f8e8 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000008c 	.word	0x2000008c

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b38      	ldr	r3, [pc, #224]	@ (8000610 <MX_GPIO_Init+0xf8>)
 8000530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000534:	4a36      	ldr	r2, [pc, #216]	@ (8000610 <MX_GPIO_Init+0xf8>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800053e:	4b34      	ldr	r3, [pc, #208]	@ (8000610 <MX_GPIO_Init+0xf8>)
 8000540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054c:	4b30      	ldr	r3, [pc, #192]	@ (8000610 <MX_GPIO_Init+0xf8>)
 800054e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000552:	4a2f      	ldr	r2, [pc, #188]	@ (8000610 <MX_GPIO_Init+0xf8>)
 8000554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000558:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800055c:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <MX_GPIO_Init+0xf8>)
 800055e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <MX_GPIO_Init+0xf8>)
 800056c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000570:	4a27      	ldr	r2, [pc, #156]	@ (8000610 <MX_GPIO_Init+0xf8>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800057a:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <MX_GPIO_Init+0xf8>)
 800057c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000588:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <MX_GPIO_Init+0xf8>)
 800058a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <MX_GPIO_Init+0xf8>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <MX_GPIO_Init+0xf8>)
 800059a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	481a      	ldr	r0, [pc, #104]	@ (8000614 <MX_GPIO_Init+0xfc>)
 80005ac:	f001 fafe 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 80005b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_GPIO_Init+0x100>)
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4815      	ldr	r0, [pc, #84]	@ (800061c <MX_GPIO_Init+0x104>)
 80005c6:	f001 f99f 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_TX_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80005ca:	2318      	movs	r3, #24
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 80005da:	230d      	movs	r3, #13
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	480b      	ldr	r0, [pc, #44]	@ (8000614 <MX_GPIO_Init+0xfc>)
 80005e6:	f001 f98f 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80005ea:	2320      	movs	r3, #32
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <MX_GPIO_Init+0xfc>)
 8000602:	f001 f981 	bl	8001908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	@ 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	44020c00 	.word	0x44020c00
 8000614:	42020000 	.word	0x42020000
 8000618:	10110000 	.word	0x10110000
 800061c:	42020800 	.word	0x42020800

08000620 <TX_Send_CAN>:

/* USER CODE BEGIN 4 */
void TX_Send_CAN(){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

    /* ----- Prepare CAN data --------------------------------------- */
    CAN_Payload.TxHeader.Identifier = 0x7FF; //CAN_Payload.msgID
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <TX_Send_CAN+0x58>)
 8000626:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800062a:	601a      	str	r2, [r3, #0]
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <TX_Send_CAN+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;        // 8-byte payloaD
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <TX_Send_CAN+0x58>)
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <TX_Send_CAN+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <TX_Send_CAN+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
    CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <TX_Send_CAN+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <TX_Send_CAN+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
    CAN_Payload.TxHeader.MessageMarker = 0;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <TX_Send_CAN+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]

    CAN_Payload.dataTx[0] ^= 1;
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <TX_Send_CAN+0x58>)
 8000658:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <TX_Send_CAN+0x58>)
 8000664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <TX_Send_CAN+0x5c>)
 800066a:	4903      	ldr	r1, [pc, #12]	@ (8000678 <TX_Send_CAN+0x58>)
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <TX_Send_CAN+0x60>)
 800066e:	f000 fdb5 	bl	80011dc <HAL_FDCAN_AddMessageToTxFifoQ>
    {
    	//Error_Handler();
    }
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000d8 	.word	0x200000d8
 800067c:	20000128 	.word	0x20000128
 8000680:	20000028 	.word	0x20000028

08000684 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000694:	d11a      	bne.n	80006cc <HAL_TIM_PeriodElapsedCallback+0x48>
    {
    	__HAL_TIM_DISABLE(htim);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6a1a      	ldr	r2, [r3, #32]
 800069c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80006a0:	4013      	ands	r3, r2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10f      	bne.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x42>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	f244 4344 	movw	r3, #17476	@ 0x4444
 80006b0:	4013      	ands	r3, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d107      	bne.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x42>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f022 0201 	bic.w	r2, r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
    	//TX_Send_CAN();
    	can_send_flag = 1;
 80006c6:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
     }
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	2000012c 	.word	0x2000012c

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0ac      	sub	sp, #176	@ 0xb0
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2288      	movs	r2, #136	@ 0x88
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fd35 	bl	8004188 <memset>
  if(hfdcan->Instance==FDCAN1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a2b      	ldr	r2, [pc, #172]	@ (80007d0 <HAL_FDCAN_MspInit+0xd8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d14e      	bne.n	80007c6 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000728:	f04f 0200 	mov.w	r2, #0
 800072c:	f04f 0304 	mov.w	r3, #4
 8000730:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000738:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f984 	bl	8002a4c <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800074a:	f7ff ffc7 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <HAL_FDCAN_MspInit+0xdc>)
 8000750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000754:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <HAL_FDCAN_MspInit+0xdc>)
 8000756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800075a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <HAL_FDCAN_MspInit+0xdc>)
 8000760:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <HAL_FDCAN_MspInit+0xdc>)
 800076e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <HAL_FDCAN_MspInit+0xdc>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <HAL_FDCAN_MspInit+0xdc>)
 800077e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC7     ------> FDCAN1_TX
    PC8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800078a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800078e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007a4:	2309      	movs	r3, #9
 80007a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ae:	4619      	mov	r1, r3
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <HAL_FDCAN_MspInit+0xe0>)
 80007b2:	f001 f8a9 	bl	8001908 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2027      	movs	r0, #39	@ 0x27
 80007bc:	f000 fab4 	bl	8000d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007c0:	2027      	movs	r0, #39	@ 0x27
 80007c2:	f000 facb 	bl	8000d5c <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80007c6:	bf00      	nop
 80007c8:	37b0      	adds	r7, #176	@ 0xb0
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	4000a400 	.word	0x4000a400
 80007d4:	44020c00 	.word	0x44020c00
 80007d8:	42020800 	.word	0x42020800

080007dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007fc:	d135      	bne.n	800086a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <HAL_TIM_Base_MspInit+0x98>)
 8000800:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <HAL_TIM_Base_MspInit+0x98>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <HAL_TIM_Base_MspInit+0x98>)
 8000810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <HAL_TIM_Base_MspInit+0x98>)
 800081e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000822:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <HAL_TIM_Base_MspInit+0x98>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <HAL_TIM_Base_MspInit+0x98>)
 800082e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083a:	2308      	movs	r3, #8
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800084a:	2301      	movs	r3, #1
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	@ (8000878 <HAL_TIM_Base_MspInit+0x9c>)
 8000856:	f001 f857 	bl	8001908 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	202d      	movs	r0, #45	@ 0x2d
 8000860:	f000 fa62 	bl	8000d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000864:	202d      	movs	r0, #45	@ 0x2d
 8000866:	f000 fa79 	bl	8000d5c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	@ 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	44020c00 	.word	0x44020c00
 8000878:	42020400 	.word	0x42020400

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d2:	f000 f951 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <FDCAN1_IT0_IRQHandler+0x10>)
 80008e2:	f000 fda5 	bl	8001430 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000028 	.word	0x20000028

080008f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f4:	4802      	ldr	r0, [pc, #8]	@ (8000900 <TIM2_IRQHandler+0x10>)
 80008f6:	f003 f811 	bl	800391c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000008c 	.word	0x2000008c

08000904 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800090a:	4b30      	ldr	r3, [pc, #192]	@ (80009cc <SystemInit+0xc8>)
 800090c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000910:	4a2e      	ldr	r2, [pc, #184]	@ (80009cc <SystemInit+0xc8>)
 8000912:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000916:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800091a:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <SystemInit+0xcc>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000920:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <SystemInit+0xcc>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <SystemInit+0xcc>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800092c:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <SystemInit+0xcc>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4927      	ldr	r1, [pc, #156]	@ (80009d0 <SystemInit+0xcc>)
 8000932:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <SystemInit+0xd0>)
 8000934:	4013      	ands	r3, r2
 8000936:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000938:	4b25      	ldr	r3, [pc, #148]	@ (80009d0 <SystemInit+0xcc>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800093e:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <SystemInit+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <SystemInit+0xcc>)
 8000946:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <SystemInit+0xd4>)
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <SystemInit+0xcc>)
 800094c:	2200      	movs	r2, #0
 800094e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <SystemInit+0xcc>)
 8000952:	4a21      	ldr	r2, [pc, #132]	@ (80009d8 <SystemInit+0xd4>)
 8000954:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <SystemInit+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <SystemInit+0xcc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <SystemInit+0xcc>)
 8000962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000966:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <SystemInit+0xcc>)
 800096a:	2200      	movs	r2, #0
 800096c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <SystemInit+0xc8>)
 8000970:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000974:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <SystemInit+0xd8>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800097e:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000986:	d003      	beq.n	8000990 <SystemInit+0x8c>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800098e:	d117      	bne.n	80009c0 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <SystemInit+0xd8>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d005      	beq.n	80009a8 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <SystemInit+0xd8>)
 800099e:	4a10      	ldr	r2, [pc, #64]	@ (80009e0 <SystemInit+0xdc>)
 80009a0:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <SystemInit+0xd8>)
 80009a4:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <SystemInit+0xe0>)
 80009a6:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <SystemInit+0xd8>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	4a0b      	ldr	r2, [pc, #44]	@ (80009dc <SystemInit+0xd8>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <SystemInit+0xd8>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <SystemInit+0xd8>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	61d3      	str	r3, [r2, #28]
  }
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	44020c00 	.word	0x44020c00
 80009d4:	fae2eae3 	.word	0xfae2eae3
 80009d8:	01010280 	.word	0x01010280
 80009dc:	40022000 	.word	0x40022000
 80009e0:	08192a3b 	.word	0x08192a3b
 80009e4:	4c5d6e7f 	.word	0x4c5d6e7f

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009ee:	e003      	b.n	80009f8 <LoopCopyDataInit>

080009f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009f6:	3104      	adds	r1, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <LoopForever+0xe>)
	adds	r2, r0, r1
 80009fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a00:	d3f6      	bcc.n	80009f0 <CopyDataInit>
	ldr	r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a04:	e002      	b.n	8000a0c <LoopFillZerobss>

08000a06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a08:	f842 3b04 	str.w	r3, [r2], #4

08000a0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <LoopForever+0x16>)
	cmp	r2, r3
 8000a0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a10:	d3f9      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a12:	f7ff ff77 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f003 fbbf 	bl	8004198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fc3d 	bl	8000298 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a20:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000a24:	08004220 	.word	0x08004220
	ldr	r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a30:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a34:	20000134 	.word	0x20000134

08000a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f966 	bl	8000d12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a46:	f001 feb9 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_Init+0x44>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	f003 030f 	and.w	r3, r3, #15
 8000a54:	490b      	ldr	r1, [pc, #44]	@ (8000a84 <HAL_Init+0x48>)
 8000a56:	5ccb      	ldrb	r3, [r1, r3]
 8000a58:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <HAL_Init+0x4c>)
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a60:	2004      	movs	r0, #4
 8000a62:	f000 f9ab 	bl	8000dbc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f810 	bl	8000a8c <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e002      	b.n	8000a7c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a76:	f7ff fe37 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	44020c00 	.word	0x44020c00
 8000a84:	080041f8 	.word	0x080041f8
 8000a88:	20000000 	.word	0x20000000

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000a98:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <HAL_InitTick+0xdc>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d101      	bne.n	8000aa4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e05c      	b.n	8000b5e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d10c      	bne.n	8000aca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <HAL_InitTick+0xe4>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b68 <HAL_InitTick+0xdc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e037      	b.n	8000b3a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000aca:	f000 f9cf 	bl	8000e6c <HAL_SYSTICK_GetCLKSourceConfig>
 8000ace:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d023      	beq.n	8000b1e <HAL_InitTick+0x92>
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d82d      	bhi.n	8000b38 <HAL_InitTick+0xac>
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_InitTick+0x5e>
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d00d      	beq.n	8000b04 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ae8:	e026      	b.n	8000b38 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <HAL_InitTick+0xe4>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <HAL_InitTick+0xdc>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b00:	60fb      	str	r3, [r7, #12]
        break;
 8000b02:	e01a      	b.n	8000b3a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <HAL_InitTick+0xdc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b12:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	60fb      	str	r3, [r7, #12]
        break;
 8000b1c:	e00d      	b.n	8000b3a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0xdc>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	60fb      	str	r3, [r7, #12]
        break;
 8000b36:	e000      	b.n	8000b3a <HAL_InitTick+0xae>
        break;
 8000b38:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f000 f91c 	bl	8000d78 <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e009      	b.n	8000b5e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	f000 f8e9 	bl	8000d28 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000b56:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	e000e010 	.word	0xe000e010
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000130 	.word	0x20000130

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000130 	.word	0x20000130

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	@ (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff4c 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d36:	f7ff ff63 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff ffb3 	bl	8000cac <NVIC_EncodePriority>
 8000d46:	4602      	mov	r2, r0
 8000d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff82 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff56 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00d      	b.n	8000daa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <HAL_SYSTICK_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <HAL_SYSTICK_Config+0x40>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_SYSTICK_Config+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <HAL_SYSTICK_Config+0x40>)
 8000da2:	f043 0303 	orr.w	r3, r3, #3
 8000da6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d844      	bhi.n	8000e54 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000dca:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000df3 	.word	0x08000df3
 8000dd4:	08000e11 	.word	0x08000e11
 8000dd8:	08000e33 	.word	0x08000e33
 8000ddc:	08000e55 	.word	0x08000e55
 8000de0:	08000de5 	.word	0x08000de5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6013      	str	r3, [r2, #0]
      break;
 8000df0:	e031      	b.n	8000e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000df8:	f023 0304 	bic.w	r3, r3, #4
 8000dfc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e04:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e06:	f023 030c 	bic.w	r3, r3, #12
 8000e0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e0e:	e022      	b.n	8000e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e16:	f023 0304 	bic.w	r3, r3, #4
 8000e1a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e22:	f023 030c 	bic.w	r3, r3, #12
 8000e26:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e30:	e011      	b.n	8000e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e38:	f023 0304 	bic.w	r3, r3, #4
 8000e3c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e44:	f023 030c 	bic.w	r3, r3, #12
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e52:	e000      	b.n	8000e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000e54:	bf00      	nop
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010
 8000e68:	44020c00 	.word	0x44020c00

08000e6c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	e01e      	b.n	8000ec2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000e86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d00f      	beq.n	8000eb6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d80f      	bhi.n	8000ebc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d003      	beq.n	8000eb0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000ea8:	e008      	b.n	8000ebc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
        break;
 8000eae:	e008      	b.n	8000ec2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
        break;
 8000eb4:	e005      	b.n	8000ec2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	607b      	str	r3, [r7, #4]
        break;
 8000eba:	e002      	b.n	8000ec2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
        break;
 8000ec0:	bf00      	nop
    }
  }
  return systick_source;
 8000ec2:	687b      	ldr	r3, [r7, #4]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e010 	.word	0xe000e010
 8000ed4:	44020c00 	.word	0x44020c00

08000ed8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e147      	b.n	800117a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fbfa 	bl	80006f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0210 	bic.w	r2, r2, #16
 8000f12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f14:	f7ff fe44 	bl	8000ba0 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f1a:	e012      	b.n	8000f42 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f1c:	f7ff fe40 	bl	8000ba0 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d90b      	bls.n	8000f42 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e11b      	b.n	800117a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d0e5      	beq.n	8000f1c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	699a      	ldr	r2, [r3, #24]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f60:	f7ff fe1e 	bl	8000ba0 <HAL_GetTick>
 8000f64:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f66:	e012      	b.n	8000f8e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f68:	f7ff fe1a 	bl	8000ba0 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d90b      	bls.n	8000f8e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0f5      	b.n	800117a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0e5      	beq.n	8000f68 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0202 	orr.w	r2, r2, #2
 8000faa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a74      	ldr	r2, [pc, #464]	@ (8001184 <HAL_FDCAN_Init+0x2ac>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d103      	bne.n	8000fbe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000fb6:	4a74      	ldr	r2, [pc, #464]	@ (8001188 <HAL_FDCAN_Init+0x2b0>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7c1b      	ldrb	r3, [r3, #16]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fd4:	619a      	str	r2, [r3, #24]
 8000fd6:	e007      	b.n	8000fe8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fe6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7c5b      	ldrb	r3, [r3, #17]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ffe:	619a      	str	r2, [r3, #24]
 8001000:	e007      	b.n	8001012 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001010:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7c9b      	ldrb	r3, [r3, #18]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d108      	bne.n	800102c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001028:	619a      	str	r2, [r3, #24]
 800102a:	e007      	b.n	800103c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800103a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001060:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0210 	bic.w	r2, r2, #16
 8001070:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699a      	ldr	r2, [r3, #24]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0204 	orr.w	r2, r2, #4
 8001088:	619a      	str	r2, [r3, #24]
 800108a:	e02c      	b.n	80010e6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d028      	beq.n	80010e6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d01c      	beq.n	80010d6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010aa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0210 	orr.w	r2, r2, #16
 80010ba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d110      	bne.n	80010e6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	699a      	ldr	r2, [r3, #24]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0220 	orr.w	r2, r2, #32
 80010d2:	619a      	str	r2, [r3, #24]
 80010d4:	e007      	b.n	80010e6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	699a      	ldr	r2, [r3, #24]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010f6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010fe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	3b01      	subs	r3, #1
 8001108:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800110e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001110:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800111a:	d115      	bne.n	8001148 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001120:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001126:	3b01      	subs	r3, #1
 8001128:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800112a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	3b01      	subs	r3, #1
 8001132:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001134:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113c:	3b01      	subs	r3, #1
 800113e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001144:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001146:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fb00 	bl	8001764 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	4000a400 	.word	0x4000a400
 8001188:	4000a500 	.word	0x4000a500

0800118c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d110      	bne.n	80011c2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e006      	b.n	80011d0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c6:	f043 0204 	orr.w	r2, r3, #4
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
  }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d12c      	bne.n	800124e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001208:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e023      	b.n	800125c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800121c:	0c1b      	lsrs	r3, r3, #16
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 faf0 	bl	8001810 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2101      	movs	r1, #1
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001240:	2201      	movs	r2, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e006      	b.n	800125c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001252:	f043 0208 	orr.w	r2, r3, #8
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001276:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d003      	beq.n	8001286 <HAL_FDCAN_ActivateNotification+0x22>
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2b02      	cmp	r3, #2
 8001282:	f040 80c8 	bne.w	8001416 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d03b      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d031      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d027      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d01d      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d013      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d107      	bne.n	800132a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0201 	orr.w	r2, r2, #1
 8001328:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d13b      	bne.n	80013b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d131      	bne.n	80013b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	d127      	bne.n	80013b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d11d      	bne.n	80013b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d113      	bne.n	80013b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0320 	and.w	r3, r3, #32
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00c      	beq.n	80013c6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0202 	orr.w	r2, r2, #2
 80013c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	430a      	orrs	r2, r1
 80013e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	430a      	orrs	r2, r1
 8001410:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e006      	b.n	8001424 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f043 0202 	orr.w	r2, r3, #2
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	@ 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800144c:	4013      	ands	r3, r2
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001464:	4013      	ands	r3, r2
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800146e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800147c:	4013      	ands	r3, r2
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001486:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800148a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	4013      	ands	r3, r2
 8001496:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800149e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014a2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014be:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2240      	movs	r2, #64	@ 0x40
 80014da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f921 	bl	8001724 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d019      	beq.n	8001520 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d014      	beq.n	8001520 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014fe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001516:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f8e3 	bl	80016e6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800152c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800152e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f8a2 	bl	800167a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001542:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f8a2 	bl	8001690 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001558:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800155a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f8a2 	bl	80016a6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800157e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f89b 	bl	80016bc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158c:	2b00      	cmp	r3, #0
 800158e:	d018      	beq.n	80015c2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001596:	2b00      	cmp	r3, #0
 8001598:	d013      	beq.n	80015c2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015a2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2280      	movs	r2, #128	@ 0x80
 80015b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f887 	bl	80016d0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f88b 	bl	80016fc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00c      	beq.n	800160a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001602:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f883 	bl	8001710 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00f      	beq.n	8001634 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00a      	beq.n	8001634 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001626:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001642:	69f9      	ldr	r1, [r7, #28]
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f881 	bl	800174c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f863 	bl	8001738 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001672:	bf00      	nop
 8001674:	3730      	adds	r7, #48	@ 0x30
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800176c:	4b27      	ldr	r3, [pc, #156]	@ (800180c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800176e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800177e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001786:	041a      	lsls	r2, r3, #16
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017a4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ac:	061a      	lsls	r2, r3, #24
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e005      	b.n	80017f2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3304      	adds	r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d3f3      	bcc.n	80017e6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	4000ac00 	.word	0x4000ac00

08001810 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	@ 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800182e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001836:	4313      	orrs	r3, r2
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e00a      	b.n	8001852 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001844:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800184a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800184c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001850:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800185c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001862:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001868:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	3304      	adds	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3304      	adds	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e020      	b.n	80018e6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3303      	adds	r3, #3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3302      	adds	r3, #2
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	440b      	add	r3, r1
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018bc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	440b      	add	r3, r1
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80018ca:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	440a      	add	r2, r1
 80018d2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80018d4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	3304      	adds	r3, #4
 80018de:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3304      	adds	r3, #4
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <FDCAN_CopyMessageToRAM+0xf4>)
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	461a      	mov	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d3d6      	bcc.n	80018a4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	3724      	adds	r7, #36	@ 0x24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	08004208 	.word	0x08004208

08001908 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001916:	e136      	b.n	8001b86 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8128 	beq.w	8001b80 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x38>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b12      	cmp	r3, #18
 800193e:	d125      	bne.n	800198c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 020f 	and.w	r2, r3, #15
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	4313      	orrs	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	6979      	ldr	r1, [r7, #20]
 8001988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4013      	ands	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d00b      	beq.n	80019e0 <HAL_GPIO_Init+0xd8>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d4:	2b11      	cmp	r3, #17
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b12      	cmp	r3, #18
 80019de:	d130      	bne.n	8001a42 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a16:	2201      	movs	r2, #1
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	4013      	ands	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 0201 	and.w	r2, r3, #1
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d017      	beq.n	8001a7a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d07c      	beq.n	8001b80 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001a86:	4a47      	ldr	r2, [pc, #284]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3318      	adds	r3, #24
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0a9a      	lsrs	r2, r3, #10
 8001aae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	f002 0203 	and.w	r2, r2, #3
 8001ab8:	00d2      	lsls	r2, r2, #3
 8001aba:	4093      	lsls	r3, r2
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ac2:	4938      	ldr	r1, [pc, #224]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3318      	adds	r3, #24
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ad0:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001af4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4013      	ands	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001b1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4013      	ands	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001b4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b58:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001b78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <HAL_GPIO_Init+0x29c>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	3301      	adds	r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f47f aec1 	bne.w	8001918 <HAL_GPIO_Init+0x10>
  }
}
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	44022000 	.word	0x44022000
 8001ba8:	002f7f7f 	.word	0x002f7f7f

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 bc28 	b.w	8002440 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf0:	4b94      	ldr	r3, [pc, #592]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f003 0318 	and.w	r3, r3, #24
 8001bf8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001bfa:	4b92      	ldr	r3, [pc, #584]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x46>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	2b18      	cmp	r3, #24
 8001c1a:	d114      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d111      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f000 bc08 	b.w	8002440 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001c30:	4b84      	ldr	r3, [pc, #528]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	4981      	ldr	r1, [pc, #516]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001c44:	e040      	b.n	8001cc8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d023      	beq.n	8001c96 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7c      	ldr	r2, [pc, #496]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7fe ffa1 	bl	8000ba0 <HAL_GetTick>
 8001c5e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001c62:	f7fe ff9d 	bl	8000ba0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e3e5      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001c74:	4b73      	ldr	r3, [pc, #460]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001c80:	4b70      	ldr	r3, [pc, #448]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	496d      	ldr	r1, [pc, #436]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	618b      	str	r3, [r1, #24]
 8001c94:	e018      	b.n	8001cc8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c96:	4b6b      	ldr	r3, [pc, #428]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6a      	ldr	r2, [pc, #424]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7fe ff7d 	bl	8000ba0 <HAL_GetTick>
 8001ca6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001caa:	f7fe ff79 	bl	8000ba0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e3c1      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001cbc:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a0 	beq.w	8001e16 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x10c>
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b18      	cmp	r3, #24
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 8092 	bne.w	8001e16 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e3a4      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x132>
 8001d00:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e058      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1e4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d112      	bne.n	8001d3c <HAL_RCC_OscConfig+0x160>
 8001d16:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b48      	ldr	r3, [pc, #288]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a47      	ldr	r2, [pc, #284]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a44      	ldr	r2, [pc, #272]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e041      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1e4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d44:	d112      	bne.n	8001d6c <HAL_RCC_OscConfig+0x190>
 8001d46:	4b3f      	ldr	r3, [pc, #252]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b3c      	ldr	r3, [pc, #240]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b39      	ldr	r3, [pc, #228]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a38      	ldr	r2, [pc, #224]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e029      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1e4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1c0>
 8001d76:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a32      	ldr	r2, [pc, #200]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2f      	ldr	r2, [pc, #188]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2c      	ldr	r2, [pc, #176]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e011      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1e4>
 8001d9c:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b26      	ldr	r3, [pc, #152]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a25      	ldr	r2, [pc, #148]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a22      	ldr	r2, [pc, #136]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001dba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe feea 	bl	8000ba0 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001dd0:	f7fe fee6 	bl	8000ba0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e32e      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x1f4>
 8001dee:	e012      	b.n	8001e16 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe fed6 	bl	8000ba0 <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001df8:	f7fe fed2 	bl	8000ba0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e31a      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_RCC_OscConfig+0x268>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 809a 	beq.w	8001f58 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x25a>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	2b18      	cmp	r3, #24
 8001e2e:	d149      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d146      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d104      	bne.n	8001e48 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e2fe      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
 8001e42:	bf00      	nop
 8001e44:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001e4e:	4b9a      	ldr	r3, [pc, #616]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0218 	and.w	r2, r3, #24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d014      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001e5e:	4b96      	ldr	r3, [pc, #600]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0218 	bic.w	r2, r3, #24
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	4993      	ldr	r1, [pc, #588]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001e70:	f000 fdd0 	bl	8002a14 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e74:	4b91      	ldr	r3, [pc, #580]	@ (80020bc <HAL_RCC_OscConfig+0x4e0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fe07 	bl	8000a8c <HAL_InitTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e2db      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe fe8a 	bl	8000ba0 <HAL_GetTick>
 8001e8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e90:	f7fe fe86 	bl	8000ba0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e2ce      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea2:	4b85      	ldr	r3, [pc, #532]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001eae:	4b82      	ldr	r3, [pc, #520]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	497e      	ldr	r1, [pc, #504]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001ec2:	e049      	b.n	8001f58 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02c      	beq.n	8001f26 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001ecc:	4b7a      	ldr	r3, [pc, #488]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 0218 	bic.w	r2, r3, #24
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	4977      	ldr	r1, [pc, #476]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001ede:	4b76      	ldr	r3, [pc, #472]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe fe59 	bl	8000ba0 <HAL_GetTick>
 8001eee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe fe55 	bl	8000ba0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e29d      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f04:	4b6c      	ldr	r3, [pc, #432]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001f10:	4b69      	ldr	r3, [pc, #420]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	4966      	ldr	r1, [pc, #408]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	610b      	str	r3, [r1, #16]
 8001f24:	e018      	b.n	8001f58 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b64      	ldr	r3, [pc, #400]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe fe35 	bl	8000ba0 <HAL_GetTick>
 8001f36:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe fe31 	bl	8000ba0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e279      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d03c      	beq.n	8001fde <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6c:	4b52      	ldr	r3, [pc, #328]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f72:	4a51      	ldr	r2, [pc, #324]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7fe fe10 	bl	8000ba0 <HAL_GetTick>
 8001f80:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f84:	f7fe fe0c 	bl	8000ba0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e254      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f96:	4b48      	ldr	r3, [pc, #288]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ef      	beq.n	8001f84 <HAL_RCC_OscConfig+0x3a8>
 8001fa4:	e01b      	b.n	8001fde <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	4b44      	ldr	r3, [pc, #272]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fac:	4a42      	ldr	r2, [pc, #264]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001fae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fdf3 	bl	8000ba0 <HAL_GetTick>
 8001fba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fdef 	bl	8000ba0 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e237      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001fd0:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ef      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80d2 	beq.w	8002190 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001fec:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <HAL_RCC_OscConfig+0x4e4>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d118      	bne.n	800202a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001ff8:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <HAL_RCC_OscConfig+0x4e4>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	4a30      	ldr	r2, [pc, #192]	@ (80020c0 <HAL_RCC_OscConfig+0x4e4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002004:	f7fe fdcc 	bl	8000ba0 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200c:	f7fe fdc8 	bl	8000ba0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e210      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800201e:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <HAL_RCC_OscConfig+0x4e4>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <HAL_RCC_OscConfig+0x468>
 8002032:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8002034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002038:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002042:	e074      	b.n	800212e <HAL_RCC_OscConfig+0x552>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d118      	bne.n	800207e <HAL_RCC_OscConfig+0x4a2>
 800204c:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002052:	4a19      	ldr	r2, [pc, #100]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800205e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002062:	4a15      	ldr	r2, [pc, #84]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8002064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002068:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800206e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002072:	4a11      	ldr	r2, [pc, #68]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800207c:	e057      	b.n	800212e <HAL_RCC_OscConfig+0x552>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d11e      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4e8>
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8002088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800208c:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8002098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209c:	4a06      	ldr	r2, [pc, #24]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800209e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020a6:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 80020a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ac:	4a02      	ldr	r2, [pc, #8]	@ (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020b6:	e03a      	b.n	800212e <HAL_RCC_OscConfig+0x552>
 80020b8:	44020c00 	.word	0x44020c00
 80020bc:	20000004 	.word	0x20000004
 80020c0:	44020800 	.word	0x44020800
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b85      	cmp	r3, #133	@ 0x85
 80020ca:	d118      	bne.n	80020fe <HAL_RCC_OscConfig+0x522>
 80020cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80020ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020d2:	4aa1      	ldr	r2, [pc, #644]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020dc:	4b9e      	ldr	r3, [pc, #632]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80020de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020e2:	4a9d      	ldr	r2, [pc, #628]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80020e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80020ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020f2:	4a99      	ldr	r2, [pc, #612]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020fc:	e017      	b.n	800212e <HAL_RCC_OscConfig+0x552>
 80020fe:	4b96      	ldr	r3, [pc, #600]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002104:	4a94      	ldr	r2, [pc, #592]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800210e:	4b92      	ldr	r3, [pc, #584]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002114:	4a90      	ldr	r2, [pc, #576]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800211e:	4b8e      	ldr	r3, [pc, #568]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002124:	4a8c      	ldr	r2, [pc, #560]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800212a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7fe fd33 	bl	8000ba0 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe fd2f 	bl	8000ba0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e175      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002154:	4b80      	ldr	r3, [pc, #512]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ed      	beq.n	800213e <HAL_RCC_OscConfig+0x562>
 8002162:	e015      	b.n	8002190 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7fe fd1c 	bl	8000ba0 <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe fd18 	bl	8000ba0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e15e      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002182:	4b75      	ldr	r3, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ed      	bne.n	800216c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d036      	beq.n	800220a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d019      	beq.n	80021d8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80021aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe fcf6 	bl	8000ba0 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80021b8:	f7fe fcf2 	bl	8000ba0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e13a      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021ca:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x5dc>
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80021de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fcdc 	bl	8000ba0 <HAL_GetTick>
 80021e8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80021ec:	f7fe fcd8 	bl	8000ba0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e120      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021fe:	4b56      	ldr	r3, [pc, #344]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8115 	beq.w	800243e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b18      	cmp	r3, #24
 8002218:	f000 80af 	beq.w	800237a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	2b02      	cmp	r3, #2
 8002222:	f040 8086 	bne.w	8002332 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002226:	4b4c      	ldr	r3, [pc, #304]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a4b      	ldr	r2, [pc, #300]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 800222c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fcb5 	bl	8000ba0 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800223a:	f7fe fcb1 	bl	8000ba0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0f9      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800224c:	4b42      	ldr	r3, [pc, #264]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002258:	4b3f      	ldr	r3, [pc, #252]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002260:	f023 0303 	bic.w	r3, r3, #3
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800226c:	0212      	lsls	r2, r2, #8
 800226e:	430a      	orrs	r2, r1
 8002270:	4939      	ldr	r1, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	628b      	str	r3, [r1, #40]	@ 0x28
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227a:	3b01      	subs	r3, #1
 800227c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	3b01      	subs	r3, #1
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	b29b      	uxth	r3, r3
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	3b01      	subs	r3, #1
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80022a6:	492c      	ldr	r1, [pc, #176]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	4a29      	ldr	r2, [pc, #164]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022b2:	f023 0310 	bic.w	r3, r3, #16
 80022b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022bc:	4a26      	ldr	r2, [pc, #152]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80022c2:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	4a24      	ldr	r2, [pc, #144]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80022ce:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	f023 020c 	bic.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	491f      	ldr	r1, [pc, #124]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f023 0220 	bic.w	r2, r3, #32
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	491a      	ldr	r1, [pc, #104]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	4a18      	ldr	r2, [pc, #96]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe fc49 	bl	8000ba0 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002312:	f7fe fc45 	bl	8000ba0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e08d      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x736>
 8002330:	e085      	b.n	800243e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <HAL_RCC_OscConfig+0x77c>)
 8002338:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7fe fc2f 	bl	8000ba0 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002346:	f7fe fc2b 	bl	8000ba0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d903      	bls.n	800235c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e073      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
 8002358:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800235c:	4b3a      	ldr	r3, [pc, #232]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002368:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 800236e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	6293      	str	r3, [r2, #40]	@ 0x28
 8002378:	e061      	b.n	800243e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800237a:	4b33      	ldr	r3, [pc, #204]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002380:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 8002382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002384:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	2b01      	cmp	r3, #1
 800238c:	d031      	beq.n	80023f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d12a      	bne.n	80023f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d122      	bne.n	80023f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d11a      	bne.n	80023f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	0a5b      	lsrs	r3, r3, #9
 80023c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d111      	bne.n	80023f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023da:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d108      	bne.n	80023f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	0e1b      	lsrs	r3, r3, #24
 80023e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e024      	b.n	8002440 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	08db      	lsrs	r3, r3, #3
 80023fc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002404:	429a      	cmp	r2, r3
 8002406:	d01a      	beq.n	800243e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	4a0e      	ldr	r2, [pc, #56]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 800240e:	f023 0310 	bic.w	r3, r3, #16
 8002412:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fbc4 	bl	8000ba0 <HAL_GetTick>
 8002418:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800241a:	bf00      	nop
 800241c:	f7fe fbc0 	bl	8000ba0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4293      	cmp	r3, r2
 8002426:	d0f9      	beq.n	800241c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242c:	4a06      	ldr	r2, [pc, #24]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002432:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_RCC_OscConfig+0x86c>)
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	44020c00 	.word	0x44020c00

0800244c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e19e      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b83      	ldr	r3, [pc, #524]	@ (8002670 <HAL_RCC_ClockConfig+0x224>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b80      	ldr	r3, [pc, #512]	@ (8002670 <HAL_RCC_ClockConfig+0x224>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	497e      	ldr	r1, [pc, #504]	@ (8002670 <HAL_RCC_ClockConfig+0x224>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b7c      	ldr	r3, [pc, #496]	@ (8002670 <HAL_RCC_ClockConfig+0x224>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e186      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d012      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d909      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80024ae:	4b71      	ldr	r3, [pc, #452]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	496d      	ldr	r1, [pc, #436]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d012      	beq.n	80024f4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	4b68      	ldr	r3, [pc, #416]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024dc:	429a      	cmp	r2, r3
 80024de:	d909      	bls.n	80024f4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80024e0:	4b64      	ldr	r3, [pc, #400]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	4961      	ldr	r1, [pc, #388]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	4b5b      	ldr	r3, [pc, #364]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800250c:	429a      	cmp	r2, r3
 800250e:	d908      	bls.n	8002522 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002510:	4b58      	ldr	r3, [pc, #352]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4955      	ldr	r1, [pc, #340]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 800251e:	4313      	orrs	r3, r2
 8002520:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4b50      	ldr	r3, [pc, #320]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	429a      	cmp	r2, r3
 800253c:	d908      	bls.n	8002550 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800253e:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f023 020f 	bic.w	r2, r3, #15
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	494a      	ldr	r1, [pc, #296]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 800254c:	4313      	orrs	r3, r2
 800254e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8093 	beq.w	8002684 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d121      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e113      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257e:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d115      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e107      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002596:	4b37      	ldr	r3, [pc, #220]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0fb      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a6:	4b33      	ldr	r3, [pc, #204]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0f3      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	492c      	ldr	r1, [pc, #176]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c8:	f7fe faea 	bl	8000ba0 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d112      	bne.n	80025fc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fae2 	bl	8000ba0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0d7      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ee:	4b21      	ldr	r3, [pc, #132]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0318 	and.w	r3, r3, #24
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	d1ee      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x18c>
 80025fa:	e043      	b.n	8002684 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d112      	bne.n	800262a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002604:	e00a      	b.n	800261c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002606:	f7fe facb 	bl	8000ba0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0c0      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800261c:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f003 0318 	and.w	r3, r3, #24
 8002624:	2b10      	cmp	r3, #16
 8002626:	d1ee      	bne.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
 8002628:	e02c      	b.n	8002684 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d122      	bne.n	8002678 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7fe fab4 	bl	8000ba0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0a9      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800264a:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x228>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0318 	and.w	r3, r3, #24
 8002652:	2b08      	cmp	r3, #8
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
 8002656:	e015      	b.n	8002684 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe faa2 	bl	8000ba0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d906      	bls.n	8002678 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e097      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
 800266e:	bf00      	nop
 8002670:	40022000 	.word	0x40022000
 8002674:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002678:	4b4b      	ldr	r3, [pc, #300]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 0318 	and.w	r3, r3, #24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e9      	bne.n	8002658 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b44      	ldr	r3, [pc, #272]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	429a      	cmp	r2, r3
 800269e:	d208      	bcs.n	80026b2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80026a0:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f023 020f 	bic.w	r2, r3, #15
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	493e      	ldr	r1, [pc, #248]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b2:	4b3e      	ldr	r3, [pc, #248]	@ (80027ac <HAL_RCC_ClockConfig+0x360>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d210      	bcs.n	80026e2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c0:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <HAL_RCC_ClockConfig+0x360>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 020f 	bic.w	r2, r3, #15
 80026c8:	4938      	ldr	r1, [pc, #224]	@ (80027ac <HAL_RCC_ClockConfig+0x360>)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_RCC_ClockConfig+0x360>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e05d      	b.n	800279e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d010      	beq.n	8002710 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d208      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80026fe:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4927      	ldr	r1, [pc, #156]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d012      	beq.n	8002742 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800272a:	429a      	cmp	r2, r3
 800272c:	d209      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	491a      	ldr	r1, [pc, #104]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800275c:	429a      	cmp	r2, r3
 800275e:	d209      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	490e      	ldr	r1, [pc, #56]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002774:	f000 f822 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490b      	ldr	r1, [pc, #44]	@ (80027b0 <HAL_RCC_ClockConfig+0x364>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <HAL_RCC_ClockConfig+0x368>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x36c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe f97a 	bl	8000a8c <HAL_InitTick>
 8002798:	4603      	mov	r3, r0
 800279a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800279c:	7afb      	ldrb	r3, [r7, #11]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	44020c00 	.word	0x44020c00
 80027ac:	40022000 	.word	0x40022000
 80027b0:	080041f8 	.word	0x080041f8
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	@ 0x24
 80027c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80027c2:	4b8c      	ldr	r3, [pc, #560]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0318 	and.w	r3, r3, #24
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80027ce:	4b8a      	ldr	r3, [pc, #552]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x23c>)
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e107      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d4:	4b87      	ldr	r3, [pc, #540]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 0318 	and.w	r3, r3, #24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d112      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80027e0:	4b84      	ldr	r3, [pc, #528]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80027ec:	4b81      	ldr	r3, [pc, #516]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	4a81      	ldr	r2, [pc, #516]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x240>)
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e0f1      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002800:	4b7e      	ldr	r3, [pc, #504]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x240>)
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	e0ee      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002806:	4b7b      	ldr	r3, [pc, #492]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 0318 	and.w	r3, r3, #24
 800280e:	2b10      	cmp	r3, #16
 8002810:	d102      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002812:	4b7b      	ldr	r3, [pc, #492]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x244>)
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e0e5      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002818:	4b76      	ldr	r3, [pc, #472]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f003 0318 	and.w	r3, r3, #24
 8002820:	2b18      	cmp	r3, #24
 8002822:	f040 80dd 	bne.w	80029e0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002826:	4b73      	ldr	r3, [pc, #460]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002830:	4b70      	ldr	r3, [pc, #448]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800283a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800283c:	4b6d      	ldr	r3, [pc, #436]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002848:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002860:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80b7 	beq.w	80029da <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0xbe>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d056      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x16a>
 8002878:	e077      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800287a:	4b5e      	ldr	r3, [pc, #376]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d02d      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	08db      	lsrs	r3, r3, #3
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	4a5a      	ldr	r2, [pc, #360]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x240>)
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b0:	4b50      	ldr	r3, [pc, #320]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80028b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80028c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80028c4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002a04 <HAL_RCC_GetSysClockFreq+0x248>
 80028c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80028e0:	e065      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ec:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002a08 <HAL_RCC_GetSysClockFreq+0x24c>
 80028f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f4:	4b3f      	ldr	r3, [pc, #252]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80028f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002904:	ed97 6a02 	vldr	s12, [r7, #8]
 8002908:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002a04 <HAL_RCC_GetSysClockFreq+0x248>
 800290c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002910:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002914:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002918:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002924:	e043      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002a0c <HAL_RCC_GetSysClockFreq+0x250>
 8002934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002938:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002948:	ed97 6a02 	vldr	s12, [r7, #8]
 800294c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002a04 <HAL_RCC_GetSysClockFreq+0x248>
 8002950:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002954:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002958:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800295c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002964:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002968:	e021      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a10 <HAL_RCC_GetSysClockFreq+0x254>
 8002978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800297c:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800297e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800298c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002990:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002a04 <HAL_RCC_GetSysClockFreq+0x248>
 8002994:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002998:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800299c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80029ac:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80029ae:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80029b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b2:	0a5b      	lsrs	r3, r3, #9
 80029b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029b8:	3301      	adds	r3, #1
 80029ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80029ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d2:	ee17 3a90 	vmov	r3, s15
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	e004      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e001      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x240>)
 80029e2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80029e4:	69fb      	ldr	r3, [r7, #28]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	@ 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	44020c00 	.word	0x44020c00
 80029f8:	003d0900 	.word	0x003d0900
 80029fc:	03d09000 	.word	0x03d09000
 8002a00:	016e3600 	.word	0x016e3600
 8002a04:	46000000 	.word	0x46000000
 8002a08:	4c742400 	.word	0x4c742400
 8002a0c:	4bb71b00 	.word	0x4bb71b00
 8002a10:	4a742400 	.word	0x4a742400

08002a14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002a18:	f7ff fed0 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002a22:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002a26:	4907      	ldr	r1, [pc, #28]	@ (8002a44 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a28:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002a2a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <HAL_RCC_GetHCLKFreq+0x34>)
 8002a34:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <HAL_RCC_GetHCLKFreq+0x34>)
 8002a38:	681b      	ldr	r3, [r3, #0]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	44020c00 	.word	0x44020c00
 8002a44:	080041f8 	.word	0x080041f8
 8002a48:	20000000 	.word	0x20000000

08002a4c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a50:	b0aa      	sub	sp, #168	@ 0xa8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002a64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002a70:	2500      	movs	r5, #0
 8002a72:	ea54 0305 	orrs.w	r3, r4, r5
 8002a76:	d00b      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002a78:	4bb8      	ldr	r3, [pc, #736]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a7e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002a82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	4ab4      	ldr	r2, [pc, #720]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f002 0801 	and.w	r8, r2, #1
 8002a9c:	f04f 0900 	mov.w	r9, #0
 8002aa0:	ea58 0309 	orrs.w	r3, r8, r9
 8002aa4:	d038      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d819      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002ad1 	.word	0x08002ad1
 8002ac0:	08002ae5 	.word	0x08002ae5
 8002ac4:	08002aed 	.word	0x08002aed
 8002ac8:	08002aed 	.word	0x08002aed
 8002acc:	08002aed 	.word	0x08002aed
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fddc 	bl	8003694 <RCCEx_PLL2_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002aea:	e000      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002af6:	4b99      	ldr	r3, [pc, #612]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002afc:	f023 0107 	bic.w	r1, r3, #7
 8002b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b06:	4a95      	ldr	r2, [pc, #596]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b0e:	e003      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f002 0a02 	and.w	sl, r2, #2
 8002b24:	f04f 0b00 	mov.w	fp, #0
 8002b28:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b2c:	d03c      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	2b28      	cmp	r3, #40	@ 0x28
 8002b36:	d01b      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002b38:	2b28      	cmp	r3, #40	@ 0x28
 8002b3a:	d815      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d019      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d811      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002b44:	2b18      	cmp	r3, #24
 8002b46:	d017      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002b48:	2b18      	cmp	r3, #24
 8002b4a:	d80d      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d109      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b58:	3308      	adds	r3, #8
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fd9a 	bl	8003694 <RCCEx_PLL2_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002b66:	e00a      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002b6e:	e006      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002b70:	bf00      	nop
 8002b72:	e004      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002b74:	bf00      	nop
 8002b76:	e002      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002b78:	bf00      	nop
 8002b7a:	e000      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002b86:	4b75      	ldr	r3, [pc, #468]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b8c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	4a71      	ldr	r2, [pc, #452]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b9e:	e003      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ba4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f002 0304 	and.w	r3, r2, #4
 8002bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002bbe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	d040      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002bd2:	d01e      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002bd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002bd8:	d817      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bde:	d01a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be4:	d811      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002be6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002be8:	d017      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bec:	d80d      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d015      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002bf2:	2b40      	cmp	r3, #64	@ 0x40
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fd49 	bl	8003694 <RCCEx_PLL2_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002c08:	e00a      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002c10:	e006      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c12:	bf00      	nop
 8002c14:	e004      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c16:	bf00      	nop
 8002c18:	e002      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002c28:	4b4c      	ldr	r3, [pc, #304]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c2e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002c32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	4a48      	ldr	r2, [pc, #288]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c40:	e003      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c46:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002c64:	460b      	mov	r3, r1
 8002c66:	4313      	orrs	r3, r2
 8002c68:	d043      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002c74:	d021      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c76:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002c7a:	d81a      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002c7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c80:	d01d      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c86:	d814      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002c88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c8c:	d019      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002c8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c92:	d80e      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fcf5 	bl	8003694 <RCCEx_PLL2_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002cb8:	e006      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002cba:	bf00      	nop
 8002cbc:	e004      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10c      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002cd0:	4b22      	ldr	r3, [pc, #136]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cd6:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ce8:	e003      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002cee:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d00:	2300      	movs	r3, #0
 8002d02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	d03e      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002d0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d18:	d01b      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8002d1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d1e:	d814      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d24:	d017      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d2a:	d80e      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d017      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d34:	d109      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fca9 	bl	8003694 <RCCEx_PLL2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002d48:	e00b      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002d50:	e007      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002d52:	bf00      	nop
 8002d54:	e005      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002d56:	bf00      	nop
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002d5a:	bf00      	nop
 8002d5c:	44020c00 	.word	0x44020c00
        break;
 8002d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d62:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002d6a:	4ba5      	ldr	r3, [pc, #660]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d70:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002d74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	4aa1      	ldr	r2, [pc, #644]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d88:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d9e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002da2:	460b      	mov	r3, r1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	d03b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002db2:	d01b      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002db4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002db8:	d814      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002dba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002dbe:	d017      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002dc0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002dc4:	d80e      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d014      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002dca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dce:	d109      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fc5c 	bl	8003694 <RCCEx_PLL2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002de2:	e008      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002dea:	e004      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002dec:	bf00      	nop
 8002dee:	e002      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002dfe:	4b80      	ldr	r3, [pc, #512]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e04:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002e08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e10:	430b      	orrs	r3, r1
 8002e12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e16:	e003      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e2e:	2300      	movs	r3, #0
 8002e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002e36:	460b      	mov	r3, r1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	d033      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002e3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e46:	d015      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002e48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e4c:	d80e      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002e52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e56:	d109      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc18 	bl	8003694 <RCCEx_PLL2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002e6a:	e006      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002e74:	bf00      	nop
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002e82:	4b5f      	ldr	r3, [pc, #380]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e88:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e92:	4a5b      	ldr	r2, [pc, #364]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e94:	430b      	orrs	r3, r1
 8002e96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e9a:	e003      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ea0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002ea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	2100      	movs	r1, #0
 8002eae:	6639      	str	r1, [r7, #96]	@ 0x60
 8002eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002eb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	d033      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eca:	d015      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ed0:	d80e      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ed6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eda:	d109      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fbd6 	bl	8003694 <RCCEx_PLL2_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002eee:	e006      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002ef6:	e002      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002efc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002efe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002f06:	4b3e      	ldr	r3, [pc, #248]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f0c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f16:	4a3a      	ldr	r2, [pc, #232]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f1e:	e003      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f24:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	2100      	movs	r1, #0
 8002f32:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	d00e      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002f44:	4b2e      	ldr	r3, [pc, #184]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a2d      	ldr	r2, [pc, #180]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b2b      	ldr	r3, [pc, #172]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5c:	4a28      	ldr	r2, [pc, #160]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f70:	2300      	movs	r3, #0
 8002f72:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f74:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	d046      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002f7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f84:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002f88:	d021      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002f8a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002f8e:	d81a      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f94:	d01d      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d814      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fa0:	d019      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002fa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fa6:	d80e      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d016      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fb6b 	bl	8003694 <RCCEx_PLL2_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002fcc:	e006      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e004      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e002      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fdc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10f      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002fe4:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002fe6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002fea:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	4a02      	ldr	r2, [pc, #8]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002ffc:	e006      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002ffe:	bf00      	nop
 8003000:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003008:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800300c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800301a:	2300      	movs	r3, #0
 800301c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800301e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003022:	460b      	mov	r3, r1
 8003024:	4313      	orrs	r3, r2
 8003026:	d043      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003028:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003032:	d021      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003034:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003038:	d81a      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800303a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800303e:	d01d      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003044:	d814      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003046:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800304a:	d019      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x634>
 800304c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003050:	d80e      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305a:	d109      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800305c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003060:	3308      	adds	r3, #8
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fb16 	bl	8003694 <RCCEx_PLL2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800306e:	e00a      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003076:	e006      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003078:	bf00      	nop
 800307a:	e004      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800307c:	bf00      	nop
 800307e:	e002      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003080:	bf00      	nop
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003086:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800308e:	4bb6      	ldr	r3, [pc, #728]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003090:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003094:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003098:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	4ab2      	ldr	r2, [pc, #712]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80030b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80030bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80030be:	2300      	movs	r3, #0
 80030c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80030c6:	460b      	mov	r3, r1
 80030c8:	4313      	orrs	r3, r2
 80030ca:	d030      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80030cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d80f      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d211      	bcs.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d911      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d109      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030e6:	3308      	adds	r3, #8
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fad3 	bl	8003694 <RCCEx_PLL2_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030fc:	e002      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003104:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10c      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800310c:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800310e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003112:	f023 0107 	bic.w	r1, r3, #7
 8003116:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800311a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800311c:	4a92      	ldr	r2, [pc, #584]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800311e:	430b      	orrs	r3, r1
 8003120:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003124:	e003      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003126:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800312a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800312e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	2100      	movs	r1, #0
 8003138:	63b9      	str	r1, [r7, #56]	@ 0x38
 800313a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800313e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003140:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003144:	460b      	mov	r3, r1
 8003146:	4313      	orrs	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800314a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800314e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003154:	2b08      	cmp	r3, #8
 8003156:	d005      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800315e:	e002      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003166:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800316e:	4b7e      	ldr	r3, [pc, #504]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003174:	f023 0108 	bic.w	r1, r3, #8
 8003178:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800317c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800317e:	4a7a      	ldr	r2, [pc, #488]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003180:	430b      	orrs	r3, r1
 8003182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003186:	e003      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800318c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003190:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80031a6:	460b      	mov	r3, r1
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f000 80b0 	beq.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80031ae:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	4a6e      	ldr	r2, [pc, #440]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ba:	f7fd fcf1 	bl	8000ba0 <HAL_GetTick>
 80031be:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80031c2:	e00b      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c4:	f7fd fcec 	bl	8000ba0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d903      	bls.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80031da:	e005      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80031dc:	4b63      	ldr	r3, [pc, #396]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ed      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80031e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 808a 	bne.w	8003306 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80031f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003200:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d022      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003208:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800320c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800320e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003212:	429a      	cmp	r2, r3
 8003214:	d01b      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003216:	4b54      	ldr	r3, [pc, #336]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800321c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003220:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800322a:	4a4f      	ldr	r2, [pc, #316]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003230:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003234:	4b4c      	ldr	r3, [pc, #304]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800323a:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800323c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003240:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003244:	4a48      	ldr	r2, [pc, #288]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800324a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800324e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d019      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fd fca1 	bl	8000ba0 <HAL_GetTick>
 800325e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003262:	e00d      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fd fc9c 	bl	8000ba0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d903      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 800327e:	e006      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003280:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ea      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 800328e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d132      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003296:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800329a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800329c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032a4:	d10f      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80032a6:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80032ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80032be:	4a2a      	ldr	r2, [pc, #168]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	61d3      	str	r3, [r2, #28]
 80032c4:	e005      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80032c6:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4a27      	ldr	r2, [pc, #156]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032d0:	61d3      	str	r3, [r2, #28]
 80032d2:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032d8:	4a23      	ldr	r2, [pc, #140]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032e2:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032e4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80032e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032f4:	430b      	orrs	r3, r1
 80032f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032fa:	e008      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003300:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003304:	e003      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003306:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800330a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800330e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800331a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003320:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003324:	460b      	mov	r3, r1
 8003326:	4313      	orrs	r3, r2
 8003328:	d038      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800332a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800332e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003330:	2b30      	cmp	r3, #48	@ 0x30
 8003332:	d014      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003334:	2b30      	cmp	r3, #48	@ 0x30
 8003336:	d80e      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d012      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800333c:	2b20      	cmp	r3, #32
 800333e:	d80a      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003344:	2b10      	cmp	r3, #16
 8003346:	d106      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003348:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	4a06      	ldr	r2, [pc, #24]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800334e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003352:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003354:	e00d      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800335c:	e009      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800335e:	bf00      	nop
 8003360:	e007      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003362:	bf00      	nop
 8003364:	e005      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003366:	bf00      	nop
 8003368:	44020c00 	.word	0x44020c00
 800336c:	44020800 	.word	0x44020800
        break;
 8003370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003372:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800337a:	4bb5      	ldr	r3, [pc, #724]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800337c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003380:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003384:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	49b1      	ldr	r1, [pc, #708]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003398:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800339c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	d03c      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80033b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d81d      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033dd 	.word	0x080033dd
 80033cc:	080033eb 	.word	0x080033eb
 80033d0:	080033ff 	.word	0x080033ff
 80033d4:	08003407 	.word	0x08003407
 80033d8:	08003407 	.word	0x08003407
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	4a9b      	ldr	r2, [pc, #620]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80033e8:	e00e      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ee:	3308      	adds	r3, #8
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f94f 	bl	8003694 <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10c      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003410:	4b8f      	ldr	r3, [pc, #572]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003416:	f023 0207 	bic.w	r2, r3, #7
 800341a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800341e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003420:	498b      	ldr	r1, [pc, #556]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003428:	e003      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800342e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003432:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d03c      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800344e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	2b20      	cmp	r3, #32
 8003456:	d01f      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d819      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800345c:	2b18      	cmp	r3, #24
 800345e:	d01d      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003460:	2b18      	cmp	r3, #24
 8003462:	d815      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003468:	2b08      	cmp	r3, #8
 800346a:	d007      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800346c:	e010      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346e:	4b78      	ldr	r3, [pc, #480]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	4a77      	ldr	r2, [pc, #476]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003478:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800347a:	e010      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800347c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003480:	3308      	adds	r3, #8
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f906 	bl	8003694 <RCCEx_PLL2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800348e:	e006      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003496:	e002      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003498:	bf00      	nop
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800349c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80034a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ac:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80034b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	4966      	ldr	r1, [pc, #408]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80034be:	e003      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80034c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d03e      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80034e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ee:	d020      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f4:	d819      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xade>
 80034f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034f8:	d01d      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80034fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80034fc:	d815      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xade>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003502:	2b40      	cmp	r3, #64	@ 0x40
 8003504:	d007      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003506:	e010      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	4a50      	ldr	r2, [pc, #320]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003512:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003514:	e010      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003516:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800351a:	3308      	adds	r3, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f8b9 	bl	8003694 <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003528:	e006      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003530:	e002      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003538:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10c      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003540:	4b43      	ldr	r3, [pc, #268]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003546:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800354a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800354e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003550:	493f      	ldr	r1, [pc, #252]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003558:	e003      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800355e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	2100      	movs	r1, #0
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003578:	460b      	mov	r3, r1
 800357a:	4313      	orrs	r3, r2
 800357c:	d038      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800357e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003588:	d00e      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800358a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358e:	d815      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d017      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d110      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359a:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	4a2c      	ldr	r2, [pc, #176]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80035a6:	e00e      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ac:	3308      	adds	r3, #8
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f870 	bl	8003694 <RCCEx_PLL2_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80035ba:	e004      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80035c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80035d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	491c      	ldr	r1, [pc, #112]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80035e6:	e003      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035ec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	2100      	movs	r1, #0
 80035fa:	6039      	str	r1, [r7, #0]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d039      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800360c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003612:	2b30      	cmp	r3, #48	@ 0x30
 8003614:	d01e      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003616:	2b30      	cmp	r3, #48	@ 0x30
 8003618:	d815      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800361a:	2b10      	cmp	r3, #16
 800361c:	d002      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800361e:	2b20      	cmp	r3, #32
 8003620:	d007      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003622:	e010      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003624:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800362a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003630:	e011      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003636:	3308      	adds	r3, #8
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f82b 	bl	8003694 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003644:	e007      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800364c:	e003      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800364e:	bf00      	nop
 8003650:	44020c00 	.word	0x44020c00
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800365e:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003664:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003668:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800366c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366e:	4908      	ldr	r1, [pc, #32]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003676:	e003      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800367c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003680:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003684:	4618      	mov	r0, r3
 8003686:	37a8      	adds	r7, #168	@ 0xa8
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	44020c00 	.word	0x44020c00

08003694 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800369c:	4b48      	ldr	r3, [pc, #288]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a47      	ldr	r2, [pc, #284]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 80036a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036a8:	f7fd fa7a 	bl	8000ba0 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036ae:	e008      	b.n	80036c2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036b0:	f7fd fa76 	bl	8000ba0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e07a      	b.n	80037b8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036c2:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80036ce:	4b3c      	ldr	r3, [pc, #240]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6811      	ldr	r1, [r2, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6852      	ldr	r2, [r2, #4]
 80036e2:	0212      	lsls	r2, r2, #8
 80036e4:	430a      	orrs	r2, r1
 80036e6:	4936      	ldr	r1, [pc, #216]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	025b      	lsls	r3, r3, #9
 80036fe:	b29b      	uxth	r3, r3
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	3b01      	subs	r3, #1
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800371c:	4928      	ldr	r1, [pc, #160]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003722:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	f023 020c 	bic.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	4924      	ldr	r1, [pc, #144]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003734:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	f023 0220 	bic.w	r2, r3, #32
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	491f      	ldr	r1, [pc, #124]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003746:	4b1e      	ldr	r3, [pc, #120]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	491c      	ldr	r1, [pc, #112]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	4a19      	ldr	r2, [pc, #100]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 800375a:	f023 0310 	bic.w	r3, r3, #16
 800375e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003760:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003768:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6a12      	ldr	r2, [r2, #32]
 8003770:	00d2      	lsls	r2, r2, #3
 8003772:	4913      	ldr	r1, [pc, #76]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 800377e:	f043 0310 	orr.w	r3, r3, #16
 8003782:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0d      	ldr	r2, [pc, #52]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 800378a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800378e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003790:	f7fd fa06 	bl	8000ba0 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003796:	e008      	b.n	80037aa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003798:	f7fd fa02 	bl	8000ba0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e006      	b.n	80037b8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037aa:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <RCCEx_PLL2_Config+0x12c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0

}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	44020c00 	.word	0x44020c00

080037c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e049      	b.n	800386a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fc fff6 	bl	80007dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f000 fa44 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e03b      	b.n	8003904 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a19      	ldr	r2, [pc, #100]	@ (8003910 <HAL_TIM_Base_Start_IT+0x9c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x4e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x4e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <HAL_TIM_Base_Start_IT+0xa0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d115      	bne.n	80038ee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <HAL_TIM_Base_Start_IT+0xa4>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d015      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x8c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038da:	d011      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ec:	e008      	b.n	8003900 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e000      	b.n	8003902 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003900:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40000400 	.word	0x40000400
 8003918:	00010007 	.word	0x00010007

0800391c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d020      	beq.n	8003980 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01b      	beq.n	8003980 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0202 	mvn.w	r2, #2
 8003950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f973 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f965 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f976 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d020      	beq.n	80039cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01b      	beq.n	80039cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0204 	mvn.w	r2, #4
 800399c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f94d 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f93f 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f950 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d020      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0208 	mvn.w	r2, #8
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2204      	movs	r2, #4
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f927 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f919 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f92a 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d020      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0210 	mvn.w	r2, #16
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f901 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8f3 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f904 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0201 	mvn.w	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc fdfe 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fb2d 	bl	8004110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fb25 	bl	8004124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8be 	bl	8003c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f06f 0220 	mvn.w	r2, #32
 8003b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 faed 	bl	80040fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 faf9 	bl	8004138 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00c      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 faf1 	bl	800414c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00c      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fae9 	bl	8004160 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00c      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fae1 	bl	8004174 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e031      	b.n	8003c36 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f8b9 	bl	8003d5c <TIM_SlaveTimer_SetConfig>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e018      	b.n	8003c36 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c12:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c22:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <TIM_Base_SetConfig+0xc4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_Base_SetConfig+0x28>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cae:	d003      	beq.n	8003cb8 <TIM_Base_SetConfig+0x28>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a29      	ldr	r2, [pc, #164]	@ (8003d58 <TIM_Base_SetConfig+0xc8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d108      	bne.n	8003cca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a21      	ldr	r2, [pc, #132]	@ (8003d54 <TIM_Base_SetConfig+0xc4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <TIM_Base_SetConfig+0x52>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd8:	d003      	beq.n	8003ce2 <TIM_Base_SetConfig+0x52>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d58 <TIM_Base_SetConfig+0xc8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d108      	bne.n	8003cf4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d54 <TIM_Base_SetConfig+0xc4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d103      	bne.n	8003d28 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d105      	bne.n	8003d46 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f023 0201 	bic.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	611a      	str	r2, [r3, #16]
  }
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400

08003d5c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8e:	f023 0307 	bic.w	r3, r3, #7
 8003d92:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dae:	f000 80aa 	beq.w	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003db6:	f200 80a3 	bhi.w	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003dba:	4a56      	ldr	r2, [pc, #344]	@ (8003f14 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	f000 80a2 	beq.w	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003dc2:	4a54      	ldr	r2, [pc, #336]	@ (8003f14 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f200 809b 	bhi.w	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003dca:	4a53      	ldr	r2, [pc, #332]	@ (8003f18 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f000 809a 	beq.w	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003dd2:	4a51      	ldr	r2, [pc, #324]	@ (8003f18 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	f200 8093 	bhi.w	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003dda:	4a50      	ldr	r2, [pc, #320]	@ (8003f1c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	f000 8092 	beq.w	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003de2:	4a4e      	ldr	r2, [pc, #312]	@ (8003f1c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	f200 808b 	bhi.w	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003dea:	4a4d      	ldr	r2, [pc, #308]	@ (8003f20 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f000 808a 	beq.w	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003df2:	4a4b      	ldr	r2, [pc, #300]	@ (8003f20 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	f200 8083 	bhi.w	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8003f24 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	f000 8082 	beq.w	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e02:	4a48      	ldr	r2, [pc, #288]	@ (8003f24 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d87b      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e08:	4a47      	ldr	r2, [pc, #284]	@ (8003f28 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d07b      	beq.n	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e0e:	4a46      	ldr	r2, [pc, #280]	@ (8003f28 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d875      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e18:	d075      	beq.n	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e1a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e1e:	d86f      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e24:	d06f      	beq.n	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e2a:	d869      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e2c:	2b70      	cmp	r3, #112	@ 0x70
 8003e2e:	d01a      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x10a>
 8003e30:	2b70      	cmp	r3, #112	@ 0x70
 8003e32:	d865      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e34:	2b60      	cmp	r3, #96	@ 0x60
 8003e36:	d059      	beq.n	8003eec <TIM_SlaveTimer_SetConfig+0x190>
 8003e38:	2b60      	cmp	r3, #96	@ 0x60
 8003e3a:	d861      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e3c:	2b50      	cmp	r3, #80	@ 0x50
 8003e3e:	d04b      	beq.n	8003ed8 <TIM_SlaveTimer_SetConfig+0x17c>
 8003e40:	2b50      	cmp	r3, #80	@ 0x50
 8003e42:	d85d      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e44:	2b40      	cmp	r3, #64	@ 0x40
 8003e46:	d019      	beq.n	8003e7c <TIM_SlaveTimer_SetConfig+0x120>
 8003e48:	2b40      	cmp	r3, #64	@ 0x40
 8003e4a:	d859      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e4c:	2b30      	cmp	r3, #48	@ 0x30
 8003e4e:	d05a      	beq.n	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e50:	2b30      	cmp	r3, #48	@ 0x30
 8003e52:	d855      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d056      	beq.n	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d851      	bhi.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d052      	beq.n	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d050      	beq.n	8003f06 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003e64:	e04c      	b.n	8003f00 <TIM_SlaveTimer_SetConfig+0x1a4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003e76:	f000 f8b8 	bl	8003fea <TIM_ETR_SetConfig>
      break;
 8003e7a:	e045      	b.n	8003f08 <TIM_SlaveTimer_SetConfig+0x1ac>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d004      	beq.n	8003e8e <TIM_SlaveTimer_SetConfig+0x132>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003e88:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8003e8c:	d101      	bne.n	8003e92 <TIM_SlaveTimer_SetConfig+0x136>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e03b      	b.n	8003f0a <TIM_SlaveTimer_SetConfig+0x1ae>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eb8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	621a      	str	r2, [r3, #32]
      break;
 8003ed6:	e017      	b.n	8003f08 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f000 f821 	bl	8003f2c <TIM_TI1_ConfigInputStage>
      break;
 8003eea:	e00d      	b.n	8003f08 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f000 f846 	bl	8003f8a <TIM_TI2_ConfigInputStage>
      break;
 8003efe:	e003      	b.n	8003f08 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
      break;
 8003f04:	e000      	b.n	8003f08 <TIM_SlaveTimer_SetConfig+0x1ac>
      break;
 8003f06:	bf00      	nop
  }

  return status;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	00100070 	.word	0x00100070
 8003f18:	00100060 	.word	0x00100060
 8003f1c:	00100050 	.word	0x00100050
 8003f20:	00100040 	.word	0x00100040
 8003f24:	00100030 	.word	0x00100030
 8003f28:	00100020 	.word	0x00100020

08003f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 030a 	bic.w	r3, r3, #10
 8003f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f023 0210 	bic.w	r2, r3, #16
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	031b      	lsls	r3, r3, #12
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004004:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	021a      	lsls	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	431a      	orrs	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4313      	orrs	r3, r2
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	609a      	str	r2, [r3, #8]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004040:	2302      	movs	r3, #2
 8004042:	e051      	b.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a22      	ldr	r2, [pc, #136]	@ (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d108      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004074:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d009      	beq.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d004      	beq.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a10      	ldr	r2, [pc, #64]	@ (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400

080040fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <memset>:
 8004188:	4402      	add	r2, r0
 800418a:	4603      	mov	r3, r0
 800418c:	4293      	cmp	r3, r2
 800418e:	d100      	bne.n	8004192 <memset+0xa>
 8004190:	4770      	bx	lr
 8004192:	f803 1b01 	strb.w	r1, [r3], #1
 8004196:	e7f9      	b.n	800418c <memset+0x4>

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4d0d      	ldr	r5, [pc, #52]	@ (80041d0 <__libc_init_array+0x38>)
 800419c:	2600      	movs	r6, #0
 800419e:	4c0d      	ldr	r4, [pc, #52]	@ (80041d4 <__libc_init_array+0x3c>)
 80041a0:	1b64      	subs	r4, r4, r5
 80041a2:	10a4      	asrs	r4, r4, #2
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4d0b      	ldr	r5, [pc, #44]	@ (80041d8 <__libc_init_array+0x40>)
 80041aa:	2600      	movs	r6, #0
 80041ac:	4c0b      	ldr	r4, [pc, #44]	@ (80041dc <__libc_init_array+0x44>)
 80041ae:	f000 f817 	bl	80041e0 <_init>
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	3601      	adds	r6, #1
 80041c2:	4798      	blx	r3
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ca:	3601      	adds	r6, #1
 80041cc:	4798      	blx	r3
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	08004218 	.word	0x08004218
 80041d4:	08004218 	.word	0x08004218
 80041d8:	08004218 	.word	0x08004218
 80041dc:	0800421c 	.word	0x0800421c

080041e0 <_init>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr

080041ec <_fini>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr
