
ArbitraionV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003eb4  08003eb4  00004eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee4  08003ee4  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee4  08003ee4  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee4  08003ee4  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee4  08003ee4  00004ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ee8  08003ee8  00004ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003eec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000010  08003efc  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003efc  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b168  00000000  00000000  00005046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab2  00000000  00000000  000101ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  00011c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069f  00000000  00000000  00012558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f976  00000000  00000000  00012bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4f8  00000000  00000000  0003256d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5655  00000000  00000000  0003da65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001030ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  00103100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00105440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000010 	.word	0x20000010
 8000274:	00000000 	.word	0x00000000
 8000278:	08003e9c 	.word	0x08003e9c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000014 	.word	0x20000014
 8000294:	08003e9c 	.word	0x08003e9c

08000298 <MX_FDCAN1_Init>:
#include "can.h"

FDCAN_HandleTypeDef hfdcan1;

void MX_FDCAN1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800029e:	4b32      	ldr	r3, [pc, #200]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002a0:	4a32      	ldr	r2, [pc, #200]	@ (800036c <MX_FDCAN1_Init+0xd4>)
 80002a2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002a4:	4b30      	ldr	r3, [pc, #192]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002c2:	4b29      	ldr	r3, [pc, #164]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 80002c8:	4b27      	ldr	r3, [pc, #156]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002ca:	2219      	movs	r2, #25
 80002cc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80002ce:	4b26      	ldr	r3, [pc, #152]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80002d4:	4b24      	ldr	r3, [pc, #144]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002d6:	220d      	movs	r2, #13
 80002d8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80002da:	4b23      	ldr	r3, [pc, #140]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002dc:	2202      	movs	r2, #2
 80002de:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80002e0:	4b21      	ldr	r3, [pc, #132]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80002e6:	4b20      	ldr	r3, [pc, #128]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80002ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80002f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 8000300:	2200      	movs	r2, #0
 8000302:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000304:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 8000306:	2200      	movs	r2, #0
 8000308:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800030a:	4817      	ldr	r0, [pc, #92]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 800030c:	f000 ffe6 	bl	80012dc <HAL_FDCAN_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_FDCAN1_Init+0x82>
  {
    while(1){};
 8000316:	bf00      	nop
 8000318:	e7fd      	b.n	8000316 <MX_FDCAN1_Init+0x7e>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800031a:	4813      	ldr	r0, [pc, #76]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 800031c:	f001 f938 	bl	8001590 <HAL_FDCAN_Start>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_FDCAN1_Init+0x92>
    	 /* Notification Error */
	  while(1){};
 8000326:	bf00      	nop
 8000328:	e7fd      	b.n	8000326 <MX_FDCAN1_Init+0x8e>

   }
   if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	480e      	ldr	r0, [pc, #56]	@ (8000368 <MX_FDCAN1_Init+0xd0>)
 8000330:	f001 fab2 	bl	8001898 <HAL_FDCAN_ActivateNotification>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_FDCAN1_Init+0xa6>
   {
 	  /* Notification Error */
	   while(1){};
 800033a:	bf00      	nop
 800033c:	e7fd      	b.n	800033a <MX_FDCAN1_Init+0xa2>

   }

   for (uint8_t i = 0; i < 8 ;i++){
 800033e:	2300      	movs	r3, #0
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	e008      	b.n	8000356 <MX_FDCAN1_Init+0xbe>
   	  CAN_Payload.dataTx[i] = i;
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <MX_FDCAN1_Init+0xd8>)
 8000348:	4413      	add	r3, r2
 800034a:	79fa      	ldrb	r2, [r7, #7]
 800034c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
   for (uint8_t i = 0; i < 8 ;i++){
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	3301      	adds	r3, #1
 8000354:	71fb      	strb	r3, [r7, #7]
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b07      	cmp	r3, #7
 800035a:	d9f3      	bls.n	8000344 <MX_FDCAN1_Init+0xac>
   }

  /* USER CODE END FDCAN1_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000002c 	.word	0x2000002c
 800036c:	4000a400 	.word	0x4000a400
 8000370:	20000090 	.word	0x20000090

08000374 <TX_Send_CAN>:

void TX_Send_CAN(){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* ----- Prepare CAN data --------------------------------------- */
  CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID; //CAN_Payload.msgID
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <TX_Send_CAN+0x44>)
 800037a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037c:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <TX_Send_CAN+0x44>)
 800037e:	6013      	str	r3, [r2, #0]
  CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000380:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <TX_Send_CAN+0x44>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <TX_Send_CAN+0x44>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
 800038c:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <TX_Send_CAN+0x44>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <TX_Send_CAN+0x44>)
 8000394:	2200      	movs	r2, #0
 8000396:	61da      	str	r2, [r3, #28]
  CAN_Payload.TxHeader.MessageMarker = 0;
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <TX_Send_CAN+0x44>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  //CAN_Payload.dataTx[0] ^= 1;
//  GPIOC->ODR |= (1UL << 10U);
//  while((GPIOC->IDR & (1UL << 12U)) == 0U){}

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 800039e:	4a07      	ldr	r2, [pc, #28]	@ (80003bc <TX_Send_CAN+0x48>)
 80003a0:	4905      	ldr	r1, [pc, #20]	@ (80003b8 <TX_Send_CAN+0x44>)
 80003a2:	4807      	ldr	r0, [pc, #28]	@ (80003c0 <TX_Send_CAN+0x4c>)
 80003a4:	f001 f91c 	bl	80015e0 <HAL_FDCAN_AddMessageToTxFifoQ>
  {

  }
  GPIOC->ODR &= ~(1UL << 10U);
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <TX_Send_CAN+0x50>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a05      	ldr	r2, [pc, #20]	@ (80003c4 <TX_Send_CAN+0x50>)
 80003ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003b2:	6153      	str	r3, [r2, #20]

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000090 	.word	0x20000090
 80003bc:	200000e0 	.word	0x200000e0
 80003c0:	2000002c 	.word	0x2000002c
 80003c4:	42020800 	.word	0x42020800

080003c8 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d014      	beq.n	8000406 <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80003de:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80003e0:	2140      	movs	r1, #64	@ 0x40
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f001 f950 	bl	8001688 <HAL_FDCAN_GetRxMessage>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			while(1){};
 80003ee:	bf00      	nop
 80003f0:	e7fd      	b.n	80003ee <HAL_FDCAN_RxFifo0Callback+0x26>

		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003f2:	2200      	movs	r2, #0
 80003f4:	2101      	movs	r1, #1
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f001 fa4e 	bl	8001898 <HAL_FDCAN_ActivateNotification>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			while(1){};
 8000402:	bf00      	nop
 8000404:	e7fd      	b.n	8000402 <HAL_FDCAN_RxFifo0Callback+0x3a>

		}
	}
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000e8 	.word	0x200000e8
 8000414:	200000b4 	.word	0x200000b4

08000418 <MX_GPIO_Init>:

#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	@ 0x28
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042e:	4b78      	ldr	r3, [pc, #480]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 8000430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000434:	4a76      	ldr	r2, [pc, #472]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800043e:	4b74      	ldr	r3, [pc, #464]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 8000440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800044c:	4b70      	ldr	r3, [pc, #448]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 800044e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000452:	4a6f      	ldr	r2, [pc, #444]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 8000454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000458:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800045c:	4b6c      	ldr	r3, [pc, #432]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 800045e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b69      	ldr	r3, [pc, #420]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 800046c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000470:	4a67      	ldr	r2, [pc, #412]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800047a:	4b65      	ldr	r3, [pc, #404]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 800047c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000488:	4b61      	ldr	r3, [pc, #388]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 800048a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800048e:	4a60      	ldr	r2, [pc, #384]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000498:	4b5d      	ldr	r3, [pc, #372]	@ (8000610 <MX_GPIO_Init+0x1f8>)
 800049a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin|BCD_BIT1_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80004ac:	4859      	ldr	r0, [pc, #356]	@ (8000614 <MX_GPIO_Init+0x1fc>)
 80004ae:	f001 fe8b 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BCD_BIT2_GPIO_Port, BCD_BIT2_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004b8:	4857      	ldr	r0, [pc, #348]	@ (8000618 <MX_GPIO_Init+0x200>)
 80004ba:	f001 fe85 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BCD_BIT0_Pin|BCD_BIT3_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80004c4:	4855      	ldr	r0, [pc, #340]	@ (800061c <MX_GPIO_Init+0x204>)
 80004c6:	f001 fe7f 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_BLUE_USER_BUTTON_Pin EXTI8_BUTTON1_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin|EXTI8_BUTTON1_Pin;
 80004ca:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d0:	4b53      	ldr	r3, [pc, #332]	@ (8000620 <MX_GPIO_Init+0x208>)
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	484f      	ldr	r0, [pc, #316]	@ (800061c <MX_GPIO_Init+0x204>)
 80004e0:	f001 fd20 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_LED_Pin RED_LED_Pin YELLOW_LED_Pin BCD_BIT1_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin|BCD_BIT1_Pin;
 80004e4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	4845      	ldr	r0, [pc, #276]	@ (8000614 <MX_GPIO_Init+0x1fc>)
 80004fe:	f001 fd11 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BCD_BIT2_Pin */
  GPIO_InitStruct.Pin = BCD_BIT2_Pin;
 8000502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BCD_BIT2_GPIO_Port, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	483f      	ldr	r0, [pc, #252]	@ (8000618 <MX_GPIO_Init+0x200>)
 800051c:	f001 fd02 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 EXTI3_BUTTON2_Pin EXTI4_BUTTON4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|EXTI3_BUTTON2_Pin|EXTI4_BUTTON4_Pin;
 8000520:	f248 0318 	movw	r3, #32792	@ 0x8018
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000526:	4b3e      	ldr	r3, [pc, #248]	@ (8000620 <MX_GPIO_Init+0x208>)
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052a:	2301      	movs	r3, #1
 800052c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4838      	ldr	r0, [pc, #224]	@ (8000618 <MX_GPIO_Init+0x200>)
 8000536:	f001 fcf5 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BCD_BIT0_Pin BCD_BIT3_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BCD_BIT0_Pin|BCD_BIT3_Pin|GREEN_LED_Pin;
 800053a:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4619      	mov	r1, r3
 8000552:	4832      	ldr	r0, [pc, #200]	@ (800061c <MX_GPIO_Init+0x204>)
 8000554:	f001 fce6 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI5_BUTTON3_Pin */
  GPIO_InitStruct.Pin = EXTI5_BUTTON3_Pin;
 8000558:	2320      	movs	r3, #32
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	4b30      	ldr	r3, [pc, #192]	@ (8000620 <MX_GPIO_Init+0x208>)
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI5_BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	482b      	ldr	r0, [pc, #172]	@ (8000618 <MX_GPIO_Init+0x200>)
 800056c:	f001 fcda 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
   GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000574:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4824      	ldr	r0, [pc, #144]	@ (800061c <MX_GPIO_Init+0x204>)
 800058a:	f001 fccb 	bl	8001f24 <HAL_GPIO_Init>

   /*Configure GPIO pin : PC12 */
   GPIO_InitStruct.Pin = GPIO_PIN_12;
 800058e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000592:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	481e      	ldr	r0, [pc, #120]	@ (800061c <MX_GPIO_Init+0x204>)
 80005a4:	f001 fcbe 	bl	8001f24 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	200e      	movs	r0, #14
 80005ae:	f000 fdbd 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005b2:	200e      	movs	r0, #14
 80005b4:	f000 fdd4 	bl	8001160 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	200f      	movs	r0, #15
 80005be:	f000 fdb5 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 fdcc 	bl	8001160 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2010      	movs	r0, #16
 80005ce:	f000 fdad 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80005d2:	2010      	movs	r0, #16
 80005d4:	f000 fdc4 	bl	8001160 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2013      	movs	r0, #19
 80005de:	f000 fda5 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 80005e2:	2013      	movs	r0, #19
 80005e4:	f000 fdbc 	bl	8001160 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2018      	movs	r0, #24
 80005ee:	f000 fd9d 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80005f2:	2018      	movs	r0, #24
 80005f4:	f000 fdb4 	bl	8001160 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	201a      	movs	r0, #26
 80005fe:	f000 fd95 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 8000602:	201a      	movs	r0, #26
 8000604:	f000 fdac 	bl	8001160 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	@ 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	44020c00 	.word	0x44020c00
 8000614:	42020000 	.word	0x42020000
 8000618:	42020400 	.word	0x42020400
 800061c:	42020800 	.word	0x42020800
 8000620:	10210000 	.word	0x10210000

08000624 <BCD_Display>:


void BCD_Display(uint8_t bcd_value)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    bcd_value &= 0x0F;/*set bit*/
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(BCD_BIT0_GPIO_Port, BCD_BIT0_Pin, (bcd_value & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	2140      	movs	r1, #64	@ 0x40
 8000642:	4815      	ldr	r0, [pc, #84]	@ (8000698 <BCD_Display+0x74>)
 8000644:	f001 fdc0 	bl	80021c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BCD_BIT1_GPIO_Port, BCD_BIT1_Pin, (bcd_value & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	105b      	asrs	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800065a:	4810      	ldr	r0, [pc, #64]	@ (800069c <BCD_Display+0x78>)
 800065c:	f001 fdb4 	bl	80021c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BCD_BIT2_GPIO_Port, BCD_BIT2_Pin, (bcd_value & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	109b      	asrs	r3, r3, #2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000672:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <BCD_Display+0x7c>)
 8000674:	f001 fda8 	bl	80021c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BCD_BIT3_GPIO_Port, BCD_BIT3_Pin, (bcd_value & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	10db      	asrs	r3, r3, #3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	2180      	movs	r1, #128	@ 0x80
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <BCD_Display+0x74>)
 800068a:	f001 fd9d 	bl	80021c8 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	42020800 	.word	0x42020800
 800069c:	42020000 	.word	0x42020000
 80006a0:	42020400 	.word	0x42020400

080006a4 <Close_led>:

void Close_led(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, BLUE_LED_Pin|RED_LED_Pin|YELLOW_LED_Pin,RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	21e0      	movs	r1, #224	@ 0xe0
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <Close_led+0x20>)
 80006ae:	f001 fd8b 	bl	80021c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <Close_led+0x24>)
 80006ba:	f001 fd85 	bl	80021c8 <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	42020000 	.word	0x42020000
 80006c8:	42020800 	.word	0x42020800

080006cc <Turn_LED>:

void Turn_LED(uint16_t LED){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
	Close_led();
 80006d6:	f7ff ffe5 	bl	80006a4 <Close_led>
	if(LED == GREEN_LED_Pin){
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006e0:	d106      	bne.n	80006f0 <Turn_LED+0x24>
		HAL_GPIO_WritePin(GPIOC,LED,SET);
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	4806      	ldr	r0, [pc, #24]	@ (8000704 <Turn_LED+0x38>)
 80006ea:	f001 fd6d 	bl	80021c8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA,LED,SET);
	}

}
 80006ee:	e005      	b.n	80006fc <Turn_LED+0x30>
		HAL_GPIO_WritePin(GPIOA,LED,SET);
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	@ (8000708 <Turn_LED+0x3c>)
 80006f8:	f001 fd66 	bl	80021c8 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	42020800 	.word	0x42020800
 8000708:	42020000 	.word	0x42020000

0800070c <main>:
#define MAX_ID_POSITION	(sizeof(pri_id_address) / sizeof(pri_id_address[0]))
#define RESET_ID_POSITION (0U)


int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
 /*set up*/
  HAL_Init();
 8000710:	f000 fb96 	bl	8000e40 <HAL_Init>
  SystemClock_Config();
 8000714:	f000 f9a6 	bl	8000a64 <SystemClock_Config>
  MX_GPIO_Init();
 8000718:	f7ff fe7e 	bl	8000418 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800071c:	f7ff fdbc 	bl	8000298 <MX_FDCAN1_Init>
 /*setting LED*/
  BCD_Display(ID_Position+1);
 8000720:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <main+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff7b 	bl	8000624 <BCD_Display>
  Close_led();
 800072e:	f7ff ffb9 	bl	80006a4 <Close_led>
  GPIOC->ODR &= ~(1UL << 10U);
 8000732:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <main+0xbc>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a24      	ldr	r2, [pc, #144]	@ (80007c8 <main+0xbc>)
 8000738:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800073c:	6153      	str	r3, [r2, #20]

  while (1)
  {
	/*State machine*/
  	while(Exti_Event == IT_EVENT){
 800073e:	e03a      	b.n	80007b6 <main+0xaa>
		if(Can_send == STARTSENDCAN ){
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <main+0xc0>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <main+0x44>
			TX_Send_CAN();
 800074a:	f7ff fe13 	bl	8000374 <TX_Send_CAN>
 800074e:	e030      	b.n	80007b2 <main+0xa6>
		}else{
			switch (mode)
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <main+0xc4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	3b01      	subs	r3, #1
 8000758:	2b04      	cmp	r3, #4
 800075a:	d829      	bhi.n	80007b0 <main+0xa4>
 800075c:	a201      	add	r2, pc, #4	@ (adr r2, 8000764 <main+0x58>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	08000779 	.word	0x08000779
 8000768:	08000785 	.word	0x08000785
 800076c:	08000791 	.word	0x08000791
 8000770:	0800079d 	.word	0x0800079d
 8000774:	080007ab 	.word	0x080007ab
    		{
    			case ID_VS_ID:
    				Turn_LED(BLUE_LED_Pin);
 8000778:	2020      	movs	r0, #32
 800077a:	f7ff ffa7 	bl	80006cc <Turn_LED>
    				Pri_ID();
 800077e:	f000 f88f 	bl	80008a0 <Pri_ID>
    			break;
 8000782:	e016      	b.n	80007b2 <main+0xa6>
    			case STD_VS_EXD:
    				Turn_LED(RED_LED_Pin);
 8000784:	2040      	movs	r0, #64	@ 0x40
 8000786:	f7ff ffa1 	bl	80006cc <Turn_LED>
    				Std_Ext();
 800078a:	f000 f8d9 	bl	8000940 <Std_Ext>
    			break;
 800078e:	e010      	b.n	80007b2 <main+0xa6>
    			case ID_Pass_ARB:
    				Turn_LED(YELLOW_LED_Pin);
 8000790:	2080      	movs	r0, #128	@ 0x80
 8000792:	f7ff ff9b 	bl	80006cc <Turn_LED>
    				Pass_Arb();
 8000796:	f000 f8ab 	bl	80008f0 <Pass_Arb>
    			break;
 800079a:	e00a      	b.n	80007b2 <main+0xa6>
    			case DATE_REMOTE:
    				Turn_LED(GREEN_LED_Pin);
 800079c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007a0:	f7ff ff94 	bl	80006cc <Turn_LED>
    				Data_Remote();
 80007a4:	f000 f8f4 	bl	8000990 <Data_Remote>
    			break;
 80007a8:	e003      	b.n	80007b2 <main+0xa6>
    			case CHANGE_ADD:
    				Change_ID();
 80007aa:	f000 f909 	bl	80009c0 <Change_ID>
    			break;
 80007ae:	e000      	b.n	80007b2 <main+0xa6>
    			default:
    				break;
 80007b0:	bf00      	nop
    		}
		}
		Check_flag();
 80007b2:	f000 f929 	bl	8000a08 <Check_flag>
  	while(Exti_Event == IT_EVENT){
 80007b6:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <main+0xc8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0bf      	beq.n	8000740 <main+0x34>
 80007c0:	e7f9      	b.n	80007b6 <main+0xaa>
 80007c2:	bf00      	nop
 80007c4:	200000f2 	.word	0x200000f2
 80007c8:	42020800 	.word	0x42020800
 80007cc:	20000002 	.word	0x20000002
 80007d0:	20000000 	.word	0x20000000
 80007d4:	200000f0 	.word	0x200000f0

080007d8 <HAL_GPIO_EXTI_Falling_Callback>:
}



/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]

		if (GPIO_Pin == EXTI8_BUTTON1_Pin) {
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007e8:	d105      	bne.n	80007f6 <HAL_GPIO_EXTI_Falling_Callback+0x1e>
			mode = ID_VS_ID;
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
			NOT_GO = CAN_GO;
 80007f0:	4b26      	ldr	r3, [pc, #152]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == EXTI3_BUTTON2_Pin) {
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2b08      	cmp	r3, #8
 80007fa:	d105      	bne.n	8000808 <HAL_GPIO_EXTI_Falling_Callback+0x30>
			mode = STD_VS_EXD;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 80007fe:	2202      	movs	r2, #2
 8000800:	701a      	strb	r2, [r3, #0]
			NOT_GO = CAN_GO;
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == EXTI4_BUTTON4_Pin) {
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	2b10      	cmp	r3, #16
 800080c:	d10f      	bne.n	800082e <HAL_GPIO_EXTI_Falling_Callback+0x56>
			mode = CHANGE_ADD;
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 8000810:	2205      	movs	r2, #5
 8000812:	701a      	strb	r2, [r3, #0]
			if((EXTI->FPR1 & (1U << 5U)) != 0U){
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	f003 0320 	and.w	r3, r3, #32
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <HAL_GPIO_EXTI_Falling_Callback+0x50>
				NOT_GO = GOEXTI5;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e002      	b.n	800082e <HAL_GPIO_EXTI_Falling_Callback+0x56>
			}else {
				NOT_GO = CAN_GO;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
			}
		}
		if (GPIO_Pin == EXTI5_BUTTON3_Pin) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b20      	cmp	r3, #32
 8000832:	d118      	bne.n	8000866 <HAL_GPIO_EXTI_Falling_Callback+0x8e>
			if(NOT_GO != GOEXTI5 ){
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b01      	cmp	r3, #1
 800083c:	d013      	beq.n	8000866 <HAL_GPIO_EXTI_Falling_Callback+0x8e>
				if(sw_mode == 0){
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d103      	bne.n	8000850 <HAL_GPIO_EXTI_Falling_Callback+0x78>
					mode = ID_Pass_ARB;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 800084a:	2203      	movs	r2, #3
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e002      	b.n	8000856 <HAL_GPIO_EXTI_Falling_Callback+0x7e>
				}else{
					mode = DATE_REMOTE;
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 8000852:	2204      	movs	r2, #4
 8000854:	701a      	strb	r2, [r3, #0]
				}
				sw_mode ^= 1;
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f083 0301 	eor.w	r3, r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8000864:	701a      	strb	r2, [r3, #0]
			}
		}
		if (GPIO_Pin == GPIO_PIN_15) {
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800086c:	d102      	bne.n	8000874 <HAL_GPIO_EXTI_Falling_Callback+0x9c>
			Can_send = STARTSENDCAN;
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_GPIO_EXTI_Falling_Callback+0xc0>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
		}

//		if (GPIO_Pin == EXTI5_BUTTON3_Pin){
//			mode = ID_Pass_ARB;
//		}
		Exti_Event = IT_EVENT;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000000 	.word	0x20000000
 800088c:	200000f1 	.word	0x200000f1
 8000890:	44022000 	.word	0x44022000
 8000894:	200000f3 	.word	0x200000f3
 8000898:	20000002 	.word	0x20000002
 800089c:	200000f0 	.word	0x200000f0

080008a0 <Pri_ID>:


/*Setting about compare between ID VS ID standard */
void Pri_ID(){
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	 CAN_Payload.msgID = pri_id_address[ID_Position];
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <Pri_ID+0x3c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <Pri_ID+0x40>)
 80008ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <Pri_ID+0x44>)
 80008b4:	64da      	str	r2, [r3, #76]	@ 0x4c
	 CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <Pri_ID+0x44>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
	 CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <Pri_ID+0x44>)
 80008be:	2208      	movs	r2, #8
 80008c0:	60da      	str	r2, [r3, #12]
	 CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <Pri_ID+0x44>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	 prev_mode = mode;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <Pri_ID+0x48>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <Pri_ID+0x4c>)
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	200000f2 	.word	0x200000f2
 80008e0:	08003eb4 	.word	0x08003eb4
 80008e4:	20000090 	.word	0x20000090
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000001 	.word	0x20000001

080008f0 <Pass_Arb>:
/*Setting about what happen after arbitration field*/
void Pass_Arb(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	CAN_Payload.msgID = 0x7E2;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <Pass_Arb+0x40>)
 80008f6:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 80008fa:	64da      	str	r2, [r3, #76]	@ 0x4c
	CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <Pass_Arb+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <Pass_Arb+0x40>)
 8000904:	2208      	movs	r2, #8
 8000906:	60da      	str	r2, [r3, #12]

#ifdef NODE_A
	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <Pass_Arb+0x40>)
 800090a:	2201      	movs	r2, #1
 800090c:	60da      	str	r2, [r3, #12]
#endif

#ifdef NODE_B
	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_2;
#endif
	CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <Pass_Arb+0x40>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	prev_mode = mode;
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <Pass_Arb+0x44>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <Pass_Arb+0x48>)
 800091c:	701a      	strb	r2, [r3, #0]
	ID_Position = 0;
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <Pass_Arb+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
	BCD_Display(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fe7d 	bl	8000624 <BCD_Display>

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000090 	.word	0x20000090
 8000934:	20000000 	.word	0x20000000
 8000938:	20000001 	.word	0x20000001
 800093c:	200000f2 	.word	0x200000f2

08000940 <Std_Ext>:

/*Setting about compare between Standard ID VS  Extended ID  */
void Std_Ext(){
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

#ifdef NODE_A
	CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <Std_Ext+0x3c>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
#endif

#ifdef NODE_B
	CAN_Payload.TxHeader.IdType = FDCAN_EXTENDED_ID;
#endif
	CAN_Payload.msgID = std_ext_address[ID_Position];
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <Std_Ext+0x40>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <Std_Ext+0x44>)
 8000952:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000956:	461a      	mov	r2, r3
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <Std_Ext+0x3c>)
 800095a:	64da      	str	r2, [r3, #76]	@ 0x4c

	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <Std_Ext+0x3c>)
 800095e:	2208      	movs	r2, #8
 8000960:	60da      	str	r2, [r3, #12]
	CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <Std_Ext+0x3c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]

	prev_mode = mode;
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <Std_Ext+0x48>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b07      	ldr	r3, [pc, #28]	@ (800098c <Std_Ext+0x4c>)
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	20000090 	.word	0x20000090
 8000980:	200000f2 	.word	0x200000f2
 8000984:	08003ebc 	.word	0x08003ebc
 8000988:	20000000 	.word	0x20000000
 800098c:	20000001 	.word	0x20000001

08000990 <Data_Remote>:

/*Setting about compare between Data frame VS  Remote frame  */

void Data_Remote(){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	CAN_Payload.msgID = 0x7EA;
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <Data_Remote+0x28>)
 8000996:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800099a:	64da      	str	r2, [r3, #76]	@ 0x4c
	CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <Data_Remote+0x28>)
 800099e:	2208      	movs	r2, #8
 80009a0:	60da      	str	r2, [r3, #12]

#ifdef NODE_A
	CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <Data_Remote+0x28>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
#endif

#ifdef NODE_B
	CAN_Payload.TxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
#endif
	ID_Position = 0;
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <Data_Remote+0x2c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
	BCD_Display(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fe38 	bl	8000624 <BCD_Display>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000090 	.word	0x20000090
 80009bc:	200000f2 	.word	0x200000f2

080009c0 <Change_ID>:

/*Change Address ID  */

void Change_ID(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if(prev_mode == ID_Pass_ARB ){
 80009c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <Change_ID+0x40>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d103      	bne.n	80009d4 <Change_ID+0x14>
	    ID_Position = RESET_ID_POSITION;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <Change_ID+0x44>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e00c      	b.n	80009ee <Change_ID+0x2e>
	}else{
	    ID_Position++;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <Change_ID+0x44>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <Change_ID+0x44>)
 80009de:	701a      	strb	r2, [r3, #0]
	    if (ID_Position >= MAX_ID_POSITION) {
 80009e0:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <Change_ID+0x44>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d902      	bls.n	80009ee <Change_ID+0x2e>
	    	ID_Position = RESET_ID_POSITION;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <Change_ID+0x44>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	    }
	}
	BCD_Display(ID_Position+1);
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <Change_ID+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe14 	bl	8000624 <BCD_Display>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000001 	.word	0x20000001
 8000a04:	200000f2 	.word	0x200000f2

08000a08 <Check_flag>:

void Check_flag(){
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	if(mode == CHANGE_ADD && Can_send != STARTSENDCAN ){
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <Check_flag+0x40>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d10c      	bne.n	8000a30 <Check_flag+0x28>
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <Check_flag+0x44>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d007      	beq.n	8000a30 <Check_flag+0x28>
		Exti_Event = IT_EVENT;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <Check_flag+0x48>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
		mode = prev_mode;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <Check_flag+0x4c>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <Check_flag+0x40>)
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e006      	b.n	8000a3e <Check_flag+0x36>
	}else {
		Can_send = FINISHCAN;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <Check_flag+0x44>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
		Exti_Event = WAIT_TO_IT;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <Check_flag+0x48>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000002 	.word	0x20000002
 8000a50:	200000f0 	.word	0x200000f0
 8000a54:	20000001 	.word	0x20000001

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <SystemClock_Config>:

#include "rcc.h"

void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09c      	sub	sp, #112	@ 0x70
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2250      	movs	r2, #80	@ 0x50
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 f9e6 	bl	8003e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b40 <SystemClock_Config+0xdc>)
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a92:	4a2b      	ldr	r2, [pc, #172]	@ (8000b40 <SystemClock_Config+0xdc>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	6113      	str	r3, [r2, #16]
 8000a9a:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <SystemClock_Config+0xdc>)
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa6:	bf00      	nop
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <SystemClock_Config+0xdc>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	2b08      	cmp	r3, #8
 8000ab2:	d1f9      	bne.n	8000aa8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000aca:	2332      	movs	r3, #50	@ 0x32
 8000acc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000ada:	230c      	movs	r3, #12
 8000adc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fbb6 	bl	800225c <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000af6:	f7ff ffaf 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	231f      	movs	r3, #31
 8000afc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2105      	movs	r1, #5
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 ffd7 	bl	8002acc <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b24:	f7ff ff98 	bl	8000a58 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemClock_Config+0xe0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <SystemClock_Config+0xe0>)
 8000b32:	f043 0320 	orr.w	r3, r3, #32
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	3770      	adds	r7, #112	@ 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	44020800 	.word	0x44020800
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2288      	movs	r2, #136	@ 0x88
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 f963 	bl	8003e44 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a2b      	ldr	r2, [pc, #172]	@ (8000c30 <HAL_FDCAN_MspInit+0xd8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d14e      	bne.n	8000c26 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	f04f 0304 	mov.w	r3, #4
 8000b90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000b94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fa94 	bl	80030cc <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000baa:	f7ff ff55 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <HAL_FDCAN_MspInit+0xdc>)
 8000bb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <HAL_FDCAN_MspInit+0xdc>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_FDCAN_MspInit+0xdc>)
 8000bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_FDCAN_MspInit+0xdc>)
 8000bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_FDCAN_MspInit+0xdc>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_FDCAN_MspInit+0xdc>)
 8000bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB12     ------> FDCAN1_RX
    PB7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_7;
 8000bea:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
 8000bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c04:	2309      	movs	r3, #9
 8000c06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_FDCAN_MspInit+0xe0>)
 8000c12:	f001 f987 	bl	8001f24 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2027      	movs	r0, #39	@ 0x27
 8000c1c:	f000 fa86 	bl	800112c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c20:	2027      	movs	r0, #39	@ 0x27
 8000c22:	f000 fa9d 	bl	8001160 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000c26:	bf00      	nop
 8000c28:	37b0      	adds	r7, #176	@ 0xb0
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	4000a400 	.word	0x4000a400
 8000c34:	44020c00 	.word	0x44020c00
 8000c38:	42020400 	.word	0x42020400

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 f973 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI3_BUTTON2_Pin);
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	f001 faaa 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI4_BUTTON4_Pin);
 8000cac:	2010      	movs	r0, #16
 8000cae:	f001 faa3 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI5_BUTTON3_Pin);
 8000cba:	2020      	movs	r0, #32
 8000cbc:	f001 fa9c 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI8_BUTTON1_Pin);
 8000cc8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000ccc:	f001 fa94 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000cd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cdc:	f001 fa8c 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ce8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000cec:	f001 fa84 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <FDCAN1_IT0_IRQHandler+0x10>)
 8000cfa:	f000 feb3 	bl	8001a64 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000002c 	.word	0x2000002c

08000d08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d0e:	4b30      	ldr	r3, [pc, #192]	@ (8000dd0 <SystemInit+0xc8>)
 8000d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d14:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd0 <SystemInit+0xc8>)
 8000d16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <SystemInit+0xcc>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d24:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd4 <SystemInit+0xcc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <SystemInit+0xcc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <SystemInit+0xcc>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4927      	ldr	r1, [pc, #156]	@ (8000dd4 <SystemInit+0xcc>)
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <SystemInit+0xd0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d3c:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <SystemInit+0xcc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000d42:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <SystemInit+0xcc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <SystemInit+0xcc>)
 8000d4a:	4a24      	ldr	r2, [pc, #144]	@ (8000ddc <SystemInit+0xd4>)
 8000d4c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <SystemInit+0xcc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <SystemInit+0xcc>)
 8000d56:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <SystemInit+0xd4>)
 8000d58:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <SystemInit+0xcc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <SystemInit+0xcc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd4 <SystemInit+0xcc>)
 8000d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <SystemInit+0xcc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <SystemInit+0xc8>)
 8000d74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d78:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <SystemInit+0xd8>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d82:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d8a:	d003      	beq.n	8000d94 <SystemInit+0x8c>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d92:	d117      	bne.n	8000dc4 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <SystemInit+0xd8>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d005      	beq.n	8000dac <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <SystemInit+0xd8>)
 8000da2:	4a10      	ldr	r2, [pc, #64]	@ (8000de4 <SystemInit+0xdc>)
 8000da4:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <SystemInit+0xd8>)
 8000da8:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <SystemInit+0xe0>)
 8000daa:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <SystemInit+0xd8>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <SystemInit+0xd8>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <SystemInit+0xd8>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <SystemInit+0xd8>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	61d3      	str	r3, [r2, #28]
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00
 8000dd4:	44020c00 	.word	0x44020c00
 8000dd8:	fae2eae3 	.word	0xfae2eae3
 8000ddc:	01010280 	.word	0x01010280
 8000de0:	40022000 	.word	0x40022000
 8000de4:	08192a3b 	.word	0x08192a3b
 8000de8:	4c5d6e7f 	.word	0x4c5d6e7f

08000dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000df0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000df2:	e003      	b.n	8000dfc <LoopCopyDataInit>

08000df4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000df6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000df8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dfa:	3104      	adds	r1, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dfc:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e04:	d3f6      	bcc.n	8000df4 <CopyDataInit>
	ldr	r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	@ (8000e34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e08:	e002      	b.n	8000e10 <LoopFillZerobss>

08000e0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e0c:	f842 3b04 	str.w	r3, [r2], #4

08000e10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <LoopForever+0x16>)
	cmp	r2, r3
 8000e12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e14:	d3f9      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e16:	f7ff ff77 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f003 f81b 	bl	8003e54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1e:	f7ff fc75 	bl	800070c <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e24:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000e28:	08003eec 	.word	0x08003eec
	ldr	r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e30:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e34:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e38:	200000f8 	.word	0x200000f8

08000e3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f966 	bl	8001116 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e4a:	f001 fff7 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <HAL_Init+0x44>)
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	490b      	ldr	r1, [pc, #44]	@ (8000e88 <HAL_Init+0x48>)
 8000e5a:	5ccb      	ldrb	r3, [r1, r3]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <HAL_Init+0x4c>)
 8000e62:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e64:	2004      	movs	r0, #4
 8000e66:	f000 f9ab 	bl	80011c0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f000 f810 	bl	8000e90 <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e002      	b.n	8000e80 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7a:	f7ff fe65 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	44020c00 	.word	0x44020c00
 8000e88:	08003ec4 	.word	0x08003ec4
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e9c:	4b33      	ldr	r3, [pc, #204]	@ (8000f6c <HAL_InitTick+0xdc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e05c      	b.n	8000f62 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ea8:	4b31      	ldr	r3, [pc, #196]	@ (8000f70 <HAL_InitTick+0xe0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d10c      	bne.n	8000ece <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <HAL_InitTick+0xe4>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <HAL_InitTick+0xdc>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	e037      	b.n	8000f3e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000ece:	f000 f9cf 	bl	8001270 <HAL_SYSTICK_GetCLKSourceConfig>
 8000ed2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d023      	beq.n	8000f22 <HAL_InitTick+0x92>
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d82d      	bhi.n	8000f3c <HAL_InitTick+0xac>
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_InitTick+0x5e>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d00d      	beq.n	8000f08 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000eec:	e026      	b.n	8000f3c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <HAL_InitTick+0xe4>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_InitTick+0xdc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000efc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f04:	60fb      	str	r3, [r7, #12]
        break;
 8000f06:	e01a      	b.n	8000f3e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_InitTick+0xdc>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	60fb      	str	r3, [r7, #12]
        break;
 8000f20:	e00d      	b.n	8000f3e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f22:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0xdc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]
        break;
 8000f3a:	e000      	b.n	8000f3e <HAL_InitTick+0xae>
        break;
 8000f3c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f000 f91c 	bl	800117c <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e009      	b.n	8000f62 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	f04f 30ff 	mov.w	r0, #4294967295
 8000f56:	f000 f8e9 	bl	800112c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000f5a:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <HAL_InitTick+0xe8>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	e000e010 	.word	0xe000e010
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	200000f4 	.word	0x200000f4

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200000f4 	.word	0x200000f4

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	@ (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	@ (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	@ (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	@ 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff4c 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113a:	f7ff ff63 	bl	8001004 <__NVIC_GetPriorityGrouping>
 800113e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff ffb3 	bl	80010b0 <NVIC_EncodePriority>
 800114a:	4602      	mov	r2, r0
 800114c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff82 	bl	800105c <__NVIC_SetPriority>
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff56 	bl	8001020 <__NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800118c:	d301      	bcc.n	8001192 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800118e:	2301      	movs	r3, #1
 8001190:	e00d      	b.n	80011ae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_SYSTICK_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_SYSTICK_Config+0x40>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_SYSTICK_Config+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <HAL_SYSTICK_Config+0x40>)
 80011a6:	f043 0303 	orr.w	r3, r3, #3
 80011aa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d844      	bhi.n	8001258 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80011ce:	a201      	add	r2, pc, #4	@ (adr r2, 80011d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011f7 	.word	0x080011f7
 80011d8:	08001215 	.word	0x08001215
 80011dc:	08001237 	.word	0x08001237
 80011e0:	08001259 	.word	0x08001259
 80011e4:	080011e9 	.word	0x080011e9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6013      	str	r3, [r2, #0]
      break;
 80011f4:	e031      	b.n	800125a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011fc:	f023 0304 	bic.w	r3, r3, #4
 8001200:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001204:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001208:	4a18      	ldr	r2, [pc, #96]	@ (800126c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800120a:	f023 030c 	bic.w	r3, r3, #12
 800120e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001212:	e022      	b.n	800125a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001222:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001226:	f023 030c 	bic.w	r3, r3, #12
 800122a:	4a10      	ldr	r2, [pc, #64]	@ (800126c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001234:	e011      	b.n	800125a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0b      	ldr	r2, [pc, #44]	@ (8001268 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001244:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001248:	f023 030c 	bic.w	r3, r3, #12
 800124c:	4a07      	ldr	r2, [pc, #28]	@ (800126c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001256:	e000      	b.n	800125a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001258:	bf00      	nop
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010
 800126c:	44020c00 	.word	0x44020c00

08001270 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001282:	2304      	movs	r3, #4
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	e01e      	b.n	80012c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800128a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2b08      	cmp	r3, #8
 8001298:	d00f      	beq.n	80012ba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b08      	cmp	r3, #8
 800129e:	d80f      	bhi.n	80012c0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d003      	beq.n	80012b4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80012ac:	e008      	b.n	80012c0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
        break;
 80012b2:	e008      	b.n	80012c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80012b4:	2301      	movs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
        break;
 80012b8:	e005      	b.n	80012c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80012ba:	2302      	movs	r3, #2
 80012bc:	607b      	str	r3, [r7, #4]
        break;
 80012be:	e002      	b.n	80012c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
        break;
 80012c4:	bf00      	nop
    }
  }
  return systick_source;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e010 	.word	0xe000e010
 80012d8:	44020c00 	.word	0x44020c00

080012dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e147      	b.n	800157e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fc28 	bl	8000b58 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0210 	bic.w	r2, r2, #16
 8001316:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001318:	f7ff fe44 	bl	8000fa4 <HAL_GetTick>
 800131c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800131e:	e012      	b.n	8001346 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001320:	f7ff fe40 	bl	8000fa4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d90b      	bls.n	8001346 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e11b      	b.n	800157e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b08      	cmp	r3, #8
 8001352:	d0e5      	beq.n	8001320 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff fe1e 	bl	8000fa4 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800136a:	e012      	b.n	8001392 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800136c:	f7ff fe1a 	bl	8000fa4 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d90b      	bls.n	8001392 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0f5      	b.n	800157e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e5      	beq.n	800136c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a74      	ldr	r2, [pc, #464]	@ (8001588 <HAL_FDCAN_Init+0x2ac>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d103      	bne.n	80013c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80013ba:	4a74      	ldr	r2, [pc, #464]	@ (800158c <HAL_FDCAN_Init+0x2b0>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7c1b      	ldrb	r3, [r3, #16]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013d8:	619a      	str	r2, [r3, #24]
 80013da:	e007      	b.n	80013ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7c5b      	ldrb	r3, [r3, #17]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	e007      	b.n	8001416 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001414:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7c9b      	ldrb	r3, [r3, #18]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800142c:	619a      	str	r2, [r3, #24]
 800142e:	e007      	b.n	8001440 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800143e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001464:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0210 	bic.w	r2, r2, #16
 8001474:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0204 	orr.w	r2, r2, #4
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e02c      	b.n	80014ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d028      	beq.n	80014ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d01c      	beq.n	80014da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0210 	orr.w	r2, r2, #16
 80014be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d110      	bne.n	80014ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0220 	orr.w	r2, r2, #32
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	e007      	b.n	80014ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001502:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	3b01      	subs	r3, #1
 800150c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001512:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001514:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800151e:	d115      	bne.n	800154c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001524:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	3b01      	subs	r3, #1
 800152c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800152e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	3b01      	subs	r3, #1
 8001536:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001538:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	3b01      	subs	r3, #1
 8001542:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001548:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800154a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fc0c 	bl	8001d80 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	4000a400 	.word	0x4000a400
 800158c:	4000a500 	.word	0x4000a500

08001590 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d110      	bne.n	80015c6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e006      	b.n	80015d4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	f043 0204 	orr.w	r2, r3, #4
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
  }
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d139      	bne.n	800166c <HAL_FDCAN_AddMessageToTxFifoQ+0x8c>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e030      	b.n	800167a <HAL_FDCAN_AddMessageToTxFifoQ+0x9a>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fbfc 	bl	8001e2c <FDCAN_CopyMessageToRAM>

      GPIOC->ODR |= (1UL << 10U);
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163e:	6153      	str	r3, [r2, #20]
      while((GPIOC->IDR & (1UL << 12U)) == 0U){}
 8001640:	bf00      	nop
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f9      	beq.n	8001642 <HAL_FDCAN_AddMessageToTxFifoQ+0x62>
      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2101      	movs	r1, #1
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800165e:	2201      	movs	r2, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	e006      	b.n	800167a <HAL_FDCAN_AddMessageToTxFifoQ+0x9a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001670:	f043 0208 	orr.w	r2, r3, #8
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	42020800 	.word	0x42020800

08001688 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001688:	b480      	push	{r7}
 800168a:	b08b      	sub	sp, #44	@ 0x2c
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016a0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80016a2:	7efb      	ldrb	r3, [r7, #27]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 80e8 	bne.w	800187a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b40      	cmp	r3, #64	@ 0x40
 80016ae:	d137      	bne.n	8001720 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0db      	b.n	8001888 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d8:	0e1b      	lsrs	r3, r3, #24
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d10a      	bne.n	80016f8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ea:	0a5b      	lsrs	r3, r3, #9
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
 800171e:	e036      	b.n	800178e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001734:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0a3      	b.n	8001888 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001748:	0e1b      	lsrs	r3, r3, #24
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d10a      	bne.n	8001768 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001764:	2301      	movs	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0c9b      	lsrs	r3, r3, #18
 80017a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e005      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	3304      	adds	r3, #4
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	f003 020f 	and.w	r2, r3, #15
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0e1b      	lsrs	r3, r3, #24
 8001812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0fda      	lsrs	r2, r3, #31
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	3304      	adds	r3, #4
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	e00a      	b.n	800184a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	441a      	add	r2, r3
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	440b      	add	r3, r1
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	3301      	adds	r3, #1
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	461a      	mov	r2, r3
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	4293      	cmp	r3, r2
 8001858:	d3ec      	bcc.n	8001834 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b40      	cmp	r3, #64	@ 0x40
 800185e:	d105      	bne.n	800186c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800186a:	e004      	b.n	8001876 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e006      	b.n	8001888 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187e:	f043 0208 	orr.w	r2, r3, #8
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
  }
}
 8001888:	4618      	mov	r0, r3
 800188a:	372c      	adds	r7, #44	@ 0x2c
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	08003ed4 	.word	0x08003ed4

08001898 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018aa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d003      	beq.n	80018ba <HAL_FDCAN_ActivateNotification+0x22>
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	f040 80c8 	bne.w	8001a4a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03b      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d031      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d027      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01d      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d013      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00c      	beq.n	800195e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d107      	bne.n	800195e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d13b      	bne.n	80019ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d131      	bne.n	80019ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d127      	bne.n	80019ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11d      	bne.n	80019ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d113      	bne.n	80019ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0202 	orr.w	r2, r2, #2
 80019f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d009      	beq.n	8001a18 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e006      	b.n	8001a58 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	@ 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a72:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a80:	4013      	ands	r3, r2
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a98:	4013      	ands	r3, r2
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aba:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001abe:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac6:	6a3a      	ldr	r2, [r7, #32]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ad2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ad6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aea:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001af2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2240      	movs	r2, #64	@ 0x40
 8001b0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f916 	bl	8001d42 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d019      	beq.n	8001b54 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d014      	beq.n	8001b54 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b32:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b4a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b4c:	6939      	ldr	r1, [r7, #16]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8d8 	bl	8001d04 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b60:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8a2 	bl	8001cae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b76:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fc24 	bl	80003c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001b8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f897 	bl	8001cc4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00c      	beq.n	8001bba <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bb2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f890 	bl	8001cda <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d013      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bd6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2280      	movs	r2, #128	@ 0x80
 8001bec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001bee:	68f9      	ldr	r1, [r7, #12]
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f87c 	bl	8001cee <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f880 	bl	8001d1a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00c      	beq.n	8001c3e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c36:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f878 	bl	8001d2e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00f      	beq.n	8001c68 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001c76:	69f9      	ldr	r1, [r7, #28]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f876 	bl	8001d6a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6a3a      	ldr	r2, [r7, #32]
 8001c8a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f858 	bl	8001d56 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	@ 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001d8a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d9a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da2:	041a      	lsls	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dc0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc8:	061a      	lsls	r2, r3, #24
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e005      	b.n	8001e0e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3f3      	bcc.n	8001e02 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	4000ac00 	.word	0x4000ac00

08001e2c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001e4a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e00a      	b.n	8001e6e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001e60:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001e66:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e6c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e78:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001e7e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001e84:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e020      	b.n	8001f02 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3302      	adds	r3, #2
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ed8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	440b      	add	r3, r1
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ee6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	440a      	add	r2, r1
 8001eee:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ef0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3304      	adds	r3, #4
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <FDCAN_CopyMessageToRAM+0xf4>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d3d6      	bcc.n	8001ec0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	3724      	adds	r7, #36	@ 0x24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	08003ed4 	.word	0x08003ed4

08001f24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f32:	e136      	b.n	80021a2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8128 	beq.w	800219c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x38>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d125      	bne.n	8001fa8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d00b      	beq.n	8001ffc <HAL_GPIO_Init+0xd8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff0:	2b11      	cmp	r3, #17
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b12      	cmp	r3, #18
 8001ffa:	d130      	bne.n	800205e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002032:	2201      	movs	r2, #1
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 0201 	and.w	r2, r3, #1
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d017      	beq.n	8002096 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4013      	ands	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d07c      	beq.n	800219c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80020a2:	4a47      	ldr	r2, [pc, #284]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3318      	adds	r3, #24
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4013      	ands	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0a9a      	lsrs	r2, r3, #10
 80020ca:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <HAL_GPIO_Init+0x2a0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	00d2      	lsls	r2, r2, #3
 80020d6:	4093      	lsls	r3, r2
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80020de:	4938      	ldr	r1, [pc, #224]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3318      	adds	r3, #24
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80020ec:	4b34      	ldr	r3, [pc, #208]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002110:	4a2b      	ldr	r2, [pc, #172]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002116:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4013      	ands	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800213a:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002140:	4b1f      	ldr	r3, [pc, #124]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 8002142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002146:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4013      	ands	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002166:	4a16      	ldr	r2, [pc, #88]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800216e:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 8002170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002174:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	43db      	mvns	r3, r3
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002194:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <HAL_GPIO_Init+0x29c>)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	3301      	adds	r3, #1
 80021a0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f aec1 	bne.w	8001f34 <HAL_GPIO_Init+0x10>
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	44022000 	.word	0x44022000
 80021c4:	002f7f7f 	.word	0x002f7f7f

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002202:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800220e:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f814 	bl	8002244 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002228:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fad1 	bl	80007d8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	44022000 	.word	0x44022000

08002244 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f000 bc28 	b.w	8002ac0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	4b94      	ldr	r3, [pc, #592]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 0318 	and.w	r3, r3, #24
 8002278:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800227a:	4b92      	ldr	r3, [pc, #584]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d05b      	beq.n	8002348 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b18      	cmp	r3, #24
 800229a:	d114      	bne.n	80022c6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d111      	bne.n	80022c6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f000 bc08 	b.w	8002ac0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80022b0:	4b84      	ldr	r3, [pc, #528]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	4981      	ldr	r1, [pc, #516]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80022c4:	e040      	b.n	8002348 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d023      	beq.n	8002316 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022ce:	4b7d      	ldr	r3, [pc, #500]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7c      	ldr	r2, [pc, #496]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe fe63 	bl	8000fa4 <HAL_GetTick>
 80022de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022e2:	f7fe fe5f 	bl	8000fa4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e3e5      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022f4:	4b73      	ldr	r3, [pc, #460]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002300:	4b70      	ldr	r3, [pc, #448]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	496d      	ldr	r1, [pc, #436]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002310:	4313      	orrs	r3, r2
 8002312:	618b      	str	r3, [r1, #24]
 8002314:	e018      	b.n	8002348 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002316:	4b6b      	ldr	r3, [pc, #428]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6a      	ldr	r2, [pc, #424]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800231c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fe3f 	bl	8000fa4 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800232a:	f7fe fe3b 	bl	8000fa4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e3c1      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800233c:	4b61      	ldr	r3, [pc, #388]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a0 	beq.w	8002496 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x10c>
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b18      	cmp	r3, #24
 8002360:	d109      	bne.n	8002376 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f040 8092 	bne.w	8002496 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e3a4      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x132>
 8002380:	4b50      	ldr	r3, [pc, #320]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a4f      	ldr	r2, [pc, #316]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e058      	b.n	8002440 <HAL_RCC_OscConfig+0x1e4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d112      	bne.n	80023bc <HAL_RCC_OscConfig+0x160>
 8002396:	4b4b      	ldr	r3, [pc, #300]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4a      	ldr	r2, [pc, #296]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800239c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b48      	ldr	r3, [pc, #288]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a47      	ldr	r2, [pc, #284]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b45      	ldr	r3, [pc, #276]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a44      	ldr	r2, [pc, #272]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e041      	b.n	8002440 <HAL_RCC_OscConfig+0x1e4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c4:	d112      	bne.n	80023ec <HAL_RCC_OscConfig+0x190>
 80023c6:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3e      	ldr	r2, [pc, #248]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b3c      	ldr	r3, [pc, #240]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3b      	ldr	r2, [pc, #236]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b39      	ldr	r3, [pc, #228]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a38      	ldr	r2, [pc, #224]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e029      	b.n	8002440 <HAL_RCC_OscConfig+0x1e4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80023f4:	d112      	bne.n	800241c <HAL_RCC_OscConfig+0x1c0>
 80023f6:	4b33      	ldr	r3, [pc, #204]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a32      	ldr	r2, [pc, #200]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b30      	ldr	r3, [pc, #192]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2f      	ldr	r2, [pc, #188]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e011      	b.n	8002440 <HAL_RCC_OscConfig+0x1e4>
 800241c:	4b29      	ldr	r3, [pc, #164]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a28      	ldr	r2, [pc, #160]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b26      	ldr	r3, [pc, #152]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a25      	ldr	r2, [pc, #148]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a22      	ldr	r2, [pc, #136]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800243a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fdac 	bl	8000fa4 <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002450:	f7fe fda8 	bl	8000fa4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e32e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x1f4>
 800246e:	e012      	b.n	8002496 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fd98 	bl	8000fa4 <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002478:	f7fe fd94 	bl	8000fa4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e31a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <HAL_RCC_OscConfig+0x268>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 809a 	beq.w	80025d8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x25a>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	2b18      	cmp	r3, #24
 80024ae:	d149      	bne.n	8002544 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d146      	bne.n	8002544 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e2fe      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
 80024c2:	bf00      	nop
 80024c4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80024ce:	4b9a      	ldr	r3, [pc, #616]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0218 	and.w	r2, r3, #24
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d014      	beq.n	8002508 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80024de:	4b96      	ldr	r3, [pc, #600]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 0218 	bic.w	r2, r3, #24
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	4993      	ldr	r1, [pc, #588]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80024f0:	f000 fdd0 	bl	8003094 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024f4:	4b91      	ldr	r3, [pc, #580]	@ (800273c <HAL_RCC_OscConfig+0x4e0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fcc9 	bl	8000e90 <HAL_InitTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e2db      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fd4c 	bl	8000fa4 <HAL_GetTick>
 800250c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002510:	f7fe fd48 	bl	8000fa4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e2ce      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002522:	4b85      	ldr	r3, [pc, #532]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800252e:	4b82      	ldr	r3, [pc, #520]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	497e      	ldr	r1, [pc, #504]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002542:	e049      	b.n	80025d8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800254c:	4b7a      	ldr	r3, [pc, #488]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 0218 	bic.w	r2, r3, #24
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4977      	ldr	r1, [pc, #476]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800255e:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a75      	ldr	r2, [pc, #468]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fd1b 	bl	8000fa4 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002572:	f7fe fd17 	bl	8000fa4 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e29d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002584:	4b6c      	ldr	r3, [pc, #432]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002590:	4b69      	ldr	r3, [pc, #420]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	041b      	lsls	r3, r3, #16
 800259e:	4966      	ldr	r1, [pc, #408]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	610b      	str	r3, [r1, #16]
 80025a4:	e018      	b.n	80025d8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b64      	ldr	r3, [pc, #400]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a63      	ldr	r2, [pc, #396]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fcf7 	bl	8000fa4 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025ba:	f7fe fcf3 	bl	8000fa4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e279      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d03c      	beq.n	800265e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01c      	beq.n	8002626 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ec:	4b52      	ldr	r3, [pc, #328]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80025ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f2:	4a51      	ldr	r2, [pc, #324]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80025f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fcd2 	bl	8000fa4 <HAL_GetTick>
 8002600:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002604:	f7fe fcce 	bl	8000fa4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e254      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002616:	4b48      	ldr	r3, [pc, #288]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800261c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ef      	beq.n	8002604 <HAL_RCC_OscConfig+0x3a8>
 8002624:	e01b      	b.n	800265e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002626:	4b44      	ldr	r3, [pc, #272]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800262c:	4a42      	ldr	r2, [pc, #264]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 800262e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7fe fcb5 	bl	8000fa4 <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800263e:	f7fe fcb1 	bl	8000fa4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e237      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002650:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1ef      	bne.n	800263e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80d2 	beq.w	8002810 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800266c:	4b34      	ldr	r3, [pc, #208]	@ (8002740 <HAL_RCC_OscConfig+0x4e4>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d118      	bne.n	80026aa <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002678:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_RCC_OscConfig+0x4e4>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	4a30      	ldr	r2, [pc, #192]	@ (8002740 <HAL_RCC_OscConfig+0x4e4>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002684:	f7fe fc8e 	bl	8000fa4 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe fc8a 	bl	8000fa4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e210      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800269e:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <HAL_RCC_OscConfig+0x4e4>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x468>
 80026b2:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026c2:	e074      	b.n	80027ae <HAL_RCC_OscConfig+0x552>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d118      	bne.n	80026fe <HAL_RCC_OscConfig+0x4a2>
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026d2:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026dc:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026e2:	4a15      	ldr	r2, [pc, #84]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026f2:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026fc:	e057      	b.n	80027ae <HAL_RCC_OscConfig+0x552>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d11e      	bne.n	8002744 <HAL_RCC_OscConfig+0x4e8>
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800270c:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800271c:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 800271e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002722:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 8002728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800272c:	4a02      	ldr	r2, [pc, #8]	@ (8002738 <HAL_RCC_OscConfig+0x4dc>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002736:	e03a      	b.n	80027ae <HAL_RCC_OscConfig+0x552>
 8002738:	44020c00 	.word	0x44020c00
 800273c:	20000008 	.word	0x20000008
 8002740:	44020800 	.word	0x44020800
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b85      	cmp	r3, #133	@ 0x85
 800274a:	d118      	bne.n	800277e <HAL_RCC_OscConfig+0x522>
 800274c:	4ba2      	ldr	r3, [pc, #648]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800274e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002752:	4aa1      	ldr	r2, [pc, #644]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800275c:	4b9e      	ldr	r3, [pc, #632]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800275e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002762:	4a9d      	ldr	r2, [pc, #628]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002768:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800276c:	4b9a      	ldr	r3, [pc, #616]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800276e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002772:	4a99      	ldr	r2, [pc, #612]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800277c:	e017      	b.n	80027ae <HAL_RCC_OscConfig+0x552>
 800277e:	4b96      	ldr	r3, [pc, #600]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002784:	4a94      	ldr	r2, [pc, #592]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800278e:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002794:	4a90      	ldr	r2, [pc, #576]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002796:	f023 0304 	bic.w	r3, r3, #4
 800279a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800279e:	4b8e      	ldr	r3, [pc, #568]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80027a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027a4:	4a8c      	ldr	r2, [pc, #560]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80027a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fbf5 	bl	8000fa4 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fbf1 	bl	8000fa4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e175      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d4:	4b80      	ldr	r3, [pc, #512]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80027d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ed      	beq.n	80027be <HAL_RCC_OscConfig+0x562>
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fbde 	bl	8000fa4 <HAL_GetTick>
 80027e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe fbda 	bl	8000fa4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e15e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002802:	4b75      	ldr	r3, [pc, #468]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ed      	bne.n	80027ec <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d036      	beq.n	800288a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002824:	4b6c      	ldr	r3, [pc, #432]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6b      	ldr	r2, [pc, #428]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800282a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800282e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe fbb8 	bl	8000fa4 <HAL_GetTick>
 8002834:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002838:	f7fe fbb4 	bl	8000fa4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e13a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800284a:	4b63      	ldr	r3, [pc, #396]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x5dc>
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002858:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5e      	ldr	r2, [pc, #376]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800285e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fb9e 	bl	8000fa4 <HAL_GetTick>
 8002868:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800286c:	f7fe fb9a 	bl	8000fa4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e120      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800287e:	4b56      	ldr	r3, [pc, #344]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8115 	beq.w	8002abe <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b18      	cmp	r3, #24
 8002898:	f000 80af 	beq.w	80029fa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	f040 8086 	bne.w	80029b2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80028a6:	4b4c      	ldr	r3, [pc, #304]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a4b      	ldr	r2, [pc, #300]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80028ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fb77 	bl	8000fa4 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028ba:	f7fe fb73 	bl	8000fa4 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0f9      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028cc:	4b42      	ldr	r3, [pc, #264]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80028d8:	4b3f      	ldr	r3, [pc, #252]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80028da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028e0:	f023 0303 	bic.w	r3, r3, #3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028ec:	0212      	lsls	r2, r2, #8
 80028ee:	430a      	orrs	r2, r1
 80028f0:	4939      	ldr	r1, [pc, #228]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	628b      	str	r3, [r1, #40]	@ 0x28
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	3b01      	subs	r3, #1
 8002906:	025b      	lsls	r3, r3, #9
 8002908:	b29b      	uxth	r3, r3
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	3b01      	subs	r3, #1
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	3b01      	subs	r3, #1
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002926:	492c      	ldr	r1, [pc, #176]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002928:	4313      	orrs	r3, r2
 800292a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002932:	f023 0310 	bic.w	r3, r3, #16
 8002936:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002942:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	4a24      	ldr	r2, [pc, #144]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002948:	f043 0310 	orr.w	r3, r3, #16
 800294c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	f023 020c 	bic.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	491f      	ldr	r1, [pc, #124]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002960:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	f023 0220 	bic.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296c:	491a      	ldr	r1, [pc, #104]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a15      	ldr	r2, [pc, #84]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 8002984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fb0b 	bl	8000fa4 <HAL_GetTick>
 800298e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002992:	f7fe fb07 	bl	8000fa4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e08d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x736>
 80029b0:	e085      	b.n	8002abe <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <HAL_RCC_OscConfig+0x77c>)
 80029b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7fe faf1 	bl	8000fa4 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029c6:	f7fe faed 	bl	8000fa4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d903      	bls.n	80029dc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e073      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
 80029d8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029dc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80029e8:	4b37      	ldr	r3, [pc, #220]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	4a36      	ldr	r2, [pc, #216]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 80029ee:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	6293      	str	r3, [r2, #40]	@ 0x28
 80029f8:	e061      	b.n	8002abe <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80029fa:	4b33      	ldr	r3, [pc, #204]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a00:	4b31      	ldr	r3, [pc, #196]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 8002a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a04:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d031      	beq.n	8002a72 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d12a      	bne.n	8002a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d122      	bne.n	8002a72 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a36:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d11a      	bne.n	8002a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a48:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d111      	bne.n	8002a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d108      	bne.n	8002a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0e1b      	lsrs	r3, r3, #24
 8002a64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e024      	b.n	8002ac0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a76:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d01a      	beq.n	8002abe <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 8002a8e:	f023 0310 	bic.w	r3, r3, #16
 8002a92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa86 	bl	8000fa4 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002a9a:	bf00      	nop
 8002a9c:	f7fe fa82 	bl	8000fa4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d0f9      	beq.n	8002a9c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aac:	4a06      	ldr	r2, [pc, #24]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <HAL_RCC_OscConfig+0x86c>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	44020c00 	.word	0x44020c00

08002acc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e19e      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b83      	ldr	r3, [pc, #524]	@ (8002cf0 <HAL_RCC_ClockConfig+0x224>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d910      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b80      	ldr	r3, [pc, #512]	@ (8002cf0 <HAL_RCC_ClockConfig+0x224>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 020f 	bic.w	r2, r3, #15
 8002af6:	497e      	ldr	r1, [pc, #504]	@ (8002cf0 <HAL_RCC_ClockConfig+0x224>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf0 <HAL_RCC_ClockConfig+0x224>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e186      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d012      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	4b74      	ldr	r3, [pc, #464]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d909      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b2e:	4b71      	ldr	r3, [pc, #452]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	496d      	ldr	r1, [pc, #436]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	4b68      	ldr	r3, [pc, #416]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d909      	bls.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b60:	4b64      	ldr	r3, [pc, #400]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4961      	ldr	r1, [pc, #388]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d010      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d908      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b90:	4b58      	ldr	r3, [pc, #352]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4955      	ldr	r1, [pc, #340]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d010      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	4b50      	ldr	r3, [pc, #320]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d908      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 020f 	bic.w	r2, r3, #15
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	494a      	ldr	r1, [pc, #296]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8093 	beq.w	8002d04 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002be6:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d121      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e113      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e107      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c16:	4b37      	ldr	r3, [pc, #220]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0fb      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c26:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0f3      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002c36:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	492c      	ldr	r1, [pc, #176]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe f9ac 	bl	8000fa4 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d112      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe f9a4 	bl	8000fa4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0d7      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0318 	and.w	r3, r3, #24
 8002c76:	2b18      	cmp	r3, #24
 8002c78:	d1ee      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x18c>
 8002c7a:	e043      	b.n	8002d04 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d112      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c86:	f7fe f98d 	bl	8000fa4 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0c0      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 0318 	and.w	r3, r3, #24
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1ba>
 8002ca8:	e02c      	b.n	8002d04 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d122      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe f976 	bl	8000fa4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e0a9      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <HAL_RCC_ClockConfig+0x228>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 0318 	and.w	r3, r3, #24
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d1ee      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x1e8>
 8002cd6:	e015      	b.n	8002d04 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe f964 	bl	8000fa4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d906      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e097      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 0318 	and.w	r3, r3, #24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e9      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b44      	ldr	r3, [pc, #272]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d208      	bcs.n	8002d32 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d20:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f023 020f 	bic.w	r2, r3, #15
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	493e      	ldr	r1, [pc, #248]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d32:	4b3e      	ldr	r3, [pc, #248]	@ (8002e2c <HAL_RCC_ClockConfig+0x360>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d210      	bcs.n	8002d62 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d40:	4b3a      	ldr	r3, [pc, #232]	@ (8002e2c <HAL_RCC_ClockConfig+0x360>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 020f 	bic.w	r2, r3, #15
 8002d48:	4938      	ldr	r1, [pc, #224]	@ (8002e2c <HAL_RCC_ClockConfig+0x360>)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d50:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <HAL_RCC_ClockConfig+0x360>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e05d      	b.n	8002e1e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d010      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d208      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4927      	ldr	r1, [pc, #156]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d209      	bcs.n	8002dc2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002dae:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	491a      	ldr	r1, [pc, #104]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d209      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002de0:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	490e      	ldr	r1, [pc, #56]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002df4:	f000 f822 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490b      	ldr	r1, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x364>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <HAL_RCC_ClockConfig+0x368>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_RCC_ClockConfig+0x36c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f83c 	bl	8000e90 <HAL_InitTick>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	44020c00 	.word	0x44020c00
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	08003ec4 	.word	0x08003ec4
 8002e34:	20000004 	.word	0x20000004
 8002e38:	20000008 	.word	0x20000008

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	@ 0x24
 8002e40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e42:	4b8c      	ldr	r3, [pc, #560]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0318 	and.w	r3, r3, #24
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d102      	bne.n	8002e54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e4e:	4b8a      	ldr	r3, [pc, #552]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e107      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e54:	4b87      	ldr	r3, [pc, #540]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 0318 	and.w	r3, r3, #24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d112      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e60:	4b84      	ldr	r3, [pc, #528]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d009      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e6c:	4b81      	ldr	r3, [pc, #516]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	4a81      	ldr	r2, [pc, #516]	@ (800307c <HAL_RCC_GetSysClockFreq+0x240>)
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e0f1      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002e80:	4b7e      	ldr	r3, [pc, #504]	@ (800307c <HAL_RCC_GetSysClockFreq+0x240>)
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	e0ee      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e86:	4b7b      	ldr	r3, [pc, #492]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0318 	and.w	r3, r3, #24
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e92:	4b7b      	ldr	r3, [pc, #492]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x244>)
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e0e5      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e98:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f003 0318 	and.w	r3, r3, #24
 8002ea0:	2b18      	cmp	r3, #24
 8002ea2:	f040 80dd 	bne.w	8003060 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ea6:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002eb0:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	ee07 3a90 	vmov	s15, r3
 8002edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80b7 	beq.w	800305a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0xbe>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d056      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x16a>
 8002ef8:	e077      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002efa:	4b5e      	ldr	r3, [pc, #376]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d02d      	beq.n	8002f62 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f06:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	08db      	lsrs	r3, r3, #3
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	4a5a      	ldr	r2, [pc, #360]	@ (800307c <HAL_RCC_GetSysClockFreq+0x240>)
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f30:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f40:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f44:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003084 <HAL_RCC_GetSysClockFreq+0x248>
 8002f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002f60:	e065      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003088 <HAL_RCC_GetSysClockFreq+0x24c>
 8002f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f74:	4b3f      	ldr	r3, [pc, #252]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f84:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f88:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003084 <HAL_RCC_GetSysClockFreq+0x248>
 8002f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002fa4:	e043      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800308c <HAL_RCC_GetSysClockFreq+0x250>
 8002fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fcc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003084 <HAL_RCC_GetSysClockFreq+0x248>
 8002fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002fe8:	e021      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003090 <HAL_RCC_GetSysClockFreq+0x254>
 8002ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800300c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003010:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003084 <HAL_RCC_GetSysClockFreq+0x248>
 8003014:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003018:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800301c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003020:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003028:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800302c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	0a5b      	lsrs	r3, r3, #9
 8003034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003038:	3301      	adds	r3, #1
 800303a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003046:	edd7 6a06 	vldr	s13, [r7, #24]
 800304a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800304e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003052:	ee17 3a90 	vmov	r3, s15
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	e004      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e001      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_RCC_GetSysClockFreq+0x240>)
 8003062:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003064:	69fb      	ldr	r3, [r7, #28]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	@ 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	44020c00 	.word	0x44020c00
 8003078:	003d0900 	.word	0x003d0900
 800307c:	03d09000 	.word	0x03d09000
 8003080:	016e3600 	.word	0x016e3600
 8003084:	46000000 	.word	0x46000000
 8003088:	4c742400 	.word	0x4c742400
 800308c:	4bb71b00 	.word	0x4bb71b00
 8003090:	4a742400 	.word	0x4a742400

08003094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003098:	f7ff fed0 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80030a2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030a6:	4907      	ldr	r1, [pc, #28]	@ (80030c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80030aa:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a05      	ldr	r2, [pc, #20]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x34>)
 80030b4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80030b6:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x34>)
 80030b8:	681b      	ldr	r3, [r3, #0]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	44020c00 	.word	0x44020c00
 80030c4:	08003ec4 	.word	0x08003ec4
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80030cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d0:	b0aa      	sub	sp, #168	@ 0xa8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80030f0:	2500      	movs	r5, #0
 80030f2:	ea54 0305 	orrs.w	r3, r4, r5
 80030f6:	d00b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80030f8:	4bb8      	ldr	r3, [pc, #736]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030fe:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003102:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	4ab4      	ldr	r2, [pc, #720]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800310a:	430b      	orrs	r3, r1
 800310c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f002 0801 	and.w	r8, r2, #1
 800311c:	f04f 0900 	mov.w	r9, #0
 8003120:	ea58 0309 	orrs.w	r3, r8, r9
 8003124:	d038      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003126:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800312a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312c:	2b05      	cmp	r3, #5
 800312e:	d819      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003130:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800316d 	.word	0x0800316d
 800313c:	08003151 	.word	0x08003151
 8003140:	08003165 	.word	0x08003165
 8003144:	0800316d 	.word	0x0800316d
 8003148:	0800316d 	.word	0x0800316d
 800314c:	0800316d 	.word	0x0800316d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003150:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003154:	3308      	adds	r3, #8
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fddc 	bl	8003d14 <RCCEx_PLL2_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003162:	e004      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800316a:	e000      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 800316c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003176:	4b99      	ldr	r3, [pc, #612]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003178:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800317c:	f023 0107 	bic.w	r1, r3, #7
 8003180:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	4a95      	ldr	r2, [pc, #596]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003188:	430b      	orrs	r3, r1
 800318a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800318e:	e003      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003194:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003198:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f002 0a02 	and.w	sl, r2, #2
 80031a4:	f04f 0b00 	mov.w	fp, #0
 80031a8:	ea5a 030b 	orrs.w	r3, sl, fp
 80031ac:	d03c      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80031ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b4:	2b28      	cmp	r3, #40	@ 0x28
 80031b6:	d01b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80031b8:	2b28      	cmp	r3, #40	@ 0x28
 80031ba:	d815      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d019      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d811      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80031c4:	2b18      	cmp	r3, #24
 80031c6:	d017      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80031c8:	2b18      	cmp	r3, #24
 80031ca:	d80d      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x130>
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d109      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031d8:	3308      	adds	r3, #8
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fd9a 	bl	8003d14 <RCCEx_PLL2_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80031e6:	e00a      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80031ee:	e006      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031f0:	bf00      	nop
 80031f2:	e004      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031f4:	bf00      	nop
 80031f6:	e002      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031f8:	bf00      	nop
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80031fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003206:	4b75      	ldr	r3, [pc, #468]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003208:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800320c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003210:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003216:	4a71      	ldr	r2, [pc, #452]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003218:	430b      	orrs	r3, r1
 800321a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800321e:	e003      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003224:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003228:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f002 0304 	and.w	r3, r2, #4
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800323e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003242:	460b      	mov	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003252:	d01e      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003254:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003258:	d817      	bhi.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800325a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800325e:	d01a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003264:	d811      	bhi.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003266:	2bc0      	cmp	r3, #192	@ 0xc0
 8003268:	d017      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800326a:	2bc0      	cmp	r3, #192	@ 0xc0
 800326c:	d80d      	bhi.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d109      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003276:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800327a:	3308      	adds	r3, #8
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fd49 	bl	8003d14 <RCCEx_PLL2_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003288:	e00a      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003290:	e006      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003292:	bf00      	nop
 8003294:	e004      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800329e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80032a8:	4b4c      	ldr	r3, [pc, #304]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032ae:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80032b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	4a48      	ldr	r2, [pc, #288]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032c6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80032d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d043      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80032ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032f4:	d021      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80032f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032fa:	d81a      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80032fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003300:	d01d      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003302:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003306:	d814      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003308:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800330c:	d019      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800330e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003312:	d80e      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d016      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800331c:	d109      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800331e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003322:	3308      	adds	r3, #8
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fcf5 	bl	8003d14 <RCCEx_PLL2_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003330:	e00a      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003338:	e006      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800333a:	bf00      	nop
 800333c:	e004      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003348:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10c      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003350:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003356:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800335a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003362:	430b      	orrs	r3, r1
 8003364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800336e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003372:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800337e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003380:	2300      	movs	r3, #0
 8003382:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003384:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003388:	460b      	mov	r3, r1
 800338a:	4313      	orrs	r3, r2
 800338c:	d03e      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800338e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003398:	d01b      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800339a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800339e:	d814      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80033a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033a4:	d017      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80033a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033aa:	d80e      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d017      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d109      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ba:	3308      	adds	r3, #8
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fca9 	bl	8003d14 <RCCEx_PLL2_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80033c8:	e00b      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033d0:	e007      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80033d2:	bf00      	nop
 80033d4:	e005      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80033d6:	bf00      	nop
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80033da:	bf00      	nop
 80033dc:	44020c00 	.word	0x44020c00
        break;
 80033e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80033ea:	4ba5      	ldr	r3, [pc, #660]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033f0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80033f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	4aa1      	ldr	r2, [pc, #644]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003402:	e003      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003408:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800340c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003418:	673b      	str	r3, [r7, #112]	@ 0x70
 800341a:	2300      	movs	r3, #0
 800341c:	677b      	str	r3, [r7, #116]	@ 0x74
 800341e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003422:	460b      	mov	r3, r1
 8003424:	4313      	orrs	r3, r2
 8003426:	d03b      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800342c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003432:	d01b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003434:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003438:	d814      	bhi.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800343a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800343e:	d017      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003440:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003444:	d80e      	bhi.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d014      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800344a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800344e:	d109      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003454:	3308      	adds	r3, #8
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fc5c 	bl	8003d14 <RCCEx_PLL2_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003462:	e008      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800346a:	e004      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800346c:	bf00      	nop
 800346e:	e002      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003476:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800347e:	4b80      	ldr	r3, [pc, #512]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003484:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800348c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348e:	4a7c      	ldr	r2, [pc, #496]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003490:	430b      	orrs	r3, r1
 8003492:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003496:	e003      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800349c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80034a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80034ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ae:	2300      	movs	r3, #0
 80034b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80034b6:	460b      	mov	r3, r1
 80034b8:	4313      	orrs	r3, r2
 80034ba:	d033      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80034bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034c6:	d015      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80034c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034cc:	d80e      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d012      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80034d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d6:	d109      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034dc:	3308      	adds	r3, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fc18 	bl	8003d14 <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80034ea:	e006      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034f2:	e002      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80034f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003502:	4b5f      	ldr	r3, [pc, #380]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003504:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003508:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800350c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003512:	4a5b      	ldr	r2, [pc, #364]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003514:	430b      	orrs	r3, r1
 8003516:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800351a:	e003      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003520:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003524:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	2100      	movs	r1, #0
 800352e:	6639      	str	r1, [r7, #96]	@ 0x60
 8003530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003534:	667b      	str	r3, [r7, #100]	@ 0x64
 8003536:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800353a:	460b      	mov	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	d033      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800354a:	d015      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800354c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003550:	d80e      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d012      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800355a:	d109      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800355c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003560:	3308      	adds	r3, #8
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fbd6 	bl	8003d14 <RCCEx_PLL2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800356e:	e006      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003576:	e002      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800357c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800357e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003586:	4b3e      	ldr	r3, [pc, #248]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003588:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800358c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003596:	4a3a      	ldr	r2, [pc, #232]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003598:	430b      	orrs	r3, r1
 800359a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800359e:	e003      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035a4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	2100      	movs	r1, #0
 80035b2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80035be:	460b      	mov	r3, r1
 80035c0:	4313      	orrs	r3, r2
 80035c2:	d00e      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80035c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80035ce:	61d3      	str	r3, [r2, #28]
 80035d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035d2:	69d9      	ldr	r1, [r3, #28]
 80035d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035dc:	4a28      	ldr	r2, [pc, #160]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035de:	430b      	orrs	r3, r1
 80035e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80035ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f0:	2300      	movs	r3, #0
 80035f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80035f4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80035f8:	460b      	mov	r3, r1
 80035fa:	4313      	orrs	r3, r2
 80035fc:	d046      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80035fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003604:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003608:	d021      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800360a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800360e:	d81a      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003614:	d01d      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361a:	d814      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800361c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003620:	d019      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003626:	d80e      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d016      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 800362c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003630:	d109      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003636:	3308      	adds	r3, #8
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fb6b 	bl	8003d14 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003644:	e00a      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800364e:	bf00      	nop
 8003650:	e004      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800365a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10f      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003666:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800366a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800366e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	4a02      	ldr	r2, [pc, #8]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003676:	430b      	orrs	r3, r1
 8003678:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800367e:	bf00      	nop
 8003680:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003688:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800368c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800369a:	2300      	movs	r3, #0
 800369c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800369e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d043      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80036a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80036b2:	d021      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80036b4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80036b8:	d81a      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80036ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036be:	d01d      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x630>
 80036c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c4:	d814      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80036c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036ca:	d019      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80036cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036d0:	d80e      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80036d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036da:	d109      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e0:	3308      	adds	r3, #8
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fb16 	bl	8003d14 <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80036ee:	e00a      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036f6:	e006      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80036f8:	bf00      	nop
 80036fa:	e004      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80036fc:	bf00      	nop
 80036fe:	e002      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800370e:	4bb6      	ldr	r3, [pc, #728]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003710:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003714:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	4ab2      	ldr	r2, [pc, #712]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003720:	430b      	orrs	r3, r1
 8003722:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003726:	e003      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800372c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003730:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800373c:	643b      	str	r3, [r7, #64]	@ 0x40
 800373e:	2300      	movs	r3, #0
 8003740:	647b      	str	r3, [r7, #68]	@ 0x44
 8003742:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	d030      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800374c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003752:	2b05      	cmp	r3, #5
 8003754:	d80f      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003756:	2b03      	cmp	r3, #3
 8003758:	d211      	bcs.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800375a:	2b01      	cmp	r3, #1
 800375c:	d911      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800375e:	2b02      	cmp	r3, #2
 8003760:	d109      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003762:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003766:	3308      	adds	r3, #8
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fad3 	bl	8003d14 <RCCEx_PLL2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800377c:	e002      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003784:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10c      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800378c:	4b96      	ldr	r3, [pc, #600]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800378e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003792:	f023 0107 	bic.w	r1, r3, #7
 8003796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800379a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800379c:	4a92      	ldr	r2, [pc, #584]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800379e:	430b      	orrs	r3, r1
 80037a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037aa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80037ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	2100      	movs	r1, #0
 80037b8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d022      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80037ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d005      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037de:	e002      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80037e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80037ee:	4b7e      	ldr	r3, [pc, #504]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037f4:	f023 0108 	bic.w	r1, r3, #8
 80037f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037fe:	4a7a      	ldr	r2, [pc, #488]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003800:	430b      	orrs	r3, r1
 8003802:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003806:	e003      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800380c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003810:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800381c:	633b      	str	r3, [r7, #48]	@ 0x30
 800381e:	2300      	movs	r3, #0
 8003820:	637b      	str	r3, [r7, #52]	@ 0x34
 8003822:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	f000 80b0 	beq.w	800398e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800382e:	4b6f      	ldr	r3, [pc, #444]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	4a6e      	ldr	r2, [pc, #440]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800383a:	f7fd fbb3 	bl	8000fa4 <HAL_GetTick>
 800383e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003842:	e00b      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003844:	f7fd fbae 	bl	8000fa4 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d903      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800385a:	e005      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800385c:	4b63      	ldr	r3, [pc, #396]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ed      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003868:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 808a 	bne.w	8003986 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003872:	4b5d      	ldr	r3, [pc, #372]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d022      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800388c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800388e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003892:	429a      	cmp	r2, r3
 8003894:	d01b      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003896:	4b54      	ldr	r3, [pc, #336]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800389c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a4:	4b50      	ldr	r3, [pc, #320]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038aa:	4a4f      	ldr	r2, [pc, #316]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b4:	4b4c      	ldr	r3, [pc, #304]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ba:	4a4b      	ldr	r2, [pc, #300]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c4:	4a48      	ldr	r2, [pc, #288]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d019      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd fb63 	bl	8000fa4 <HAL_GetTick>
 80038de:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	e00d      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fd fb5e 	bl	8000fa4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d903      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80038fe:	e006      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003900:	4b39      	ldr	r3, [pc, #228]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0ea      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 800390e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d132      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003916:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800391a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800391c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003924:	d10f      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003926:	4b30      	ldr	r3, [pc, #192]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800392e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800393a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800393e:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003940:	430b      	orrs	r3, r1
 8003942:	61d3      	str	r3, [r2, #28]
 8003944:	e005      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003946:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800394c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003950:	61d3      	str	r3, [r2, #28]
 8003952:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003958:	4a23      	ldr	r2, [pc, #140]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800395a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003962:	4b21      	ldr	r3, [pc, #132]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003964:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003968:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800396c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003974:	430b      	orrs	r3, r1
 8003976:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800397a:	e008      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800397c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003980:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800398a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800398e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d038      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80039aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b0:	2b30      	cmp	r3, #48	@ 0x30
 80039b2:	d014      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x912>
 80039b4:	2b30      	cmp	r3, #48	@ 0x30
 80039b6:	d80e      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d012      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d80a      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d015      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d106      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b07      	ldr	r3, [pc, #28]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	4a06      	ldr	r2, [pc, #24]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80039d4:	e00d      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039dc:	e009      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80039de:	bf00      	nop
 80039e0:	e007      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80039e2:	bf00      	nop
 80039e4:	e005      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 80039e6:	bf00      	nop
 80039e8:	44020c00 	.word	0x44020c00
 80039ec:	44020800 	.word	0x44020800
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80039fa:	4bb5      	ldr	r3, [pc, #724]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0a:	49b1      	ldr	r1, [pc, #708]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a18:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d03c      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003a38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d81d      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003a42:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a5d 	.word	0x08003a5d
 8003a4c:	08003a6b 	.word	0x08003a6b
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a87 	.word	0x08003a87
 8003a58:	08003a87 	.word	0x08003a87
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b9c      	ldr	r3, [pc, #624]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a60:	4a9b      	ldr	r2, [pc, #620]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a66:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a68:	e00e      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a6e:	3308      	adds	r3, #8
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f94f 	bl	8003d14 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e004      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003a90:	4b8f      	ldr	r3, [pc, #572]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a96:	f023 0207 	bic.w	r2, r3, #7
 8003a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa0:	498b      	ldr	r1, [pc, #556]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003aae:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d03c      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003ace:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d01f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d819      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003adc:	2b18      	cmp	r3, #24
 8003ade:	d01d      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003ae0:	2b18      	cmp	r3, #24
 8003ae2:	d815      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d007      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003aec:	e010      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aee:	4b78      	ldr	r3, [pc, #480]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af2:	4a77      	ldr	r2, [pc, #476]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003afa:	e010      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b00:	3308      	adds	r3, #8
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f906 	bl	8003d14 <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003b0e:	e006      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b16:	e002      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003b26:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b2c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4966      	ldr	r1, [pc, #408]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003b3e:	e003      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b44:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003b48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d03e      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b74:	d819      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b78:	d01d      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b7c:	d815      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003b82:	2b40      	cmp	r3, #64	@ 0x40
 8003b84:	d007      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003b86:	e010      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4b51      	ldr	r3, [pc, #324]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	4a50      	ldr	r2, [pc, #320]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003b94:	e010      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f8b9 	bl	8003d14 <RCCEx_PLL2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10c      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003bc0:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bc6:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd0:	493f      	ldr	r1, [pc, #252]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bde:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	2100      	movs	r1, #0
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	d038      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c08:	d00e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0e:	d815      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c18:	d110      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c24:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c26:	e00e      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f870 	bl	8003d14 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5e:	491c      	ldr	r1, [pc, #112]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003c66:	e003      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c6c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	2100      	movs	r1, #0
 8003c7a:	6039      	str	r1, [r7, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d039      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003c8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c92:	2b30      	cmp	r3, #48	@ 0x30
 8003c94:	d01e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003c96:	2b30      	cmp	r3, #48	@ 0x30
 8003c98:	d815      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d002      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d007      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003ca2:	e010      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cb0:	e011      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f82b 	bl	8003d14 <RCCEx_PLL2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003cc4:	e007      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ccc:	e003      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003cce:	bf00      	nop
 8003cd0:	44020c00 	.word	0x44020c00
        break;
 8003cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ce0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ce4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cfc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003d00:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	37a8      	adds	r7, #168	@ 0xa8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0e:	bf00      	nop
 8003d10:	44020c00 	.word	0x44020c00

08003d14 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003d1c:	4b48      	ldr	r3, [pc, #288]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a47      	ldr	r2, [pc, #284]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003d22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d28:	f7fd f93c 	bl	8000fa4 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d30:	f7fd f938 	bl	8000fa4 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e07a      	b.n	8003e38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d42:	4b3f      	ldr	r3, [pc, #252]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6811      	ldr	r1, [r2, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6852      	ldr	r2, [r2, #4]
 8003d62:	0212      	lsls	r2, r2, #8
 8003d64:	430a      	orrs	r2, r1
 8003d66:	4936      	ldr	r1, [pc, #216]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	025b      	lsls	r3, r3, #9
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d9c:	4928      	ldr	r1, [pc, #160]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003da2:	4b27      	ldr	r3, [pc, #156]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	f023 020c 	bic.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	4924      	ldr	r1, [pc, #144]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003db4:	4b22      	ldr	r3, [pc, #136]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	f023 0220 	bic.w	r2, r3, #32
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	491f      	ldr	r1, [pc, #124]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	491c      	ldr	r1, [pc, #112]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	4a19      	ldr	r2, [pc, #100]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003dda:	f023 0310 	bic.w	r3, r3, #16
 8003dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003de0:	4b17      	ldr	r3, [pc, #92]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003de8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6a12      	ldr	r2, [r2, #32]
 8003df0:	00d2      	lsls	r2, r2, #3
 8003df2:	4913      	ldr	r1, [pc, #76]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8003df8:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	4a10      	ldr	r2, [pc, #64]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003dfe:	f043 0310 	orr.w	r3, r3, #16
 8003e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8003e04:	4b0e      	ldr	r3, [pc, #56]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003e0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e10:	f7fd f8c8 	bl	8000fa4 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e16:	e008      	b.n	8003e2a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e18:	f7fd f8c4 	bl	8000fa4 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e006      	b.n	8003e38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <RCCEx_PLL2_Config+0x12c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0

}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	44020c00 	.word	0x44020c00

08003e44 <memset>:
 8003e44:	4402      	add	r2, r0
 8003e46:	4603      	mov	r3, r0
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d100      	bne.n	8003e4e <memset+0xa>
 8003e4c:	4770      	bx	lr
 8003e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e52:	e7f9      	b.n	8003e48 <memset+0x4>

08003e54 <__libc_init_array>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	4d0d      	ldr	r5, [pc, #52]	@ (8003e8c <__libc_init_array+0x38>)
 8003e58:	2600      	movs	r6, #0
 8003e5a:	4c0d      	ldr	r4, [pc, #52]	@ (8003e90 <__libc_init_array+0x3c>)
 8003e5c:	1b64      	subs	r4, r4, r5
 8003e5e:	10a4      	asrs	r4, r4, #2
 8003e60:	42a6      	cmp	r6, r4
 8003e62:	d109      	bne.n	8003e78 <__libc_init_array+0x24>
 8003e64:	4d0b      	ldr	r5, [pc, #44]	@ (8003e94 <__libc_init_array+0x40>)
 8003e66:	2600      	movs	r6, #0
 8003e68:	4c0b      	ldr	r4, [pc, #44]	@ (8003e98 <__libc_init_array+0x44>)
 8003e6a:	f000 f817 	bl	8003e9c <_init>
 8003e6e:	1b64      	subs	r4, r4, r5
 8003e70:	10a4      	asrs	r4, r4, #2
 8003e72:	42a6      	cmp	r6, r4
 8003e74:	d105      	bne.n	8003e82 <__libc_init_array+0x2e>
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	4798      	blx	r3
 8003e80:	e7ee      	b.n	8003e60 <__libc_init_array+0xc>
 8003e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e86:	3601      	adds	r6, #1
 8003e88:	4798      	blx	r3
 8003e8a:	e7f2      	b.n	8003e72 <__libc_init_array+0x1e>
 8003e8c:	08003ee4 	.word	0x08003ee4
 8003e90:	08003ee4 	.word	0x08003ee4
 8003e94:	08003ee4 	.word	0x08003ee4
 8003e98:	08003ee8 	.word	0x08003ee8

08003e9c <_init>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	bf00      	nop
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr

08003ea8 <_fini>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr
