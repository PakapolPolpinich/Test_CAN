
10ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a9c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001cf4  08001cf4  00002cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d04  08001d04  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d04  08001d04  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d04  08001d04  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d04  08001d04  00002d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d08  08001d08  00002d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d0c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d18  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d18  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000599e  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e9d  00000000  00000000  000089e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000510  00000000  00000000  00009880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003ad  00000000  00000000  00009d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db7c  00000000  00000000  0000a13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ee4  00000000  00000000  00027cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba37f  00000000  00000000  0002db9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7f1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012cc  00000000  00000000  000e7f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e922c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08001cdc 	.word	0x08001cdc

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08001cdc 	.word	0x08001cdc

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 f9d0 	bl	8000640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f804 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 f864 	bl	8000370 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <main+0x10>

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b09c      	sub	sp, #112	@ 0x70
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	2250      	movs	r2, #80	@ 0x50
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fce2 	bl	8001c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 0308 	add.w	r3, r7, #8
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
 80002d0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002d2:	4b25      	ldr	r3, [pc, #148]	@ (8000368 <SystemClock_Config+0xbc>)
 80002d4:	691b      	ldr	r3, [r3, #16]
 80002d6:	4a24      	ldr	r2, [pc, #144]	@ (8000368 <SystemClock_Config+0xbc>)
 80002d8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002dc:	6113      	str	r3, [r2, #16]
 80002de:	4b22      	ldr	r3, [pc, #136]	@ (8000368 <SystemClock_Config+0xbc>)
 80002e0:	691b      	ldr	r3, [r3, #16]
 80002e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80002ea:	bf00      	nop
 80002ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000368 <SystemClock_Config+0xbc>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	2b08      	cmp	r3, #8
 80002f6:	d1f9      	bne.n	80002ec <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f8:	2302      	movs	r3, #2
 80002fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	2340      	movs	r3, #64	@ 0x40
 8000306:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000308:	2300      	movs	r3, #0
 800030a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	f107 0320 	add.w	r3, r7, #32
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fd7f 	bl	8000e14 <HAL_RCC_OscConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800031c:	f000 f8af 	bl	800047e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	231f      	movs	r3, #31
 8000322:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	2103      	movs	r1, #3
 800033e:	4618      	mov	r0, r3
 8000340:	f001 f9a0 	bl	8001684 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800034a:	f000 f898 	bl	800047e <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 800034e:	4b07      	ldr	r3, [pc, #28]	@ (800036c <SystemClock_Config+0xc0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000356:	4a05      	ldr	r2, [pc, #20]	@ (800036c <SystemClock_Config+0xc0>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6013      	str	r3, [r2, #0]
}
 800035e:	bf00      	nop
 8000360:	3770      	adds	r7, #112	@ 0x70
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	44020800 	.word	0x44020800
 800036c:	40022000 	.word	0x40022000

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	4b33      	ldr	r3, [pc, #204]	@ (8000454 <MX_GPIO_Init+0xe4>)
 8000388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800038c:	4a31      	ldr	r2, [pc, #196]	@ (8000454 <MX_GPIO_Init+0xe4>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000396:	4b2f      	ldr	r3, [pc, #188]	@ (8000454 <MX_GPIO_Init+0xe4>)
 8000398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000454 <MX_GPIO_Init+0xe4>)
 80003a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000454 <MX_GPIO_Init+0xe4>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003b4:	4b27      	ldr	r3, [pc, #156]	@ (8000454 <MX_GPIO_Init+0xe4>)
 80003b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	4824      	ldr	r0, [pc, #144]	@ (8000458 <MX_GPIO_Init+0xe8>)
 80003c8:	f000 fcda 	bl	8000d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 80003cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d2:	4b22      	ldr	r3, [pc, #136]	@ (800045c <MX_GPIO_Init+0xec>)
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	4619      	mov	r1, r3
 80003e0:	481f      	ldr	r0, [pc, #124]	@ (8000460 <MX_GPIO_Init+0xf0>)
 80003e2:	f000 fb7b 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_TX_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80003e6:	2318      	movs	r3, #24
 80003e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ea:	2302      	movs	r3, #2
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 80003f6:	230d      	movs	r3, #13
 80003f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	4619      	mov	r1, r3
 8000400:	4815      	ldr	r0, [pc, #84]	@ (8000458 <MX_GPIO_Init+0xe8>)
 8000402:	f000 fb6b 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000406:	2320      	movs	r3, #32
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	4619      	mov	r1, r3
 800041c:	480e      	ldr	r0, [pc, #56]	@ (8000458 <MX_GPIO_Init+0xe8>)
 800041e:	f000 fb5d 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_GPIO_Init+0xf4>)
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800042c:	2301      	movs	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	4619      	mov	r1, r3
 8000436:	4808      	ldr	r0, [pc, #32]	@ (8000458 <MX_GPIO_Init+0xe8>)
 8000438:	f000 fb50 	bl	8000adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	2015      	movs	r0, #21
 8000442:	f000 fa73 	bl	800092c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000446:	2015      	movs	r0, #21
 8000448:	f000 fa8a 	bl	8000960 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	44020c00 	.word	0x44020c00
 8000458:	42020000 	.word	0x42020000
 800045c:	10110000 	.word	0x10110000
 8000460:	42020800 	.word	0x42020800
 8000464:	10210000 	.word	0x10210000

08000468 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_10) {
		//mode = ID_VS_ID;
	}
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000482:	b672      	cpsid	i
}
 8000484:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <Error_Handler+0x8>

0800048a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <NMI_Handler+0x4>

080004a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <MemManage_Handler+0x4>

080004b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <BusFault_Handler+0x4>

080004b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <UsageFault_Handler+0x4>

080004c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ee:	f000 f945 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80004fa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80004fe:	f000 fc57 	bl	8000db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800050e:	4b30      	ldr	r3, [pc, #192]	@ (80005d0 <SystemInit+0xc8>)
 8000510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000514:	4a2e      	ldr	r2, [pc, #184]	@ (80005d0 <SystemInit+0xc8>)
 8000516:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800051a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800051e:	4b2d      	ldr	r3, [pc, #180]	@ (80005d4 <SystemInit+0xcc>)
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000524:	4b2b      	ldr	r3, [pc, #172]	@ (80005d4 <SystemInit+0xcc>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800052a:	4b2a      	ldr	r3, [pc, #168]	@ (80005d4 <SystemInit+0xcc>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <SystemInit+0xcc>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4927      	ldr	r1, [pc, #156]	@ (80005d4 <SystemInit+0xcc>)
 8000536:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <SystemInit+0xd0>)
 8000538:	4013      	ands	r3, r2
 800053a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <SystemInit+0xcc>)
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000542:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <SystemInit+0xcc>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000548:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <SystemInit+0xcc>)
 800054a:	4a24      	ldr	r2, [pc, #144]	@ (80005dc <SystemInit+0xd4>)
 800054c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <SystemInit+0xcc>)
 8000550:	2200      	movs	r2, #0
 8000552:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000554:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <SystemInit+0xcc>)
 8000556:	4a21      	ldr	r2, [pc, #132]	@ (80005dc <SystemInit+0xd4>)
 8000558:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800055a:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <SystemInit+0xcc>)
 800055c:	2200      	movs	r2, #0
 800055e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <SystemInit+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <SystemInit+0xcc>)
 8000566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800056a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800056c:	4b19      	ldr	r3, [pc, #100]	@ (80005d4 <SystemInit+0xcc>)
 800056e:	2200      	movs	r2, #0
 8000570:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000572:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <SystemInit+0xc8>)
 8000574:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000578:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <SystemInit+0xd8>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000582:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800058a:	d003      	beq.n	8000594 <SystemInit+0x8c>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000592:	d117      	bne.n	80005c4 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <SystemInit+0xd8>)
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d005      	beq.n	80005ac <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <SystemInit+0xd8>)
 80005a2:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <SystemInit+0xdc>)
 80005a4:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <SystemInit+0xd8>)
 80005a8:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <SystemInit+0xe0>)
 80005aa:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <SystemInit+0xd8>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <SystemInit+0xd8>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <SystemInit+0xd8>)
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	4a08      	ldr	r2, [pc, #32]	@ (80005e0 <SystemInit+0xd8>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	61d3      	str	r3, [r2, #28]
  }
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00
 80005d4:	44020c00 	.word	0x44020c00
 80005d8:	fae2eae3 	.word	0xfae2eae3
 80005dc:	01010280 	.word	0x01010280
 80005e0:	40022000 	.word	0x40022000
 80005e4:	08192a3b 	.word	0x08192a3b
 80005e8:	4c5d6e7f 	.word	0x4c5d6e7f

080005ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80005ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005f2:	e003      	b.n	80005fc <LoopCopyDataInit>

080005f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005fa:	3104      	adds	r1, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <LoopForever+0xa>)
	ldr	r3, =_edata
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000600:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000602:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000604:	d3f6      	bcc.n	80005f4 <CopyDataInit>
	ldr	r2, =_sbss
 8000606:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000608:	e002      	b.n	8000610 <LoopFillZerobss>

0800060a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800060a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800060c:	f842 3b04 	str.w	r3, [r2], #4

08000610 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <LoopForever+0x16>)
	cmp	r2, r3
 8000612:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000614:	d3f9      	bcc.n	800060a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000616:	f7ff ff77 	bl	8000508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061a:	f001 fb3b 	bl	8001c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800061e:	f7ff fe3b 	bl	8000298 <main>

08000622 <LoopForever>:

LoopForever:
    b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000624:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000628:	08001d0c 	.word	0x08001d0c
	ldr	r0, =_sdata
 800062c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000630:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000634:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000638:	2000002c 	.word	0x2000002c

0800063c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_IRQHandler>
	...

08000640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f966 	bl	8000916 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800064a:	f001 f9d3 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 800064e:	4602      	mov	r2, r0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_Init+0x44>)
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	490b      	ldr	r1, [pc, #44]	@ (8000688 <HAL_Init+0x48>)
 800065a:	5ccb      	ldrb	r3, [r1, r3]
 800065c:	fa22 f303 	lsr.w	r3, r2, r3
 8000660:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <HAL_Init+0x4c>)
 8000662:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000664:	2004      	movs	r0, #4
 8000666:	f000 f9ab 	bl	80009c0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066a:	200f      	movs	r0, #15
 800066c:	f000 f810 	bl	8000690 <HAL_InitTick>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e002      	b.n	8000680 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800067a:	f7ff ff06 	bl	800048a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	bd80      	pop	{r7, pc}
 8000684:	44020c00 	.word	0x44020c00
 8000688:	08001cf4 	.word	0x08001cf4
 800068c:	20000000 	.word	0x20000000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800069c:	4b33      	ldr	r3, [pc, #204]	@ (800076c <HAL_InitTick+0xdc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e05c      	b.n	8000762 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80006a8:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <HAL_InitTick+0xe0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d10c      	bne.n	80006ce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <HAL_InitTick+0xe4>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <HAL_InitTick+0xdc>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e037      	b.n	800073e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80006ce:	f000 f9cf 	bl	8000a70 <HAL_SYSTICK_GetCLKSourceConfig>
 80006d2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d023      	beq.n	8000722 <HAL_InitTick+0x92>
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d82d      	bhi.n	800073c <HAL_InitTick+0xac>
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_InitTick+0x5e>
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d00d      	beq.n	8000708 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80006ec:	e026      	b.n	800073c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80006ee:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <HAL_InitTick+0xe4>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <HAL_InitTick+0xdc>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80006fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000700:	fbb2 f3f3 	udiv	r3, r2, r3
 8000704:	60fb      	str	r3, [r7, #12]
        break;
 8000706:	e01a      	b.n	800073e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <HAL_InitTick+0xdc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	fbb3 f3f2 	udiv	r3, r3, r2
 8000716:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	60fb      	str	r3, [r7, #12]
        break;
 8000720:	e00d      	b.n	800073e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_InitTick+0xdc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000730:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000734:	fbb2 f3f3 	udiv	r3, r2, r3
 8000738:	60fb      	str	r3, [r7, #12]
        break;
 800073a:	e000      	b.n	800073e <HAL_InitTick+0xae>
        break;
 800073c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f000 f91c 	bl	800097c <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e009      	b.n	8000762 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074e:	2200      	movs	r2, #0
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	f04f 30ff 	mov.w	r0, #4294967295
 8000756:	f000 f8e9 	bl	800092c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800075a:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_InitTick+0xe8>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008
 8000770:	e000e010 	.word	0xe000e010
 8000774:	20000000 	.word	0x20000000
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000028 	.word	0x20000028

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028

080007bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ee:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	60d3      	str	r3, [r2, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <__NVIC_GetPriorityGrouping+0x18>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0307 	and.w	r3, r3, #7
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800082a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800082e:	2b00      	cmp	r3, #0
 8000830:	db0b      	blt.n	800084a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	f003 021f 	and.w	r2, r3, #31
 8000838:	4907      	ldr	r1, [pc, #28]	@ (8000858 <__NVIC_EnableIRQ+0x38>)
 800083a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	2001      	movs	r0, #1
 8000842:	fa00 f202 	lsl.w	r2, r0, r2
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	@ (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	@ (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	@ 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	@ 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff4c 	bl	80007bc <__NVIC_SetPriorityGrouping>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800093a:	f7ff ff63 	bl	8000804 <__NVIC_GetPriorityGrouping>
 800093e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	6978      	ldr	r0, [r7, #20]
 8000946:	f7ff ffb3 	bl	80008b0 <NVIC_EncodePriority>
 800094a:	4602      	mov	r2, r0
 800094c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff82 	bl	800085c <__NVIC_SetPriority>
}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff56 	bl	8000820 <__NVIC_EnableIRQ>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800098c:	d301      	bcc.n	8000992 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800098e:	2301      	movs	r3, #1
 8000990:	e00d      	b.n	80009ae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_SYSTICK_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_SYSTICK_Config+0x40>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_SYSTICK_Config+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <HAL_SYSTICK_Config+0x40>)
 80009a6:	f043 0303 	orr.w	r3, r3, #3
 80009aa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d844      	bhi.n	8000a58 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80009ce:	a201      	add	r2, pc, #4	@ (adr r2, 80009d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009f7 	.word	0x080009f7
 80009d8:	08000a15 	.word	0x08000a15
 80009dc:	08000a37 	.word	0x08000a37
 80009e0:	08000a59 	.word	0x08000a59
 80009e4:	080009e9 	.word	0x080009e9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6013      	str	r3, [r2, #0]
      break;
 80009f4:	e031      	b.n	8000a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80009fc:	f023 0304 	bic.w	r3, r3, #4
 8000a00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000a08:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a0a:	f023 030c 	bic.w	r3, r3, #12
 8000a0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000a12:	e022      	b.n	8000a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a1a:	f023 0304 	bic.w	r3, r3, #4
 8000a1e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000a26:	f023 030c 	bic.w	r3, r3, #12
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000a34:	e011      	b.n	8000a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a3c:	f023 0304 	bic.w	r3, r3, #4
 8000a40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000a48:	f023 030c 	bic.w	r3, r3, #12
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000a56:	e000      	b.n	8000a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000a58:	bf00      	nop
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010
 8000a6c:	44020c00 	.word	0x44020c00

08000a70 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000a82:	2304      	movs	r3, #4
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	e01e      	b.n	8000ac6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000a8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000a8e:	f003 030c 	and.w	r3, r3, #12
 8000a92:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d00f      	beq.n	8000aba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2b08      	cmp	r3, #8
 8000a9e:	d80f      	bhi.n	8000ac0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d003      	beq.n	8000ab4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000aac:	e008      	b.n	8000ac0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
        break;
 8000ab2:	e008      	b.n	8000ac6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
        break;
 8000ab8:	e005      	b.n	8000ac6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000aba:	2302      	movs	r3, #2
 8000abc:	607b      	str	r3, [r7, #4]
        break;
 8000abe:	e002      	b.n	8000ac6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
        break;
 8000ac4:	bf00      	nop
    }
  }
  return systick_source;
 8000ac6:	687b      	ldr	r3, [r7, #4]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e010 	.word	0xe000e010
 8000ad8:	44020c00 	.word	0x44020c00

08000adc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000aea:	e136      	b.n	8000d5a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8128 	beq.w	8000d54 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x38>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b12      	cmp	r3, #18
 8000b12:	d125      	bne.n	8000b60 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3208      	adds	r2, #8
 8000b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b20:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4013      	ands	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	f003 020f 	and.w	r2, r3, #15
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	08da      	lsrs	r2, r3, #3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3208      	adds	r2, #8
 8000b5a:	6979      	ldr	r1, [r7, #20]
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4013      	ands	r3, r2
 8000b76:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0203 	and.w	r2, r3, #3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d00b      	beq.n	8000bb4 <HAL_GPIO_Init+0xd8>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d007      	beq.n	8000bb4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba8:	2b11      	cmp	r3, #17
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b12      	cmp	r3, #18
 8000bb2:	d130      	bne.n	8000c16 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bea:	2201      	movs	r2, #1
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	f003 0201 	and.w	r2, r3, #1
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d017      	beq.n	8000c4e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	4013      	ands	r3, r2
 8000c34:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d07c      	beq.n	8000d54 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000c5a:	4a47      	ldr	r2, [pc, #284]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3318      	adds	r3, #24
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0a9a      	lsrs	r2, r3, #10
 8000c82:	4b3e      	ldr	r3, [pc, #248]	@ (8000d7c <HAL_GPIO_Init+0x2a0>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	f002 0203 	and.w	r2, r2, #3
 8000c8c:	00d2      	lsls	r2, r2, #3
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000c96:	4938      	ldr	r1, [pc, #224]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ca4:	4b34      	ldr	r3, [pc, #208]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000cf2:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000cfe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	4013      	ands	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000d1e:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d2c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_GPIO_Init+0x29c>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	3301      	adds	r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f47f aec1 	bne.w	8000aec <HAL_GPIO_Init+0x10>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	44022000 	.word	0x44022000
 8000d7c:	002f7f7f 	.word	0x002f7f7f

08000d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d90:	787b      	ldrb	r3, [r7, #1]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f814 	bl	8000dfc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000de0:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb3d 	bl	8000468 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	44022000 	.word	0x44022000

08000dfc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f000 bc28 	b.w	8001678 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e28:	4b94      	ldr	r3, [pc, #592]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	f003 0318 	and.w	r3, r3, #24
 8000e30:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8000e32:	4b92      	ldr	r3, [pc, #584]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d05b      	beq.n	8000f00 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d005      	beq.n	8000e5a <HAL_RCC_OscConfig+0x46>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	2b18      	cmp	r3, #24
 8000e52:	d114      	bne.n	8000e7e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d111      	bne.n	8000e7e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f000 bc08 	b.w	8001678 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000e68:	4b84      	ldr	r3, [pc, #528]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	4981      	ldr	r1, [pc, #516]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000e7c:	e040      	b.n	8000f00 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d023      	beq.n	8000ece <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000e86:	4b7d      	ldr	r3, [pc, #500]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e92:	f7ff fc87 	bl	80007a4 <HAL_GetTick>
 8000e96:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fc83 	bl	80007a4 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e3e5      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000eac:	4b73      	ldr	r3, [pc, #460]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000eb8:	4b70      	ldr	r3, [pc, #448]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	496d      	ldr	r1, [pc, #436]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	618b      	str	r3, [r1, #24]
 8000ecc:	e018      	b.n	8000f00 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000ece:	4b6b      	ldr	r3, [pc, #428]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eda:	f7ff fc63 	bl	80007a4 <HAL_GetTick>
 8000ede:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fc5f 	bl	80007a4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e3c1      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000ef4:	4b61      	ldr	r3, [pc, #388]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f0      	bne.n	8000ee2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a0 	beq.w	800104e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d005      	beq.n	8000f20 <HAL_RCC_OscConfig+0x10c>
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	2b18      	cmp	r3, #24
 8000f18:	d109      	bne.n	8000f2e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d106      	bne.n	8000f2e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 8092 	bne.w	800104e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e3a4      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x132>
 8000f38:	4b50      	ldr	r3, [pc, #320]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e058      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1e4>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d112      	bne.n	8000f74 <HAL_RCC_OscConfig+0x160>
 8000f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a4a      	ldr	r2, [pc, #296]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b48      	ldr	r3, [pc, #288]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a47      	ldr	r2, [pc, #284]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b45      	ldr	r3, [pc, #276]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a44      	ldr	r2, [pc, #272]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e041      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1e4>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f7c:	d112      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x190>
 8000f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a3e      	ldr	r2, [pc, #248]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f90:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b39      	ldr	r3, [pc, #228]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a38      	ldr	r2, [pc, #224]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e029      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1e4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8000fac:	d112      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1c0>
 8000fae:	4b33      	ldr	r3, [pc, #204]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a32      	ldr	r2, [pc, #200]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b30      	ldr	r3, [pc, #192]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a2c      	ldr	r2, [pc, #176]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e011      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1e4>
 8000fd4:	4b29      	ldr	r3, [pc, #164]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a28      	ldr	r2, [pc, #160]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b26      	ldr	r3, [pc, #152]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a25      	ldr	r2, [pc, #148]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b23      	ldr	r3, [pc, #140]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a22      	ldr	r2, [pc, #136]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8000ff2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d013      	beq.n	8001028 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fbd0 	bl	80007a4 <HAL_GetTick>
 8001004:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001008:	f7ff fbcc 	bl	80007a4 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	@ 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e32e      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x1f4>
 8001026:	e012      	b.n	800104e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001028:	f7ff fbbc 	bl	80007a4 <HAL_GetTick>
 800102c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001030:	f7ff fbb8 	bl	80007a4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	@ 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e31a      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_RCC_OscConfig+0x268>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 809a 	beq.w	8001190 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x25a>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b18      	cmp	r3, #24
 8001066:	d149      	bne.n	80010fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d146      	bne.n	80010fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d104      	bne.n	8001080 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e2fe      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
 800107a:	bf00      	nop
 800107c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d11c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001086:	4b9a      	ldr	r3, [pc, #616]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0218 	and.w	r2, r3, #24
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	429a      	cmp	r2, r3
 8001094:	d014      	beq.n	80010c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001096:	4b96      	ldr	r3, [pc, #600]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 0218 	bic.w	r2, r3, #24
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	4993      	ldr	r1, [pc, #588]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80010a8:	f000 fdd0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010ac:	4b91      	ldr	r3, [pc, #580]	@ (80012f4 <HAL_RCC_OscConfig+0x4e0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff faed 	bl	8000690 <HAL_InitTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e2db      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fb70 	bl	80007a4 <HAL_GetTick>
 80010c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fb6c 	bl	80007a4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e2ce      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010da:	4b85      	ldr	r3, [pc, #532]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80010e6:	4b82      	ldr	r3, [pc, #520]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	497e      	ldr	r1, [pc, #504]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80010fa:	e049      	b.n	8001190 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d02c      	beq.n	800115e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001104:	4b7a      	ldr	r3, [pc, #488]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 0218 	bic.w	r2, r3, #24
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4977      	ldr	r1, [pc, #476]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001116:	4b76      	ldr	r3, [pc, #472]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001122:	f7ff fb3f 	bl	80007a4 <HAL_GetTick>
 8001126:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800112a:	f7ff fb3b 	bl	80007a4 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e29d      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800113c:	4b6c      	ldr	r3, [pc, #432]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001148:	4b69      	ldr	r3, [pc, #420]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	4966      	ldr	r1, [pc, #408]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001158:	4313      	orrs	r3, r2
 800115a:	610b      	str	r3, [r1, #16]
 800115c:	e018      	b.n	8001190 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115e:	4b64      	ldr	r3, [pc, #400]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a63      	ldr	r2, [pc, #396]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116a:	f7ff fb1b 	bl	80007a4 <HAL_GetTick>
 800116e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001172:	f7ff fb17 	bl	80007a4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e279      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001184:	4b5a      	ldr	r3, [pc, #360]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03c      	beq.n	8001216 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01c      	beq.n	80011de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a4:	4b52      	ldr	r3, [pc, #328]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80011a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011aa:	4a51      	ldr	r2, [pc, #324]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80011ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b4:	f7ff faf6 	bl	80007a4 <HAL_GetTick>
 80011b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80011bc:	f7ff faf2 	bl	80007a4 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e254      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80011ce:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80011d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0ef      	beq.n	80011bc <HAL_RCC_OscConfig+0x3a8>
 80011dc:	e01b      	b.n	8001216 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011de:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80011e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011e4:	4a42      	ldr	r2, [pc, #264]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80011e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80011ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ee:	f7ff fad9 	bl	80007a4 <HAL_GetTick>
 80011f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80011f6:	f7ff fad5 	bl	80007a4 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e237      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001208:	4b39      	ldr	r3, [pc, #228]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 800120a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800120e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1ef      	bne.n	80011f6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 80d2 	beq.w	80013c8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001224:	4b34      	ldr	r3, [pc, #208]	@ (80012f8 <HAL_RCC_OscConfig+0x4e4>)
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d118      	bne.n	8001262 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001230:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <HAL_RCC_OscConfig+0x4e4>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	4a30      	ldr	r2, [pc, #192]	@ (80012f8 <HAL_RCC_OscConfig+0x4e4>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123c:	f7ff fab2 	bl	80007a4 <HAL_GetTick>
 8001240:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001244:	f7ff faae 	bl	80007a4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e210      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001256:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <HAL_RCC_OscConfig+0x4e4>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_RCC_OscConfig+0x468>
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 800126c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001270:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800127a:	e074      	b.n	8001366 <HAL_RCC_OscConfig+0x552>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d118      	bne.n	80012b6 <HAL_RCC_OscConfig+0x4a2>
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800128a:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 8001296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800129a:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 800129c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012ac:	f023 0304 	bic.w	r3, r3, #4
 80012b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012b4:	e057      	b.n	8001366 <HAL_RCC_OscConfig+0x552>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d11e      	bne.n	80012fc <HAL_RCC_OscConfig+0x4e8>
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012d4:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012e4:	4a02      	ldr	r2, [pc, #8]	@ (80012f0 <HAL_RCC_OscConfig+0x4dc>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ee:	e03a      	b.n	8001366 <HAL_RCC_OscConfig+0x552>
 80012f0:	44020c00 	.word	0x44020c00
 80012f4:	20000004 	.word	0x20000004
 80012f8:	44020800 	.word	0x44020800
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b85      	cmp	r3, #133	@ 0x85
 8001302:	d118      	bne.n	8001336 <HAL_RCC_OscConfig+0x522>
 8001304:	4ba2      	ldr	r3, [pc, #648]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800130a:	4aa1      	ldr	r2, [pc, #644]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001314:	4b9e      	ldr	r3, [pc, #632]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800131a:	4a9d      	ldr	r2, [pc, #628]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800131c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001320:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001324:	4b9a      	ldr	r3, [pc, #616]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800132a:	4a99      	ldr	r2, [pc, #612]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001334:	e017      	b.n	8001366 <HAL_RCC_OscConfig+0x552>
 8001336:	4b96      	ldr	r3, [pc, #600]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800133c:	4a94      	ldr	r2, [pc, #592]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001346:	4b92      	ldr	r3, [pc, #584]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800134c:	4a90      	ldr	r2, [pc, #576]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001356:	4b8e      	ldr	r3, [pc, #568]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800135c:	4a8c      	ldr	r2, [pc, #560]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800135e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001362:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d016      	beq.n	800139c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136e:	f7ff fa19 	bl	80007a4 <HAL_GetTick>
 8001372:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fa15 	bl	80007a4 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e175      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800138c:	4b80      	ldr	r3, [pc, #512]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800138e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0ed      	beq.n	8001376 <HAL_RCC_OscConfig+0x562>
 800139a:	e015      	b.n	80013c8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fa02 	bl	80007a4 <HAL_GetTick>
 80013a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff f9fe 	bl	80007a4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e15e      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ba:	4b75      	ldr	r3, [pc, #468]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80013bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ed      	bne.n	80013a4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d036      	beq.n	8001442 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d019      	beq.n	8001410 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80013e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff f9dc 	bl	80007a4 <HAL_GetTick>
 80013ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80013f0:	f7ff f9d8 	bl	80007a4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e13a      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001402:	4b63      	ldr	r3, [pc, #396]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5dc>
 800140e:	e018      	b.n	8001442 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001410:	4b5f      	ldr	r3, [pc, #380]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a5e      	ldr	r2, [pc, #376]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800141a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff f9c2 	bl	80007a4 <HAL_GetTick>
 8001420:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001424:	f7ff f9be 	bl	80007a4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e120      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001436:	4b56      	ldr	r3, [pc, #344]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8115 	beq.w	8001676 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b18      	cmp	r3, #24
 8001450:	f000 80af 	beq.w	80015b2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001458:	2b02      	cmp	r3, #2
 800145a:	f040 8086 	bne.w	800156a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800145e:	4b4c      	ldr	r3, [pc, #304]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a4b      	ldr	r2, [pc, #300]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001464:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff f99b 	bl	80007a4 <HAL_GetTick>
 800146e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001472:	f7ff f997 	bl	80007a4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0f9      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001484:	4b42      	ldr	r3, [pc, #264]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001490:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001494:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001498:	f023 0303 	bic.w	r3, r3, #3
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014a4:	0212      	lsls	r2, r2, #8
 80014a6:	430a      	orrs	r2, r1
 80014a8:	4939      	ldr	r1, [pc, #228]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014bc:	3b01      	subs	r3, #1
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c8:	3b01      	subs	r3, #1
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	3b01      	subs	r3, #1
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80014de:	492c      	ldr	r1, [pc, #176]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	4a29      	ldr	r2, [pc, #164]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80014ea:	f023 0310 	bic.w	r3, r3, #16
 80014ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	4a26      	ldr	r2, [pc, #152]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80014fa:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fe:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001506:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150a:	f023 020c 	bic.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	491f      	ldr	r1, [pc, #124]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800151a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151c:	f023 0220 	bic.w	r2, r3, #32
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001524:	491a      	ldr	r1, [pc, #104]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001526:	4313      	orrs	r3, r2
 8001528:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a15      	ldr	r2, [pc, #84]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800153c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff f92f 	bl	80007a4 <HAL_GetTick>
 8001546:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800154a:	f7ff f92b 	bl	80007a4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e08d      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x736>
 8001568:	e085      	b.n	8001676 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <HAL_RCC_OscConfig+0x77c>)
 8001570:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff f915 	bl	80007a4 <HAL_GetTick>
 800157a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800157e:	f7ff f911 	bl	80007a4 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d903      	bls.n	8001594 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e073      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
 8001590:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001594:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ee      	bne.n	800157e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80015a0:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	4a36      	ldr	r2, [pc, #216]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 80015a6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	6293      	str	r3, [r2, #40]	@ 0x28
 80015b0:	e061      	b.n	8001676 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80015b2:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015b8:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 80015ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015bc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d031      	beq.n	800162a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d12a      	bne.n	800162a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d122      	bne.n	800162a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d11a      	bne.n	800162a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	0a5b      	lsrs	r3, r3, #9
 80015f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001600:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d111      	bne.n	800162a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001612:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d108      	bne.n	800162a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0e1b      	lsrs	r3, r3, #24
 800161c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e024      	b.n	8001678 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 8001630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001632:	08db      	lsrs	r3, r3, #3
 8001634:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800163c:	429a      	cmp	r2, r3
 800163e:	d01a      	beq.n	8001676 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 8001646:	f023 0310 	bic.w	r3, r3, #16
 800164a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff f8aa 	bl	80007a4 <HAL_GetTick>
 8001650:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001652:	bf00      	nop
 8001654:	f7ff f8a6 	bl	80007a4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	4293      	cmp	r3, r2
 800165e:	d0f9      	beq.n	8001654 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 800166c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <HAL_RCC_OscConfig+0x86c>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	44020c00 	.word	0x44020c00

08001684 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e19e      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b83      	ldr	r3, [pc, #524]	@ (80018a8 <HAL_RCC_ClockConfig+0x224>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d910      	bls.n	80016c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b80      	ldr	r3, [pc, #512]	@ (80018a8 <HAL_RCC_ClockConfig+0x224>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 020f 	bic.w	r2, r3, #15
 80016ae:	497e      	ldr	r1, [pc, #504]	@ (80018a8 <HAL_RCC_ClockConfig+0x224>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b7c      	ldr	r3, [pc, #496]	@ (80018a8 <HAL_RCC_ClockConfig+0x224>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e186      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d012      	beq.n	80016fa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	4b74      	ldr	r3, [pc, #464]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d909      	bls.n	80016fa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80016e6:	4b71      	ldr	r3, [pc, #452]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	496d      	ldr	r1, [pc, #436]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d012      	beq.n	800172c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001714:	429a      	cmp	r2, r3
 8001716:	d909      	bls.n	800172c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001718:	4b64      	ldr	r3, [pc, #400]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4961      	ldr	r1, [pc, #388]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 8001728:	4313      	orrs	r3, r2
 800172a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d010      	beq.n	800175a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4b5b      	ldr	r3, [pc, #364]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001744:	429a      	cmp	r2, r3
 8001746:	d908      	bls.n	800175a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001748:	4b58      	ldr	r3, [pc, #352]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4955      	ldr	r1, [pc, #340]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 8001756:	4313      	orrs	r3, r2
 8001758:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d010      	beq.n	8001788 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b50      	ldr	r3, [pc, #320]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	429a      	cmp	r2, r3
 8001774:	d908      	bls.n	8001788 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	f023 020f 	bic.w	r2, r3, #15
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	494a      	ldr	r1, [pc, #296]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 8001784:	4313      	orrs	r3, r2
 8001786:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8093 	beq.w	80018bc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800179e:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d121      	bne.n	80017ee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e113      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e107      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0fb      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017de:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0f3      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80017ee:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	492c      	ldr	r1, [pc, #176]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001800:	f7fe ffd0 	bl	80007a4 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d112      	bne.n	8001834 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7fe ffc8 	bl	80007a4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0d7      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0318 	and.w	r3, r3, #24
 800182e:	2b18      	cmp	r3, #24
 8001830:	d1ee      	bne.n	8001810 <HAL_RCC_ClockConfig+0x18c>
 8001832:	e043      	b.n	80018bc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d112      	bne.n	8001862 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7fe ffb1 	bl	80007a4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0c0      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	f003 0318 	and.w	r3, r3, #24
 800185c:	2b10      	cmp	r3, #16
 800185e:	d1ee      	bne.n	800183e <HAL_RCC_ClockConfig+0x1ba>
 8001860:	e02c      	b.n	80018bc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d122      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7fe ff9a 	bl	80007a4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0a9      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_RCC_ClockConfig+0x228>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0318 	and.w	r3, r3, #24
 800188a:	2b08      	cmp	r3, #8
 800188c:	d1ee      	bne.n	800186c <HAL_RCC_ClockConfig+0x1e8>
 800188e:	e015      	b.n	80018bc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7fe ff88 	bl	80007a4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d906      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e097      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000
 80018ac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b0:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f003 0318 	and.w	r3, r3, #24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e9      	bne.n	8001890 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d010      	beq.n	80018ea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4b44      	ldr	r3, [pc, #272]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d208      	bcs.n	80018ea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80018d8:	4b41      	ldr	r3, [pc, #260]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f023 020f 	bic.w	r2, r3, #15
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	493e      	ldr	r1, [pc, #248]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ea:	4b3e      	ldr	r3, [pc, #248]	@ (80019e4 <HAL_RCC_ClockConfig+0x360>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d210      	bcs.n	800191a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f8:	4b3a      	ldr	r3, [pc, #232]	@ (80019e4 <HAL_RCC_ClockConfig+0x360>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 020f 	bic.w	r2, r3, #15
 8001900:	4938      	ldr	r1, [pc, #224]	@ (80019e4 <HAL_RCC_ClockConfig+0x360>)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001908:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <HAL_RCC_ClockConfig+0x360>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d001      	beq.n	800191a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e05d      	b.n	80019d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001932:	429a      	cmp	r2, r3
 8001934:	d208      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001936:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4927      	ldr	r1, [pc, #156]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 8001944:	4313      	orrs	r3, r2
 8001946:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d012      	beq.n	800197a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001962:	429a      	cmp	r2, r3
 8001964:	d209      	bcs.n	800197a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	491a      	ldr	r1, [pc, #104]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 8001976:	4313      	orrs	r3, r2
 8001978:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d012      	beq.n	80019ac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001994:	429a      	cmp	r2, r3
 8001996:	d209      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	490e      	ldr	r1, [pc, #56]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80019ac:	f000 f822 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_RCC_ClockConfig+0x35c>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490b      	ldr	r1, [pc, #44]	@ (80019e8 <HAL_RCC_ClockConfig+0x364>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_RCC_ClockConfig+0x368>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_RCC_ClockConfig+0x36c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fe60 	bl	8000690 <HAL_InitTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80019d4:	7afb      	ldrb	r3, [r7, #11]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	44020c00 	.word	0x44020c00
 80019e4:	40022000 	.word	0x40022000
 80019e8:	08001cf4 	.word	0x08001cf4
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80019fa:	4b8c      	ldr	r3, [pc, #560]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 0318 	and.w	r3, r3, #24
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a06:	4b8a      	ldr	r3, [pc, #552]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e107      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0c:	4b87      	ldr	r3, [pc, #540]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f003 0318 	and.w	r3, r3, #24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d112      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001a18:	4b84      	ldr	r3, [pc, #528]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001a24:	4b81      	ldr	r3, [pc, #516]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	4a81      	ldr	r2, [pc, #516]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x240>)
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e0f1      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001a38:	4b7e      	ldr	r3, [pc, #504]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x240>)
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	e0ee      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 0318 	and.w	r3, r3, #24
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d102      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x244>)
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e0e5      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b76      	ldr	r3, [pc, #472]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 0318 	and.w	r3, r3, #24
 8001a58:	2b18      	cmp	r3, #24
 8001a5a:	f040 80dd 	bne.w	8001c18 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001a5e:	4b73      	ldr	r3, [pc, #460]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001a68:	4b70      	ldr	r3, [pc, #448]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001a74:	4b6d      	ldr	r3, [pc, #436]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001a80:	4b6a      	ldr	r3, [pc, #424]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a98:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80b7 	beq.w	8001c12 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d056      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x16a>
 8001ab0:	e077      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d02d      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001abe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	08db      	lsrs	r3, r3, #3
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x240>)
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ae8:	4b50      	ldr	r3, [pc, #320]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001af8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001afc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8001c3c <HAL_RCC_GetSysClockFreq+0x248>
 8001b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001b18:	e065      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001c40 <HAL_RCC_GetSysClockFreq+0x24c>
 8001b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b40:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8001c3c <HAL_RCC_GetSysClockFreq+0x248>
 8001b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b58:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001b5c:	e043      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001c44 <HAL_RCC_GetSysClockFreq+0x250>
 8001b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b70:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b80:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b84:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8001c3c <HAL_RCC_GetSysClockFreq+0x248>
 8001b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001ba0:	e021      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001c48 <HAL_RCC_GetSysClockFreq+0x254>
 8001bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bc8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8001c3c <HAL_RCC_GetSysClockFreq+0x248>
 8001bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001be4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x238>)
 8001be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bea:	0a5b      	lsrs	r3, r3, #9
 8001bec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bfe:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0a:	ee17 3a90 	vmov	r3, s15
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	e004      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e001      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x240>)
 8001c1a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	44020c00 	.word	0x44020c00
 8001c30:	003d0900 	.word	0x003d0900
 8001c34:	03d09000 	.word	0x03d09000
 8001c38:	016e3600 	.word	0x016e3600
 8001c3c:	46000000 	.word	0x46000000
 8001c40:	4c742400 	.word	0x4c742400
 8001c44:	4bb71b00 	.word	0x4bb71b00
 8001c48:	4a742400 	.word	0x4a742400

08001c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001c50:	f7ff fed0 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001c5a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001c5e:	4907      	ldr	r1, [pc, #28]	@ (8001c7c <HAL_RCC_GetHCLKFreq+0x30>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001c62:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <HAL_RCC_GetHCLKFreq+0x34>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <HAL_RCC_GetHCLKFreq+0x34>)
 8001c70:	681b      	ldr	r3, [r3, #0]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	44020c00 	.word	0x44020c00
 8001c7c:	08001cf4 	.word	0x08001cf4
 8001c80:	20000000 	.word	0x20000000

08001c84 <memset>:
 8001c84:	4402      	add	r2, r0
 8001c86:	4603      	mov	r3, r0
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d100      	bne.n	8001c8e <memset+0xa>
 8001c8c:	4770      	bx	lr
 8001c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c92:	e7f9      	b.n	8001c88 <memset+0x4>

08001c94 <__libc_init_array>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	4d0d      	ldr	r5, [pc, #52]	@ (8001ccc <__libc_init_array+0x38>)
 8001c98:	2600      	movs	r6, #0
 8001c9a:	4c0d      	ldr	r4, [pc, #52]	@ (8001cd0 <__libc_init_array+0x3c>)
 8001c9c:	1b64      	subs	r4, r4, r5
 8001c9e:	10a4      	asrs	r4, r4, #2
 8001ca0:	42a6      	cmp	r6, r4
 8001ca2:	d109      	bne.n	8001cb8 <__libc_init_array+0x24>
 8001ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8001cd4 <__libc_init_array+0x40>)
 8001ca6:	2600      	movs	r6, #0
 8001ca8:	4c0b      	ldr	r4, [pc, #44]	@ (8001cd8 <__libc_init_array+0x44>)
 8001caa:	f000 f817 	bl	8001cdc <_init>
 8001cae:	1b64      	subs	r4, r4, r5
 8001cb0:	10a4      	asrs	r4, r4, #2
 8001cb2:	42a6      	cmp	r6, r4
 8001cb4:	d105      	bne.n	8001cc2 <__libc_init_array+0x2e>
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cbc:	3601      	adds	r6, #1
 8001cbe:	4798      	blx	r3
 8001cc0:	e7ee      	b.n	8001ca0 <__libc_init_array+0xc>
 8001cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	4798      	blx	r3
 8001cca:	e7f2      	b.n	8001cb2 <__libc_init_array+0x1e>
 8001ccc:	08001d04 	.word	0x08001d04
 8001cd0:	08001d04 	.word	0x08001d04
 8001cd4:	08001d04 	.word	0x08001d04
 8001cd8:	08001d08 	.word	0x08001d08

08001cdc <_init>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr

08001ce8 <_fini>:
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	bf00      	nop
 8001cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cee:	bc08      	pop	{r3}
 8001cf0:	469e      	mov	lr, r3
 8001cf2:	4770      	bx	lr
