
w_NodeC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d50  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006fa8  08006fa8  00007fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c4  080070c4  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  080070c4  080070c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070cc  080070cc  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070cc  080070cc  000080cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070d0  080070d0  000080d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080070d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  0800713c  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800713c  00009328  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001249c  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247e  00000000  00000000  0001b53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0001d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dd  00000000  00000000  0001e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021072  00000000  00000000  0001f08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a99  00000000  00000000  000400ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8849  00000000  00000000  00051b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a3e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b68  00000000  00000000  0011a424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0011df8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000068 	.word	0x20000068
 8000274:	00000000 	.word	0x00000000
 8000278:	08006f90 	.word	0x08006f90

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000006c 	.word	0x2000006c
 8000294:	08006f90 	.word	0x08006f90

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SystemClock_Config>:
 */
#include "RCC_clock.h"


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	@ 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2250      	movs	r2, #80	@ 0x50
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 fa32 	bl	8006a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <SystemClock_Config+0xdc>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005de:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xdc>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xdc>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xdc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d1f9      	bne.n	80005f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000626:	230c      	movs	r3, #12
 8000628:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062a:	2300      	movs	r3, #0
 800062c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f001 feba 	bl	80023b0 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    //Error_Handler();
	while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <SystemClock_Config+0x92>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fadb 	bl	8002c20 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    //Error_Handler();
	while(1);
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <SystemClock_Config+0xc0>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <SystemClock_Config+0xe0>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	44020800 	.word	0x44020800
 8000690:	40022000 	.word	0x40022000

08000694 <MX_GPIO_Init>:
 *      Author: Admin
 */
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b47      	ldr	r3, [pc, #284]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a45      	ldr	r2, [pc, #276]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b43      	ldr	r3, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c8:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a3e      	ldr	r2, [pc, #248]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0x134>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000714:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000728:	f001 fdf8 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	4827      	ldr	r0, [pc, #156]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000732:	f001 fdf3 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0x144>)
 800074c:	f001 fc94 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000768:	f001 fc86 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076c:	2308      	movs	r3, #8
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000784:	f001 fc78 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000788:	2320      	movs	r3, #32
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 800079c:	f001 fc6c 	bl	8002078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2010      	movs	r0, #16
 80007a6:	f000 fd95 	bl	80012d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 fdac 	bl	8001308 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2018      	movs	r0, #24
 80007b6:	f000 fd8d 	bl	80012d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80007ba:	2018      	movs	r0, #24
 80007bc:	f000 fda4 	bl	8001308 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	@ 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	44020c00 	.word	0x44020c00
 80007cc:	42020000 	.word	0x42020000
 80007d0:	42020400 	.word	0x42020400
 80007d4:	10210000 	.word	0x10210000
 80007d8:	42020800 	.word	0x42020800

080007dc <main>:
} CAN_SET;

CAN_SET CAN_Payload;
volatile uint8_t flag = 0;
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fbde 	bl	8000fa0 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f7ff fee4 	bl	80005b0 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff54 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007ec:	f000 f812 	bl	8000814 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 fb60 	bl	8000eb4 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag == 1){
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <main+0x34>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d1fa      	bne.n	80007f4 <main+0x18>
		  HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fc8c 	bl	800111c <HAL_Delay>
		  Print_CAN_Error();
 8000804:	f000 f89a 	bl	800093c <Print_CAN_Error>
		  flag = 0;
 8000808:	4b01      	ldr	r3, [pc, #4]	@ (8000810 <main+0x34>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	  if(flag == 1){
 800080e:	e7f1      	b.n	80007f4 <main+0x18>
 8000810:	200001d0 	.word	0x200001d0

08000814 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 800081a:	4a29      	ldr	r2, [pc, #164]	@ (80008c0 <MX_FDCAN1_Init+0xac>)
 800081c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000824:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800082a:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000832:	2200      	movs	r2, #0
 8000834:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000838:	2200      	movs	r2, #0
 800083a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 800083e:	2200      	movs	r2, #0
 8000840:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 8000842:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000844:	2219      	movs	r2, #25
 8000846:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 800084a:	2201      	movs	r2, #1
 800084c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000850:	220d      	movs	r2, #13
 8000852:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000856:	2202      	movs	r2, #2
 8000858:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 800085c:	2201      	movs	r2, #1
 800085e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000862:	2201      	movs	r2, #1
 8000864:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000868:	2201      	movs	r2, #1
 800086a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 800086e:	2201      	movs	r2, #1
 8000870:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000874:	2200      	movs	r2, #0
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 800087a:	2200      	movs	r2, #0
 800087c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000884:	480d      	ldr	r0, [pc, #52]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000886:	f000 fea3 	bl	80015d0 <HAL_FDCAN_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000890:	f000 f8ba 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 8000896:	f000 fff5 	bl	8001884 <HAL_FDCAN_Start>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_FDCAN1_Init+0x90>
  	 /* Notification Error */
  	Error_Handler();
 80008a0:	f000 f8b2 	bl	8000a08 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_FDCAN1_Init+0xa8>)
 80008aa:	f001 f91b 	bl	8001ae4 <HAL_FDCAN_ActivateNotification>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FDCAN1_Init+0xa4>
  {
	/* Notification Error */
	Error_Handler();
 80008b4:	f000 f8a8 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000084 	.word	0x20000084
 80008c0:	4000a400 	.word	0x4000a400

080008c4 <HAL_FDCAN_RxFifo0Callback>:



/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d014      	beq.n	8000902 <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_FDCAN_RxFifo0Callback+0x48>)
 80008da:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 fff8 	bl	80018d4 <HAL_FDCAN_GetRxMessage>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 80008ea:	f000 f88d 	bl	8000a08 <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f001 f8f6 	bl	8001ae4 <HAL_FDCAN_ActivateNotification>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 80008fe:	f000 f883 	bl	8000a08 <Error_Handler>
		}

	}
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200001ce 	.word	0x200001ce
 8000910:	200001a0 	.word	0x200001a0

08000914 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_5) {
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	2b20      	cmp	r3, #32
 8000922:	d102      	bne.n	800092a <HAL_GPIO_EXTI_Falling_Callback+0x16>
		flag = 1;
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == B1_BLUE_USER_BUTTON_Pin){

	}
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200001d0 	.word	0x200001d0

0800093c <Print_CAN_Error>:
void Print_CAN_Error(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
    uint32_t lec = (FDCAN1->PSR) & 0x7; /*Last error code*/
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <Print_CAN_Error+0x84>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	607b      	str	r3, [r7, #4]

    switch (lec) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b07      	cmp	r3, #7
 8000950:	d832      	bhi.n	80009b8 <Print_CAN_Error+0x7c>
 8000952:	a201      	add	r2, pc, #4	@ (adr r2, 8000958 <Print_CAN_Error+0x1c>)
 8000954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000958:	08000979 	.word	0x08000979
 800095c:	08000981 	.word	0x08000981
 8000960:	08000989 	.word	0x08000989
 8000964:	08000991 	.word	0x08000991
 8000968:	08000999 	.word	0x08000999
 800096c:	080009a1 	.word	0x080009a1
 8000970:	080009a9 	.word	0x080009a9
 8000974:	080009b1 	.word	0x080009b1
        case 0b000:
            printf("No CAN error occurred\r\n");
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <Print_CAN_Error+0x88>)
 800097a:	f005 ff75 	bl	8006868 <puts>
            break;
 800097e:	e01b      	b.n	80009b8 <Print_CAN_Error+0x7c>
        case 0b001:
            printf("Stuff error\r\n");
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <Print_CAN_Error+0x8c>)
 8000982:	f005 ff71 	bl	8006868 <puts>
            break;
 8000986:	e017      	b.n	80009b8 <Print_CAN_Error+0x7c>
        case 0b010:
            printf("Form error\r\n");
 8000988:	4810      	ldr	r0, [pc, #64]	@ (80009cc <Print_CAN_Error+0x90>)
 800098a:	f005 ff6d 	bl	8006868 <puts>
            break;
 800098e:	e013      	b.n	80009b8 <Print_CAN_Error+0x7c>
        case 0b011:
            printf("Ack error\r\n");
 8000990:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <Print_CAN_Error+0x94>)
 8000992:	f005 ff69 	bl	8006868 <puts>
            break;
 8000996:	e00f      	b.n	80009b8 <Print_CAN_Error+0x7c>
        case 0b100:
            printf("Bit error ->Bit1 error:\r\n");
 8000998:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <Print_CAN_Error+0x98>)
 800099a:	f005 ff65 	bl	8006868 <puts>
            break;
 800099e:	e00b      	b.n	80009b8 <Print_CAN_Error+0x7c>
        case 0b101:
            printf("Bit error ->Bit0 error\r\n");
 80009a0:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <Print_CAN_Error+0x9c>)
 80009a2:	f005 ff61 	bl	8006868 <puts>
            break;
 80009a6:	e007      	b.n	80009b8 <Print_CAN_Error+0x7c>
        case 0b110:
            printf("CRC error: CRC mismatch on received frame\r\n");
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <Print_CAN_Error+0xa0>)
 80009aa:	f005 ff5d 	bl	8006868 <puts>
            break;
 80009ae:	e003      	b.n	80009b8 <Print_CAN_Error+0x7c>
        case 0b111:
            printf("LEC unchanged: No event since last read\r\n"); /*When read lec it reset to 111*/
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <Print_CAN_Error+0xa4>)
 80009b2:	f005 ff59 	bl	8006868 <puts>
            break;
 80009b6:	bf00      	nop
    }
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	4000a400 	.word	0x4000a400
 80009c4:	08006fa8 	.word	0x08006fa8
 80009c8:	08006fc0 	.word	0x08006fc0
 80009cc:	08006fd0 	.word	0x08006fd0
 80009d0:	08006fdc 	.word	0x08006fdc
 80009d4:	08006fe8 	.word	0x08006fe8
 80009d8:	08007004 	.word	0x08007004
 80009dc:	0800701c 	.word	0x0800701c
 80009e0:	08007048 	.word	0x08007048

080009e4 <__io_putchar>:

int __io_putchar(int ch)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1,1000);
 80009ec:	1d39      	adds	r1, r7, #4
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	2201      	movs	r2, #1
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <__io_putchar+0x20>)
 80009f6:	f004 fd77 	bl	80054e8 <HAL_UART_Transmit>
    return ch;
 80009fa:	687b      	ldr	r3, [r7, #4]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000e8 	.word	0x200000e8

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ac      	sub	sp, #176	@ 0xb0
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2288      	movs	r2, #136	@ 0x88
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f005 ffef 	bl	8006a28 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <HAL_FDCAN_MspInit+0xd4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d14d      	bne.n	8000af0 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	f04f 0304 	mov.w	r3, #4
 8000a5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fc1a 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000a76:	f7ff ffc7 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a80:	4a1e      	ldr	r2, [pc, #120]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a86:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab6:	23c0      	movs	r3, #192	@ 0xc0
 8000ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ace:	2309      	movs	r3, #9
 8000ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <HAL_FDCAN_MspInit+0xdc>)
 8000adc:	f001 facc 	bl	8002078 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	2027      	movs	r0, #39	@ 0x27
 8000ae6:	f000 fbf5 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aea:	2027      	movs	r0, #39	@ 0x27
 8000aec:	f000 fc0c 	bl	8001308 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	37b0      	adds	r7, #176	@ 0xb0
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	4000a400 	.word	0x4000a400
 8000afc:	44020c00 	.word	0x44020c00
 8000b00:	42020800 	.word	0x42020800

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ac      	sub	sp, #176	@ 0xb0
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2288      	movs	r2, #136	@ 0x88
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 ff7f 	bl	8006a28 <memset>
  if(huart->Instance==USART3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd8 <HAL_UART_MspInit+0xd4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d14c      	bne.n	8000bce <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b34:	f04f 0204 	mov.w	r2, #4
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fbab 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b54:	f7ff ff58 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b58:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b64:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7c:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000b94:	2318      	movs	r3, #24
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000bac:	230d      	movs	r3, #13
 8000bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <HAL_UART_MspInit+0xdc>)
 8000bba:	f001 fa5d 	bl	8002078 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	203c      	movs	r0, #60	@ 0x3c
 8000bc4:	f000 fb86 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bc8:	203c      	movs	r0, #60	@ 0x3c
 8000bca:	f000 fb9d 	bl	8001308 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	37b0      	adds	r7, #176	@ 0xb0
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	44020c00 	.word	0x44020c00
 8000be0:	42020000 	.word	0x42020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 fa4f 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c46:	2020      	movs	r0, #32
 8000c48:	f001 fb80 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000c54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c58:	f001 fb78 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c66:	f001 f823 	bl	8001cb0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000084 	.word	0x20000084

08000c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <USART3_IRQHandler+0x10>)
 8000c7a:	f004 fcd3 	bl	8005624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000e8 	.word	0x200000e8

08000c88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e00a      	b.n	8000cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9a:	f3af 8000 	nop.w
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf0      	blt.n	8000c9a <_read+0x12>
  }

  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e009      	b.n	8000ce8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe81 	bl	80009e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf1      	blt.n	8000cd4 <_write+0x12>
  }
  return len;
 8000cf0:	687b      	ldr	r3, [r7, #4]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_close>:

int _close(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d22:	605a      	str	r2, [r3, #4]
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_isatty>:

int _isatty(int file)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f005 fe96 	bl	8006ac4 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20008000 	.word	0x20008000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	200001d4 	.word	0x200001d4
 8000dcc:	20000328 	.word	0x20000328

08000dd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd6:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <SystemInit+0xc8>)
 8000dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e98 <SystemInit+0xc8>)
 8000dde:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000de6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <SystemInit+0xcc>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000dec:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <SystemInit+0xcc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000df2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <SystemInit+0xcc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000df8:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <SystemInit+0xcc>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4927      	ldr	r1, [pc, #156]	@ (8000e9c <SystemInit+0xcc>)
 8000dfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <SystemInit+0xd0>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e04:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <SystemInit+0xcc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000e0a:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <SystemInit+0xcc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <SystemInit+0xcc>)
 8000e12:	4a24      	ldr	r2, [pc, #144]	@ (8000ea4 <SystemInit+0xd4>)
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000e16:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <SystemInit+0xcc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <SystemInit+0xcc>)
 8000e1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ea4 <SystemInit+0xd4>)
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <SystemInit+0xcc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e28:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <SystemInit+0xcc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <SystemInit+0xcc>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <SystemInit+0xcc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <SystemInit+0xc8>)
 8000e3c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e40:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <SystemInit+0xd8>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000e4a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000e52:	d003      	beq.n	8000e5c <SystemInit+0x8c>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000e5a:	d117      	bne.n	8000e8c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <SystemInit+0xd8>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <SystemInit+0xd8>)
 8000e6a:	4a10      	ldr	r2, [pc, #64]	@ (8000eac <SystemInit+0xdc>)
 8000e6c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <SystemInit+0xd8>)
 8000e70:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb0 <SystemInit+0xe0>)
 8000e72:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <SystemInit+0xd8>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <SystemInit+0xd8>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <SystemInit+0xd8>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <SystemInit+0xd8>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	61d3      	str	r3, [r2, #28]
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	44020c00 	.word	0x44020c00
 8000ea0:	fae2eae3 	.word	0xfae2eae3
 8000ea4:	01010280 	.word	0x01010280
 8000ea8:	40022000 	.word	0x40022000
 8000eac:	08192a3b 	.word	0x08192a3b
 8000eb0:	4c5d6e7f 	.word	0x4c5d6e7f

08000eb4 <MX_USART3_UART_Init>:
#include "uart.h"

extern UART_HandleTypeDef huart3;

void MX_USART3_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000eba:	4a23      	ldr	r2, [pc, #140]	@ (8000f48 <MX_USART3_UART_Init+0x94>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000efc:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000efe:	f004 faa3 	bl	8005448 <HAL_UART_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART3_UART_Init+0x58>
  {
	  //Error_Handler();
	  	while(1);
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MX_USART3_UART_Init+0x54>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000f10:	f005 fac7 	bl	80064a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART3_UART_Init+0x6a>
  {
	  //Error_Handler();
	  	while(1);
 8000f1a:	bf00      	nop
 8000f1c:	e7fd      	b.n	8000f1a <MX_USART3_UART_Init+0x66>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4808      	ldr	r0, [pc, #32]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000f22:	f005 fafc 	bl	800651e <HAL_UARTEx_SetRxFifoThreshold>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART3_UART_Init+0x7c>
  {
	  //Error_Handler();
	  	while(1);
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <MX_USART3_UART_Init+0x78>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_USART3_UART_Init+0x90>)
 8000f32:	f005 fa7d 	bl	8006430 <HAL_UARTEx_DisableFifoMode>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_USART3_UART_Init+0x8c>
  {
	  //Error_Handler();
	  	while(1);
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <MX_USART3_UART_Init+0x88>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000e8 	.word	0x200000e8
 8000f48:	40004800 	.word	0x40004800

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
	ldr	r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <LoopForever+0x16>)
	cmp	r2, r3
 8000f72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f76:	f7ff ff2b 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f005 fda9 	bl	8006ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fc2d 	bl	80007dc <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f84:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000f88:	080070d4 	.word	0x080070d4
	ldr	r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f90:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000f94:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000f98:	20000328 	.word	0x20000328

08000f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f98a 	bl	80012be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000faa:	f001 fff1 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <HAL_Init+0x44>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	490b      	ldr	r1, [pc, #44]	@ (8000fe8 <HAL_Init+0x48>)
 8000fba:	5ccb      	ldrb	r3, [r1, r3]
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_Init+0x4c>)
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f000 f9cf 	bl	8001368 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f810 	bl	8000ff0 <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e002      	b.n	8000fe0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fda:	f7ff fd1b 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	44020c00 	.word	0x44020c00
 8000fe8:	08007074 	.word	0x08007074
 8000fec:	20000000 	.word	0x20000000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ffc:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <HAL_InitTick+0xdc>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e05c      	b.n	80010c2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001008:	4b31      	ldr	r3, [pc, #196]	@ (80010d0 <HAL_InitTick+0xe0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b04      	cmp	r3, #4
 8001012:	d10c      	bne.n	800102e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001014:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <HAL_InitTick+0xe4>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <HAL_InitTick+0xdc>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e037      	b.n	800109e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800102e:	f000 f9f3 	bl	8001418 <HAL_SYSTICK_GetCLKSourceConfig>
 8001032:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d023      	beq.n	8001082 <HAL_InitTick+0x92>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d82d      	bhi.n	800109c <HAL_InitTick+0xac>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_InitTick+0x5e>
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d00d      	beq.n	8001068 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800104c:	e026      	b.n	800109c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <HAL_InitTick+0xe4>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <HAL_InitTick+0xdc>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800105c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001060:	fbb2 f3f3 	udiv	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
        break;
 8001066:	e01a      	b.n	800109e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <HAL_InitTick+0xdc>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f2 	udiv	r3, r3, r2
 8001076:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	60fb      	str	r3, [r7, #12]
        break;
 8001080:	e00d      	b.n	800109e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_InitTick+0xdc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001090:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001094:	fbb2 f3f3 	udiv	r3, r2, r3
 8001098:	60fb      	str	r3, [r7, #12]
        break;
 800109a:	e000      	b.n	800109e <HAL_InitTick+0xae>
        break;
 800109c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 f940 	bl	8001324 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e009      	b.n	80010c2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
 80010b6:	f000 f90d 	bl	80012d4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80010ba:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_InitTick+0xe8>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	e000e010 	.word	0xe000e010
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	200001d8 	.word	0x200001d8

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200001d8 	.word	0x200001d8

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff4c 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e2:	f7ff ff63 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	6978      	ldr	r0, [r7, #20]
 80012ee:	f7ff ffb3 	bl	8001258 <NVIC_EncodePriority>
 80012f2:	4602      	mov	r2, r0
 80012f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff82 	bl	8001204 <__NVIC_SetPriority>
}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff56 	bl	80011c8 <__NVIC_EnableIRQ>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001334:	d301      	bcc.n	800133a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001336:	2301      	movs	r3, #1
 8001338:	e00d      	b.n	8001356 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_SYSTICK_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_SYSTICK_Config+0x40>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_SYSTICK_Config+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <HAL_SYSTICK_Config+0x40>)
 800134e:	f043 0303 	orr.w	r3, r3, #3
 8001352:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d844      	bhi.n	8001400 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001376:	a201      	add	r2, pc, #4	@ (adr r2, 800137c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	0800139f 	.word	0x0800139f
 8001380:	080013bd 	.word	0x080013bd
 8001384:	080013df 	.word	0x080013df
 8001388:	08001401 	.word	0x08001401
 800138c:	08001391 	.word	0x08001391
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6013      	str	r3, [r2, #0]
      break;
 800139c:	e031      	b.n	8001402 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80013b0:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013b2:	f023 030c 	bic.w	r3, r3, #12
 80013b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013ba:	e022      	b.n	8001402 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80013ce:	f023 030c 	bic.w	r3, r3, #12
 80013d2:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013dc:	e011      	b.n	8001402 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80013f0:	f023 030c 	bic.w	r3, r3, #12
 80013f4:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013fe:	e000      	b.n	8001402 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001400:	bf00      	nop
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010
 8001414:	44020c00 	.word	0x44020c00

08001418 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800142a:	2304      	movs	r3, #4
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	e01e      	b.n	800146e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001432:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b08      	cmp	r3, #8
 8001440:	d00f      	beq.n	8001462 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b08      	cmp	r3, #8
 8001446:	d80f      	bhi.n	8001468 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d003      	beq.n	800145c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001454:	e008      	b.n	8001468 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
        break;
 800145a:	e008      	b.n	800146e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800145c:	2301      	movs	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
        break;
 8001460:	e005      	b.n	800146e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001462:	2302      	movs	r3, #2
 8001464:	607b      	str	r3, [r7, #4]
        break;
 8001466:	e002      	b.n	800146e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
        break;
 800146c:	bf00      	nop
    }
  }
  return systick_source;
 800146e:	687b      	ldr	r3, [r7, #4]
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e010 	.word	0xe000e010
 8001480:	44020c00 	.word	0x44020c00

08001484 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800148c:	f7ff fe3a 	bl	8001104 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e06b      	b.n	8001574 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e05c      	b.n	8001574 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0204 	orr.w	r2, r2, #4
 80014c8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2205      	movs	r2, #5
 80014ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80014d2:	e020      	b.n	8001516 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80014d4:	f7ff fe16 	bl	8001104 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d919      	bls.n	8001516 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001506:	2201      	movs	r2, #1
 8001508:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e02e      	b.n	8001574 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0d7      	beq.n	80014d4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0202 	orr.w	r2, r2, #2
 8001532:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2204      	movs	r2, #4
 8001538:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001544:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800155e:	2201      	movs	r2, #1
 8001560:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e019      	b.n	80015c2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d004      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e00e      	b.n	80015c2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e147      	b.n	8001872 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fa14 	bl	8000a24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699a      	ldr	r2, [r3, #24]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0210 	bic.w	r2, r2, #16
 800160a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800160c:	f7ff fd7a 	bl	8001104 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001612:	e012      	b.n	800163a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001614:	f7ff fd76 	bl	8001104 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b0a      	cmp	r3, #10
 8001620:	d90b      	bls.n	800163a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2203      	movs	r2, #3
 8001632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e11b      	b.n	8001872 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b08      	cmp	r3, #8
 8001646:	d0e5      	beq.n	8001614 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001658:	f7ff fd54 	bl	8001104 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800165e:	e012      	b.n	8001686 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001660:	f7ff fd50 	bl	8001104 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b0a      	cmp	r3, #10
 800166c:	d90b      	bls.n	8001686 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0f5      	b.n	8001872 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0e5      	beq.n	8001660 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0202 	orr.w	r2, r2, #2
 80016a2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a74      	ldr	r2, [pc, #464]	@ (800187c <HAL_FDCAN_Init+0x2ac>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d103      	bne.n	80016b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80016ae:	4a74      	ldr	r2, [pc, #464]	@ (8001880 <HAL_FDCAN_Init+0x2b0>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7c1b      	ldrb	r3, [r3, #16]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	e007      	b.n	80016e0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016de:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7c5b      	ldrb	r3, [r3, #17]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016f6:	619a      	str	r2, [r3, #24]
 80016f8:	e007      	b.n	800170a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001708:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7c9b      	ldrb	r3, [r3, #18]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d108      	bne.n	8001724 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001720:	619a      	str	r2, [r3, #24]
 8001722:	e007      	b.n	8001734 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699a      	ldr	r2, [r3, #24]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001732:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001758:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0210 	bic.w	r2, r2, #16
 8001768:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0204 	orr.w	r2, r2, #4
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	e02c      	b.n	80017de <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d028      	beq.n	80017de <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d01c      	beq.n	80017ce <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017a2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0210 	orr.w	r2, r2, #16
 80017b2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d110      	bne.n	80017de <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0220 	orr.w	r2, r2, #32
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e007      	b.n	80017de <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0220 	orr.w	r2, r2, #32
 80017dc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017ee:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017f6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	3b01      	subs	r3, #1
 8001800:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001806:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001808:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001812:	d115      	bne.n	8001840 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181e:	3b01      	subs	r3, #1
 8001820:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001822:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	3b01      	subs	r3, #1
 800182a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800182c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	3b01      	subs	r3, #1
 8001836:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800183c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800183e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fbb8 	bl	8001fcc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	4000a400 	.word	0x4000a400
 8001880:	4000a500 	.word	0x4000a500

08001884 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d110      	bne.n	80018ba <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699a      	ldr	r2, [r3, #24]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e006      	b.n	80018c8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	f043 0204 	orr.w	r2, r3, #4
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
  }
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	@ 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018ec:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80018ee:	7efb      	ldrb	r3, [r7, #27]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	f040 80e8 	bne.w	8001ac6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b40      	cmp	r3, #64	@ 0x40
 80018fa:	d137      	bne.n	800196c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001910:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0db      	b.n	8001ad4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001924:	0e1b      	lsrs	r3, r3, #24
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b01      	cmp	r3, #1
 800192c:	d10a      	bne.n	8001944 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001940:	2301      	movs	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
 800196a:	e036      	b.n	80019da <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001980:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0a3      	b.n	8001ad4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001994:	0e1b      	lsrs	r3, r3, #24
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10a      	bne.n	80019b4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d107      	bne.n	80019fe <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e005      	b.n	8001a0a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	3304      	adds	r3, #4
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	f003 020f 	and.w	r2, r3, #15
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0e1b      	lsrs	r3, r3, #24
 8001a5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0fda      	lsrs	r2, r3, #31
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	3304      	adds	r3, #4
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	e00a      	b.n	8001a96 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	441a      	add	r2, r3
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	3301      	adds	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d3ec      	bcc.n	8001a80 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b40      	cmp	r3, #64	@ 0x40
 8001aaa:	d105      	bne.n	8001ab8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001ab6:	e004      	b.n	8001ac2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e006      	b.n	8001ad4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aca:	f043 0208 	orr.w	r2, r3, #8
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
  }
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	372c      	adds	r7, #44	@ 0x2c
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	0800708c 	.word	0x0800708c

08001ae4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001af6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d003      	beq.n	8001b06 <HAL_FDCAN_ActivateNotification+0x22>
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	f040 80c8 	bne.w	8001c96 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03b      	beq.n	8001b9a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d031      	beq.n	8001b9a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d027      	beq.n	8001b9a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01d      	beq.n	8001b9a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d013      	beq.n	8001b9a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00c      	beq.n	8001baa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d13b      	bne.n	8001c36 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d004      	beq.n	8001bd2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d131      	bne.n	8001c36 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d127      	bne.n	8001c36 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11d      	bne.n	8001c36 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d113      	bne.n	8001c36 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0202 	orr.w	r2, r2, #2
 8001c44:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e006      	b.n	8001ca4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9a:	f043 0202 	orr.w	r2, r3, #2
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	@ 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cbe:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ccc:	4013      	ands	r3, r2
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d06:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001d0a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d12:	6a3a      	ldr	r2, [r7, #32]
 8001d14:	4013      	ands	r3, r2
 8001d16:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d1e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d22:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d36:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d3e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2240      	movs	r2, #64	@ 0x40
 8001d5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f916 	bl	8001f8e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d019      	beq.n	8001da0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d014      	beq.n	8001da0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d7e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d98:	6939      	ldr	r1, [r7, #16]
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8d8 	bl	8001f50 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8a2 	bl	8001efa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dc2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fd7c 	bl	80008c4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001dda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f897 	bl	8001f10 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00c      	beq.n	8001e06 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f890 	bl	8001f26 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d018      	beq.n	8001e42 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d013      	beq.n	8001e42 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e22:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2280      	movs	r2, #128	@ 0x80
 8001e38:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e3a:	68f9      	ldr	r1, [r7, #12]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f87c 	bl	8001f3a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00c      	beq.n	8001e66 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f880 	bl	8001f66 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00c      	beq.n	8001e8a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e82:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f878 	bl	8001f7a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00f      	beq.n	8001eb4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ea6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ec2:	69f9      	ldr	r1, [r7, #28]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f876 	bl	8001fb6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f858 	bl	8001fa2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	@ 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001fd6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fee:	041a      	lsls	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	061a      	lsls	r2, r3, #24
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e005      	b.n	800205a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3304      	adds	r3, #4
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3f3      	bcc.n	800204e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	4000ac00 	.word	0x4000ac00

08002078 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002086:	e136      	b.n	80022f6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8128 	beq.w	80022f0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x38>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b12      	cmp	r3, #18
 80020ae:	d125      	bne.n	80020fc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	6979      	ldr	r1, [r7, #20]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d00b      	beq.n	8002150 <HAL_GPIO_Init+0xd8>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002144:	2b11      	cmp	r3, #17
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b12      	cmp	r3, #18
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4013      	ands	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d017      	beq.n	80021ea <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4013      	ands	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07c      	beq.n	80022f0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021f6:	4a47      	ldr	r2, [pc, #284]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3318      	adds	r3, #24
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4013      	ands	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0a9a      	lsrs	r2, r3, #10
 800221e:	4b3e      	ldr	r3, [pc, #248]	@ (8002318 <HAL_GPIO_Init+0x2a0>)
 8002220:	4013      	ands	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	00d2      	lsls	r2, r2, #3
 800222a:	4093      	lsls	r3, r2
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002232:	4938      	ldr	r1, [pc, #224]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3318      	adds	r3, #24
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002240:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43db      	mvns	r3, r3
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002264:	4a2b      	ldr	r2, [pc, #172]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43db      	mvns	r3, r3
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4013      	ands	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800228e:	4a21      	ldr	r2, [pc, #132]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002294:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 8002296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800229a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4013      	ands	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80022ba:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80022c2:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 80022c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80022e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <HAL_GPIO_Init+0x29c>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	3301      	adds	r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f aec1 	bne.w	8002088 <HAL_GPIO_Init+0x10>
  }
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	44022000 	.word	0x44022000
 8002318:	002f7f7f 	.word	0x002f7f7f

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002338:	e002      	b.n	8002340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002356:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002362:	4a0c      	ldr	r2, [pc, #48]	@ (8002394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f814 	bl	8002398 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800237c:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fac5 	bl	8000914 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	44022000 	.word	0x44022000

08002398 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 bc28 	b.w	8002c14 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c4:	4b94      	ldr	r3, [pc, #592]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f003 0318 	and.w	r3, r3, #24
 80023cc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80023ce:	4b92      	ldr	r3, [pc, #584]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d05b      	beq.n	800249c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x46>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	2b18      	cmp	r3, #24
 80023ee:	d114      	bne.n	800241a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d111      	bne.n	800241a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f000 bc08 	b.w	8002c14 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002404:	4b84      	ldr	r3, [pc, #528]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	4981      	ldr	r1, [pc, #516]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002414:	4313      	orrs	r3, r2
 8002416:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002418:	e040      	b.n	800249c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d023      	beq.n	800246a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002422:	4b7d      	ldr	r3, [pc, #500]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7c      	ldr	r2, [pc, #496]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fe69 	bl	8001104 <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002436:	f7fe fe65 	bl	8001104 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e3e5      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002448:	4b73      	ldr	r3, [pc, #460]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002454:	4b70      	ldr	r3, [pc, #448]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	496d      	ldr	r1, [pc, #436]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002464:	4313      	orrs	r3, r2
 8002466:	618b      	str	r3, [r1, #24]
 8002468:	e018      	b.n	800249c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800246a:	4b6b      	ldr	r3, [pc, #428]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6a      	ldr	r2, [pc, #424]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fe45 	bl	8001104 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800247e:	f7fe fe41 	bl	8001104 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e3c1      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002490:	4b61      	ldr	r3, [pc, #388]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a0 	beq.w	80025ea <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x10c>
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b18      	cmp	r3, #24
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 8092 	bne.w	80025ea <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e3a4      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x132>
 80024d4:	4b50      	ldr	r3, [pc, #320]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e058      	b.n	8002594 <HAL_RCC_OscConfig+0x1e4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x160>
 80024ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80024f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b48      	ldr	r3, [pc, #288]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a47      	ldr	r2, [pc, #284]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80024fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b45      	ldr	r3, [pc, #276]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a44      	ldr	r2, [pc, #272]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002508:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e041      	b.n	8002594 <HAL_RCC_OscConfig+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002518:	d112      	bne.n	8002540 <HAL_RCC_OscConfig+0x190>
 800251a:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3e      	ldr	r2, [pc, #248]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b3c      	ldr	r3, [pc, #240]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3b      	ldr	r2, [pc, #236]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800252c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a38      	ldr	r2, [pc, #224]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e029      	b.n	8002594 <HAL_RCC_OscConfig+0x1e4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002548:	d112      	bne.n	8002570 <HAL_RCC_OscConfig+0x1c0>
 800254a:	4b33      	ldr	r3, [pc, #204]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a32      	ldr	r2, [pc, #200]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b30      	ldr	r3, [pc, #192]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800255c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2c      	ldr	r2, [pc, #176]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e011      	b.n	8002594 <HAL_RCC_OscConfig+0x1e4>
 8002570:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a28      	ldr	r2, [pc, #160]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a25      	ldr	r2, [pc, #148]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 800258e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fdb2 	bl	8001104 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fdae 	bl	8001104 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e32e      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1f4>
 80025c2:	e012      	b.n	80025ea <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fd9e 	bl	8001104 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fd9a 	bl	8001104 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e31a      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <HAL_RCC_OscConfig+0x268>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 809a 	beq.w	800272c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x25a>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	2b18      	cmp	r3, #24
 8002602:	d149      	bne.n	8002698 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d146      	bne.n	8002698 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e2fe      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
 8002616:	bf00      	nop
 8002618:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002622:	4b9a      	ldr	r3, [pc, #616]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0218 	and.w	r2, r3, #24
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	429a      	cmp	r2, r3
 8002630:	d014      	beq.n	800265c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002632:	4b96      	ldr	r3, [pc, #600]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0218 	bic.w	r2, r3, #24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	4993      	ldr	r1, [pc, #588]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002644:	f000 fdd0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002648:	4b91      	ldr	r3, [pc, #580]	@ (8002890 <HAL_RCC_OscConfig+0x4e0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fccf 	bl	8000ff0 <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e2db      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fd52 	bl	8001104 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002664:	f7fe fd4e 	bl	8001104 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e2ce      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002676:	4b85      	ldr	r3, [pc, #532]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002682:	4b82      	ldr	r3, [pc, #520]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	497e      	ldr	r1, [pc, #504]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002696:	e049      	b.n	800272c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02c      	beq.n	80026fa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80026a0:	4b7a      	ldr	r3, [pc, #488]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 0218 	bic.w	r2, r3, #24
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4977      	ldr	r1, [pc, #476]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80026b2:	4b76      	ldr	r3, [pc, #472]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a75      	ldr	r2, [pc, #468]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fd21 	bl	8001104 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80026c6:	f7fe fd1d 	bl	8001104 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e29d      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d8:	4b6c      	ldr	r3, [pc, #432]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80026e4:	4b69      	ldr	r3, [pc, #420]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	4966      	ldr	r1, [pc, #408]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	610b      	str	r3, [r1, #16]
 80026f8:	e018      	b.n	800272c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b64      	ldr	r3, [pc, #400]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a63      	ldr	r2, [pc, #396]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fcfd 	bl	8001104 <HAL_GetTick>
 800270a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800270e:	f7fe fcf9 	bl	8001104 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e279      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002720:	4b5a      	ldr	r3, [pc, #360]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d03c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01c      	beq.n	800277a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002740:	4b52      	ldr	r3, [pc, #328]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002746:	4a51      	ldr	r2, [pc, #324]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800274c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fcd8 	bl	8001104 <HAL_GetTick>
 8002754:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002758:	f7fe fcd4 	bl	8001104 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e254      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800276a:	4b48      	ldr	r3, [pc, #288]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 800276c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <HAL_RCC_OscConfig+0x3a8>
 8002778:	e01b      	b.n	80027b2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277a:	4b44      	ldr	r3, [pc, #272]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 800277c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002780:	4a42      	ldr	r2, [pc, #264]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002782:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7fe fcbb 	bl	8001104 <HAL_GetTick>
 800278e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002792:	f7fe fcb7 	bl	8001104 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e237      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027a4:	4b39      	ldr	r3, [pc, #228]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80d2 	beq.w	8002964 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027c0:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <HAL_RCC_OscConfig+0x4e4>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d118      	bne.n	80027fe <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_RCC_OscConfig+0x4e4>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	4a30      	ldr	r2, [pc, #192]	@ (8002894 <HAL_RCC_OscConfig+0x4e4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d8:	f7fe fc94 	bl	8001104 <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe fc90 	bl	8001104 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e210      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027f2:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <HAL_RCC_OscConfig+0x4e4>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <HAL_RCC_OscConfig+0x468>
 8002806:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800280c:	4a1f      	ldr	r2, [pc, #124]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002816:	e074      	b.n	8002902 <HAL_RCC_OscConfig+0x552>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d118      	bne.n	8002852 <HAL_RCC_OscConfig+0x4a2>
 8002820:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002826:	4a19      	ldr	r2, [pc, #100]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002830:	4b16      	ldr	r3, [pc, #88]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002836:	4a15      	ldr	r2, [pc, #84]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002838:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800283c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002846:	4a11      	ldr	r2, [pc, #68]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002850:	e057      	b.n	8002902 <HAL_RCC_OscConfig+0x552>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d11e      	bne.n	8002898 <HAL_RCC_OscConfig+0x4e8>
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 800285c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002860:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 800286c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002876:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 800287c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002880:	4a02      	ldr	r2, [pc, #8]	@ (800288c <HAL_RCC_OscConfig+0x4dc>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800288a:	e03a      	b.n	8002902 <HAL_RCC_OscConfig+0x552>
 800288c:	44020c00 	.word	0x44020c00
 8002890:	20000004 	.word	0x20000004
 8002894:	44020800 	.word	0x44020800
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b85      	cmp	r3, #133	@ 0x85
 800289e:	d118      	bne.n	80028d2 <HAL_RCC_OscConfig+0x522>
 80028a0:	4ba2      	ldr	r3, [pc, #648]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a6:	4aa1      	ldr	r2, [pc, #644]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028b0:	4b9e      	ldr	r3, [pc, #632]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b6:	4a9d      	ldr	r2, [pc, #628]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028c0:	4b9a      	ldr	r3, [pc, #616]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c6:	4a99      	ldr	r2, [pc, #612]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028d0:	e017      	b.n	8002902 <HAL_RCC_OscConfig+0x552>
 80028d2:	4b96      	ldr	r3, [pc, #600]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d8:	4a94      	ldr	r2, [pc, #592]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028e2:	4b92      	ldr	r3, [pc, #584]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e8:	4a90      	ldr	r2, [pc, #576]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028f2:	4b8e      	ldr	r3, [pc, #568]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f8:	4a8c      	ldr	r2, [pc, #560]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80028fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fbfb 	bl	8001104 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fbf7 	bl	8001104 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e175      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002928:	4b80      	ldr	r3, [pc, #512]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 800292a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ed      	beq.n	8002912 <HAL_RCC_OscConfig+0x562>
 8002936:	e015      	b.n	8002964 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fbe4 	bl	8001104 <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe fbe0 	bl	8001104 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e15e      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002956:	4b75      	ldr	r3, [pc, #468]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ed      	bne.n	8002940 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d036      	beq.n	80029de <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d019      	beq.n	80029ac <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002978:	4b6c      	ldr	r3, [pc, #432]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 800297e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe fbbe 	bl	8001104 <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800298c:	f7fe fbba 	bl	8001104 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e13a      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800299e:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x5dc>
 80029aa:	e018      	b.n	80029de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ac:	4b5f      	ldr	r3, [pc, #380]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80029b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fba4 	bl	8001104 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80029c0:	f7fe fba0 	bl	8001104 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e120      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029d2:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8115 	beq.w	8002c12 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b18      	cmp	r3, #24
 80029ec:	f000 80af 	beq.w	8002b4e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 8086 	bne.w	8002b06 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80029fa:	4b4c      	ldr	r3, [pc, #304]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a4b      	ldr	r2, [pc, #300]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe fb7d 	bl	8001104 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fb79 	bl	8001104 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0f9      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a20:	4b42      	ldr	r3, [pc, #264]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a34:	f023 0303 	bic.w	r3, r3, #3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a40:	0212      	lsls	r2, r2, #8
 8002a42:	430a      	orrs	r2, r1
 8002a44:	4939      	ldr	r1, [pc, #228]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	3b01      	subs	r3, #1
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a7a:	492c      	ldr	r1, [pc, #176]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a80:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	4a29      	ldr	r2, [pc, #164]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a86:	f023 0310 	bic.w	r3, r3, #16
 8002a8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a90:	4a26      	ldr	r2, [pc, #152]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a96:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	4a24      	ldr	r2, [pc, #144]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002a9c:	f043 0310 	orr.w	r3, r3, #16
 8002aa0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002aa2:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	f023 020c 	bic.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	491f      	ldr	r1, [pc, #124]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	f023 0220 	bic.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac0:	491a      	ldr	r1, [pc, #104]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ac6:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002ad2:	4b16      	ldr	r3, [pc, #88]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a15      	ldr	r2, [pc, #84]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002ad8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fb11 	bl	8001104 <HAL_GetTick>
 8002ae2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fb0d 	bl	8001104 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e08d      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x736>
 8002b04:	e085      	b.n	8002c12 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a08      	ldr	r2, [pc, #32]	@ (8002b2c <HAL_RCC_OscConfig+0x77c>)
 8002b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe faf7 	bl	8001104 <HAL_GetTick>
 8002b16:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe faf3 	bl	8001104 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d903      	bls.n	8002b30 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e073      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
 8002b2c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b30:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ee      	bne.n	8002b1a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002b3c:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b40:	4a36      	ldr	r2, [pc, #216]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002b42:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	6293      	str	r3, [r2, #40]	@ 0x28
 8002b4c:	e061      	b.n	8002c12 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b4e:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b54:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d031      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d12a      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d122      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d11a      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	0a5b      	lsrs	r3, r3, #9
 8002b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d111      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d108      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	0e1b      	lsrs	r3, r3, #24
 8002bb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e024      	b.n	8002c14 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bca:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	08db      	lsrs	r3, r3, #3
 8002bd0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d01a      	beq.n	8002c12 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	4a0e      	ldr	r2, [pc, #56]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002be2:	f023 0310 	bic.w	r3, r3, #16
 8002be6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fa8c 	bl	8001104 <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002bee:	bf00      	nop
 8002bf0:	f7fe fa88 	bl	8001104 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d0f9      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c00:	4a06      	ldr	r2, [pc, #24]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <HAL_RCC_OscConfig+0x86c>)
 8002c0c:	f043 0310 	orr.w	r3, r3, #16
 8002c10:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	44020c00 	.word	0x44020c00

08002c20 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e19e      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b83      	ldr	r3, [pc, #524]	@ (8002e44 <HAL_RCC_ClockConfig+0x224>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d910      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b80      	ldr	r3, [pc, #512]	@ (8002e44 <HAL_RCC_ClockConfig+0x224>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 020f 	bic.w	r2, r3, #15
 8002c4a:	497e      	ldr	r1, [pc, #504]	@ (8002e44 <HAL_RCC_ClockConfig+0x224>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b7c      	ldr	r3, [pc, #496]	@ (8002e44 <HAL_RCC_ClockConfig+0x224>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e186      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d012      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	4b74      	ldr	r3, [pc, #464]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d909      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002c82:	4b71      	ldr	r3, [pc, #452]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	496d      	ldr	r1, [pc, #436]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	4b68      	ldr	r3, [pc, #416]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d909      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002cb4:	4b64      	ldr	r3, [pc, #400]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	4961      	ldr	r1, [pc, #388]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d908      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ce4:	4b58      	ldr	r3, [pc, #352]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4955      	ldr	r1, [pc, #340]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	4b50      	ldr	r3, [pc, #320]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d908      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d12:	4b4d      	ldr	r3, [pc, #308]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	494a      	ldr	r1, [pc, #296]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8093 	beq.w	8002e58 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d3a:	4b43      	ldr	r3, [pc, #268]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d121      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e113      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d52:	4b3d      	ldr	r3, [pc, #244]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d115      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e107      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d6a:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0fb      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7a:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0f3      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	492c      	ldr	r1, [pc, #176]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9c:	f7fe f9b2 	bl	8001104 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d112      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe f9aa 	bl	8001104 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0d7      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc2:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0318 	and.w	r3, r3, #24
 8002dca:	2b18      	cmp	r3, #24
 8002dcc:	d1ee      	bne.n	8002dac <HAL_RCC_ClockConfig+0x18c>
 8002dce:	e043      	b.n	8002e58 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d112      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dda:	f7fe f993 	bl	8001104 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0c0      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df0:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f003 0318 	and.w	r3, r3, #24
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d1ee      	bne.n	8002dda <HAL_RCC_ClockConfig+0x1ba>
 8002dfc:	e02c      	b.n	8002e58 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d122      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe f97c 	bl	8001104 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0a9      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <HAL_RCC_ClockConfig+0x228>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 0318 	and.w	r3, r3, #24
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d1ee      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
 8002e2a:	e015      	b.n	8002e58 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe f96a 	bl	8001104 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d906      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e097      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000
 8002e48:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f003 0318 	and.w	r3, r3, #24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e9      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	4b44      	ldr	r3, [pc, #272]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d208      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002e74:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f023 020f 	bic.w	r2, r3, #15
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	493e      	ldr	r1, [pc, #248]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e86:	4b3e      	ldr	r3, [pc, #248]	@ (8002f80 <HAL_RCC_ClockConfig+0x360>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d210      	bcs.n	8002eb6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e94:	4b3a      	ldr	r3, [pc, #232]	@ (8002f80 <HAL_RCC_ClockConfig+0x360>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 020f 	bic.w	r2, r3, #15
 8002e9c:	4938      	ldr	r1, [pc, #224]	@ (8002f80 <HAL_RCC_ClockConfig+0x360>)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea4:	4b36      	ldr	r3, [pc, #216]	@ (8002f80 <HAL_RCC_ClockConfig+0x360>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e05d      	b.n	8002f72 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d208      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4927      	ldr	r1, [pc, #156]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d012      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d209      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f02:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	491a      	ldr	r1, [pc, #104]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d012      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d209      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	490e      	ldr	r1, [pc, #56]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f48:	f000 f822 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	490b      	ldr	r1, [pc, #44]	@ (8002f84 <HAL_RCC_ClockConfig+0x364>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <HAL_RCC_ClockConfig+0x368>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f62:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <HAL_RCC_ClockConfig+0x36c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe f842 	bl	8000ff0 <HAL_InitTick>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	44020c00 	.word	0x44020c00
 8002f80:	40022000 	.word	0x40022000
 8002f84:	08007074 	.word	0x08007074
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	@ 0x24
 8002f94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f96:	4b8c      	ldr	r3, [pc, #560]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0318 	and.w	r3, r3, #24
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fa2:	4b8a      	ldr	r3, [pc, #552]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x23c>)
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e107      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa8:	4b87      	ldr	r3, [pc, #540]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f003 0318 	and.w	r3, r3, #24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d112      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002fb4:	4b84      	ldr	r3, [pc, #528]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fc0:	4b81      	ldr	r3, [pc, #516]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	4a81      	ldr	r2, [pc, #516]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e0f1      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	e0ee      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fda:	4b7b      	ldr	r3, [pc, #492]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 0318 	and.w	r3, r3, #24
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x244>)
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e0e5      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fec:	4b76      	ldr	r3, [pc, #472]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 0318 	and.w	r3, r3, #24
 8002ff4:	2b18      	cmp	r3, #24
 8002ff6:	f040 80dd 	bne.w	80031b4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ffa:	4b73      	ldr	r3, [pc, #460]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003004:	4b70      	ldr	r3, [pc, #448]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800300e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003010:	4b6d      	ldr	r3, [pc, #436]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800301c:	4b6a      	ldr	r3, [pc, #424]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003020:	08db      	lsrs	r3, r3, #3
 8003022:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003034:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80b7 	beq.w	80031ae <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0xbe>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d056      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x16a>
 800304c:	e077      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800304e:	4b5e      	ldr	r3, [pc, #376]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02d      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800305a:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	4a5a      	ldr	r2, [pc, #360]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003084:	4b50      	ldr	r3, [pc, #320]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003094:	ed97 6a02 	vldr	s12, [r7, #8]
 8003098:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80031d8 <HAL_RCC_GetSysClockFreq+0x248>
 800309c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80030b4:	e065      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80031dc <HAL_RCC_GetSysClockFreq+0x24c>
 80030c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c8:	4b3f      	ldr	r3, [pc, #252]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80030dc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80031d8 <HAL_RCC_GetSysClockFreq+0x248>
 80030e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80030f8:	e043      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003104:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80031e0 <HAL_RCC_GetSysClockFreq+0x250>
 8003108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310c:	4b2e      	ldr	r3, [pc, #184]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800310e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800311c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003120:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80031d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003124:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003128:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800312c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003130:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003138:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800313c:	e021      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003148:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031e4 <HAL_RCC_GetSysClockFreq+0x254>
 800314c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003150:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003160:	ed97 6a02 	vldr	s12, [r7, #8]
 8003164:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80031d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003168:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800316c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003174:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003180:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003182:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	0a5b      	lsrs	r3, r3, #9
 8003188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800318c:	3301      	adds	r3, #1
 800318e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800319a:	edd7 6a06 	vldr	s13, [r7, #24]
 800319e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a6:	ee17 3a90 	vmov	r3, s15
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	e004      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e001      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80031b4:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80031b6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80031b8:	69fb      	ldr	r3, [r7, #28]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3724      	adds	r7, #36	@ 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	44020c00 	.word	0x44020c00
 80031cc:	003d0900 	.word	0x003d0900
 80031d0:	03d09000 	.word	0x03d09000
 80031d4:	016e3600 	.word	0x016e3600
 80031d8:	46000000 	.word	0x46000000
 80031dc:	4c742400 	.word	0x4c742400
 80031e0:	4bb71b00 	.word	0x4bb71b00
 80031e4:	4a742400 	.word	0x4a742400

080031e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031ec:	f7ff fed0 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x2c>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80031f6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031fa:	4907      	ldr	r1, [pc, #28]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x30>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80031fe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <HAL_RCC_GetHCLKFreq+0x34>)
 8003208:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800320a:	4b04      	ldr	r3, [pc, #16]	@ (800321c <HAL_RCC_GetHCLKFreq+0x34>)
 800320c:	681b      	ldr	r3, [r3, #0]
}
 800320e:	4618      	mov	r0, r3
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	44020c00 	.word	0x44020c00
 8003218:	08007074 	.word	0x08007074
 800321c:	20000000 	.word	0x20000000

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003224:	f7ff ffe0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4904      	ldr	r1, [pc, #16]	@ (8003248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	44020c00 	.word	0x44020c00
 8003248:	08007084 	.word	0x08007084

0800324c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003250:	f7ff ffca 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4904      	ldr	r1, [pc, #16]	@ (8003274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	44020c00 	.word	0x44020c00
 8003274:	08007084 	.word	0x08007084

08003278 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800327c:	f7ff ffb4 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	0b1b      	lsrs	r3, r3, #12
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4904      	ldr	r1, [pc, #16]	@ (80032a0 <HAL_RCC_GetPCLK3Freq+0x28>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	44020c00 	.word	0x44020c00
 80032a0:	08007084 	.word	0x08007084

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b0aa      	sub	sp, #168	@ 0xa8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80032c8:	2500      	movs	r5, #0
 80032ca:	ea54 0305 	orrs.w	r3, r4, r5
 80032ce:	d00b      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80032d0:	4bb8      	ldr	r3, [pc, #736]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032d6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80032da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	4ab4      	ldr	r2, [pc, #720]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032e2:	430b      	orrs	r3, r1
 80032e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f002 0801 	and.w	r8, r2, #1
 80032f4:	f04f 0900 	mov.w	r9, #0
 80032f8:	ea58 0309 	orrs.w	r3, r8, r9
 80032fc:	d038      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80032fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003304:	2b05      	cmp	r3, #5
 8003306:	d819      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003308:	a201      	add	r2, pc, #4	@ (adr r2, 8003310 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003345 	.word	0x08003345
 8003314:	08003329 	.word	0x08003329
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003345 	.word	0x08003345
 8003320:	08003345 	.word	0x08003345
 8003324:	08003345 	.word	0x08003345
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003328:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800332c:	3308      	adds	r3, #8
 800332e:	4618      	mov	r0, r3
 8003330:	f001 fff2 	bl	8005318 <RCCEx_PLL2_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800333a:	e004      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800334e:	4b99      	ldr	r3, [pc, #612]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003350:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003354:	f023 0107 	bic.w	r1, r3, #7
 8003358:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335e:	4a95      	ldr	r2, [pc, #596]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003360:	430b      	orrs	r3, r1
 8003362:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003366:	e003      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800336c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003370:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f002 0a02 	and.w	sl, r2, #2
 800337c:	f04f 0b00 	mov.w	fp, #0
 8003380:	ea5a 030b 	orrs.w	r3, sl, fp
 8003384:	d03c      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003386:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	2b28      	cmp	r3, #40	@ 0x28
 800338e:	d01b      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003390:	2b28      	cmp	r3, #40	@ 0x28
 8003392:	d815      	bhi.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003394:	2b20      	cmp	r3, #32
 8003396:	d019      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d811      	bhi.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800339c:	2b18      	cmp	r3, #24
 800339e:	d017      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80033a0:	2b18      	cmp	r3, #24
 80033a2:	d80d      	bhi.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d109      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033b0:	3308      	adds	r3, #8
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 ffb0 	bl	8005318 <RCCEx_PLL2_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80033be:	e00a      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033c6:	e006      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033c8:	bf00      	nop
 80033ca:	e004      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033cc:	bf00      	nop
 80033ce:	e002      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80033de:	4b75      	ldr	r3, [pc, #468]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033e4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80033e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	4a71      	ldr	r2, [pc, #452]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033f6:	e003      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003400:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f002 0304 	and.w	r3, r2, #4
 800340c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003416:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800341a:	460b      	mov	r3, r1
 800341c:	4313      	orrs	r3, r2
 800341e:	d040      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003420:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800342a:	d01e      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800342c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003430:	d817      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003436:	d01a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343c:	d811      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800343e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003440:	d017      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003442:	2bc0      	cmp	r3, #192	@ 0xc0
 8003444:	d80d      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d015      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800344a:	2b40      	cmp	r3, #64	@ 0x40
 800344c:	d109      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800344e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003452:	3308      	adds	r3, #8
 8003454:	4618      	mov	r0, r3
 8003456:	f001 ff5f 	bl	8005318 <RCCEx_PLL2_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003460:	e00a      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003468:	e006      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800346a:	bf00      	nop
 800346c:	e004      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003478:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10c      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003480:	4b4c      	ldr	r3, [pc, #304]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003482:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003486:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800348a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	4a48      	ldr	r2, [pc, #288]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003492:	430b      	orrs	r3, r1
 8003494:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003498:	e003      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800349e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034b2:	2300      	movs	r3, #0
 80034b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034bc:	460b      	mov	r3, r1
 80034be:	4313      	orrs	r3, r2
 80034c0:	d043      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80034c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034cc:	d021      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034d2:	d81a      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d8:	d01d      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80034da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034de:	d814      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034e4:	d019      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80034e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034ea:	d80e      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80034f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034f4:	d109      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034fa:	3308      	adds	r3, #8
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 ff0b 	bl	8005318 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003508:	e00a      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003510:	e006      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003512:	bf00      	nop
 8003514:	e004      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800351e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003520:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10c      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003528:	4b22      	ldr	r3, [pc, #136]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800352a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800352e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003532:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	4a1e      	ldr	r2, [pc, #120]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800353a:	430b      	orrs	r3, r1
 800353c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003546:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003556:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003558:	2300      	movs	r3, #0
 800355a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800355c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003560:	460b      	mov	r3, r1
 8003562:	4313      	orrs	r3, r2
 8003564:	d03e      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003566:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800356a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003570:	d01b      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003576:	d814      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800357c:	d017      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800357e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003582:	d80e      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d017      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358c:	d109      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800358e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003592:	3308      	adds	r3, #8
 8003594:	4618      	mov	r0, r3
 8003596:	f001 febf 	bl	8005318 <RCCEx_PLL2_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80035a0:	e00b      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035a8:	e007      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035aa:	bf00      	nop
 80035ac:	e005      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035ae:	bf00      	nop
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
 80035b2:	bf00      	nop
 80035b4:	44020c00 	.word	0x44020c00
        break;
 80035b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80035c2:	4ba5      	ldr	r3, [pc, #660]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035c8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	4aa1      	ldr	r2, [pc, #644]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035e0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80035f2:	2300      	movs	r3, #0
 80035f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80035f6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035fa:	460b      	mov	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003600:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003606:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800360a:	d01b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800360c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003610:	d814      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003612:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003616:	d017      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003618:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800361c:	d80e      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d014      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003622:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003626:	d109      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003628:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800362c:	3308      	adds	r3, #8
 800362e:	4618      	mov	r0, r3
 8003630:	f001 fe72 	bl	8005318 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800363a:	e008      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003642:	e004      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003644:	bf00      	nop
 8003646:	e002      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800364c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003656:	4b80      	ldr	r3, [pc, #512]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800365c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003660:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003666:	4a7c      	ldr	r2, [pc, #496]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003668:	430b      	orrs	r3, r1
 800366a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800366e:	e003      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003674:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003678:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003684:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003686:	2300      	movs	r3, #0
 8003688:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800368a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800368e:	460b      	mov	r3, r1
 8003690:	4313      	orrs	r3, r2
 8003692:	d033      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003694:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800369e:	d015      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80036a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a4:	d80e      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80036aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ae:	d109      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036b4:	3308      	adds	r3, #8
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fe2e 	bl	8005318 <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80036c2:	e006      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80036d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80036da:	4b5f      	ldr	r3, [pc, #380]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036e0:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80036e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80036f2:	e003      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036f8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80036fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	2100      	movs	r1, #0
 8003706:	6639      	str	r1, [r7, #96]	@ 0x60
 8003708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370c:	667b      	str	r3, [r7, #100]	@ 0x64
 800370e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d033      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800371c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003722:	d015      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003728:	d80e      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d012      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800372e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003732:	d109      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003734:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003738:	3308      	adds	r3, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fdec 	bl	8005318 <RCCEx_PLL2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003746:	e006      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800374e:	e002      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003754:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003756:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800375e:	4b3e      	ldr	r3, [pc, #248]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003764:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003768:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	4a3a      	ldr	r2, [pc, #232]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003770:	430b      	orrs	r3, r1
 8003772:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003776:	e003      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800377c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003780:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	2100      	movs	r1, #0
 800378a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800378c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003792:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800379c:	4b2e      	ldr	r3, [pc, #184]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037a6:	61d3      	str	r3, [r2, #28]
 80037a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b4:	4a28      	ldr	r2, [pc, #160]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80037c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037c8:	2300      	movs	r3, #0
 80037ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80037cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d046      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80037d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80037e0:	d021      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80037e2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80037e6:	d81a      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ec:	d01d      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	d814      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80037f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037f8:	d019      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80037fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037fe:	d80e      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003808:	d109      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800380a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800380e:	3308      	adds	r3, #8
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fd81 	bl	8005318 <RCCEx_PLL2_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800381c:	e00a      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003824:	e006      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003826:	bf00      	nop
 8003828:	e004      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003834:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800383c:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800383e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003842:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003846:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	4a02      	ldr	r2, [pc, #8]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800384e:	430b      	orrs	r3, r1
 8003850:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003854:	e006      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003856:	bf00      	nop
 8003858:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003860:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003864:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003872:	2300      	movs	r3, #0
 8003874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003876:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d043      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003880:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003886:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800388a:	d021      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800388c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003890:	d81a      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003896:	d01d      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800389c:	d814      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800389e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038a2:	d019      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80038a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038a8:	d80e      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x638>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d109      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b8:	3308      	adds	r3, #8
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fd2c 	bl	8005318 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80038c6:	e00a      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038ce:	e006      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038d0:	bf00      	nop
 80038d2:	e004      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038d4:	bf00      	nop
 80038d6:	e002      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038d8:	bf00      	nop
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80038e6:	4bb6      	ldr	r3, [pc, #728]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80038ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	4ab2      	ldr	r2, [pc, #712]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003904:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003908:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003914:	643b      	str	r3, [r7, #64]	@ 0x40
 8003916:	2300      	movs	r3, #0
 8003918:	647b      	str	r3, [r7, #68]	@ 0x44
 800391a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d030      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800392a:	2b05      	cmp	r3, #5
 800392c:	d80f      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800392e:	2b03      	cmp	r3, #3
 8003930:	d211      	bcs.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003932:	2b01      	cmp	r3, #1
 8003934:	d911      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003936:	2b02      	cmp	r3, #2
 8003938:	d109      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800393a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800393e:	3308      	adds	r3, #8
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fce9 	bl	8005318 <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10c      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003964:	4b96      	ldr	r3, [pc, #600]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800396a:	f023 0107 	bic.w	r1, r3, #7
 800396e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003974:	4a92      	ldr	r2, [pc, #584]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003976:	430b      	orrs	r3, r1
 8003978:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003982:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003986:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	2100      	movs	r1, #0
 8003990:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003998:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800399c:	460b      	mov	r3, r1
 800399e:	4313      	orrs	r3, r2
 80039a0:	d022      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80039a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d005      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039b6:	e002      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80039bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80039c6:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039cc:	f023 0108 	bic.w	r1, r3, #8
 80039d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d6:	4a7a      	ldr	r2, [pc, #488]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039d8:	430b      	orrs	r3, r1
 80039da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80039de:	e003      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039e4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039f6:	2300      	movs	r3, #0
 80039f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f000 80b0 	beq.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003a06:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a12:	f7fd fb77 	bl	8001104 <HAL_GetTick>
 8003a16:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fd fb72 	bl	8001104 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d903      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a34:	4b63      	ldr	r3, [pc, #396]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ed      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003a40:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f040 808a 	bne.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003a58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d022      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d01b      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a6e:	4b54      	ldr	r3, [pc, #336]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	4b50      	ldr	r3, [pc, #320]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a82:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a92:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9c:	4a48      	ldr	r2, [pc, #288]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d019      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd fb27 	bl	8001104 <HAL_GetTick>
 8003ab6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aba:	e00d      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7fd fb22 	bl	8001104 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d903      	bls.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003ad6:	e006      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad8:	4b39      	ldr	r3, [pc, #228]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ea      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003ae6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d132      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003aee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003af2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003afe:	4b30      	ldr	r3, [pc, #192]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003b16:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	61d3      	str	r3, [r2, #28]
 8003b1c:	e005      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003b1e:	4b28      	ldr	r3, [pc, #160]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b28:	61d3      	str	r3, [r2, #28]
 8003b2a:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b30:	4a23      	ldr	r2, [pc, #140]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b3a:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b3c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b52:	e008      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b54:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b58:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b62:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d038      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b88:	2b30      	cmp	r3, #48	@ 0x30
 8003b8a:	d014      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003b8c:	2b30      	cmp	r3, #48	@ 0x30
 8003b8e:	d80e      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d012      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d80a      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d106      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba0:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	4a06      	ldr	r2, [pc, #24]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003baa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bac:	e00d      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bb4:	e009      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e007      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e005      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003bbe:	bf00      	nop
 8003bc0:	44020c00 	.word	0x44020c00
 8003bc4:	44020800 	.word	0x44020800
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003bd2:	4bb5      	ldr	r3, [pc, #724]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be2:	49b1      	ldr	r1, [pc, #708]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bf0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d03c      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d81d      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c35 	.word	0x08003c35
 8003c24:	08003c43 	.word	0x08003c43
 8003c28:	08003c57 	.word	0x08003c57
 8003c2c:	08003c5f 	.word	0x08003c5f
 8003c30:	08003c5f 	.word	0x08003c5f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b9c      	ldr	r3, [pc, #624]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	4a9b      	ldr	r2, [pc, #620]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c40:	e00e      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c46:	3308      	adds	r3, #8
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 fb65 	bl	8005318 <RCCEx_PLL2_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c54:	e004      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c60:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003c68:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c6e:	f023 0207 	bic.w	r2, r3, #7
 8003c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c78:	498b      	ldr	r1, [pc, #556]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c86:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d03c      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003ca6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d01f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d819      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003cb4:	2b18      	cmp	r3, #24
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003cb8:	2b18      	cmp	r3, #24
 8003cba:	d815      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d007      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003cc4:	e010      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc6:	4b78      	ldr	r3, [pc, #480]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	4a77      	ldr	r2, [pc, #476]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003cd2:	e010      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd8:	3308      	adds	r3, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 fb1c 	bl	8005318 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e006      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d04:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	4966      	ldr	r1, [pc, #408]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d16:	e003      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d03e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003d3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d46:	d020      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d4c:	d819      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d50:	d01d      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d54:	d815      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d007      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003d5e:	e010      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d60:	4b51      	ldr	r3, [pc, #324]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	4a50      	ldr	r2, [pc, #320]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e010      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d72:	3308      	adds	r3, #8
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 facf 	bl	8005318 <RCCEx_PLL2_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d90:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003d98:	4b43      	ldr	r3, [pc, #268]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d9e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da8:	493f      	ldr	r1, [pc, #252]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003db0:	e003      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003db6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	d038      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de0:	d00e      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de6:	d815      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d017      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df0:	d110      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df2:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dfc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003dfe:	e00e      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e04:	3308      	adds	r3, #8
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fa86 	bl	8005318 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e12:	e004      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e1a:	e000      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	491c      	ldr	r1, [pc, #112]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e44:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	2100      	movs	r1, #0
 8003e52:	6039      	str	r1, [r7, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	d039      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6a:	2b30      	cmp	r3, #48	@ 0x30
 8003e6c:	d01e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003e6e:	2b30      	cmp	r3, #48	@ 0x30
 8003e70:	d815      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d002      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d007      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003e7a:	e010      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e80:	4a09      	ldr	r2, [pc, #36]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e86:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e88:	e011      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e8e:	3308      	adds	r3, #8
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fa41 	bl	8005318 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003e9c:	e007      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003ea6:	bf00      	nop
 8003ea8:	44020c00 	.word	0x44020c00
        break;
 8003eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003eb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ebc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec6:	4908      	ldr	r1, [pc, #32]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ed4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003ed8:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	37a8      	adds	r7, #168	@ 0xa8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee6:	bf00      	nop
 8003ee8:	44020c00 	.word	0x44020c00

08003eec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b08b      	sub	sp, #44	@ 0x2c
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003ef4:	4bae      	ldr	r3, [pc, #696]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003efe:	4bac      	ldr	r3, [pc, #688]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003f08:	4ba9      	ldr	r3, [pc, #676]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f12:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003f14:	4ba6      	ldr	r3, [pc, #664]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f20:	4ba3      	ldr	r3, [pc, #652]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f38:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8126 	beq.w	8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d053      	beq.n	8003ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d86f      	bhi.n	8004030 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d003      	beq.n	8003f5e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d02b      	beq.n	8003fb4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003f5c:	e068      	b.n	8004030 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f5e:	4b94      	ldr	r3, [pc, #592]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	4a92      	ldr	r2, [pc, #584]	@ (80041b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f96:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80041b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003fb2:	e068      	b.n	8004086 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80041bc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fd4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003ff0:	e049      	b.n	8004086 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80041c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004012:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80041b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800402e:	e02a      	b.n	8004086 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004030:	4b5f      	ldr	r3, [pc, #380]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	4a5e      	ldr	r2, [pc, #376]	@ (80041b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004064:	ed97 6a04 	vldr	s12, [r7, #16]
 8004068:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80041b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800406c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004084:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004086:	4b4a      	ldr	r3, [pc, #296]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004092:	d121      	bne.n	80040d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004094:	4b46      	ldr	r3, [pc, #280]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d017      	beq.n	80040d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040a0:	4b43      	ldr	r3, [pc, #268]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a4:	0a5b      	lsrs	r3, r3, #9
 80040a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80040b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80040ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e006      	b.n	80040de <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e002      	b.n	80040de <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040de:	4b34      	ldr	r3, [pc, #208]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040ea:	d121      	bne.n	8004130 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80040ec:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040f8:	4b2d      	ldr	r3, [pc, #180]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800410a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800410e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004112:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800411a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	e006      	b.n	8004136 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	e002      	b.n	8004136 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004136:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004142:	d121      	bne.n	8004188 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004144:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d017      	beq.n	8004180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004150:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004154:	0e1b      	lsrs	r3, r3, #24
 8004156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004166:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800416a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800416e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004176:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800417e:	e010      	b.n	80041a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
}
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
}
 800418e:	e008      	b.n	80041a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	609a      	str	r2, [r3, #8]
}
 80041a2:	bf00      	nop
 80041a4:	372c      	adds	r7, #44	@ 0x2c
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	44020c00 	.word	0x44020c00
 80041b4:	03d09000 	.word	0x03d09000
 80041b8:	46000000 	.word	0x46000000
 80041bc:	4a742400 	.word	0x4a742400
 80041c0:	4bb71b00 	.word	0x4bb71b00

080041c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b08b      	sub	sp, #44	@ 0x2c
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80041cc:	4bae      	ldr	r3, [pc, #696]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80041d6:	4bac      	ldr	r3, [pc, #688]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80041e0:	4ba9      	ldr	r3, [pc, #676]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041ea:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80041ec:	4ba6      	ldr	r3, [pc, #664]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80041f8:	4ba3      	ldr	r3, [pc, #652]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004210:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8126 	beq.w	8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d053      	beq.n	80042ca <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d86f      	bhi.n	8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d003      	beq.n	8004236 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d02b      	beq.n	800428c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004234:	e068      	b.n	8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004236:	4b94      	ldr	r3, [pc, #592]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	4a92      	ldr	r2, [pc, #584]	@ (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426a:	ed97 6a04 	vldr	s12, [r7, #16]
 800426e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800427e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004286:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800428a:	e068      	b.n	800435e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004296:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800429a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80042ac:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80042b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80042c8:	e049      	b.n	800435e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80042d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80042ea:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004306:	e02a      	b.n	800435e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004308:	4b5f      	ldr	r3, [pc, #380]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	4a5e      	ldr	r2, [pc, #376]	@ (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004340:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004358:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800435c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800435e:	4b4a      	ldr	r3, [pc, #296]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800436a:	d121      	bne.n	80043b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800436c:	4b46      	ldr	r3, [pc, #280]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d017      	beq.n	80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004378:	4b43      	ldr	r3, [pc, #268]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800437a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437c:	0a5b      	lsrs	r3, r3, #9
 800437e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800438a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800438e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004392:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800439a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043c2:	d121      	bne.n	8004408 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80043c4:	4b30      	ldr	r3, [pc, #192]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80043e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80043ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e006      	b.n	800440e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	e002      	b.n	800440e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800440e:	4b1e      	ldr	r3, [pc, #120]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800441a:	d121      	bne.n	8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800441c:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d017      	beq.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004428:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800443a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800443e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004442:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800444a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004456:	e010      	b.n	800447a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
}
 800445e:	e00c      	b.n	800447a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
}
 8004466:	e008      	b.n	800447a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
}
 800447a:	bf00      	nop
 800447c:	372c      	adds	r7, #44	@ 0x2c
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	44020c00 	.word	0x44020c00
 800448c:	03d09000 	.word	0x03d09000
 8004490:	46000000 	.word	0x46000000
 8004494:	4a742400 	.word	0x4a742400
 8004498:	4bb71b00 	.word	0x4bb71b00

0800449c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	@ 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80044a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044aa:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80044ae:	430b      	orrs	r3, r1
 80044b0:	d14b      	bne.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044b2:	4bc4      	ldr	r3, [pc, #784]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80044be:	4bc1      	ldr	r3, [pc, #772]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d108      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d2:	d104      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80044d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044da:	f000 bf14 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80044de:	4bb9      	ldr	r3, [pc, #740]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ec:	d108      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80044ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f4:	d104      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80044f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fc:	f000 bf03 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004500:	4bb0      	ldr	r3, [pc, #704]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800450c:	d119      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800450e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004514:	d115      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004516:	4bab      	ldr	r3, [pc, #684]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800451e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004522:	d30a      	bcc.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004524:	4ba7      	ldr	r3, [pc, #668]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800452e:	4aa6      	ldr	r2, [pc, #664]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004536:	f000 bee6 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800453e:	f000 bee2 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	f000 bede 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800454a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800454e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004552:	ea52 0301 	orrs.w	r3, r2, r1
 8004556:	f000 838e 	beq.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800455a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800455e:	2a01      	cmp	r2, #1
 8004560:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004564:	f080 86cc 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004570:	ea52 0301 	orrs.w	r3, r2, r1
 8004574:	f000 82aa 	beq.w	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800457c:	2a01      	cmp	r2, #1
 800457e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8004582:	f080 86bd 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800458a:	f1a3 0110 	sub.w	r1, r3, #16
 800458e:	ea52 0301 	orrs.w	r3, r2, r1
 8004592:	f000 8681 	beq.w	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800459a:	2a01      	cmp	r2, #1
 800459c:	f173 0310 	sbcs.w	r3, r3, #16
 80045a0:	f080 86ae 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a8:	1f19      	subs	r1, r3, #4
 80045aa:	ea52 0301 	orrs.w	r3, r2, r1
 80045ae:	f000 84b1 	beq.w	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80045b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045b6:	2a01      	cmp	r2, #1
 80045b8:	f173 0304 	sbcs.w	r3, r3, #4
 80045bc:	f080 86a0 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80045c8:	430b      	orrs	r3, r1
 80045ca:	f000 85aa 	beq.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80045ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d2:	497e      	ldr	r1, [pc, #504]	@ (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80045d4:	428a      	cmp	r2, r1
 80045d6:	f173 0300 	sbcs.w	r3, r3, #0
 80045da:	f080 8691 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80045e6:	430b      	orrs	r3, r1
 80045e8:	f000 8532 	beq.w	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80045ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f0:	4977      	ldr	r1, [pc, #476]	@ (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80045f2:	428a      	cmp	r2, r1
 80045f4:	f173 0300 	sbcs.w	r3, r3, #0
 80045f8:	f080 8682 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004600:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004604:	430b      	orrs	r3, r1
 8004606:	f000 84bc 	beq.w	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800460a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460e:	4971      	ldr	r1, [pc, #452]	@ (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004610:	428a      	cmp	r2, r1
 8004612:	f173 0300 	sbcs.w	r3, r3, #0
 8004616:	f080 8673 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004622:	430b      	orrs	r3, r1
 8004624:	f000 85f2 	beq.w	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800462c:	496a      	ldr	r1, [pc, #424]	@ (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800462e:	428a      	cmp	r2, r1
 8004630:	f173 0300 	sbcs.w	r3, r3, #0
 8004634:	f080 8664 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800463c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004640:	430b      	orrs	r3, r1
 8004642:	f000 81e5 	beq.w	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800464a:	4964      	ldr	r1, [pc, #400]	@ (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 800464c:	428a      	cmp	r2, r1
 800464e:	f173 0300 	sbcs.w	r3, r3, #0
 8004652:	f080 8655 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800465a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800465e:	430b      	orrs	r3, r1
 8004660:	f000 83cc 	beq.w	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004668:	495d      	ldr	r1, [pc, #372]	@ (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800466a:	428a      	cmp	r2, r1
 800466c:	f173 0300 	sbcs.w	r3, r3, #0
 8004670:	f080 8646 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004678:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800467c:	430b      	orrs	r3, r1
 800467e:	f000 8331 	beq.w	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004686:	4957      	ldr	r1, [pc, #348]	@ (80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004688:	428a      	cmp	r2, r1
 800468a:	f173 0300 	sbcs.w	r3, r3, #0
 800468e:	f080 8637 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004696:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800469a:	430b      	orrs	r3, r1
 800469c:	f000 82bb 	beq.w	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80046a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a4:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80046a8:	f173 0300 	sbcs.w	r3, r3, #0
 80046ac:	f080 8628 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80046b8:	430b      	orrs	r3, r1
 80046ba:	f000 826d 	beq.w	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80046be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80046c6:	428a      	cmp	r2, r1
 80046c8:	f173 0300 	sbcs.w	r3, r3, #0
 80046cc:	f080 8618 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80046d8:	430b      	orrs	r3, r1
 80046da:	f000 821e 	beq.w	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80046de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e2:	f242 0101 	movw	r1, #8193	@ 0x2001
 80046e6:	428a      	cmp	r2, r1
 80046e8:	f173 0300 	sbcs.w	r3, r3, #0
 80046ec:	f080 8608 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80046f8:	430b      	orrs	r3, r1
 80046fa:	f000 8137 	beq.w	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80046fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004702:	f241 0101 	movw	r1, #4097	@ 0x1001
 8004706:	428a      	cmp	r2, r1
 8004708:	f173 0300 	sbcs.w	r3, r3, #0
 800470c:	f080 85f8 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004714:	1f11      	subs	r1, r2, #4
 8004716:	430b      	orrs	r3, r1
 8004718:	f000 80d2 	beq.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 800471c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004720:	2a05      	cmp	r2, #5
 8004722:	f173 0300 	sbcs.w	r3, r3, #0
 8004726:	f080 85eb 	bcs.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800472a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800472e:	1e51      	subs	r1, r2, #1
 8004730:	430b      	orrs	r3, r1
 8004732:	d006      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004738:	1e91      	subs	r1, r2, #2
 800473a:	430b      	orrs	r3, r1
 800473c:	d06c      	beq.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800473e:	f000 bddf 	b.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004742:	4b20      	ldr	r3, [pc, #128]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004754:	f7fe fd7a 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 8004758:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800475a:	f000 bdd4 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800475e:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800476a:	d10a      	bne.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fd24 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004780:	e048      	b.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	2b03      	cmp	r3, #3
 8004792:	d109      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004794:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	4a12      	ldr	r2, [pc, #72]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a6:	e035      	b.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80047a8:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047b4:	d11c      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d119      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c0:	e028      	b.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80047c2:	bf00      	nop
 80047c4:	44020c00 	.word	0x44020c00
 80047c8:	016e3600 	.word	0x016e3600
 80047cc:	20000001 	.word	0x20000001
 80047d0:	10000001 	.word	0x10000001
 80047d4:	08000001 	.word	0x08000001
 80047d8:	04000001 	.word	0x04000001
 80047dc:	00200001 	.word	0x00200001
 80047e0:	00040001 	.word	0x00040001
 80047e4:	00020001 	.word	0x00020001
 80047e8:	03d09000 	.word	0x03d09000
 80047ec:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80047f0:	4b9f      	ldr	r3, [pc, #636]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80047f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d106      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	2b05      	cmp	r3, #5
 8004802:	d103      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800480a:	e003      	b.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004810:	f000 bd79 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004814:	f000 bd77 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004818:	4b95      	ldr	r3, [pc, #596]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800481a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800481e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004822:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800482a:	f7fe fcf9 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 800482e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004830:	f000 bd69 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004834:	4b8e      	ldr	r3, [pc, #568]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004840:	d10a      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	2b08      	cmp	r3, #8
 8004846:	d107      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fcb9 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004856:	e031      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004858:	4b85      	ldr	r3, [pc, #532]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d10c      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	2b18      	cmp	r3, #24
 8004868:	d109      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800486a:	4b81      	ldr	r3, [pc, #516]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	08db      	lsrs	r3, r3, #3
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	4a7f      	ldr	r2, [pc, #508]	@ (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487c:	e01e      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800487e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	2b20      	cmp	r3, #32
 8004890:	d102      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004892:	4b79      	ldr	r3, [pc, #484]	@ (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004896:	e011      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004898:	4b75      	ldr	r3, [pc, #468]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800489a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d106      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	2b28      	cmp	r3, #40	@ 0x28
 80048aa:	d103      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80048ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b2:	e003      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048b8:	f000 bd25 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048bc:	f000 bd23 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80048ca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048d2:	f7fe fca5 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 80048d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80048d8:	f000 bd15 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80048dc:	4b64      	ldr	r3, [pc, #400]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048e8:	d10a      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	2b40      	cmp	r3, #64	@ 0x40
 80048ee:	d107      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fc65 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fe:	e033      	b.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004900:	4b5b      	ldr	r3, [pc, #364]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	d10c      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004910:	d109      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004912:	4b57      	ldr	r3, [pc, #348]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	08db      	lsrs	r3, r3, #3
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	4a55      	ldr	r2, [pc, #340]	@ (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800491e:	fa22 f303 	lsr.w	r3, r2, r3
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004924:	e020      	b.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004926:	4b52      	ldr	r3, [pc, #328]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800492e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004932:	d106      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493a:	d102      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 800493c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004940:	e012      	b.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004942:	4b4b      	ldr	r3, [pc, #300]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d107      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004956:	d103      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495e:	e003      	b.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004964:	f000 bccf 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004968:	f000 bccd 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800496c:	4b40      	ldr	r3, [pc, #256]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004972:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004976:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800497e:	f7fe fc7b 	bl	8003278 <HAL_RCC_GetPCLK3Freq>
 8004982:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004984:	f000 bcbf 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800498e:	d108      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004990:	f107 030c 	add.w	r3, r7, #12
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fc15 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800499e:	f000 bcb2 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80049a2:	4b33      	ldr	r3, [pc, #204]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d10d      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049b4:	d109      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	08db      	lsrs	r3, r3, #3
 80049bc:	f003 0303 	and.w	r3, r3, #3
 80049c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c8:	e020      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80049ca:	4b29      	ldr	r3, [pc, #164]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d6:	d106      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049de:	d102      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80049e0:	4b25      	ldr	r3, [pc, #148]	@ (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80049e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e4:	e012      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80049e6:	4b22      	ldr	r3, [pc, #136]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049fa:	d103      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80049fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a02:	e003      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a08:	f000 bc7d 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a0c:	f000 bc7b 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004a10:	4b17      	ldr	r3, [pc, #92]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004a22:	f7fe fbe1 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8004a26:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004a28:	f000 bc6d 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d104      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a32:	f7fe faad 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8004a36:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004a38:	f000 bc65 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d108      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a42:	f107 030c 	add.w	r3, r7, #12
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fbbc 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a50:	f000 bc59 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004a54:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a60:	d10e      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d10b      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004a68:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6c:	e02c      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004a6e:	bf00      	nop
 8004a70:	44020c00 	.word	0x44020c00
 8004a74:	03d09000 	.word	0x03d09000
 8004a78:	003d0900 	.word	0x003d0900
 8004a7c:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004a80:	4b95      	ldr	r3, [pc, #596]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a92:	4b91      	ldr	r3, [pc, #580]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	08db      	lsrs	r3, r3, #3
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	4a8f      	ldr	r2, [pc, #572]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa4:	e010      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004aa6:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004aba:	4b89      	ldr	r3, [pc, #548]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004abe:	e003      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ac4:	f000 bc1f 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ac8:	f000 bc1d 	b.w	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004acc:	4b82      	ldr	r3, [pc, #520]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004af4:	4b78      	ldr	r3, [pc, #480]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004afa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b02:	d106      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d103      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004b0a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004b16:	e3f6      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b18:	e3f5      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b24:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f7fe fb78 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8004b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b32:	e3e8      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fb3f 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b4a:	e3dc      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004b4c:	4b62      	ldr	r3, [pc, #392]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d10d      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b5e:	d109      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b60:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	08db      	lsrs	r3, r3, #3
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b72:	e010      	b.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004b74:	4b58      	ldr	r3, [pc, #352]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b80:	d106      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b88:	d102      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004b8a:	4b55      	ldr	r3, [pc, #340]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b8e:	e002      	b.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b94:	e3b7      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b96:	e3b6      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b98:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b9e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004baa:	f7fe fb39 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8004bae:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004bb0:	e3a9      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bb8:	d107      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bba:	f107 030c 	add.w	r3, r7, #12
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fb00 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bc8:	e39d      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004bca:	4b43      	ldr	r3, [pc, #268]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d10d      	bne.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bde:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	08db      	lsrs	r3, r3, #3
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf0:	e010      	b.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004bf2:	4b39      	ldr	r3, [pc, #228]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c06:	d102      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004c08:	4b35      	ldr	r3, [pc, #212]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c12:	e378      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c14:	e377      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004c16:	4b30      	ldr	r3, [pc, #192]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c1c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe fafa 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c2e:	e36a      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c36:	d107      	bne.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fac1 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c46:	e35e      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004c48:	4b23      	ldr	r3, [pc, #140]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d10d      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c5a:	d109      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	08db      	lsrs	r3, r3, #3
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	4a1d      	ldr	r2, [pc, #116]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c6e:	e34a      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c74:	e347      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004c76:	4b18      	ldr	r3, [pc, #96]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c7c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004c80:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d103      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004c88:	f7fe faf6 	bl	8003278 <HAL_RCC_GetPCLK3Freq>
 8004c8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c8e:	e33a      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fa91 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ca6:	e32e      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cba:	d109      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	08db      	lsrs	r3, r3, #3
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	4a05      	ldr	r2, [pc, #20]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cce:	e31a      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cd4:	e317      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004cd6:	bf00      	nop
 8004cd8:	44020c00 	.word	0x44020c00
 8004cdc:	03d09000 	.word	0x03d09000
 8004ce0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ce4:	4b9b      	ldr	r3, [pc, #620]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ce6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004cf6:	d044      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004cfe:	d879      	bhi.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d02d      	beq.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0e:	d871      	bhi.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d16:	d017      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d1e:	d869      	bhi.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d2c:	d004      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004d2e:	e061      	b.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004d30:	f7fe faa2 	bl	8003278 <HAL_RCC_GetPCLK3Freq>
 8004d34:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004d36:	e060      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fa41 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d46:	e058      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d48:	4b82      	ldr	r3, [pc, #520]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d103      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d5c:	e04d      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d62:	e04a      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004d64:	4b7b      	ldr	r3, [pc, #492]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d72:	d103      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004d74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d7a:	e03e      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d80:	e03b      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d82:	4b74      	ldr	r3, [pc, #464]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d88:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d8e:	4b71      	ldr	r3, [pc, #452]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004da0:	4b6c      	ldr	r3, [pc, #432]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	4a6b      	ldr	r2, [pc, #428]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	e01e      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004db4:	4b67      	ldr	r3, [pc, #412]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc0:	d106      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc8:	d102      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004dca:	4b64      	ldr	r3, [pc, #400]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dce:	e010      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dd0:	4b60      	ldr	r3, [pc, #384]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ddc:	d106      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004de4:	d102      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004de6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dea:	e002      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004df0:	e003      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004df2:	e002      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004df8:	bf00      	nop
          }
        }
        break;
 8004dfa:	e284      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004dfc:	4b55      	ldr	r3, [pc, #340]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e02:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e0e:	d044      	beq.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e16:	d879      	bhi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e1e:	d02d      	beq.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e26:	d871      	bhi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e2e:	d017      	beq.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e36:	d869      	bhi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e44:	d004      	beq.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004e46:	e061      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7fe f9ea 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8004e4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004e4e:	e060      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e50:	f107 030c 	add.w	r3, r7, #12
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff f9b5 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e5e:	e058      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e60:	4b3c      	ldr	r3, [pc, #240]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d103      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e74:	e04d      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e7a:	e04a      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004e7c:	4b35      	ldr	r3, [pc, #212]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8a:	d103      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004e8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e92:	e03e      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e98:	e03b      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ea0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eb8:	4b26      	ldr	r3, [pc, #152]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a25      	ldr	r2, [pc, #148]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eca:	e01e      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ecc:	4b21      	ldr	r3, [pc, #132]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee6:	e010      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004efc:	d102      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004efe:	4b18      	ldr	r3, [pc, #96]	@ (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004f0a:	e002      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f10:	bf00      	nop
          }
        }
        break;
 8004f12:	e1f8      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004f14:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004f20:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004f38:	e1e5      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f40:	d110      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f42:	f107 0318 	add.w	r3, r7, #24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe ffd0 	bl	8003eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f50:	e1d9      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f52:	bf00      	nop
 8004f54:	44020c00 	.word	0x44020c00
 8004f58:	03d09000 	.word	0x03d09000
 8004f5c:	003d0900 	.word	0x003d0900
 8004f60:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f6c:	f107 030c 	add.w	r3, r7, #12
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff f927 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f7a:	e1c4      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f80:	e1c1      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004f82:	4b9d      	ldr	r3, [pc, #628]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d859      	bhi.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004f94:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fb1 	.word	0x08004fb1
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fd7 	.word	0x08004fd7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fb0:	f107 0318 	add.w	r3, r7, #24
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe ff99 	bl	8003eec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fbe:	e046      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fc0:	f107 030c 	add.w	r3, r7, #12
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff f8fd 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fce:	e03e      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004fd0:	4b8a      	ldr	r3, [pc, #552]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fd4:	e03b      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fd6:	4b88      	ldr	r3, [pc, #544]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fdc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fe2:	4b85      	ldr	r3, [pc, #532]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d10c      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ff4:	4b80      	ldr	r3, [pc, #512]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	4a80      	ldr	r2, [pc, #512]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
 8005004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005006:	e01e      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005008:	4b7b      	ldr	r3, [pc, #492]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005014:	d106      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d102      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800501e:	4b79      	ldr	r3, [pc, #484]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005022:	e010      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005024:	4b74      	ldr	r3, [pc, #464]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005030:	d106      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005038:	d102      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800503a:	4b73      	ldr	r3, [pc, #460]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800503c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503e:	e002      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8005046:	e002      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800504c:	bf00      	nop
          }
        }
        break;
 800504e:	e15a      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005050:	4b69      	ldr	r3, [pc, #420]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	2b20      	cmp	r3, #32
 8005060:	d022      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	2b20      	cmp	r3, #32
 8005066:	d858      	bhi.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	2b18      	cmp	r3, #24
 800506c:	d019      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	2b18      	cmp	r3, #24
 8005072:	d852      	bhi.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	2b08      	cmp	r3, #8
 800507e:	d008      	beq.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005080:	e04b      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005082:	f107 0318 	add.w	r3, r7, #24
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe ff30 	bl	8003eec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005090:	e046      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005092:	f107 030c 	add.w	r3, r7, #12
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff f894 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050a0:	e03e      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80050a2:	4b56      	ldr	r3, [pc, #344]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050a6:	e03b      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050a8:	4b53      	ldr	r3, [pc, #332]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050b4:	4b50      	ldr	r3, [pc, #320]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d10c      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050c6:	4b4c      	ldr	r3, [pc, #304]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	08db      	lsrs	r3, r3, #3
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80050d2:	fa22 f303 	lsr.w	r3, r2, r3
 80050d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d8:	e01e      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050da:	4b47      	ldr	r3, [pc, #284]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050e6:	d106      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ee:	d102      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050f0:	4b44      	ldr	r3, [pc, #272]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f4:	e010      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050f6:	4b40      	ldr	r3, [pc, #256]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005102:	d106      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800510a:	d102      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800510c:	4b3e      	ldr	r3, [pc, #248]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800510e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005110:	e002      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005116:	e003      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005118:	e002      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800511e:	bf00      	nop
          }
        }
        break;
 8005120:	e0f1      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005122:	4b35      	ldr	r3, [pc, #212]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005128:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800512c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005134:	d023      	beq.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513c:	d858      	bhi.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	2bc0      	cmp	r3, #192	@ 0xc0
 8005142:	d019      	beq.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	2bc0      	cmp	r3, #192	@ 0xc0
 8005148:	d852      	bhi.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005152:	2b40      	cmp	r3, #64	@ 0x40
 8005154:	d008      	beq.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8005156:	e04b      	b.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005158:	f107 0318 	add.w	r3, r7, #24
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe fec5 	bl	8003eec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005166:	e046      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005168:	f107 030c 	add.w	r3, r7, #12
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f829 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005176:	e03e      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005178:	4b20      	ldr	r3, [pc, #128]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800517c:	e03b      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800517e:	4b1e      	ldr	r3, [pc, #120]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005184:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800518a:	4b1b      	ldr	r3, [pc, #108]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d10c      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800519c:	4b16      	ldr	r3, [pc, #88]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	08db      	lsrs	r3, r3, #3
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	4a16      	ldr	r2, [pc, #88]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ae:	e01e      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051b0:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d106      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c4:	d102      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80051c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ca:	e010      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051cc:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051d8:	d106      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051e0:	d102      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80051e2:	4b09      	ldr	r3, [pc, #36]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e6:	e002      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80051ee:	e002      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051f4:	bf00      	nop
          }
        }
        break;
 80051f6:	e086      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80051f8:	44020c00 	.word	0x44020c00
 80051fc:	00bb8000 	.word	0x00bb8000
 8005200:	03d09000 	.word	0x03d09000
 8005204:	003d0900 	.word	0x003d0900
 8005208:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800520c:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800520e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005212:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005218:	4b3d      	ldr	r3, [pc, #244]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005224:	d105      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 800522c:	4b39      	ldr	r3, [pc, #228]	@ (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005230:	e031      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005232:	4b37      	ldr	r3, [pc, #220]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800523e:	d10a      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005242:	2b10      	cmp	r3, #16
 8005244:	d107      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005246:	f107 0318 	add.w	r3, r7, #24
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe fe4e 	bl	8003eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005254:	e01f      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005256:	4b2e      	ldr	r3, [pc, #184]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b02      	cmp	r3, #2
 8005262:	d106      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	2b20      	cmp	r3, #32
 8005268:	d103      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800526a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005270:	e011      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005272:	4b27      	ldr	r3, [pc, #156]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005280:	d106      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	2b30      	cmp	r3, #48	@ 0x30
 8005286:	d103      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005288:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005294:	e037      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005296:	e036      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005298:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800529a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800529e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d107      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052aa:	f107 0318 	add.w	r3, r7, #24
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe fe1c 	bl	8003eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80052b8:	e025      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80052ba:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052c6:	d10a      	bne.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d107      	bne.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ce:	f107 030c 	add.w	r3, r7, #12
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe ff76 	bl	80041c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052dc:	e00f      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80052de:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ea:	d105      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	2b30      	cmp	r3, #48	@ 0x30
 80052f0:	d102      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80052f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f6:	e002      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80052fc:	e003      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80052fe:	e002      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005304:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8005306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005308:	4618      	mov	r0, r3
 800530a:	3730      	adds	r7, #48	@ 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	44020c00 	.word	0x44020c00
 8005314:	02dc6c00 	.word	0x02dc6c00

08005318 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005320:	4b48      	ldr	r3, [pc, #288]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a47      	ldr	r2, [pc, #284]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 8005326:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800532a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800532c:	f7fb feea 	bl	8001104 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005332:	e008      	b.n	8005346 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005334:	f7fb fee6 	bl	8001104 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e07a      	b.n	800543c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005346:	4b3f      	ldr	r3, [pc, #252]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f0      	bne.n	8005334 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005352:	4b3c      	ldr	r3, [pc, #240]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6852      	ldr	r2, [r2, #4]
 8005366:	0212      	lsls	r2, r2, #8
 8005368:	430a      	orrs	r2, r1
 800536a:	4936      	ldr	r1, [pc, #216]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	3b01      	subs	r3, #1
 8005376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	3b01      	subs	r3, #1
 8005380:	025b      	lsls	r3, r3, #9
 8005382:	b29b      	uxth	r3, r3
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	3b01      	subs	r3, #1
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	3b01      	subs	r3, #1
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053a0:	4928      	ldr	r1, [pc, #160]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80053a6:	4b27      	ldr	r3, [pc, #156]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	f023 020c 	bic.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	4924      	ldr	r1, [pc, #144]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80053b8:	4b22      	ldr	r3, [pc, #136]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	f023 0220 	bic.w	r2, r3, #32
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	491f      	ldr	r1, [pc, #124]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80053ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	491c      	ldr	r1, [pc, #112]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80053d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	4a19      	ldr	r2, [pc, #100]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80053e4:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6a12      	ldr	r2, [r2, #32]
 80053f4:	00d2      	lsls	r2, r2, #3
 80053f6:	4913      	ldr	r1, [pc, #76]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80053fc:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	4a10      	ldr	r2, [pc, #64]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 8005402:	f043 0310 	orr.w	r3, r3, #16
 8005406:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005408:	4b0e      	ldr	r3, [pc, #56]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0d      	ldr	r2, [pc, #52]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 800540e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005412:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005414:	f7fb fe76 	bl	8001104 <HAL_GetTick>
 8005418:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800541a:	e008      	b.n	800542e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800541c:	f7fb fe72 	bl	8001104 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e006      	b.n	800543c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800542e:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <RCCEx_PLL2_Config+0x12c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0

}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	44020c00 	.word	0x44020c00

08005448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e042      	b.n	80054e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7fb fb49 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2224      	movs	r2, #36	@ 0x24
 8005476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fd52 	bl	8005f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fbd1 	bl	8005c40 <UART_SetConfig>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e01b      	b.n	80054e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fdd1 	bl	8006080 <UART_CheckIdleState>
 80054de:	4603      	mov	r3, r0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	@ 0x28
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	2b20      	cmp	r3, #32
 8005500:	f040 808b 	bne.w	800561a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_UART_Transmit+0x28>
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e083      	b.n	800561c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551e:	2b80      	cmp	r3, #128	@ 0x80
 8005520:	d107      	bne.n	8005532 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005530:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2221      	movs	r2, #33	@ 0x21
 800553e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005542:	f7fb fddf 	bl	8001104 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005560:	d108      	bne.n	8005574 <HAL_UART_Transmit+0x8c>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e003      	b.n	800557c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800557c:	e030      	b.n	80055e0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	2180      	movs	r1, #128	@ 0x80
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fe23 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e03d      	b.n	800561c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	3302      	adds	r3, #2
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e007      	b.n	80055ce <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1c8      	bne.n	800557e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2200      	movs	r2, #0
 80055f4:	2140      	movs	r1, #64	@ 0x40
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fdec 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e006      	b.n	800561c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
  }
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b0ae      	sub	sp, #184	@ 0xb8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800564a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800564e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005652:	4013      	ands	r3, r2
 8005654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d11b      	bne.n	8005698 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d015      	beq.n	8005698 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800566c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d105      	bne.n	8005684 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800567c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 82ac 	beq.w	8005be6 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
      }
      return;
 8005696:	e2a6      	b.n	8005be6 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80fd 	beq.w	800589c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005890 <HAL_UART_IRQHandler+0x26c>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056b2:	4b78      	ldr	r3, [pc, #480]	@ (8005894 <HAL_UART_IRQHandler+0x270>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80f0 	beq.w	800589c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d011      	beq.n	80056ec <HAL_UART_IRQHandler+0xc8>
 80056c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80056cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2201      	movs	r2, #1
 80056da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e2:	f043 0201 	orr.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HAL_UART_IRQHandler+0xf8>
 80056f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2202      	movs	r2, #2
 800570a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005712:	f043 0204 	orr.w	r2, r3, #4
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800571c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d011      	beq.n	800574c <HAL_UART_IRQHandler+0x128>
 8005728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2204      	movs	r2, #4
 800573a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005742:	f043 0202 	orr.w	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800574c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005758:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d105      	bne.n	8005770 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005764:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005768:	4b49      	ldr	r3, [pc, #292]	@ (8005890 <HAL_UART_IRQHandler+0x26c>)
 800576a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2208      	movs	r2, #8
 8005776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577e:	f043 0208 	orr.w	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800578c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005790:	2b00      	cmp	r3, #0
 8005792:	d012      	beq.n	80057ba <HAL_UART_IRQHandler+0x196>
 8005794:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005798:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8212 	beq.w	8005bea <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d013      	beq.n	80057fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005800:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580e:	2b40      	cmp	r3, #64	@ 0x40
 8005810:	d005      	beq.n	800581e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005816:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02e      	beq.n	800587c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fd45 	bl	80062ae <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582e:	2b40      	cmp	r3, #64	@ 0x40
 8005830:	d120      	bne.n	8005874 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d017      	beq.n	800586c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005842:	4a15      	ldr	r2, [pc, #84]	@ (8005898 <HAL_UART_IRQHandler+0x274>)
 8005844:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584c:	4618      	mov	r0, r3
 800584e:	f7fb fe95 	bl	800157c <HAL_DMA_Abort_IT>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d019      	beq.n	800588c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800585e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005866:	4610      	mov	r0, r2
 8005868:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586a:	e00f      	b.n	800588c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f9d1 	bl	8005c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005872:	e00b      	b.n	800588c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f9cd 	bl	8005c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587a:	e007      	b.n	800588c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f9c9 	bl	8005c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800588a:	e1ae      	b.n	8005bea <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	bf00      	nop
    return;
 800588e:	e1ac      	b.n	8005bea <HAL_UART_IRQHandler+0x5c6>
 8005890:	10000001 	.word	0x10000001
 8005894:	04000120 	.word	0x04000120
 8005898:	0800637b 	.word	0x0800637b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	f040 8142 	bne.w	8005b2a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 813b 	beq.w	8005b2a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8134 	beq.w	8005b2a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2210      	movs	r2, #16
 80058c8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	f040 80aa 	bne.w	8005a2e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80058e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8084 	beq.w	80059fa <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058f8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d27c      	bcs.n	80059fa <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005906:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005912:	2b81      	cmp	r3, #129	@ 0x81
 8005914:	d060      	beq.n	80059d8 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800592a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005938:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800593c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005940:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800594a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e2      	bne.n	8005916 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005974:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005976:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800597a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e3      	bne.n	8005950 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a6:	f023 0310 	bic.w	r3, r3, #16
 80059aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e4      	bne.n	8005996 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fb fd56 	bl	8001484 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f918 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059f8:	e0f9      	b.n	8005bee <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a00:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005a04:	429a      	cmp	r2, r3
 8005a06:	f040 80f2 	bne.w	8005bee <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a12:	2b81      	cmp	r3, #129	@ 0x81
 8005a14:	f040 80eb 	bne.w	8005bee <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f8fe 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
      return;
 8005a2c:	e0df      	b.n	8005bee <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80d1 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8005a50:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80cc 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e4      	bne.n	8005a5a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005ab8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e1      	bne.n	8005a90 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e4      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b1c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f880 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b28:	e063      	b.n	8005bf2 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00e      	beq.n	8005b54 <HAL_UART_IRQHandler+0x530>
 8005b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fc51 	bl	80063f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b52:	e051      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d014      	beq.n	8005b8a <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d03a      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
    }
    return;
 8005b88:	e035      	b.n	8005bf6 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_UART_IRQHandler+0x586>
 8005b96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fbfb 	bl	800639e <UART_EndTransmit_IT>
    return;
 8005ba8:	e026      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_UART_IRQHandler+0x5a6>
 8005bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005bba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fc2a 	bl	800641c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bc8:	e016      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005bce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
 8005bd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da0c      	bge.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fc12 	bl	8006408 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005be4:	e008      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005be6:	bf00      	nop
 8005be8:	e006      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005bea:	bf00      	nop
 8005bec:	e004      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005bee:	bf00      	nop
 8005bf0:	e002      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005bf6:	bf00      	nop
  }
}
 8005bf8:	37b8      	adds	r7, #184	@ 0xb8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop

08005c00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b094      	sub	sp, #80	@ 0x50
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	498a      	ldr	r1, [pc, #552]	@ (8005e98 <UART_SetConfig+0x258>)
 8005c70:	4019      	ands	r1, r3
 8005c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c88:	68d9      	ldr	r1, [r3, #12]
 8005c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	ea40 0301 	orr.w	r3, r0, r1
 8005c92:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e9c <UART_SetConfig+0x25c>)
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d004      	beq.n	8005cae <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca6:	6a1a      	ldr	r2, [r3, #32]
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005caa:	4313      	orrs	r3, r2
 8005cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005cb8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	f023 000f 	bic.w	r0, r3, #15
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	ea40 0301 	orr.w	r3, r0, r1
 8005cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8005ea0 <UART_SetConfig+0x260>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d102      	bne.n	8005cee <UART_SetConfig+0xae>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cec:	e01a      	b.n	8005d24 <UART_SetConfig+0xe4>
 8005cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8005ea4 <UART_SetConfig+0x264>)
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d102      	bne.n	8005cfe <UART_SetConfig+0xbe>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cfc:	e012      	b.n	8005d24 <UART_SetConfig+0xe4>
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b69      	ldr	r3, [pc, #420]	@ (8005ea8 <UART_SetConfig+0x268>)
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d102      	bne.n	8005d0e <UART_SetConfig+0xce>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0c:	e00a      	b.n	8005d24 <UART_SetConfig+0xe4>
 8005d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b62      	ldr	r3, [pc, #392]	@ (8005e9c <UART_SetConfig+0x25c>)
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d103      	bne.n	8005d20 <UART_SetConfig+0xe0>
 8005d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d1e:	e001      	b.n	8005d24 <UART_SetConfig+0xe4>
 8005d20:	2300      	movs	r3, #0
 8005d22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b5c      	ldr	r3, [pc, #368]	@ (8005e9c <UART_SetConfig+0x25c>)
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d171      	bne.n	8005e12 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d30:	2200      	movs	r2, #0
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d3a:	f7fe fbaf 	bl	800449c <HAL_RCCEx_GetPeriphCLKFreq>
 8005d3e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80e2 	beq.w	8005f0c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	4a57      	ldr	r2, [pc, #348]	@ (8005eac <UART_SetConfig+0x26c>)
 8005d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d5a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d305      	bcc.n	8005d78 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d903      	bls.n	8005d80 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005d7e:	e0c5      	b.n	8005f0c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d82:	2200      	movs	r2, #0
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	61fa      	str	r2, [r7, #28]
 8005d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	4a47      	ldr	r2, [pc, #284]	@ (8005eac <UART_SetConfig+0x26c>)
 8005d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2200      	movs	r2, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	617a      	str	r2, [r7, #20]
 8005d9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005da2:	f7fa fa79 	bl	8000298 <__aeabi_uldivmod>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4610      	mov	r0, r2
 8005dac:	4619      	mov	r1, r3
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	020b      	lsls	r3, r1, #8
 8005db8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dbc:	0202      	lsls	r2, r0, #8
 8005dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dc0:	6849      	ldr	r1, [r1, #4]
 8005dc2:	0849      	lsrs	r1, r1, #1
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	4605      	mov	r5, r0
 8005dca:	eb12 0804 	adds.w	r8, r2, r4
 8005dce:	eb43 0905 	adc.w	r9, r3, r5
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de0:	4640      	mov	r0, r8
 8005de2:	4649      	mov	r1, r9
 8005de4:	f7fa fa58 	bl	8000298 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4613      	mov	r3, r2
 8005dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df6:	d308      	bcc.n	8005e0a <UART_SetConfig+0x1ca>
 8005df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dfe:	d204      	bcs.n	8005e0a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	e080      	b.n	8005f0c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e10:	e07c      	b.n	8005f0c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e1a:	d149      	bne.n	8005eb0 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e1e:	2200      	movs	r2, #0
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e28:	f7fe fb38 	bl	800449c <HAL_RCCEx_GetPeriphCLKFreq>
 8005e2c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d06b      	beq.n	8005f0c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	4a1c      	ldr	r2, [pc, #112]	@ (8005eac <UART_SetConfig+0x26c>)
 8005e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e46:	005a      	lsls	r2, r3, #1
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	441a      	add	r2, r3
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5c:	2b0f      	cmp	r3, #15
 8005e5e:	d916      	bls.n	8005e8e <UART_SetConfig+0x24e>
 8005e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e66:	d212      	bcs.n	8005e8e <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f023 030f 	bic.w	r3, r3, #15
 8005e70:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e74:	085b      	lsrs	r3, r3, #1
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005e80:	4313      	orrs	r3, r2
 8005e82:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005e8a:	60da      	str	r2, [r3, #12]
 8005e8c:	e03e      	b.n	8005f0c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e94:	e03a      	b.n	8005f0c <UART_SetConfig+0x2cc>
 8005e96:	bf00      	nop
 8005e98:	cfff69f3 	.word	0xcfff69f3
 8005e9c:	44002400 	.word	0x44002400
 8005ea0:	40013800 	.word	0x40013800
 8005ea4:	40004400 	.word	0x40004400
 8005ea8:	40004800 	.word	0x40004800
 8005eac:	0800709c 	.word	0x0800709c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	4693      	mov	fp, r2
 8005eb8:	4650      	mov	r0, sl
 8005eba:	4659      	mov	r1, fp
 8005ebc:	f7fe faee 	bl	800449c <HAL_RCCEx_GetPeriphCLKFreq>
 8005ec0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d021      	beq.n	8005f0c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f38 <UART_SetConfig+0x2f8>)
 8005ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	441a      	add	r2, r3
 8005ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	d909      	bls.n	8005f06 <UART_SetConfig+0x2c6>
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef8:	d205      	bcs.n	8005f06 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60da      	str	r2, [r3, #12]
 8005f04:	e002      	b.n	8005f0c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	2201      	movs	r2, #1
 8005f18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	2200      	movs	r2, #0
 8005f26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3750      	adds	r7, #80	@ 0x50
 8005f30:	46bd      	mov	sp, r7
 8005f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f36:	bf00      	nop
 8005f38:	0800709c 	.word	0x0800709c

08005f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01a      	beq.n	8006052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800603a:	d10a      	bne.n	8006052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b098      	sub	sp, #96	@ 0x60
 8006084:	af02      	add	r7, sp, #8
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006090:	f7fb f838 	bl	8001104 <HAL_GetTick>
 8006094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d12f      	bne.n	8006104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ac:	2200      	movs	r2, #0
 80060ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f88e 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d022      	beq.n	8006104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80060de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e6      	bne.n	80060be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e063      	b.n	80061cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b04      	cmp	r3, #4
 8006110:	d149      	bne.n	80061a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800611a:	2200      	movs	r2, #0
 800611c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f857 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d03c      	beq.n	80061a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	623b      	str	r3, [r7, #32]
   return(result);
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614a:	633b      	str	r3, [r7, #48]	@ 0x30
 800614c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e6      	bne.n	800612c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	60fb      	str	r3, [r7, #12]
   return(result);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800617e:	61fa      	str	r2, [r7, #28]
 8006180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	69b9      	ldr	r1, [r7, #24]
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	617b      	str	r3, [r7, #20]
   return(result);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e012      	b.n	80061cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3758      	adds	r7, #88	@ 0x58
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e4:	e04f      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d04b      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fa ff89 	bl	8001104 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <UART_WaitOnFlagUntilTimeout+0x30>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e04e      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d037      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b80      	cmp	r3, #128	@ 0x80
 800621a:	d034      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b40      	cmp	r3, #64	@ 0x40
 8006220:	d031      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b08      	cmp	r3, #8
 800622e:	d110      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2208      	movs	r2, #8
 8006236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f838 	bl	80062ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2208      	movs	r2, #8
 8006242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e029      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800625c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006260:	d111      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800626a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f81e 	bl	80062ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e00f      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0a0      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b095      	sub	sp, #84	@ 0x54
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e6      	bne.n	80062b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3308      	adds	r3, #8
 80062ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800630c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800630e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e3      	bne.n	80062e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d118      	bne.n	800635a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	60bb      	str	r3, [r7, #8]
   return(result);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f023 0310 	bic.w	r3, r3, #16
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6979      	ldr	r1, [r7, #20]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	613b      	str	r3, [r7, #16]
   return(result);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e6      	bne.n	8006328 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800636e:	bf00      	nop
 8006370:	3754      	adds	r7, #84	@ 0x54
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fc3f 	bl	8005c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b088      	sub	sp, #32
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6979      	ldr	r1, [r7, #20]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	613b      	str	r3, [r7, #16]
   return(result);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e6      	bne.n	80063a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fc0a 	bl	8005c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ec:	bf00      	nop
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_UARTEx_DisableFifoMode+0x16>
 8006442:	2302      	movs	r3, #2
 8006444:	e027      	b.n	8006496 <HAL_UARTEx_DisableFifoMode+0x66>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2224      	movs	r2, #36	@ 0x24
 8006452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006474:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e02d      	b.n	8006516 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2224      	movs	r2, #36	@ 0x24
 80064c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0201 	bic.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f850 	bl	800659c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006532:	2302      	movs	r3, #2
 8006534:	e02d      	b.n	8006592 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2224      	movs	r2, #36	@ 0x24
 8006542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f812 	bl	800659c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d108      	bne.n	80065be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065bc:	e031      	b.n	8006622 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065be:	2308      	movs	r3, #8
 80065c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065c2:	2308      	movs	r3, #8
 80065c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	0e5b      	lsrs	r3, r3, #25
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	0f5b      	lsrs	r3, r3, #29
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	7b3a      	ldrb	r2, [r7, #12]
 80065ea:	4911      	ldr	r1, [pc, #68]	@ (8006630 <UARTEx_SetNbDataToProcess+0x94>)
 80065ec:	5c8a      	ldrb	r2, [r1, r2]
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065f2:	7b3a      	ldrb	r2, [r7, #12]
 80065f4:	490f      	ldr	r1, [pc, #60]	@ (8006634 <UARTEx_SetNbDataToProcess+0x98>)
 80065f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	7b7a      	ldrb	r2, [r7, #13]
 8006608:	4909      	ldr	r1, [pc, #36]	@ (8006630 <UARTEx_SetNbDataToProcess+0x94>)
 800660a:	5c8a      	ldrb	r2, [r1, r2]
 800660c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006610:	7b7a      	ldrb	r2, [r7, #13]
 8006612:	4908      	ldr	r1, [pc, #32]	@ (8006634 <UARTEx_SetNbDataToProcess+0x98>)
 8006614:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006616:	fb93 f3f2 	sdiv	r3, r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	080070b4 	.word	0x080070b4
 8006634:	080070bc 	.word	0x080070bc

08006638 <std>:
 8006638:	2300      	movs	r3, #0
 800663a:	b510      	push	{r4, lr}
 800663c:	4604      	mov	r4, r0
 800663e:	6083      	str	r3, [r0, #8]
 8006640:	8181      	strh	r1, [r0, #12]
 8006642:	4619      	mov	r1, r3
 8006644:	6643      	str	r3, [r0, #100]	@ 0x64
 8006646:	81c2      	strh	r2, [r0, #14]
 8006648:	2208      	movs	r2, #8
 800664a:	6183      	str	r3, [r0, #24]
 800664c:	e9c0 3300 	strd	r3, r3, [r0]
 8006650:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006654:	305c      	adds	r0, #92	@ 0x5c
 8006656:	f000 f9e7 	bl	8006a28 <memset>
 800665a:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <std+0x58>)
 800665c:	6224      	str	r4, [r4, #32]
 800665e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006660:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <std+0x5c>)
 8006662:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006664:	4b0c      	ldr	r3, [pc, #48]	@ (8006698 <std+0x60>)
 8006666:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006668:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <std+0x64>)
 800666a:	6323      	str	r3, [r4, #48]	@ 0x30
 800666c:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <std+0x68>)
 800666e:	429c      	cmp	r4, r3
 8006670:	d006      	beq.n	8006680 <std+0x48>
 8006672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006676:	4294      	cmp	r4, r2
 8006678:	d002      	beq.n	8006680 <std+0x48>
 800667a:	33d0      	adds	r3, #208	@ 0xd0
 800667c:	429c      	cmp	r4, r3
 800667e:	d105      	bne.n	800668c <std+0x54>
 8006680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006688:	f000 ba46 	b.w	8006b18 <__retarget_lock_init_recursive>
 800668c:	bd10      	pop	{r4, pc}
 800668e:	bf00      	nop
 8006690:	08006879 	.word	0x08006879
 8006694:	0800689b 	.word	0x0800689b
 8006698:	080068d3 	.word	0x080068d3
 800669c:	080068f7 	.word	0x080068f7
 80066a0:	200001dc 	.word	0x200001dc

080066a4 <stdio_exit_handler>:
 80066a4:	4a02      	ldr	r2, [pc, #8]	@ (80066b0 <stdio_exit_handler+0xc>)
 80066a6:	4903      	ldr	r1, [pc, #12]	@ (80066b4 <stdio_exit_handler+0x10>)
 80066a8:	4803      	ldr	r0, [pc, #12]	@ (80066b8 <stdio_exit_handler+0x14>)
 80066aa:	f000 b869 	b.w	8006780 <_fwalk_sglue>
 80066ae:	bf00      	nop
 80066b0:	2000000c 	.word	0x2000000c
 80066b4:	08006e19 	.word	0x08006e19
 80066b8:	2000001c 	.word	0x2000001c

080066bc <cleanup_stdio>:
 80066bc:	6841      	ldr	r1, [r0, #4]
 80066be:	4b0c      	ldr	r3, [pc, #48]	@ (80066f0 <cleanup_stdio+0x34>)
 80066c0:	4299      	cmp	r1, r3
 80066c2:	b510      	push	{r4, lr}
 80066c4:	4604      	mov	r4, r0
 80066c6:	d001      	beq.n	80066cc <cleanup_stdio+0x10>
 80066c8:	f000 fba6 	bl	8006e18 <_fflush_r>
 80066cc:	68a1      	ldr	r1, [r4, #8]
 80066ce:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <cleanup_stdio+0x38>)
 80066d0:	4299      	cmp	r1, r3
 80066d2:	d002      	beq.n	80066da <cleanup_stdio+0x1e>
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fb9f 	bl	8006e18 <_fflush_r>
 80066da:	68e1      	ldr	r1, [r4, #12]
 80066dc:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <cleanup_stdio+0x3c>)
 80066de:	4299      	cmp	r1, r3
 80066e0:	d004      	beq.n	80066ec <cleanup_stdio+0x30>
 80066e2:	4620      	mov	r0, r4
 80066e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e8:	f000 bb96 	b.w	8006e18 <_fflush_r>
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	bf00      	nop
 80066f0:	200001dc 	.word	0x200001dc
 80066f4:	20000244 	.word	0x20000244
 80066f8:	200002ac 	.word	0x200002ac

080066fc <global_stdio_init.part.0>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <global_stdio_init.part.0+0x30>)
 8006700:	2104      	movs	r1, #4
 8006702:	4c0b      	ldr	r4, [pc, #44]	@ (8006730 <global_stdio_init.part.0+0x34>)
 8006704:	4a0b      	ldr	r2, [pc, #44]	@ (8006734 <global_stdio_init.part.0+0x38>)
 8006706:	4620      	mov	r0, r4
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	f7ff ff94 	bl	8006638 <std>
 8006710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006714:	2201      	movs	r2, #1
 8006716:	2109      	movs	r1, #9
 8006718:	f7ff ff8e 	bl	8006638 <std>
 800671c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006720:	2202      	movs	r2, #2
 8006722:	2112      	movs	r1, #18
 8006724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006728:	f7ff bf86 	b.w	8006638 <std>
 800672c:	20000314 	.word	0x20000314
 8006730:	200001dc 	.word	0x200001dc
 8006734:	080066a5 	.word	0x080066a5

08006738 <__sfp_lock_acquire>:
 8006738:	4801      	ldr	r0, [pc, #4]	@ (8006740 <__sfp_lock_acquire+0x8>)
 800673a:	f000 b9ee 	b.w	8006b1a <__retarget_lock_acquire_recursive>
 800673e:	bf00      	nop
 8006740:	2000031d 	.word	0x2000031d

08006744 <__sfp_lock_release>:
 8006744:	4801      	ldr	r0, [pc, #4]	@ (800674c <__sfp_lock_release+0x8>)
 8006746:	f000 b9e9 	b.w	8006b1c <__retarget_lock_release_recursive>
 800674a:	bf00      	nop
 800674c:	2000031d 	.word	0x2000031d

08006750 <__sinit>:
 8006750:	b510      	push	{r4, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	f7ff fff0 	bl	8006738 <__sfp_lock_acquire>
 8006758:	6a23      	ldr	r3, [r4, #32]
 800675a:	b11b      	cbz	r3, 8006764 <__sinit+0x14>
 800675c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006760:	f7ff bff0 	b.w	8006744 <__sfp_lock_release>
 8006764:	4b04      	ldr	r3, [pc, #16]	@ (8006778 <__sinit+0x28>)
 8006766:	6223      	str	r3, [r4, #32]
 8006768:	4b04      	ldr	r3, [pc, #16]	@ (800677c <__sinit+0x2c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f5      	bne.n	800675c <__sinit+0xc>
 8006770:	f7ff ffc4 	bl	80066fc <global_stdio_init.part.0>
 8006774:	e7f2      	b.n	800675c <__sinit+0xc>
 8006776:	bf00      	nop
 8006778:	080066bd 	.word	0x080066bd
 800677c:	20000314 	.word	0x20000314

08006780 <_fwalk_sglue>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	4607      	mov	r7, r0
 8006786:	4688      	mov	r8, r1
 8006788:	4614      	mov	r4, r2
 800678a:	2600      	movs	r6, #0
 800678c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006790:	f1b9 0901 	subs.w	r9, r9, #1
 8006794:	d505      	bpl.n	80067a2 <_fwalk_sglue+0x22>
 8006796:	6824      	ldr	r4, [r4, #0]
 8006798:	2c00      	cmp	r4, #0
 800679a:	d1f7      	bne.n	800678c <_fwalk_sglue+0xc>
 800679c:	4630      	mov	r0, r6
 800679e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d907      	bls.n	80067b8 <_fwalk_sglue+0x38>
 80067a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ac:	3301      	adds	r3, #1
 80067ae:	d003      	beq.n	80067b8 <_fwalk_sglue+0x38>
 80067b0:	4629      	mov	r1, r5
 80067b2:	4638      	mov	r0, r7
 80067b4:	47c0      	blx	r8
 80067b6:	4306      	orrs	r6, r0
 80067b8:	3568      	adds	r5, #104	@ 0x68
 80067ba:	e7e9      	b.n	8006790 <_fwalk_sglue+0x10>

080067bc <_puts_r>:
 80067bc:	6a03      	ldr	r3, [r0, #32]
 80067be:	b570      	push	{r4, r5, r6, lr}
 80067c0:	4605      	mov	r5, r0
 80067c2:	460e      	mov	r6, r1
 80067c4:	6884      	ldr	r4, [r0, #8]
 80067c6:	b90b      	cbnz	r3, 80067cc <_puts_r+0x10>
 80067c8:	f7ff ffc2 	bl	8006750 <__sinit>
 80067cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067ce:	07db      	lsls	r3, r3, #31
 80067d0:	d405      	bmi.n	80067de <_puts_r+0x22>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	0598      	lsls	r0, r3, #22
 80067d6:	d402      	bmi.n	80067de <_puts_r+0x22>
 80067d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067da:	f000 f99e 	bl	8006b1a <__retarget_lock_acquire_recursive>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	0719      	lsls	r1, r3, #28
 80067e2:	d502      	bpl.n	80067ea <_puts_r+0x2e>
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d135      	bne.n	8006856 <_puts_r+0x9a>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 f8c5 	bl	800697c <__swsetup_r>
 80067f2:	b380      	cbz	r0, 8006856 <_puts_r+0x9a>
 80067f4:	f04f 35ff 	mov.w	r5, #4294967295
 80067f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067fa:	07da      	lsls	r2, r3, #31
 80067fc:	d405      	bmi.n	800680a <_puts_r+0x4e>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	059b      	lsls	r3, r3, #22
 8006802:	d402      	bmi.n	800680a <_puts_r+0x4e>
 8006804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006806:	f000 f989 	bl	8006b1c <__retarget_lock_release_recursive>
 800680a:	4628      	mov	r0, r5
 800680c:	bd70      	pop	{r4, r5, r6, pc}
 800680e:	2b00      	cmp	r3, #0
 8006810:	da04      	bge.n	800681c <_puts_r+0x60>
 8006812:	69a2      	ldr	r2, [r4, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	dc17      	bgt.n	8006848 <_puts_r+0x8c>
 8006818:	290a      	cmp	r1, #10
 800681a:	d015      	beq.n	8006848 <_puts_r+0x8c>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	7019      	strb	r1, [r3, #0]
 8006824:	68a3      	ldr	r3, [r4, #8]
 8006826:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800682a:	3b01      	subs	r3, #1
 800682c:	60a3      	str	r3, [r4, #8]
 800682e:	2900      	cmp	r1, #0
 8006830:	d1ed      	bne.n	800680e <_puts_r+0x52>
 8006832:	2b00      	cmp	r3, #0
 8006834:	da11      	bge.n	800685a <_puts_r+0x9e>
 8006836:	4622      	mov	r2, r4
 8006838:	210a      	movs	r1, #10
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f85f 	bl	80068fe <__swbuf_r>
 8006840:	3001      	adds	r0, #1
 8006842:	d0d7      	beq.n	80067f4 <_puts_r+0x38>
 8006844:	250a      	movs	r5, #10
 8006846:	e7d7      	b.n	80067f8 <_puts_r+0x3c>
 8006848:	4622      	mov	r2, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f857 	bl	80068fe <__swbuf_r>
 8006850:	3001      	adds	r0, #1
 8006852:	d1e7      	bne.n	8006824 <_puts_r+0x68>
 8006854:	e7ce      	b.n	80067f4 <_puts_r+0x38>
 8006856:	3e01      	subs	r6, #1
 8006858:	e7e4      	b.n	8006824 <_puts_r+0x68>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	6022      	str	r2, [r4, #0]
 8006860:	220a      	movs	r2, #10
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	e7ee      	b.n	8006844 <_puts_r+0x88>
	...

08006868 <puts>:
 8006868:	4b02      	ldr	r3, [pc, #8]	@ (8006874 <puts+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f7ff bfa5 	b.w	80067bc <_puts_r>
 8006872:	bf00      	nop
 8006874:	20000018 	.word	0x20000018

08006878 <__sread>:
 8006878:	b510      	push	{r4, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006880:	f000 f8fc 	bl	8006a7c <_read_r>
 8006884:	2800      	cmp	r0, #0
 8006886:	bfab      	itete	ge
 8006888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800688a:	89a3      	ldrhlt	r3, [r4, #12]
 800688c:	181b      	addge	r3, r3, r0
 800688e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006892:	bfac      	ite	ge
 8006894:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006896:	81a3      	strhlt	r3, [r4, #12]
 8006898:	bd10      	pop	{r4, pc}

0800689a <__swrite>:
 800689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	461f      	mov	r7, r3
 80068a0:	898b      	ldrh	r3, [r1, #12]
 80068a2:	4605      	mov	r5, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	05db      	lsls	r3, r3, #23
 80068a8:	4616      	mov	r6, r2
 80068aa:	d505      	bpl.n	80068b8 <__swrite+0x1e>
 80068ac:	2302      	movs	r3, #2
 80068ae:	2200      	movs	r2, #0
 80068b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b4:	f000 f8d0 	bl	8006a58 <_lseek_r>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	4632      	mov	r2, r6
 80068bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068c0:	4628      	mov	r0, r5
 80068c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	463b      	mov	r3, r7
 80068ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	f000 b8e7 	b.w	8006aa0 <_write_r>

080068d2 <__sseek>:
 80068d2:	b510      	push	{r4, lr}
 80068d4:	460c      	mov	r4, r1
 80068d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068da:	f000 f8bd 	bl	8006a58 <_lseek_r>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	bf15      	itete	ne
 80068e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068ee:	81a3      	strheq	r3, [r4, #12]
 80068f0:	bf18      	it	ne
 80068f2:	81a3      	strhne	r3, [r4, #12]
 80068f4:	bd10      	pop	{r4, pc}

080068f6 <__sclose>:
 80068f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fa:	f000 b89d 	b.w	8006a38 <_close_r>

080068fe <__swbuf_r>:
 80068fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006900:	460e      	mov	r6, r1
 8006902:	4614      	mov	r4, r2
 8006904:	4605      	mov	r5, r0
 8006906:	b118      	cbz	r0, 8006910 <__swbuf_r+0x12>
 8006908:	6a03      	ldr	r3, [r0, #32]
 800690a:	b90b      	cbnz	r3, 8006910 <__swbuf_r+0x12>
 800690c:	f7ff ff20 	bl	8006750 <__sinit>
 8006910:	69a3      	ldr	r3, [r4, #24]
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	071a      	lsls	r2, r3, #28
 8006918:	d501      	bpl.n	800691e <__swbuf_r+0x20>
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	b943      	cbnz	r3, 8006930 <__swbuf_r+0x32>
 800691e:	4621      	mov	r1, r4
 8006920:	4628      	mov	r0, r5
 8006922:	f000 f82b 	bl	800697c <__swsetup_r>
 8006926:	b118      	cbz	r0, 8006930 <__swbuf_r+0x32>
 8006928:	f04f 37ff 	mov.w	r7, #4294967295
 800692c:	4638      	mov	r0, r7
 800692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	b2f6      	uxtb	r6, r6
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	4637      	mov	r7, r6
 8006938:	1a98      	subs	r0, r3, r2
 800693a:	6963      	ldr	r3, [r4, #20]
 800693c:	4283      	cmp	r3, r0
 800693e:	dc05      	bgt.n	800694c <__swbuf_r+0x4e>
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 fa68 	bl	8006e18 <_fflush_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	d1ed      	bne.n	8006928 <__swbuf_r+0x2a>
 800694c:	68a3      	ldr	r3, [r4, #8]
 800694e:	3b01      	subs	r3, #1
 8006950:	60a3      	str	r3, [r4, #8]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	6022      	str	r2, [r4, #0]
 8006958:	701e      	strb	r6, [r3, #0]
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	6962      	ldr	r2, [r4, #20]
 800695e:	429a      	cmp	r2, r3
 8006960:	d004      	beq.n	800696c <__swbuf_r+0x6e>
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	07db      	lsls	r3, r3, #31
 8006966:	d5e1      	bpl.n	800692c <__swbuf_r+0x2e>
 8006968:	2e0a      	cmp	r6, #10
 800696a:	d1df      	bne.n	800692c <__swbuf_r+0x2e>
 800696c:	4621      	mov	r1, r4
 800696e:	4628      	mov	r0, r5
 8006970:	f000 fa52 	bl	8006e18 <_fflush_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	d0d9      	beq.n	800692c <__swbuf_r+0x2e>
 8006978:	e7d6      	b.n	8006928 <__swbuf_r+0x2a>
	...

0800697c <__swsetup_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4b29      	ldr	r3, [pc, #164]	@ (8006a24 <__swsetup_r+0xa8>)
 8006980:	4605      	mov	r5, r0
 8006982:	460c      	mov	r4, r1
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	b118      	cbz	r0, 8006990 <__swsetup_r+0x14>
 8006988:	6a03      	ldr	r3, [r0, #32]
 800698a:	b90b      	cbnz	r3, 8006990 <__swsetup_r+0x14>
 800698c:	f7ff fee0 	bl	8006750 <__sinit>
 8006990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006994:	0719      	lsls	r1, r3, #28
 8006996:	d422      	bmi.n	80069de <__swsetup_r+0x62>
 8006998:	06da      	lsls	r2, r3, #27
 800699a:	d407      	bmi.n	80069ac <__swsetup_r+0x30>
 800699c:	2209      	movs	r2, #9
 800699e:	602a      	str	r2, [r5, #0]
 80069a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	81a3      	strh	r3, [r4, #12]
 80069aa:	e033      	b.n	8006a14 <__swsetup_r+0x98>
 80069ac:	0758      	lsls	r0, r3, #29
 80069ae:	d512      	bpl.n	80069d6 <__swsetup_r+0x5a>
 80069b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069b2:	b141      	cbz	r1, 80069c6 <__swsetup_r+0x4a>
 80069b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069b8:	4299      	cmp	r1, r3
 80069ba:	d002      	beq.n	80069c2 <__swsetup_r+0x46>
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 f8af 	bl	8006b20 <_free_r>
 80069c2:	2300      	movs	r3, #0
 80069c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069cc:	81a3      	strh	r3, [r4, #12]
 80069ce:	2300      	movs	r3, #0
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f043 0308 	orr.w	r3, r3, #8
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	b94b      	cbnz	r3, 80069f6 <__swsetup_r+0x7a>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ec:	d003      	beq.n	80069f6 <__swsetup_r+0x7a>
 80069ee:	4621      	mov	r1, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 fa5e 	bl	8006eb2 <__smakebuf_r>
 80069f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fa:	f013 0201 	ands.w	r2, r3, #1
 80069fe:	d00a      	beq.n	8006a16 <__swsetup_r+0x9a>
 8006a00:	2200      	movs	r2, #0
 8006a02:	60a2      	str	r2, [r4, #8]
 8006a04:	6962      	ldr	r2, [r4, #20]
 8006a06:	4252      	negs	r2, r2
 8006a08:	61a2      	str	r2, [r4, #24]
 8006a0a:	6922      	ldr	r2, [r4, #16]
 8006a0c:	b942      	cbnz	r2, 8006a20 <__swsetup_r+0xa4>
 8006a0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a12:	d1c5      	bne.n	80069a0 <__swsetup_r+0x24>
 8006a14:	bd38      	pop	{r3, r4, r5, pc}
 8006a16:	0799      	lsls	r1, r3, #30
 8006a18:	bf58      	it	pl
 8006a1a:	6962      	ldrpl	r2, [r4, #20]
 8006a1c:	60a2      	str	r2, [r4, #8]
 8006a1e:	e7f4      	b.n	8006a0a <__swsetup_r+0x8e>
 8006a20:	2000      	movs	r0, #0
 8006a22:	e7f7      	b.n	8006a14 <__swsetup_r+0x98>
 8006a24:	20000018 	.word	0x20000018

08006a28 <memset>:
 8006a28:	4402      	add	r2, r0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <_close_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	4d05      	ldr	r5, [pc, #20]	@ (8006a54 <_close_r+0x1c>)
 8006a3e:	4604      	mov	r4, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	602b      	str	r3, [r5, #0]
 8006a44:	f7fa f959 	bl	8000cfa <_close>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_close_r+0x1a>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_close_r+0x1a>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20000318 	.word	0x20000318

08006a58 <_lseek_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4d06      	ldr	r5, [pc, #24]	@ (8006a78 <_lseek_r+0x20>)
 8006a5e:	4608      	mov	r0, r1
 8006a60:	4611      	mov	r1, r2
 8006a62:	2200      	movs	r2, #0
 8006a64:	602a      	str	r2, [r5, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f7fa f96e 	bl	8000d48 <_lseek>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_lseek_r+0x1e>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_lseek_r+0x1e>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	20000318 	.word	0x20000318

08006a7c <_read_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4d06      	ldr	r5, [pc, #24]	@ (8006a9c <_read_r+0x20>)
 8006a82:	4608      	mov	r0, r1
 8006a84:	4611      	mov	r1, r2
 8006a86:	2200      	movs	r2, #0
 8006a88:	602a      	str	r2, [r5, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f7fa f8fc 	bl	8000c88 <_read>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_read_r+0x1e>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_read_r+0x1e>
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	20000318 	.word	0x20000318

08006aa0 <_write_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	4d06      	ldr	r5, [pc, #24]	@ (8006ac0 <_write_r+0x20>)
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	602a      	str	r2, [r5, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f7fa f907 	bl	8000cc2 <_write>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_write_r+0x1e>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_write_r+0x1e>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20000318 	.word	0x20000318

08006ac4 <__errno>:
 8006ac4:	4b01      	ldr	r3, [pc, #4]	@ (8006acc <__errno+0x8>)
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000018 	.word	0x20000018

08006ad0 <__libc_init_array>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8006b08 <__libc_init_array+0x38>)
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	4c0d      	ldr	r4, [pc, #52]	@ (8006b0c <__libc_init_array+0x3c>)
 8006ad8:	1b64      	subs	r4, r4, r5
 8006ada:	10a4      	asrs	r4, r4, #2
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	d109      	bne.n	8006af4 <__libc_init_array+0x24>
 8006ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8006b10 <__libc_init_array+0x40>)
 8006ae2:	2600      	movs	r6, #0
 8006ae4:	4c0b      	ldr	r4, [pc, #44]	@ (8006b14 <__libc_init_array+0x44>)
 8006ae6:	f000 fa53 	bl	8006f90 <_init>
 8006aea:	1b64      	subs	r4, r4, r5
 8006aec:	10a4      	asrs	r4, r4, #2
 8006aee:	42a6      	cmp	r6, r4
 8006af0:	d105      	bne.n	8006afe <__libc_init_array+0x2e>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af8:	3601      	adds	r6, #1
 8006afa:	4798      	blx	r3
 8006afc:	e7ee      	b.n	8006adc <__libc_init_array+0xc>
 8006afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b02:	3601      	adds	r6, #1
 8006b04:	4798      	blx	r3
 8006b06:	e7f2      	b.n	8006aee <__libc_init_array+0x1e>
 8006b08:	080070cc 	.word	0x080070cc
 8006b0c:	080070cc 	.word	0x080070cc
 8006b10:	080070cc 	.word	0x080070cc
 8006b14:	080070d0 	.word	0x080070d0

08006b18 <__retarget_lock_init_recursive>:
 8006b18:	4770      	bx	lr

08006b1a <__retarget_lock_acquire_recursive>:
 8006b1a:	4770      	bx	lr

08006b1c <__retarget_lock_release_recursive>:
 8006b1c:	4770      	bx	lr
	...

08006b20 <_free_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4605      	mov	r5, r0
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d041      	beq.n	8006bac <_free_r+0x8c>
 8006b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2c:	1f0c      	subs	r4, r1, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfb8      	it	lt
 8006b32:	18e4      	addlt	r4, r4, r3
 8006b34:	f000 f8e0 	bl	8006cf8 <__malloc_lock>
 8006b38:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb0 <_free_r+0x90>)
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	b933      	cbnz	r3, 8006b4c <_free_r+0x2c>
 8006b3e:	6063      	str	r3, [r4, #4]
 8006b40:	6014      	str	r4, [r2, #0]
 8006b42:	4628      	mov	r0, r5
 8006b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b48:	f000 b8dc 	b.w	8006d04 <__malloc_unlock>
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	d908      	bls.n	8006b62 <_free_r+0x42>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	1821      	adds	r1, r4, r0
 8006b54:	428b      	cmp	r3, r1
 8006b56:	bf01      	itttt	eq
 8006b58:	6819      	ldreq	r1, [r3, #0]
 8006b5a:	685b      	ldreq	r3, [r3, #4]
 8006b5c:	1809      	addeq	r1, r1, r0
 8006b5e:	6021      	streq	r1, [r4, #0]
 8006b60:	e7ed      	b.n	8006b3e <_free_r+0x1e>
 8006b62:	461a      	mov	r2, r3
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	b10b      	cbz	r3, 8006b6c <_free_r+0x4c>
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	d9fa      	bls.n	8006b62 <_free_r+0x42>
 8006b6c:	6811      	ldr	r1, [r2, #0]
 8006b6e:	1850      	adds	r0, r2, r1
 8006b70:	42a0      	cmp	r0, r4
 8006b72:	d10b      	bne.n	8006b8c <_free_r+0x6c>
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	4401      	add	r1, r0
 8006b78:	1850      	adds	r0, r2, r1
 8006b7a:	6011      	str	r1, [r2, #0]
 8006b7c:	4283      	cmp	r3, r0
 8006b7e:	d1e0      	bne.n	8006b42 <_free_r+0x22>
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4408      	add	r0, r1
 8006b86:	6053      	str	r3, [r2, #4]
 8006b88:	6010      	str	r0, [r2, #0]
 8006b8a:	e7da      	b.n	8006b42 <_free_r+0x22>
 8006b8c:	d902      	bls.n	8006b94 <_free_r+0x74>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	e7d6      	b.n	8006b42 <_free_r+0x22>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	1821      	adds	r1, r4, r0
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf02      	ittt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	1809      	addeq	r1, r1, r0
 8006ba2:	6063      	str	r3, [r4, #4]
 8006ba4:	bf08      	it	eq
 8006ba6:	6021      	streq	r1, [r4, #0]
 8006ba8:	6054      	str	r4, [r2, #4]
 8006baa:	e7ca      	b.n	8006b42 <_free_r+0x22>
 8006bac:	bd38      	pop	{r3, r4, r5, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000324 	.word	0x20000324

08006bb4 <sbrk_aligned>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8006bf4 <sbrk_aligned+0x40>)
 8006bb8:	460c      	mov	r4, r1
 8006bba:	4605      	mov	r5, r0
 8006bbc:	6831      	ldr	r1, [r6, #0]
 8006bbe:	b911      	cbnz	r1, 8006bc6 <sbrk_aligned+0x12>
 8006bc0:	f000 f9d6 	bl	8006f70 <_sbrk_r>
 8006bc4:	6030      	str	r0, [r6, #0]
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f000 f9d1 	bl	8006f70 <_sbrk_r>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d103      	bne.n	8006bda <sbrk_aligned+0x26>
 8006bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	bd70      	pop	{r4, r5, r6, pc}
 8006bda:	1cc4      	adds	r4, r0, #3
 8006bdc:	f024 0403 	bic.w	r4, r4, #3
 8006be0:	42a0      	cmp	r0, r4
 8006be2:	d0f8      	beq.n	8006bd6 <sbrk_aligned+0x22>
 8006be4:	1a21      	subs	r1, r4, r0
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f9c2 	bl	8006f70 <_sbrk_r>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d1f2      	bne.n	8006bd6 <sbrk_aligned+0x22>
 8006bf0:	e7ef      	b.n	8006bd2 <sbrk_aligned+0x1e>
 8006bf2:	bf00      	nop
 8006bf4:	20000320 	.word	0x20000320

08006bf8 <_malloc_r>:
 8006bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	1ccd      	adds	r5, r1, #3
 8006bfe:	4606      	mov	r6, r0
 8006c00:	f025 0503 	bic.w	r5, r5, #3
 8006c04:	3508      	adds	r5, #8
 8006c06:	2d0c      	cmp	r5, #12
 8006c08:	bf38      	it	cc
 8006c0a:	250c      	movcc	r5, #12
 8006c0c:	2d00      	cmp	r5, #0
 8006c0e:	db01      	blt.n	8006c14 <_malloc_r+0x1c>
 8006c10:	42a9      	cmp	r1, r5
 8006c12:	d904      	bls.n	8006c1e <_malloc_r+0x26>
 8006c14:	230c      	movs	r3, #12
 8006c16:	6033      	str	r3, [r6, #0]
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cf4 <_malloc_r+0xfc>
 8006c22:	f000 f869 	bl	8006cf8 <__malloc_lock>
 8006c26:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	bb44      	cbnz	r4, 8006c80 <_malloc_r+0x88>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff ffbf 	bl	8006bb4 <sbrk_aligned>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	4604      	mov	r4, r0
 8006c3a:	d158      	bne.n	8006cee <_malloc_r+0xf6>
 8006c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c40:	4627      	mov	r7, r4
 8006c42:	2f00      	cmp	r7, #0
 8006c44:	d143      	bne.n	8006cce <_malloc_r+0xd6>
 8006c46:	2c00      	cmp	r4, #0
 8006c48:	d04b      	beq.n	8006ce2 <_malloc_r+0xea>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	4630      	mov	r0, r6
 8006c50:	eb04 0903 	add.w	r9, r4, r3
 8006c54:	f000 f98c 	bl	8006f70 <_sbrk_r>
 8006c58:	4581      	cmp	r9, r0
 8006c5a:	d142      	bne.n	8006ce2 <_malloc_r+0xea>
 8006c5c:	6821      	ldr	r1, [r4, #0]
 8006c5e:	4630      	mov	r0, r6
 8006c60:	1a6d      	subs	r5, r5, r1
 8006c62:	4629      	mov	r1, r5
 8006c64:	f7ff ffa6 	bl	8006bb4 <sbrk_aligned>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d03a      	beq.n	8006ce2 <_malloc_r+0xea>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	442b      	add	r3, r5
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	f8d8 3000 	ldr.w	r3, [r8]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	bb62      	cbnz	r2, 8006cd4 <_malloc_r+0xdc>
 8006c7a:	f8c8 7000 	str.w	r7, [r8]
 8006c7e:	e00f      	b.n	8006ca0 <_malloc_r+0xa8>
 8006c80:	6822      	ldr	r2, [r4, #0]
 8006c82:	1b52      	subs	r2, r2, r5
 8006c84:	d420      	bmi.n	8006cc8 <_malloc_r+0xd0>
 8006c86:	2a0b      	cmp	r2, #11
 8006c88:	d917      	bls.n	8006cba <_malloc_r+0xc2>
 8006c8a:	1961      	adds	r1, r4, r5
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	6025      	str	r5, [r4, #0]
 8006c90:	bf18      	it	ne
 8006c92:	6059      	strne	r1, [r3, #4]
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	bf08      	it	eq
 8006c98:	f8c8 1000 	streq.w	r1, [r8]
 8006c9c:	5162      	str	r2, [r4, r5]
 8006c9e:	604b      	str	r3, [r1, #4]
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 f82f 	bl	8006d04 <__malloc_unlock>
 8006ca6:	f104 000b 	add.w	r0, r4, #11
 8006caa:	1d23      	adds	r3, r4, #4
 8006cac:	f020 0007 	bic.w	r0, r0, #7
 8006cb0:	1ac2      	subs	r2, r0, r3
 8006cb2:	bf1c      	itt	ne
 8006cb4:	1a1b      	subne	r3, r3, r0
 8006cb6:	50a3      	strne	r3, [r4, r2]
 8006cb8:	e7af      	b.n	8006c1a <_malloc_r+0x22>
 8006cba:	6862      	ldr	r2, [r4, #4]
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	bf0c      	ite	eq
 8006cc0:	f8c8 2000 	streq.w	r2, [r8]
 8006cc4:	605a      	strne	r2, [r3, #4]
 8006cc6:	e7eb      	b.n	8006ca0 <_malloc_r+0xa8>
 8006cc8:	4623      	mov	r3, r4
 8006cca:	6864      	ldr	r4, [r4, #4]
 8006ccc:	e7ae      	b.n	8006c2c <_malloc_r+0x34>
 8006cce:	463c      	mov	r4, r7
 8006cd0:	687f      	ldr	r7, [r7, #4]
 8006cd2:	e7b6      	b.n	8006c42 <_malloc_r+0x4a>
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	d1fb      	bne.n	8006cd4 <_malloc_r+0xdc>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	6053      	str	r3, [r2, #4]
 8006ce0:	e7de      	b.n	8006ca0 <_malloc_r+0xa8>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	f000 f80c 	bl	8006d04 <__malloc_unlock>
 8006cec:	e794      	b.n	8006c18 <_malloc_r+0x20>
 8006cee:	6005      	str	r5, [r0, #0]
 8006cf0:	e7d6      	b.n	8006ca0 <_malloc_r+0xa8>
 8006cf2:	bf00      	nop
 8006cf4:	20000324 	.word	0x20000324

08006cf8 <__malloc_lock>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	@ (8006d00 <__malloc_lock+0x8>)
 8006cfa:	f7ff bf0e 	b.w	8006b1a <__retarget_lock_acquire_recursive>
 8006cfe:	bf00      	nop
 8006d00:	2000031c 	.word	0x2000031c

08006d04 <__malloc_unlock>:
 8006d04:	4801      	ldr	r0, [pc, #4]	@ (8006d0c <__malloc_unlock+0x8>)
 8006d06:	f7ff bf09 	b.w	8006b1c <__retarget_lock_release_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	2000031c 	.word	0x2000031c

08006d10 <__sflush_r>:
 8006d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d18:	0716      	lsls	r6, r2, #28
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	d454      	bmi.n	8006dca <__sflush_r+0xba>
 8006d20:	684b      	ldr	r3, [r1, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dc02      	bgt.n	8006d2c <__sflush_r+0x1c>
 8006d26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dd48      	ble.n	8006dbe <__sflush_r+0xae>
 8006d2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	d045      	beq.n	8006dbe <__sflush_r+0xae>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d38:	682f      	ldr	r7, [r5, #0]
 8006d3a:	6a21      	ldr	r1, [r4, #32]
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	d030      	beq.n	8006da2 <__sflush_r+0x92>
 8006d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	0759      	lsls	r1, r3, #29
 8006d46:	d505      	bpl.n	8006d54 <__sflush_r+0x44>
 8006d48:	6863      	ldr	r3, [r4, #4]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d4e:	b10b      	cbz	r3, 8006d54 <__sflush_r+0x44>
 8006d50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d52:	1ad2      	subs	r2, r2, r3
 8006d54:	2300      	movs	r3, #0
 8006d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d58:	6a21      	ldr	r1, [r4, #32]
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b0      	blx	r6
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	d106      	bne.n	8006d72 <__sflush_r+0x62>
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	291d      	cmp	r1, #29
 8006d68:	d82b      	bhi.n	8006dc2 <__sflush_r+0xb2>
 8006d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e14 <__sflush_r+0x104>)
 8006d6c:	410a      	asrs	r2, r1
 8006d6e:	07d6      	lsls	r6, r2, #31
 8006d70:	d427      	bmi.n	8006dc2 <__sflush_r+0xb2>
 8006d72:	2200      	movs	r2, #0
 8006d74:	04d9      	lsls	r1, r3, #19
 8006d76:	6062      	str	r2, [r4, #4]
 8006d78:	6922      	ldr	r2, [r4, #16]
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	d504      	bpl.n	8006d88 <__sflush_r+0x78>
 8006d7e:	1c42      	adds	r2, r0, #1
 8006d80:	d101      	bne.n	8006d86 <__sflush_r+0x76>
 8006d82:	682b      	ldr	r3, [r5, #0]
 8006d84:	b903      	cbnz	r3, 8006d88 <__sflush_r+0x78>
 8006d86:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d8a:	602f      	str	r7, [r5, #0]
 8006d8c:	b1b9      	cbz	r1, 8006dbe <__sflush_r+0xae>
 8006d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d002      	beq.n	8006d9c <__sflush_r+0x8c>
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff fec2 	bl	8006b20 <_free_r>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006da0:	e00d      	b.n	8006dbe <__sflush_r+0xae>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4628      	mov	r0, r5
 8006da6:	47b0      	blx	r6
 8006da8:	4602      	mov	r2, r0
 8006daa:	1c50      	adds	r0, r2, #1
 8006dac:	d1c9      	bne.n	8006d42 <__sflush_r+0x32>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0c6      	beq.n	8006d42 <__sflush_r+0x32>
 8006db4:	2b1d      	cmp	r3, #29
 8006db6:	d001      	beq.n	8006dbc <__sflush_r+0xac>
 8006db8:	2b16      	cmp	r3, #22
 8006dba:	d11d      	bne.n	8006df8 <__sflush_r+0xe8>
 8006dbc:	602f      	str	r7, [r5, #0]
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e021      	b.n	8006e06 <__sflush_r+0xf6>
 8006dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc6:	b21b      	sxth	r3, r3
 8006dc8:	e01a      	b.n	8006e00 <__sflush_r+0xf0>
 8006dca:	690f      	ldr	r7, [r1, #16]
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	d0f6      	beq.n	8006dbe <__sflush_r+0xae>
 8006dd0:	0793      	lsls	r3, r2, #30
 8006dd2:	680e      	ldr	r6, [r1, #0]
 8006dd4:	600f      	str	r7, [r1, #0]
 8006dd6:	bf0c      	ite	eq
 8006dd8:	694b      	ldreq	r3, [r1, #20]
 8006dda:	2300      	movne	r3, #0
 8006ddc:	eba6 0807 	sub.w	r8, r6, r7
 8006de0:	608b      	str	r3, [r1, #8]
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	ddea      	ble.n	8006dbe <__sflush_r+0xae>
 8006de8:	4643      	mov	r3, r8
 8006dea:	463a      	mov	r2, r7
 8006dec:	6a21      	ldr	r1, [r4, #32]
 8006dee:	4628      	mov	r0, r5
 8006df0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006df2:	47b0      	blx	r6
 8006df4:	2800      	cmp	r0, #0
 8006df6:	dc08      	bgt.n	8006e0a <__sflush_r+0xfa>
 8006df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0a:	4407      	add	r7, r0
 8006e0c:	eba8 0800 	sub.w	r8, r8, r0
 8006e10:	e7e7      	b.n	8006de2 <__sflush_r+0xd2>
 8006e12:	bf00      	nop
 8006e14:	dfbffffe 	.word	0xdfbffffe

08006e18 <_fflush_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b913      	cbnz	r3, 8006e28 <_fflush_r+0x10>
 8006e22:	2500      	movs	r5, #0
 8006e24:	4628      	mov	r0, r5
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	b118      	cbz	r0, 8006e32 <_fflush_r+0x1a>
 8006e2a:	6a03      	ldr	r3, [r0, #32]
 8006e2c:	b90b      	cbnz	r3, 8006e32 <_fflush_r+0x1a>
 8006e2e:	f7ff fc8f 	bl	8006750 <__sinit>
 8006e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f3      	beq.n	8006e22 <_fflush_r+0xa>
 8006e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e3c:	07d0      	lsls	r0, r2, #31
 8006e3e:	d404      	bmi.n	8006e4a <_fflush_r+0x32>
 8006e40:	0599      	lsls	r1, r3, #22
 8006e42:	d402      	bmi.n	8006e4a <_fflush_r+0x32>
 8006e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e46:	f7ff fe68 	bl	8006b1a <__retarget_lock_acquire_recursive>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f7ff ff5f 	bl	8006d10 <__sflush_r>
 8006e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e54:	4605      	mov	r5, r0
 8006e56:	07da      	lsls	r2, r3, #31
 8006e58:	d4e4      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	059b      	lsls	r3, r3, #22
 8006e5e:	d4e1      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e62:	f7ff fe5b 	bl	8006b1c <__retarget_lock_release_recursive>
 8006e66:	e7dd      	b.n	8006e24 <_fflush_r+0xc>

08006e68 <__swhatbuf_r>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e70:	b096      	sub	sp, #88	@ 0x58
 8006e72:	4615      	mov	r5, r2
 8006e74:	2900      	cmp	r1, #0
 8006e76:	461e      	mov	r6, r3
 8006e78:	da0c      	bge.n	8006e94 <__swhatbuf_r+0x2c>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e82:	bf14      	ite	ne
 8006e84:	2340      	movne	r3, #64	@ 0x40
 8006e86:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	6031      	str	r1, [r6, #0]
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	b016      	add	sp, #88	@ 0x58
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	466a      	mov	r2, sp
 8006e96:	f000 f849 	bl	8006f2c <_fstat_r>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	dbed      	blt.n	8006e7a <__swhatbuf_r+0x12>
 8006e9e:	9901      	ldr	r1, [sp, #4]
 8006ea0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ea4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ea8:	4259      	negs	r1, r3
 8006eaa:	4159      	adcs	r1, r3
 8006eac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eb0:	e7eb      	b.n	8006e8a <__swhatbuf_r+0x22>

08006eb2 <__smakebuf_r>:
 8006eb2:	898b      	ldrh	r3, [r1, #12]
 8006eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb6:	079d      	lsls	r5, r3, #30
 8006eb8:	4606      	mov	r6, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	d507      	bpl.n	8006ece <__smakebuf_r+0x1c>
 8006ebe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	6163      	str	r3, [r4, #20]
 8006eca:	b003      	add	sp, #12
 8006ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ece:	ab01      	add	r3, sp, #4
 8006ed0:	466a      	mov	r2, sp
 8006ed2:	f7ff ffc9 	bl	8006e68 <__swhatbuf_r>
 8006ed6:	9f00      	ldr	r7, [sp, #0]
 8006ed8:	4605      	mov	r5, r0
 8006eda:	4630      	mov	r0, r6
 8006edc:	4639      	mov	r1, r7
 8006ede:	f7ff fe8b 	bl	8006bf8 <_malloc_r>
 8006ee2:	b948      	cbnz	r0, 8006ef8 <__smakebuf_r+0x46>
 8006ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee8:	059a      	lsls	r2, r3, #22
 8006eea:	d4ee      	bmi.n	8006eca <__smakebuf_r+0x18>
 8006eec:	f023 0303 	bic.w	r3, r3, #3
 8006ef0:	f043 0302 	orr.w	r3, r3, #2
 8006ef4:	81a3      	strh	r3, [r4, #12]
 8006ef6:	e7e2      	b.n	8006ebe <__smakebuf_r+0xc>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	6020      	str	r0, [r4, #0]
 8006efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f08:	b15b      	cbz	r3, 8006f22 <__smakebuf_r+0x70>
 8006f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 f81e 	bl	8006f50 <_isatty_r>
 8006f14:	b128      	cbz	r0, 8006f22 <__smakebuf_r+0x70>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f023 0303 	bic.w	r3, r3, #3
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	431d      	orrs	r5, r3
 8006f26:	81a5      	strh	r5, [r4, #12]
 8006f28:	e7cf      	b.n	8006eca <__smakebuf_r+0x18>
	...

08006f2c <_fstat_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	2300      	movs	r3, #0
 8006f30:	4d06      	ldr	r5, [pc, #24]	@ (8006f4c <_fstat_r+0x20>)
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	f7f9 feea 	bl	8000d12 <_fstat>
 8006f3e:	1c43      	adds	r3, r0, #1
 8006f40:	d102      	bne.n	8006f48 <_fstat_r+0x1c>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	b103      	cbz	r3, 8006f48 <_fstat_r+0x1c>
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000318 	.word	0x20000318

08006f50 <_isatty_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	2300      	movs	r3, #0
 8006f54:	4d05      	ldr	r5, [pc, #20]	@ (8006f6c <_isatty_r+0x1c>)
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7f9 fee9 	bl	8000d32 <_isatty>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_isatty_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_isatty_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20000318 	.word	0x20000318

08006f70 <_sbrk_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	2300      	movs	r3, #0
 8006f74:	4d05      	ldr	r5, [pc, #20]	@ (8006f8c <_sbrk_r+0x1c>)
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7f9 fef2 	bl	8000d64 <_sbrk>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_sbrk_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_sbrk_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20000318 	.word	0x20000318

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
