
F4_gensignal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080035dc  080035dc  000045dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f4  080035f4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080035f4  080035f4  000045f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035fc  080035fc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035fc  080035fc  000045fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003600  08003600  00004600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003604  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  0800366c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0800366c  00005224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008966  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b1  00000000  00000000  0000d9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c1  00000000  00000000  0000fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001647b  00000000  00000000  00010009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009776  00000000  00000000  00026484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000879a1  00000000  00000000  0002fbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b759b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  000b75e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000b9a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080035c4 	.word	0x080035c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080035c4 	.word	0x080035c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb14 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82a 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8ba 	bl	800064c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f88e 	bl	80005f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart2, UART2_rxBuffer, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	490e      	ldr	r1, [pc, #56]	@ (8000518 <main+0x50>)
 80004e0:	480e      	ldr	r0, [pc, #56]	@ (800051c <main+0x54>)
 80004e2:	f001 fc54 	bl	8001d8e <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2120      	movs	r1, #32
 80004ea:	480d      	ldr	r0, [pc, #52]	@ (8000520 <main+0x58>)
 80004ec:	f000 fec2 	bl	8001274 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag == 1){
 80004f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <main+0x5c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d1fa      	bne.n	80004f0 <main+0x28>
		  HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 fb6e 	bl	8000bdc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2120      	movs	r1, #32
 8000504:	4806      	ldr	r0, [pc, #24]	@ (8000520 <main+0x58>)
 8000506:	f000 feb5 	bl	8001274 <HAL_GPIO_WritePin>
		  printf("s");
 800050a:	2073      	movs	r0, #115	@ 0x73
 800050c:	f002 fc92 	bl	8002e34 <putchar>
		  flag = 0;
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <main+0x5c>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
	  if (flag == 1){
 8000516:	e7eb      	b.n	80004f0 <main+0x28>
 8000518:	200000cc 	.word	0x200000cc
 800051c:	20000084 	.word	0x20000084
 8000520:	40020400 	.word	0x40020400
 8000524:	200000cd 	.word	0x200000cd

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fcc7 	bl	8002eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a26      	ldr	r2, [pc, #152]	@ (80005f0 <SystemClock_Config+0xc8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <SystemClock_Config+0xc8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <SystemClock_Config+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <SystemClock_Config+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800059c:	2364      	movs	r3, #100	@ 0x64
 800059e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fe7b 	bl	80012a8 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b8:	f000 f906 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2103      	movs	r1, #3
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f8dd 	bl	8001798 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e4:	f000 f8f0 	bl	80007c8 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <MX_USART2_UART_Init+0x50>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_USART2_UART_Init+0x4c>)
 8000630:	f001 fad2 	bl	8001bd8 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063a:	f000 f8c5 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000084 	.word	0x20000084
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b37      	ldr	r3, [pc, #220]	@ (8000744 <MX_GPIO_Init+0xf8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a36      	ldr	r2, [pc, #216]	@ (8000744 <MX_GPIO_Init+0xf8>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b34      	ldr	r3, [pc, #208]	@ (8000744 <MX_GPIO_Init+0xf8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b30      	ldr	r3, [pc, #192]	@ (8000744 <MX_GPIO_Init+0xf8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2f      	ldr	r2, [pc, #188]	@ (8000744 <MX_GPIO_Init+0xf8>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <MX_GPIO_Init+0xf8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <MX_GPIO_Init+0xf8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a28      	ldr	r2, [pc, #160]	@ (8000744 <MX_GPIO_Init+0xf8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <MX_GPIO_Init+0xf8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <MX_GPIO_Init+0xf8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <MX_GPIO_Init+0xf8>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <MX_GPIO_Init+0xf8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	481c      	ldr	r0, [pc, #112]	@ (8000748 <MX_GPIO_Init+0xfc>)
 80006d8:	f000 fdcc 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2120      	movs	r1, #32
 80006e0:	481a      	ldr	r0, [pc, #104]	@ (800074c <MX_GPIO_Init+0x100>)
 80006e2:	f000 fdc7 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4814      	ldr	r0, [pc, #80]	@ (8000750 <MX_GPIO_Init+0x104>)
 80006fe:	f000 fc35 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000702:	2320      	movs	r3, #32
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <MX_GPIO_Init+0xfc>)
 800071a:	f000 fc27 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800071e:	2320      	movs	r3, #32
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_GPIO_Init+0x100>)
 8000736:	f000 fc19 	bl	8000f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40020000 	.word	0x40020000
 800074c:	40020400 	.word	0x40020400
 8000750:	40020800 	.word	0x40020800

08000754 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)  // Make sure it's UART2
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0b      	ldr	r2, [pc, #44]	@ (8000790 <HAL_UART_RxCpltCallback+0x3c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d110      	bne.n	8000788 <HAL_UART_RxCpltCallback+0x34>
    {
        if (UART2_rxBuffer[0] == 's')  // Check if received 's'
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <HAL_UART_RxCpltCallback+0x40>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b73      	cmp	r3, #115	@ 0x73
 800076c:	d107      	bne.n	800077e <HAL_UART_RxCpltCallback+0x2a>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // set PB5 LOW
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	4809      	ldr	r0, [pc, #36]	@ (8000798 <HAL_UART_RxCpltCallback+0x44>)
 8000774:	f000 fd7e 	bl	8001274 <HAL_GPIO_WritePin>
            flag = 1;
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <HAL_UART_RxCpltCallback+0x48>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
        }

        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart2, UART2_rxBuffer,1);
 800077e:	2201      	movs	r2, #1
 8000780:	4904      	ldr	r1, [pc, #16]	@ (8000794 <HAL_UART_RxCpltCallback+0x40>)
 8000782:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <HAL_UART_RxCpltCallback+0x4c>)
 8000784:	f001 fb03 	bl	8001d8e <HAL_UART_Receive_IT>
    }
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40004400 	.word	0x40004400
 8000794:	200000cc 	.word	0x200000cc
 8000798:	40020400 	.word	0x40020400
 800079c:	200000cd 	.word	0x200000cd
 80007a0:	20000084 	.word	0x20000084

080007a4 <__io_putchar>:
int __io_putchar(int ch)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,1000);
 80007ac:	1d39      	adds	r1, r7, #4
 80007ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b2:	2201      	movs	r2, #1
 80007b4:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <__io_putchar+0x20>)
 80007b6:	f001 fa5f 	bl	8001c78 <HAL_UART_Transmit>
    return ch;
 80007ba:	687b      	ldr	r3, [r7, #4]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000084 	.word	0x20000084

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000812:	2007      	movs	r0, #7
 8000814:	f000 fad6 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <HAL_UART_MspInit+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d133      	bne.n	80008ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <HAL_UART_MspInit+0x98>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <HAL_UART_MspInit+0x98>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087e:	230c      	movs	r3, #12
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088e:	2307      	movs	r3, #7
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <HAL_UART_MspInit+0x9c>)
 800089a:	f000 fb67 	bl	8000f6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2026      	movs	r0, #38	@ 0x26
 80008a4:	f000 fa99 	bl	8000dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008a8:	2026      	movs	r0, #38	@ 0x26
 80008aa:	f000 fab2 	bl	8000e12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f93f 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <USART2_IRQHandler+0x10>)
 800092a:	f001 fa55 	bl	8001dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000084 	.word	0x20000084

08000938 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e00a      	b.n	8000960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800094a:	f3af 8000 	nop.w
 800094e:	4601      	mov	r1, r0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf0      	blt.n	800094a <_read+0x12>
  }

  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e009      	b.n	8000998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff09 	bl	80007a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf1      	blt.n	8000984 <_write+0x12>
  }
  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_close>:

int _close(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d2:	605a      	str	r2, [r3, #4]
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_isatty>:

int _isatty(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f002 fa90 	bl	8002f68 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20020000 	.word	0x20020000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	200000d0 	.word	0x200000d0
 8000a7c:	20000228 	.word	0x20000228

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000adc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f002 fa4f 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fcf7 	bl	80004c8 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ae8:	08003604 	.word	0x08003604
  ldr r2, =_sbss
 8000aec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000af0:	20000224 	.word	0x20000224

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f94f 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe52 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f967 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f92f 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200000d4 	.word	0x200000d4

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200000d4 	.word	0x200000d4

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffde 	bl	8000bc4 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	@ (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	@ (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	@ 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	@ 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff29 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff3e 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff31 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa2 	bl	8000d80 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff feb6 	bl	8000bc4 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d008      	beq.n	8000e78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2280      	movs	r2, #128	@ 0x80
 8000e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e052      	b.n	8000f1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0216 	bic.w	r2, r2, #22
 8000e86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d103      	bne.n	8000ea8 <HAL_DMA_Abort+0x62>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d007      	beq.n	8000eb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0208 	bic.w	r2, r2, #8
 8000eb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0201 	bic.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ec8:	e013      	b.n	8000ef2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eca:	f7ff fe7b 	bl	8000bc4 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d90c      	bls.n	8000ef2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2220      	movs	r2, #32
 8000edc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e015      	b.n	8000f1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e4      	bne.n	8000eca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f04:	223f      	movs	r2, #63	@ 0x3f
 8000f06:	409a      	lsls	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d004      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e00c      	b.n	8000f5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2205      	movs	r2, #5
 8000f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e159      	b.n	800123c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 8148 	bne.w	8001236 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b03      	cmp	r3, #3
 800102a:	d017      	beq.n	800105c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80a2 	beq.w	8001236 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b57      	ldr	r3, [pc, #348]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a56      	ldr	r2, [pc, #344]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b54      	ldr	r3, [pc, #336]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110e:	4a52      	ldr	r2, [pc, #328]	@ (8001258 <HAL_GPIO_Init+0x2ec>)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a49      	ldr	r2, [pc, #292]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x202>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a48      	ldr	r2, [pc, #288]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x1fe>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a47      	ldr	r2, [pc, #284]	@ (8001264 <HAL_GPIO_Init+0x2f8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x1fa>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a46      	ldr	r2, [pc, #280]	@ (8001268 <HAL_GPIO_Init+0x2fc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x1f6>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a45      	ldr	r2, [pc, #276]	@ (800126c <HAL_GPIO_Init+0x300>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x1f2>
 800115a:	2304      	movs	r3, #4
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x204>
 800115e:	2307      	movs	r3, #7
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x204>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x204>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x204>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x204>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	@ (8001258 <HAL_GPIO_Init+0x2ec>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <HAL_GPIO_Init+0x304>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001270 <HAL_GPIO_Init+0x304>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001270 <HAL_GPIO_Init+0x304>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a24      	ldr	r2, [pc, #144]	@ (8001270 <HAL_GPIO_Init+0x304>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <HAL_GPIO_Init+0x304>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001206:	4a1a      	ldr	r2, [pc, #104]	@ (8001270 <HAL_GPIO_Init+0x304>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <HAL_GPIO_Init+0x304>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001230:	4a0f      	ldr	r2, [pc, #60]	@ (8001270 <HAL_GPIO_Init+0x304>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f aea2 	bls.w	8000f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	@ 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40013c00 	.word	0x40013c00

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e267      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012c6:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00c      	beq.n	80012ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b85      	ldr	r3, [pc, #532]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d112      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b82      	ldr	r3, [pc, #520]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ea:	d10b      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b7e      	ldr	r3, [pc, #504]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05b      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d157      	bne.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e242      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x74>
 800130e:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a75      	ldr	r2, [pc, #468]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b70      	ldr	r3, [pc, #448]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6f      	ldr	r2, [pc, #444]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6d      	ldr	r3, [pc, #436]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6c      	ldr	r2, [pc, #432]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 8001340:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a68      	ldr	r2, [pc, #416]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b66      	ldr	r3, [pc, #408]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a65      	ldr	r2, [pc, #404]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fc30 	bl	8000bc4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fc2c 	bl	8000bc4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e207      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xc0>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fc1c 	bl	8000bc4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc18 	bl	8000bc4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1f3      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013be:	4b4a      	ldr	r3, [pc, #296]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c7      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4937      	ldr	r1, [pc, #220]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fbd1 	bl	8000bc4 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fbcd 	bl	8000bc4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a8      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4925      	ldr	r1, [pc, #148]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fbb0 	bl	8000bc4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fbac 	bl	8000bc4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e187      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d036      	beq.n	8001500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d016      	beq.n	80014c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb90 	bl	8000bc4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb8c 	bl	8000bc4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e167      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x200>
 80014c6:	e01b      	b.n	8001500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb79 	bl	8000bc4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e00e      	b.n	80014f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb75 	bl	8000bc4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d907      	bls.n	80014f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e150      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000
 80014f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ea      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8097 	beq.w	800163c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b81      	ldr	r3, [pc, #516]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b7d      	ldr	r3, [pc, #500]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a7c      	ldr	r2, [pc, #496]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b7a      	ldr	r3, [pc, #488]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b77      	ldr	r3, [pc, #476]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b74      	ldr	r3, [pc, #464]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fb35 	bl	8000bc4 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fb31 	bl	8000bc4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e10c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b6a      	ldr	r3, [pc, #424]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x2ea>
 8001584:	4b64      	ldr	r3, [pc, #400]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001588:	4a63      	ldr	r2, [pc, #396]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x30c>
 800159a:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	4a5e      	ldr	r2, [pc, #376]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 80015b4:	4b58      	ldr	r3, [pc, #352]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	4a57      	ldr	r2, [pc, #348]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c0:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a54      	ldr	r2, [pc, #336]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff faf6 	bl	8000bc4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff faf2 	bl	8000bc4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0cb      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x334>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fae0 	bl	8000bc4 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fadc 	bl	8000bc4 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b5      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a38      	ldr	r2, [pc, #224]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a1 	beq.w	8001788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d05c      	beq.n	800170c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d141      	bne.n	80016de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fab0 	bl	8000bc4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff faac 	bl	8000bc4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e087      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	491b      	ldr	r1, [pc, #108]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fa85 	bl	8000bc4 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fa81 	bl	8000bc4 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e05c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x416>
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fa6e 	bl	8000bc4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fa6a 	bl	8000bc4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e045      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x444>
 800170a:	e03d      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e038      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d028      	beq.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d121      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800175a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	3b01      	subs	r3, #1
 800176e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff f99c 	bl	8000bc4 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff f998 	bl	8000bc4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	@ (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8fc 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	080035dc 	.word	0x080035dc
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b094      	sub	sp, #80	@ 0x50
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4b79      	ldr	r3, [pc, #484]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d00d      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001988:	2b08      	cmp	r3, #8
 800198a:	f200 80e1 	bhi.w	8001b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e0db      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b73      	ldr	r3, [pc, #460]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800199a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800199c:	e0db      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80019a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a2:	e0d8      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019d6:	4622      	mov	r2, r4
 80019d8:	462b      	mov	r3, r5
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e8:	0150      	lsls	r0, r2, #5
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	6139      	str	r1, [r7, #16]
 80019f4:	4629      	mov	r1, r5
 80019f6:	eb63 0301 	sbc.w	r3, r3, r1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a08:	4659      	mov	r1, fp
 8001a0a:	018b      	lsls	r3, r1, #6
 8001a0c:	4651      	mov	r1, sl
 8001a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a12:	4651      	mov	r1, sl
 8001a14:	018a      	lsls	r2, r1, #6
 8001a16:	4651      	mov	r1, sl
 8001a18:	ebb2 0801 	subs.w	r8, r2, r1
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a36:	4690      	mov	r8, r2
 8001a38:	4699      	mov	r9, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	eb18 0303 	adds.w	r3, r8, r3
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	462b      	mov	r3, r5
 8001a44:	eb49 0303 	adc.w	r3, r9, r3
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a56:	4629      	mov	r1, r5
 8001a58:	024b      	lsls	r3, r1, #9
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a60:	4621      	mov	r1, r4
 8001a62:	024a      	lsls	r2, r1, #9
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a74:	f7fe fbb0 	bl	80001d8 <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a80:	e058      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a82:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	099b      	lsrs	r3, r3, #6
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a9c:	4642      	mov	r2, r8
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	0159      	lsls	r1, r3, #5
 8001aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aae:	0150      	lsls	r0, r2, #5
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aba:	4649      	mov	r1, r9
 8001abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	00eb      	lsls	r3, r5, #3
 8001ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aea:	00e2      	lsls	r2, r4, #3
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	4643      	mov	r3, r8
 8001af2:	18e3      	adds	r3, r4, r3
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	464b      	mov	r3, r9
 8001af8:	eb45 0303 	adc.w	r3, r5, r3
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	028b      	lsls	r3, r1, #10
 8001b0e:	4621      	mov	r1, r4
 8001b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b14:	4621      	mov	r1, r4
 8001b16:	028a      	lsls	r2, r1, #10
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	61fa      	str	r2, [r7, #28]
 8001b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b28:	f7fe fb56 	bl	80001d8 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3750      	adds	r7, #80	@ 0x50
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	007a1200 	.word	0x007a1200

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	@ (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	080035ec 	.word	0x080035ec

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffdc 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0b5b      	lsrs	r3, r3, #13
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	@ (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	080035ec 	.word	0x080035ec

08001bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e042      	b.n	8001c70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fe10 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2224      	movs	r2, #36	@ 0x24
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fdd3 	bl	80027c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d175      	bne.n	8001d84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_UART_Transmit+0x2c>
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e06e      	b.n	8001d86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2221      	movs	r2, #33	@ 0x21
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cb6:	f7fe ff85 	bl	8000bc4 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	88fa      	ldrh	r2, [r7, #6]
 8001cc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	88fa      	ldrh	r2, [r7, #6]
 8001cc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cd0:	d108      	bne.n	8001ce4 <HAL_UART_Transmit+0x6c>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	e003      	b.n	8001cec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cec:	e02e      	b.n	8001d4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2180      	movs	r1, #128	@ 0x80
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fb37 	bl	800236c <UART_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e03a      	b.n	8001d86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10b      	bne.n	8001d2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	e007      	b.n	8001d3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1cb      	bne.n	8001cee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2140      	movs	r1, #64	@ 0x40
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fb03 	bl	800236c <UART_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e006      	b.n	8001d86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d112      	bne.n	8001dce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_UART_Receive_IT+0x26>
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e00b      	b.n	8001dd0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fb2a 	bl	800241e <UART_Start_Receive_IT>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	e000      	b.n	8001dd0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0ba      	sub	sp, #232	@ 0xe8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_UART_IRQHandler+0x66>
 8001e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fc07 	bl	800264a <UART_Receive_IT>
      return;
 8001e3c:	e273      	b.n	8002326 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80de 	beq.w	8002004 <HAL_UART_IRQHandler+0x22c>
 8001e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80d1 	beq.w	8002004 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_UART_IRQHandler+0xae>
 8001e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_UART_IRQHandler+0xd2>
 8001e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f043 0202 	orr.w	r2, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_UART_IRQHandler+0xf6>
 8001eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d011      	beq.n	8001efe <HAL_UART_IRQHandler+0x126>
 8001eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f043 0208 	orr.w	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 820a 	beq.w	800231c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_UART_IRQHandler+0x14e>
 8001f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb92 	bl	800264a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f30:	2b40      	cmp	r3, #64	@ 0x40
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_UART_IRQHandler+0x17a>
 8001f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04f      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa9d 	bl	8002492 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f62:	2b40      	cmp	r3, #64	@ 0x40
 8001f64:	d141      	bne.n	8001fea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3314      	adds	r3, #20
 8001f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f74:	e853 3f00 	ldrex	r3, [r3]
 8001f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001fa2:	e841 2300 	strex	r3, r2, [r1]
 8001fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1d9      	bne.n	8001f66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d013      	beq.n	8001fe2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbe:	4a8a      	ldr	r2, [pc, #552]	@ (80021e8 <HAL_UART_IRQHandler+0x410>)
 8001fc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ffad 	bl	8000f26 <HAL_DMA_Abort_IT>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d016      	beq.n	8002000 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	e00e      	b.n	8002000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f9ac 	bl	8002340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe8:	e00a      	b.n	8002000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f9a8 	bl	8002340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff0:	e006      	b.n	8002000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9a4 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001ffe:	e18d      	b.n	800231c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002000:	bf00      	nop
    return;
 8002002:	e18b      	b.n	800231c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	2b01      	cmp	r3, #1
 800200a:	f040 8167 	bne.w	80022dc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800200e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8160 	beq.w	80022dc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800201c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8159 	beq.w	80022dc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204a:	2b40      	cmp	r3, #64	@ 0x40
 800204c:	f040 80ce 	bne.w	80021ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800205c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a9 	beq.w	80021b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800206a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800206e:	429a      	cmp	r2, r3
 8002070:	f080 80a2 	bcs.w	80021b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800207a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002086:	f000 8088 	beq.w	800219a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	330c      	adds	r3, #12
 8002090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002098:	e853 3f00 	ldrex	r3, [r3]
 800209c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80020a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	330c      	adds	r3, #12
 80020b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80020b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80020c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80020ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1d9      	bne.n	800208a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3314      	adds	r3, #20
 80020dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e0:	e853 3f00 	ldrex	r3, [r3]
 80020e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80020e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3314      	adds	r3, #20
 80020f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80020fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002106:	e841 2300 	strex	r3, r2, [r1]
 800210a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800210c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1e1      	bne.n	80020d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3314      	adds	r3, #20
 8002118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800211c:	e853 3f00 	ldrex	r3, [r3]
 8002120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3314      	adds	r3, #20
 8002132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800213c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800213e:	e841 2300 	strex	r3, r2, [r1]
 8002142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e3      	bne.n	8002112 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800216a:	f023 0310 	bic.w	r3, r3, #16
 800216e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800217c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800217e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002180:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002182:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002184:	e841 2300 	strex	r3, r2, [r1]
 8002188:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800218a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e3      	bne.n	8002158 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fe56 	bl	8000e46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4619      	mov	r1, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8cf 	bl	8002354 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80021b6:	e0b3      	b.n	8002320 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 80ad 	bne.w	8002320 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d0:	f040 80a6 	bne.w	8002320 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8b7 	bl	8002354 <HAL_UARTEx_RxEventCallback>
      return;
 80021e6:	e09b      	b.n	8002320 <HAL_UART_IRQHandler+0x548>
 80021e8:	08002559 	.word	0x08002559
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 808e 	beq.w	8002324 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8089 	beq.w	8002324 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	e853 3f00 	ldrex	r3, [r3]
 8002220:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002224:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002228:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	330c      	adds	r3, #12
 8002232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002236:	647a      	str	r2, [r7, #68]	@ 0x44
 8002238:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800223c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e3      	bne.n	8002212 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3314      	adds	r3, #20
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	e853 3f00 	ldrex	r3, [r3]
 8002258:	623b      	str	r3, [r7, #32]
   return(result);
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3314      	adds	r3, #20
 800226a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800226e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002276:	e841 2300 	strex	r3, r2, [r1]
 800227a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e3      	bne.n	800224a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	330c      	adds	r3, #12
 8002296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	e853 3f00 	ldrex	r3, [r3]
 800229e:	60fb      	str	r3, [r7, #12]
   return(result);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0310 	bic.w	r3, r3, #16
 80022a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80022b4:	61fa      	str	r2, [r7, #28]
 80022b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	69b9      	ldr	r1, [r7, #24]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	617b      	str	r3, [r7, #20]
   return(result);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e3      	bne.n	8002290 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f83d 	bl	8002354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022da:	e023      	b.n	8002324 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_UART_IRQHandler+0x524>
 80022e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f940 	bl	800257a <UART_Transmit_IT>
    return;
 80022fa:	e014      	b.n	8002326 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <HAL_UART_IRQHandler+0x54e>
 8002308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800230c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f980 	bl	800261a <UART_EndTransmit_IT>
    return;
 800231a:	e004      	b.n	8002326 <HAL_UART_IRQHandler+0x54e>
    return;
 800231c:	bf00      	nop
 800231e:	e002      	b.n	8002326 <HAL_UART_IRQHandler+0x54e>
      return;
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <HAL_UART_IRQHandler+0x54e>
      return;
 8002324:	bf00      	nop
  }
}
 8002326:	37e8      	adds	r7, #232	@ 0xe8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800237c:	e03b      	b.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d037      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7fe fc1d 	bl	8000bc4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <UART_WaitOnFlagUntilTimeout+0x30>
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e03a      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d023      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b80      	cmp	r3, #128	@ 0x80
 80023b2:	d020      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d01d      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d116      	bne.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f857 	bl	8002492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2208      	movs	r2, #8
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4013      	ands	r3, r2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	429a      	cmp	r2, r3
 8002412:	d0b4      	beq.n	800237e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2222      	movs	r2, #34	@ 0x22
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002462:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002492:	b480      	push	{r7}
 8002494:	b095      	sub	sp, #84	@ 0x54
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a4:	e853 3f00 	ldrex	r3, [r3]
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	330c      	adds	r3, #12
 80024b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80024bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024c2:	e841 2300 	strex	r3, r2, [r1]
 80024c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e5      	bne.n	800249a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3314      	adds	r3, #20
 80024d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	e853 3f00 	ldrex	r3, [r3]
 80024dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3314      	adds	r3, #20
 80024ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e5      	bne.n	80024ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	2b01      	cmp	r3, #1
 8002508:	d119      	bne.n	800253e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	60bb      	str	r3, [r7, #8]
   return(result);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f023 0310 	bic.w	r3, r3, #16
 8002520:	647b      	str	r3, [r7, #68]	@ 0x44
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800252a:	61ba      	str	r2, [r7, #24]
 800252c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252e:	6979      	ldr	r1, [r7, #20]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	613b      	str	r3, [r7, #16]
   return(result);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800254c:	bf00      	nop
 800254e:	3754      	adds	r7, #84	@ 0x54
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fee7 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b21      	cmp	r3, #33	@ 0x21
 800258c:	d13e      	bne.n	800260c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002596:	d114      	bne.n	80025c2 <UART_Transmit_IT+0x48>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d110      	bne.n	80025c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	1c9a      	adds	r2, r3, #2
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	621a      	str	r2, [r3, #32]
 80025c0:	e008      	b.n	80025d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	1c59      	adds	r1, r3, #1
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6211      	str	r1, [r2, #32]
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29b      	uxth	r3, r3
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4619      	mov	r1, r3
 80025e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10f      	bne.n	8002608 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002606:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002630:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fe76 	bl	800232c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b08c      	sub	sp, #48	@ 0x30
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002652:	2300      	movs	r3, #0
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b22      	cmp	r3, #34	@ 0x22
 8002664:	f040 80aa 	bne.w	80027bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002670:	d115      	bne.n	800269e <UART_Receive_IT+0x54>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d111      	bne.n	800269e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	b29a      	uxth	r2, r3
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	1c9a      	adds	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
 800269c:	e024      	b.n	80026e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ac:	d007      	beq.n	80026be <UART_Receive_IT+0x74>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <UART_Receive_IT+0x82>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e008      	b.n	80026de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4619      	mov	r1, r3
 80026f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d15d      	bne.n	80027b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0220 	bic.w	r2, r2, #32
 800270a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800271a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	2b01      	cmp	r3, #1
 8002740:	d135      	bne.n	80027ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	613b      	str	r3, [r7, #16]
   return(result);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f023 0310 	bic.w	r3, r3, #16
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002768:	623a      	str	r2, [r7, #32]
 800276a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276c:	69f9      	ldr	r1, [r7, #28]
 800276e:	6a3a      	ldr	r2, [r7, #32]
 8002770:	e841 2300 	strex	r3, r2, [r1]
 8002774:	61bb      	str	r3, [r7, #24]
   return(result);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e5      	bne.n	8002748 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b10      	cmp	r3, #16
 8002788:	d10a      	bne.n	80027a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fdd4 	bl	8002354 <HAL_UARTEx_RxEventCallback>
 80027ac:	e002      	b.n	80027b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fd ffd0 	bl	8000754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e002      	b.n	80027be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3730      	adds	r7, #48	@ 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027cc:	b0c0      	sub	sp, #256	@ 0x100
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	ea40 0301 	orr.w	r3, r0, r1
 80027f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	431a      	orrs	r2, r3
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002820:	f021 010c 	bic.w	r1, r1, #12
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800282e:	430b      	orrs	r3, r1
 8002830:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002842:	6999      	ldr	r1, [r3, #24]
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	ea40 0301 	orr.w	r3, r0, r1
 800284e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b8f      	ldr	r3, [pc, #572]	@ (8002a94 <UART_SetConfig+0x2cc>)
 8002858:	429a      	cmp	r2, r3
 800285a:	d005      	beq.n	8002868 <UART_SetConfig+0xa0>
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b8d      	ldr	r3, [pc, #564]	@ (8002a98 <UART_SetConfig+0x2d0>)
 8002864:	429a      	cmp	r2, r3
 8002866:	d104      	bne.n	8002872 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002868:	f7ff f9a2 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 800286c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002870:	e003      	b.n	800287a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002872:	f7ff f989 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002876:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800287a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002884:	f040 810c 	bne.w	8002aa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800288c:	2200      	movs	r2, #0
 800288e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002892:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002896:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800289a:	4622      	mov	r2, r4
 800289c:	462b      	mov	r3, r5
 800289e:	1891      	adds	r1, r2, r2
 80028a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028a2:	415b      	adcs	r3, r3
 80028a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028aa:	4621      	mov	r1, r4
 80028ac:	eb12 0801 	adds.w	r8, r2, r1
 80028b0:	4629      	mov	r1, r5
 80028b2:	eb43 0901 	adc.w	r9, r3, r1
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ca:	4690      	mov	r8, r2
 80028cc:	4699      	mov	r9, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	eb18 0303 	adds.w	r3, r8, r3
 80028d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028d8:	462b      	mov	r3, r5
 80028da:	eb49 0303 	adc.w	r3, r9, r3
 80028de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028f6:	460b      	mov	r3, r1
 80028f8:	18db      	adds	r3, r3, r3
 80028fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80028fc:	4613      	mov	r3, r2
 80028fe:	eb42 0303 	adc.w	r3, r2, r3
 8002902:	657b      	str	r3, [r7, #84]	@ 0x54
 8002904:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002908:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800290c:	f7fd fc64 	bl	80001d8 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4b61      	ldr	r3, [pc, #388]	@ (8002a9c <UART_SetConfig+0x2d4>)
 8002916:	fba3 2302 	umull	r2, r3, r3, r2
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	011c      	lsls	r4, r3, #4
 800291e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002922:	2200      	movs	r2, #0
 8002924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002928:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800292c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002930:	4642      	mov	r2, r8
 8002932:	464b      	mov	r3, r9
 8002934:	1891      	adds	r1, r2, r2
 8002936:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002938:	415b      	adcs	r3, r3
 800293a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800293c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002940:	4641      	mov	r1, r8
 8002942:	eb12 0a01 	adds.w	sl, r2, r1
 8002946:	4649      	mov	r1, r9
 8002948:	eb43 0b01 	adc.w	fp, r3, r1
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002958:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800295c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002960:	4692      	mov	sl, r2
 8002962:	469b      	mov	fp, r3
 8002964:	4643      	mov	r3, r8
 8002966:	eb1a 0303 	adds.w	r3, sl, r3
 800296a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800296e:	464b      	mov	r3, r9
 8002970:	eb4b 0303 	adc.w	r3, fp, r3
 8002974:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002984:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002988:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800298c:	460b      	mov	r3, r1
 800298e:	18db      	adds	r3, r3, r3
 8002990:	643b      	str	r3, [r7, #64]	@ 0x40
 8002992:	4613      	mov	r3, r2
 8002994:	eb42 0303 	adc.w	r3, r2, r3
 8002998:	647b      	str	r3, [r7, #68]	@ 0x44
 800299a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800299e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029a2:	f7fd fc19 	bl	80001d8 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <UART_SetConfig+0x2d4>)
 80029ae:	fba3 2301 	umull	r2, r3, r3, r1
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2264      	movs	r2, #100	@ 0x64
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	1acb      	subs	r3, r1, r3
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029c2:	4b36      	ldr	r3, [pc, #216]	@ (8002a9c <UART_SetConfig+0x2d4>)
 80029c4:	fba3 2302 	umull	r2, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029d0:	441c      	add	r4, r3
 80029d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	1891      	adds	r1, r2, r2
 80029ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029ec:	415b      	adcs	r3, r3
 80029ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029f4:	4641      	mov	r1, r8
 80029f6:	1851      	adds	r1, r2, r1
 80029f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80029fa:	4649      	mov	r1, r9
 80029fc:	414b      	adcs	r3, r1
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a0c:	4659      	mov	r1, fp
 8002a0e:	00cb      	lsls	r3, r1, #3
 8002a10:	4651      	mov	r1, sl
 8002a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a16:	4651      	mov	r1, sl
 8002a18:	00ca      	lsls	r2, r1, #3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4642      	mov	r2, r8
 8002a22:	189b      	adds	r3, r3, r2
 8002a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a28:	464b      	mov	r3, r9
 8002a2a:	460a      	mov	r2, r1
 8002a2c:	eb42 0303 	adc.w	r3, r2, r3
 8002a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a48:	460b      	mov	r3, r1
 8002a4a:	18db      	adds	r3, r3, r3
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a4e:	4613      	mov	r3, r2
 8002a50:	eb42 0303 	adc.w	r3, r2, r3
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a5e:	f7fd fbbb 	bl	80001d8 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <UART_SetConfig+0x2d4>)
 8002a68:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	2164      	movs	r1, #100	@ 0x64
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	3332      	adds	r3, #50	@ 0x32
 8002a7a:	4a08      	ldr	r2, [pc, #32]	@ (8002a9c <UART_SetConfig+0x2d4>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	f003 0207 	and.w	r2, r3, #7
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4422      	add	r2, r4
 8002a8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a90:	e106      	b.n	8002ca0 <UART_SetConfig+0x4d8>
 8002a92:	bf00      	nop
 8002a94:	40011000 	.word	0x40011000
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002aaa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002aae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ab2:	4642      	mov	r2, r8
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	1891      	adds	r1, r2, r2
 8002ab8:	6239      	str	r1, [r7, #32]
 8002aba:	415b      	adcs	r3, r3
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	1854      	adds	r4, r2, r1
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	eb43 0501 	adc.w	r5, r3, r1
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	00eb      	lsls	r3, r5, #3
 8002ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ada:	00e2      	lsls	r2, r4, #3
 8002adc:	4614      	mov	r4, r2
 8002ade:	461d      	mov	r5, r3
 8002ae0:	4643      	mov	r3, r8
 8002ae2:	18e3      	adds	r3, r4, r3
 8002ae4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ae8:	464b      	mov	r3, r9
 8002aea:	eb45 0303 	adc.w	r3, r5, r3
 8002aee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002afe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b0e:	4629      	mov	r1, r5
 8002b10:	008b      	lsls	r3, r1, #2
 8002b12:	4621      	mov	r1, r4
 8002b14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b18:	4621      	mov	r1, r4
 8002b1a:	008a      	lsls	r2, r1, #2
 8002b1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b20:	f7fd fb5a 	bl	80001d8 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4b60      	ldr	r3, [pc, #384]	@ (8002cac <UART_SetConfig+0x4e4>)
 8002b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	011c      	lsls	r4, r3, #4
 8002b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b44:	4642      	mov	r2, r8
 8002b46:	464b      	mov	r3, r9
 8002b48:	1891      	adds	r1, r2, r2
 8002b4a:	61b9      	str	r1, [r7, #24]
 8002b4c:	415b      	adcs	r3, r3
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b54:	4641      	mov	r1, r8
 8002b56:	1851      	adds	r1, r2, r1
 8002b58:	6139      	str	r1, [r7, #16]
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	414b      	adcs	r3, r1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	00cb      	lsls	r3, r1, #3
 8002b70:	4651      	mov	r1, sl
 8002b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b76:	4651      	mov	r1, sl
 8002b78:	00ca      	lsls	r2, r1, #3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4642      	mov	r2, r8
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b88:	464b      	mov	r3, r9
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	eb42 0303 	adc.w	r3, r2, r3
 8002b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002bac:	4649      	mov	r1, r9
 8002bae:	008b      	lsls	r3, r1, #2
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	008a      	lsls	r2, r1, #2
 8002bba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002bbe:	f7fd fb0b 	bl	80001d8 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4b38      	ldr	r3, [pc, #224]	@ (8002cac <UART_SetConfig+0x4e4>)
 8002bca:	fba3 2301 	umull	r2, r3, r3, r1
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2264      	movs	r2, #100	@ 0x64
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	1acb      	subs	r3, r1, r3
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	3332      	adds	r3, #50	@ 0x32
 8002bdc:	4a33      	ldr	r2, [pc, #204]	@ (8002cac <UART_SetConfig+0x4e4>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be8:	441c      	add	r4, r3
 8002bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bee:	2200      	movs	r2, #0
 8002bf0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bf2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	415b      	adcs	r3, r3
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c08:	4641      	mov	r1, r8
 8002c0a:	1851      	adds	r1, r2, r1
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	4649      	mov	r1, r9
 8002c10:	414b      	adcs	r3, r1
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c20:	4659      	mov	r1, fp
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	4651      	mov	r1, sl
 8002c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2a:	4651      	mov	r1, sl
 8002c2c:	00ca      	lsls	r2, r1, #3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	4642      	mov	r2, r8
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	eb42 0303 	adc.w	r3, r2, r3
 8002c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	008b      	lsls	r3, r1, #2
 8002c60:	4641      	mov	r1, r8
 8002c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c66:	4641      	mov	r1, r8
 8002c68:	008a      	lsls	r2, r1, #2
 8002c6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c6e:	f7fd fab3 	bl	80001d8 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <UART_SetConfig+0x4e4>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2164      	movs	r1, #100	@ 0x64
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	3332      	adds	r3, #50	@ 0x32
 8002c8a:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <UART_SetConfig+0x4e4>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 020f 	and.w	r2, r3, #15
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4422      	add	r2, r4
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cac:	51eb851f 	.word	0x51eb851f

08002cb0 <std>:
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8002cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cbe:	6083      	str	r3, [r0, #8]
 8002cc0:	8181      	strh	r1, [r0, #12]
 8002cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cc4:	81c2      	strh	r2, [r0, #14]
 8002cc6:	6183      	str	r3, [r0, #24]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	2208      	movs	r2, #8
 8002ccc:	305c      	adds	r0, #92	@ 0x5c
 8002cce:	f000 f8fc 	bl	8002eca <memset>
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <std+0x58>)
 8002cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <std+0x5c>)
 8002cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <std+0x60>)
 8002cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <std+0x64>)
 8002ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <std+0x68>)
 8002ce4:	6224      	str	r4, [r4, #32]
 8002ce6:	429c      	cmp	r4, r3
 8002ce8:	d006      	beq.n	8002cf8 <std+0x48>
 8002cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002cee:	4294      	cmp	r4, r2
 8002cf0:	d002      	beq.n	8002cf8 <std+0x48>
 8002cf2:	33d0      	adds	r3, #208	@ 0xd0
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	d105      	bne.n	8002d04 <std+0x54>
 8002cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d00:	f000 b95c 	b.w	8002fbc <__retarget_lock_init_recursive>
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	bf00      	nop
 8002d08:	08002e45 	.word	0x08002e45
 8002d0c:	08002e67 	.word	0x08002e67
 8002d10:	08002e9f 	.word	0x08002e9f
 8002d14:	08002ec3 	.word	0x08002ec3
 8002d18:	200000d8 	.word	0x200000d8

08002d1c <stdio_exit_handler>:
 8002d1c:	4a02      	ldr	r2, [pc, #8]	@ (8002d28 <stdio_exit_handler+0xc>)
 8002d1e:	4903      	ldr	r1, [pc, #12]	@ (8002d2c <stdio_exit_handler+0x10>)
 8002d20:	4803      	ldr	r0, [pc, #12]	@ (8002d30 <stdio_exit_handler+0x14>)
 8002d22:	f000 b869 	b.w	8002df8 <_fwalk_sglue>
 8002d26:	bf00      	nop
 8002d28:	2000000c 	.word	0x2000000c
 8002d2c:	080032bd 	.word	0x080032bd
 8002d30:	2000001c 	.word	0x2000001c

08002d34 <cleanup_stdio>:
 8002d34:	6841      	ldr	r1, [r0, #4]
 8002d36:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <cleanup_stdio+0x34>)
 8002d38:	4299      	cmp	r1, r3
 8002d3a:	b510      	push	{r4, lr}
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	d001      	beq.n	8002d44 <cleanup_stdio+0x10>
 8002d40:	f000 fabc 	bl	80032bc <_fflush_r>
 8002d44:	68a1      	ldr	r1, [r4, #8]
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <cleanup_stdio+0x38>)
 8002d48:	4299      	cmp	r1, r3
 8002d4a:	d002      	beq.n	8002d52 <cleanup_stdio+0x1e>
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f000 fab5 	bl	80032bc <_fflush_r>
 8002d52:	68e1      	ldr	r1, [r4, #12]
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <cleanup_stdio+0x3c>)
 8002d56:	4299      	cmp	r1, r3
 8002d58:	d004      	beq.n	8002d64 <cleanup_stdio+0x30>
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d60:	f000 baac 	b.w	80032bc <_fflush_r>
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	bf00      	nop
 8002d68:	200000d8 	.word	0x200000d8
 8002d6c:	20000140 	.word	0x20000140
 8002d70:	200001a8 	.word	0x200001a8

08002d74 <global_stdio_init.part.0>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <global_stdio_init.part.0+0x30>)
 8002d78:	4c0b      	ldr	r4, [pc, #44]	@ (8002da8 <global_stdio_init.part.0+0x34>)
 8002d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dac <global_stdio_init.part.0+0x38>)
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	4620      	mov	r0, r4
 8002d80:	2200      	movs	r2, #0
 8002d82:	2104      	movs	r1, #4
 8002d84:	f7ff ff94 	bl	8002cb0 <std>
 8002d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2109      	movs	r1, #9
 8002d90:	f7ff ff8e 	bl	8002cb0 <std>
 8002d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d98:	2202      	movs	r2, #2
 8002d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d9e:	2112      	movs	r1, #18
 8002da0:	f7ff bf86 	b.w	8002cb0 <std>
 8002da4:	20000210 	.word	0x20000210
 8002da8:	200000d8 	.word	0x200000d8
 8002dac:	08002d1d 	.word	0x08002d1d

08002db0 <__sfp_lock_acquire>:
 8002db0:	4801      	ldr	r0, [pc, #4]	@ (8002db8 <__sfp_lock_acquire+0x8>)
 8002db2:	f000 b904 	b.w	8002fbe <__retarget_lock_acquire_recursive>
 8002db6:	bf00      	nop
 8002db8:	20000219 	.word	0x20000219

08002dbc <__sfp_lock_release>:
 8002dbc:	4801      	ldr	r0, [pc, #4]	@ (8002dc4 <__sfp_lock_release+0x8>)
 8002dbe:	f000 b8ff 	b.w	8002fc0 <__retarget_lock_release_recursive>
 8002dc2:	bf00      	nop
 8002dc4:	20000219 	.word	0x20000219

08002dc8 <__sinit>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4604      	mov	r4, r0
 8002dcc:	f7ff fff0 	bl	8002db0 <__sfp_lock_acquire>
 8002dd0:	6a23      	ldr	r3, [r4, #32]
 8002dd2:	b11b      	cbz	r3, 8002ddc <__sinit+0x14>
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dd8:	f7ff bff0 	b.w	8002dbc <__sfp_lock_release>
 8002ddc:	4b04      	ldr	r3, [pc, #16]	@ (8002df0 <__sinit+0x28>)
 8002dde:	6223      	str	r3, [r4, #32]
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__sinit+0x2c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f5      	bne.n	8002dd4 <__sinit+0xc>
 8002de8:	f7ff ffc4 	bl	8002d74 <global_stdio_init.part.0>
 8002dec:	e7f2      	b.n	8002dd4 <__sinit+0xc>
 8002dee:	bf00      	nop
 8002df0:	08002d35 	.word	0x08002d35
 8002df4:	20000210 	.word	0x20000210

08002df8 <_fwalk_sglue>:
 8002df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dfc:	4607      	mov	r7, r0
 8002dfe:	4688      	mov	r8, r1
 8002e00:	4614      	mov	r4, r2
 8002e02:	2600      	movs	r6, #0
 8002e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e08:	f1b9 0901 	subs.w	r9, r9, #1
 8002e0c:	d505      	bpl.n	8002e1a <_fwalk_sglue+0x22>
 8002e0e:	6824      	ldr	r4, [r4, #0]
 8002e10:	2c00      	cmp	r4, #0
 8002e12:	d1f7      	bne.n	8002e04 <_fwalk_sglue+0xc>
 8002e14:	4630      	mov	r0, r6
 8002e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e1a:	89ab      	ldrh	r3, [r5, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d907      	bls.n	8002e30 <_fwalk_sglue+0x38>
 8002e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e24:	3301      	adds	r3, #1
 8002e26:	d003      	beq.n	8002e30 <_fwalk_sglue+0x38>
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4638      	mov	r0, r7
 8002e2c:	47c0      	blx	r8
 8002e2e:	4306      	orrs	r6, r0
 8002e30:	3568      	adds	r5, #104	@ 0x68
 8002e32:	e7e9      	b.n	8002e08 <_fwalk_sglue+0x10>

08002e34 <putchar>:
 8002e34:	4b02      	ldr	r3, [pc, #8]	@ (8002e40 <putchar+0xc>)
 8002e36:	4601      	mov	r1, r0
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	6882      	ldr	r2, [r0, #8]
 8002e3c:	f000 ba66 	b.w	800330c <_putc_r>
 8002e40:	20000018 	.word	0x20000018

08002e44 <__sread>:
 8002e44:	b510      	push	{r4, lr}
 8002e46:	460c      	mov	r4, r1
 8002e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e4c:	f000 f868 	bl	8002f20 <_read_r>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	bfab      	itete	ge
 8002e54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e56:	89a3      	ldrhlt	r3, [r4, #12]
 8002e58:	181b      	addge	r3, r3, r0
 8002e5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e5e:	bfac      	ite	ge
 8002e60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e62:	81a3      	strhlt	r3, [r4, #12]
 8002e64:	bd10      	pop	{r4, pc}

08002e66 <__swrite>:
 8002e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6a:	461f      	mov	r7, r3
 8002e6c:	898b      	ldrh	r3, [r1, #12]
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	4605      	mov	r5, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	4616      	mov	r6, r2
 8002e76:	d505      	bpl.n	8002e84 <__swrite+0x1e>
 8002e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f000 f83c 	bl	8002efc <_lseek_r>
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	4632      	mov	r2, r6
 8002e92:	463b      	mov	r3, r7
 8002e94:	4628      	mov	r0, r5
 8002e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9a:	f000 b853 	b.w	8002f44 <_write_r>

08002e9e <__sseek>:
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea6:	f000 f829 	bl	8002efc <_lseek_r>
 8002eaa:	1c43      	adds	r3, r0, #1
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	bf15      	itete	ne
 8002eb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002eb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002eba:	81a3      	strheq	r3, [r4, #12]
 8002ebc:	bf18      	it	ne
 8002ebe:	81a3      	strhne	r3, [r4, #12]
 8002ec0:	bd10      	pop	{r4, pc}

08002ec2 <__sclose>:
 8002ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec6:	f000 b809 	b.w	8002edc <_close_r>

08002eca <memset>:
 8002eca:	4402      	add	r2, r0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d100      	bne.n	8002ed4 <memset+0xa>
 8002ed2:	4770      	bx	lr
 8002ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed8:	e7f9      	b.n	8002ece <memset+0x4>
	...

08002edc <_close_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4d06      	ldr	r5, [pc, #24]	@ (8002ef8 <_close_r+0x1c>)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	f7fd fd5f 	bl	80009aa <_close>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	d102      	bne.n	8002ef6 <_close_r+0x1a>
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	b103      	cbz	r3, 8002ef6 <_close_r+0x1a>
 8002ef4:	6023      	str	r3, [r4, #0]
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	20000214 	.word	0x20000214

08002efc <_lseek_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4d07      	ldr	r5, [pc, #28]	@ (8002f1c <_lseek_r+0x20>)
 8002f00:	4604      	mov	r4, r0
 8002f02:	4608      	mov	r0, r1
 8002f04:	4611      	mov	r1, r2
 8002f06:	2200      	movs	r2, #0
 8002f08:	602a      	str	r2, [r5, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f7fd fd74 	bl	80009f8 <_lseek>
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	d102      	bne.n	8002f1a <_lseek_r+0x1e>
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	b103      	cbz	r3, 8002f1a <_lseek_r+0x1e>
 8002f18:	6023      	str	r3, [r4, #0]
 8002f1a:	bd38      	pop	{r3, r4, r5, pc}
 8002f1c:	20000214 	.word	0x20000214

08002f20 <_read_r>:
 8002f20:	b538      	push	{r3, r4, r5, lr}
 8002f22:	4d07      	ldr	r5, [pc, #28]	@ (8002f40 <_read_r+0x20>)
 8002f24:	4604      	mov	r4, r0
 8002f26:	4608      	mov	r0, r1
 8002f28:	4611      	mov	r1, r2
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	602a      	str	r2, [r5, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f7fd fd02 	bl	8000938 <_read>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d102      	bne.n	8002f3e <_read_r+0x1e>
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	b103      	cbz	r3, 8002f3e <_read_r+0x1e>
 8002f3c:	6023      	str	r3, [r4, #0]
 8002f3e:	bd38      	pop	{r3, r4, r5, pc}
 8002f40:	20000214 	.word	0x20000214

08002f44 <_write_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	4d07      	ldr	r5, [pc, #28]	@ (8002f64 <_write_r+0x20>)
 8002f48:	4604      	mov	r4, r0
 8002f4a:	4608      	mov	r0, r1
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	2200      	movs	r2, #0
 8002f50:	602a      	str	r2, [r5, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f7fd fd0d 	bl	8000972 <_write>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d102      	bne.n	8002f62 <_write_r+0x1e>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	b103      	cbz	r3, 8002f62 <_write_r+0x1e>
 8002f60:	6023      	str	r3, [r4, #0]
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
 8002f64:	20000214 	.word	0x20000214

08002f68 <__errno>:
 8002f68:	4b01      	ldr	r3, [pc, #4]	@ (8002f70 <__errno+0x8>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000018 	.word	0x20000018

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	4d0d      	ldr	r5, [pc, #52]	@ (8002fac <__libc_init_array+0x38>)
 8002f78:	4c0d      	ldr	r4, [pc, #52]	@ (8002fb0 <__libc_init_array+0x3c>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	2600      	movs	r6, #0
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	4d0b      	ldr	r5, [pc, #44]	@ (8002fb4 <__libc_init_array+0x40>)
 8002f86:	4c0c      	ldr	r4, [pc, #48]	@ (8002fb8 <__libc_init_array+0x44>)
 8002f88:	f000 fb1c 	bl	80035c4 <_init>
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	2600      	movs	r6, #0
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	080035fc 	.word	0x080035fc
 8002fb0:	080035fc 	.word	0x080035fc
 8002fb4:	080035fc 	.word	0x080035fc
 8002fb8:	08003600 	.word	0x08003600

08002fbc <__retarget_lock_init_recursive>:
 8002fbc:	4770      	bx	lr

08002fbe <__retarget_lock_acquire_recursive>:
 8002fbe:	4770      	bx	lr

08002fc0 <__retarget_lock_release_recursive>:
 8002fc0:	4770      	bx	lr
	...

08002fc4 <_free_r>:
 8002fc4:	b538      	push	{r3, r4, r5, lr}
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	2900      	cmp	r1, #0
 8002fca:	d041      	beq.n	8003050 <_free_r+0x8c>
 8002fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd0:	1f0c      	subs	r4, r1, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bfb8      	it	lt
 8002fd6:	18e4      	addlt	r4, r4, r3
 8002fd8:	f000 f8e0 	bl	800319c <__malloc_lock>
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003054 <_free_r+0x90>)
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	b933      	cbnz	r3, 8002ff0 <_free_r+0x2c>
 8002fe2:	6063      	str	r3, [r4, #4]
 8002fe4:	6014      	str	r4, [r2, #0]
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fec:	f000 b8dc 	b.w	80031a8 <__malloc_unlock>
 8002ff0:	42a3      	cmp	r3, r4
 8002ff2:	d908      	bls.n	8003006 <_free_r+0x42>
 8002ff4:	6820      	ldr	r0, [r4, #0]
 8002ff6:	1821      	adds	r1, r4, r0
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	bf01      	itttt	eq
 8002ffc:	6819      	ldreq	r1, [r3, #0]
 8002ffe:	685b      	ldreq	r3, [r3, #4]
 8003000:	1809      	addeq	r1, r1, r0
 8003002:	6021      	streq	r1, [r4, #0]
 8003004:	e7ed      	b.n	8002fe2 <_free_r+0x1e>
 8003006:	461a      	mov	r2, r3
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	b10b      	cbz	r3, 8003010 <_free_r+0x4c>
 800300c:	42a3      	cmp	r3, r4
 800300e:	d9fa      	bls.n	8003006 <_free_r+0x42>
 8003010:	6811      	ldr	r1, [r2, #0]
 8003012:	1850      	adds	r0, r2, r1
 8003014:	42a0      	cmp	r0, r4
 8003016:	d10b      	bne.n	8003030 <_free_r+0x6c>
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	4401      	add	r1, r0
 800301c:	1850      	adds	r0, r2, r1
 800301e:	4283      	cmp	r3, r0
 8003020:	6011      	str	r1, [r2, #0]
 8003022:	d1e0      	bne.n	8002fe6 <_free_r+0x22>
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	6053      	str	r3, [r2, #4]
 800302a:	4408      	add	r0, r1
 800302c:	6010      	str	r0, [r2, #0]
 800302e:	e7da      	b.n	8002fe6 <_free_r+0x22>
 8003030:	d902      	bls.n	8003038 <_free_r+0x74>
 8003032:	230c      	movs	r3, #12
 8003034:	602b      	str	r3, [r5, #0]
 8003036:	e7d6      	b.n	8002fe6 <_free_r+0x22>
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	1821      	adds	r1, r4, r0
 800303c:	428b      	cmp	r3, r1
 800303e:	bf04      	itt	eq
 8003040:	6819      	ldreq	r1, [r3, #0]
 8003042:	685b      	ldreq	r3, [r3, #4]
 8003044:	6063      	str	r3, [r4, #4]
 8003046:	bf04      	itt	eq
 8003048:	1809      	addeq	r1, r1, r0
 800304a:	6021      	streq	r1, [r4, #0]
 800304c:	6054      	str	r4, [r2, #4]
 800304e:	e7ca      	b.n	8002fe6 <_free_r+0x22>
 8003050:	bd38      	pop	{r3, r4, r5, pc}
 8003052:	bf00      	nop
 8003054:	20000220 	.word	0x20000220

08003058 <sbrk_aligned>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	4e0f      	ldr	r6, [pc, #60]	@ (8003098 <sbrk_aligned+0x40>)
 800305c:	460c      	mov	r4, r1
 800305e:	6831      	ldr	r1, [r6, #0]
 8003060:	4605      	mov	r5, r0
 8003062:	b911      	cbnz	r1, 800306a <sbrk_aligned+0x12>
 8003064:	f000 fa1a 	bl	800349c <_sbrk_r>
 8003068:	6030      	str	r0, [r6, #0]
 800306a:	4621      	mov	r1, r4
 800306c:	4628      	mov	r0, r5
 800306e:	f000 fa15 	bl	800349c <_sbrk_r>
 8003072:	1c43      	adds	r3, r0, #1
 8003074:	d103      	bne.n	800307e <sbrk_aligned+0x26>
 8003076:	f04f 34ff 	mov.w	r4, #4294967295
 800307a:	4620      	mov	r0, r4
 800307c:	bd70      	pop	{r4, r5, r6, pc}
 800307e:	1cc4      	adds	r4, r0, #3
 8003080:	f024 0403 	bic.w	r4, r4, #3
 8003084:	42a0      	cmp	r0, r4
 8003086:	d0f8      	beq.n	800307a <sbrk_aligned+0x22>
 8003088:	1a21      	subs	r1, r4, r0
 800308a:	4628      	mov	r0, r5
 800308c:	f000 fa06 	bl	800349c <_sbrk_r>
 8003090:	3001      	adds	r0, #1
 8003092:	d1f2      	bne.n	800307a <sbrk_aligned+0x22>
 8003094:	e7ef      	b.n	8003076 <sbrk_aligned+0x1e>
 8003096:	bf00      	nop
 8003098:	2000021c 	.word	0x2000021c

0800309c <_malloc_r>:
 800309c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030a0:	1ccd      	adds	r5, r1, #3
 80030a2:	f025 0503 	bic.w	r5, r5, #3
 80030a6:	3508      	adds	r5, #8
 80030a8:	2d0c      	cmp	r5, #12
 80030aa:	bf38      	it	cc
 80030ac:	250c      	movcc	r5, #12
 80030ae:	2d00      	cmp	r5, #0
 80030b0:	4606      	mov	r6, r0
 80030b2:	db01      	blt.n	80030b8 <_malloc_r+0x1c>
 80030b4:	42a9      	cmp	r1, r5
 80030b6:	d904      	bls.n	80030c2 <_malloc_r+0x26>
 80030b8:	230c      	movs	r3, #12
 80030ba:	6033      	str	r3, [r6, #0]
 80030bc:	2000      	movs	r0, #0
 80030be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003198 <_malloc_r+0xfc>
 80030c6:	f000 f869 	bl	800319c <__malloc_lock>
 80030ca:	f8d8 3000 	ldr.w	r3, [r8]
 80030ce:	461c      	mov	r4, r3
 80030d0:	bb44      	cbnz	r4, 8003124 <_malloc_r+0x88>
 80030d2:	4629      	mov	r1, r5
 80030d4:	4630      	mov	r0, r6
 80030d6:	f7ff ffbf 	bl	8003058 <sbrk_aligned>
 80030da:	1c43      	adds	r3, r0, #1
 80030dc:	4604      	mov	r4, r0
 80030de:	d158      	bne.n	8003192 <_malloc_r+0xf6>
 80030e0:	f8d8 4000 	ldr.w	r4, [r8]
 80030e4:	4627      	mov	r7, r4
 80030e6:	2f00      	cmp	r7, #0
 80030e8:	d143      	bne.n	8003172 <_malloc_r+0xd6>
 80030ea:	2c00      	cmp	r4, #0
 80030ec:	d04b      	beq.n	8003186 <_malloc_r+0xea>
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	4639      	mov	r1, r7
 80030f2:	4630      	mov	r0, r6
 80030f4:	eb04 0903 	add.w	r9, r4, r3
 80030f8:	f000 f9d0 	bl	800349c <_sbrk_r>
 80030fc:	4581      	cmp	r9, r0
 80030fe:	d142      	bne.n	8003186 <_malloc_r+0xea>
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	1a6d      	subs	r5, r5, r1
 8003104:	4629      	mov	r1, r5
 8003106:	4630      	mov	r0, r6
 8003108:	f7ff ffa6 	bl	8003058 <sbrk_aligned>
 800310c:	3001      	adds	r0, #1
 800310e:	d03a      	beq.n	8003186 <_malloc_r+0xea>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	442b      	add	r3, r5
 8003114:	6023      	str	r3, [r4, #0]
 8003116:	f8d8 3000 	ldr.w	r3, [r8]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	bb62      	cbnz	r2, 8003178 <_malloc_r+0xdc>
 800311e:	f8c8 7000 	str.w	r7, [r8]
 8003122:	e00f      	b.n	8003144 <_malloc_r+0xa8>
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	1b52      	subs	r2, r2, r5
 8003128:	d420      	bmi.n	800316c <_malloc_r+0xd0>
 800312a:	2a0b      	cmp	r2, #11
 800312c:	d917      	bls.n	800315e <_malloc_r+0xc2>
 800312e:	1961      	adds	r1, r4, r5
 8003130:	42a3      	cmp	r3, r4
 8003132:	6025      	str	r5, [r4, #0]
 8003134:	bf18      	it	ne
 8003136:	6059      	strne	r1, [r3, #4]
 8003138:	6863      	ldr	r3, [r4, #4]
 800313a:	bf08      	it	eq
 800313c:	f8c8 1000 	streq.w	r1, [r8]
 8003140:	5162      	str	r2, [r4, r5]
 8003142:	604b      	str	r3, [r1, #4]
 8003144:	4630      	mov	r0, r6
 8003146:	f000 f82f 	bl	80031a8 <__malloc_unlock>
 800314a:	f104 000b 	add.w	r0, r4, #11
 800314e:	1d23      	adds	r3, r4, #4
 8003150:	f020 0007 	bic.w	r0, r0, #7
 8003154:	1ac2      	subs	r2, r0, r3
 8003156:	bf1c      	itt	ne
 8003158:	1a1b      	subne	r3, r3, r0
 800315a:	50a3      	strne	r3, [r4, r2]
 800315c:	e7af      	b.n	80030be <_malloc_r+0x22>
 800315e:	6862      	ldr	r2, [r4, #4]
 8003160:	42a3      	cmp	r3, r4
 8003162:	bf0c      	ite	eq
 8003164:	f8c8 2000 	streq.w	r2, [r8]
 8003168:	605a      	strne	r2, [r3, #4]
 800316a:	e7eb      	b.n	8003144 <_malloc_r+0xa8>
 800316c:	4623      	mov	r3, r4
 800316e:	6864      	ldr	r4, [r4, #4]
 8003170:	e7ae      	b.n	80030d0 <_malloc_r+0x34>
 8003172:	463c      	mov	r4, r7
 8003174:	687f      	ldr	r7, [r7, #4]
 8003176:	e7b6      	b.n	80030e6 <_malloc_r+0x4a>
 8003178:	461a      	mov	r2, r3
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	42a3      	cmp	r3, r4
 800317e:	d1fb      	bne.n	8003178 <_malloc_r+0xdc>
 8003180:	2300      	movs	r3, #0
 8003182:	6053      	str	r3, [r2, #4]
 8003184:	e7de      	b.n	8003144 <_malloc_r+0xa8>
 8003186:	230c      	movs	r3, #12
 8003188:	6033      	str	r3, [r6, #0]
 800318a:	4630      	mov	r0, r6
 800318c:	f000 f80c 	bl	80031a8 <__malloc_unlock>
 8003190:	e794      	b.n	80030bc <_malloc_r+0x20>
 8003192:	6005      	str	r5, [r0, #0]
 8003194:	e7d6      	b.n	8003144 <_malloc_r+0xa8>
 8003196:	bf00      	nop
 8003198:	20000220 	.word	0x20000220

0800319c <__malloc_lock>:
 800319c:	4801      	ldr	r0, [pc, #4]	@ (80031a4 <__malloc_lock+0x8>)
 800319e:	f7ff bf0e 	b.w	8002fbe <__retarget_lock_acquire_recursive>
 80031a2:	bf00      	nop
 80031a4:	20000218 	.word	0x20000218

080031a8 <__malloc_unlock>:
 80031a8:	4801      	ldr	r0, [pc, #4]	@ (80031b0 <__malloc_unlock+0x8>)
 80031aa:	f7ff bf09 	b.w	8002fc0 <__retarget_lock_release_recursive>
 80031ae:	bf00      	nop
 80031b0:	20000218 	.word	0x20000218

080031b4 <__sflush_r>:
 80031b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031bc:	0716      	lsls	r6, r2, #28
 80031be:	4605      	mov	r5, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	d454      	bmi.n	800326e <__sflush_r+0xba>
 80031c4:	684b      	ldr	r3, [r1, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dc02      	bgt.n	80031d0 <__sflush_r+0x1c>
 80031ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	dd48      	ble.n	8003262 <__sflush_r+0xae>
 80031d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031d2:	2e00      	cmp	r6, #0
 80031d4:	d045      	beq.n	8003262 <__sflush_r+0xae>
 80031d6:	2300      	movs	r3, #0
 80031d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031dc:	682f      	ldr	r7, [r5, #0]
 80031de:	6a21      	ldr	r1, [r4, #32]
 80031e0:	602b      	str	r3, [r5, #0]
 80031e2:	d030      	beq.n	8003246 <__sflush_r+0x92>
 80031e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	0759      	lsls	r1, r3, #29
 80031ea:	d505      	bpl.n	80031f8 <__sflush_r+0x44>
 80031ec:	6863      	ldr	r3, [r4, #4]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031f2:	b10b      	cbz	r3, 80031f8 <__sflush_r+0x44>
 80031f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031f6:	1ad2      	subs	r2, r2, r3
 80031f8:	2300      	movs	r3, #0
 80031fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031fc:	6a21      	ldr	r1, [r4, #32]
 80031fe:	4628      	mov	r0, r5
 8003200:	47b0      	blx	r6
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	d106      	bne.n	8003216 <__sflush_r+0x62>
 8003208:	6829      	ldr	r1, [r5, #0]
 800320a:	291d      	cmp	r1, #29
 800320c:	d82b      	bhi.n	8003266 <__sflush_r+0xb2>
 800320e:	4a2a      	ldr	r2, [pc, #168]	@ (80032b8 <__sflush_r+0x104>)
 8003210:	410a      	asrs	r2, r1
 8003212:	07d6      	lsls	r6, r2, #31
 8003214:	d427      	bmi.n	8003266 <__sflush_r+0xb2>
 8003216:	2200      	movs	r2, #0
 8003218:	6062      	str	r2, [r4, #4]
 800321a:	04d9      	lsls	r1, r3, #19
 800321c:	6922      	ldr	r2, [r4, #16]
 800321e:	6022      	str	r2, [r4, #0]
 8003220:	d504      	bpl.n	800322c <__sflush_r+0x78>
 8003222:	1c42      	adds	r2, r0, #1
 8003224:	d101      	bne.n	800322a <__sflush_r+0x76>
 8003226:	682b      	ldr	r3, [r5, #0]
 8003228:	b903      	cbnz	r3, 800322c <__sflush_r+0x78>
 800322a:	6560      	str	r0, [r4, #84]	@ 0x54
 800322c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800322e:	602f      	str	r7, [r5, #0]
 8003230:	b1b9      	cbz	r1, 8003262 <__sflush_r+0xae>
 8003232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003236:	4299      	cmp	r1, r3
 8003238:	d002      	beq.n	8003240 <__sflush_r+0x8c>
 800323a:	4628      	mov	r0, r5
 800323c:	f7ff fec2 	bl	8002fc4 <_free_r>
 8003240:	2300      	movs	r3, #0
 8003242:	6363      	str	r3, [r4, #52]	@ 0x34
 8003244:	e00d      	b.n	8003262 <__sflush_r+0xae>
 8003246:	2301      	movs	r3, #1
 8003248:	4628      	mov	r0, r5
 800324a:	47b0      	blx	r6
 800324c:	4602      	mov	r2, r0
 800324e:	1c50      	adds	r0, r2, #1
 8003250:	d1c9      	bne.n	80031e6 <__sflush_r+0x32>
 8003252:	682b      	ldr	r3, [r5, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0c6      	beq.n	80031e6 <__sflush_r+0x32>
 8003258:	2b1d      	cmp	r3, #29
 800325a:	d001      	beq.n	8003260 <__sflush_r+0xac>
 800325c:	2b16      	cmp	r3, #22
 800325e:	d11e      	bne.n	800329e <__sflush_r+0xea>
 8003260:	602f      	str	r7, [r5, #0]
 8003262:	2000      	movs	r0, #0
 8003264:	e022      	b.n	80032ac <__sflush_r+0xf8>
 8003266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326a:	b21b      	sxth	r3, r3
 800326c:	e01b      	b.n	80032a6 <__sflush_r+0xf2>
 800326e:	690f      	ldr	r7, [r1, #16]
 8003270:	2f00      	cmp	r7, #0
 8003272:	d0f6      	beq.n	8003262 <__sflush_r+0xae>
 8003274:	0793      	lsls	r3, r2, #30
 8003276:	680e      	ldr	r6, [r1, #0]
 8003278:	bf08      	it	eq
 800327a:	694b      	ldreq	r3, [r1, #20]
 800327c:	600f      	str	r7, [r1, #0]
 800327e:	bf18      	it	ne
 8003280:	2300      	movne	r3, #0
 8003282:	eba6 0807 	sub.w	r8, r6, r7
 8003286:	608b      	str	r3, [r1, #8]
 8003288:	f1b8 0f00 	cmp.w	r8, #0
 800328c:	dde9      	ble.n	8003262 <__sflush_r+0xae>
 800328e:	6a21      	ldr	r1, [r4, #32]
 8003290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003292:	4643      	mov	r3, r8
 8003294:	463a      	mov	r2, r7
 8003296:	4628      	mov	r0, r5
 8003298:	47b0      	blx	r6
 800329a:	2800      	cmp	r0, #0
 800329c:	dc08      	bgt.n	80032b0 <__sflush_r+0xfc>
 800329e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b0:	4407      	add	r7, r0
 80032b2:	eba8 0800 	sub.w	r8, r8, r0
 80032b6:	e7e7      	b.n	8003288 <__sflush_r+0xd4>
 80032b8:	dfbffffe 	.word	0xdfbffffe

080032bc <_fflush_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	690b      	ldr	r3, [r1, #16]
 80032c0:	4605      	mov	r5, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	b913      	cbnz	r3, 80032cc <_fflush_r+0x10>
 80032c6:	2500      	movs	r5, #0
 80032c8:	4628      	mov	r0, r5
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	b118      	cbz	r0, 80032d6 <_fflush_r+0x1a>
 80032ce:	6a03      	ldr	r3, [r0, #32]
 80032d0:	b90b      	cbnz	r3, 80032d6 <_fflush_r+0x1a>
 80032d2:	f7ff fd79 	bl	8002dc8 <__sinit>
 80032d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f3      	beq.n	80032c6 <_fflush_r+0xa>
 80032de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032e0:	07d0      	lsls	r0, r2, #31
 80032e2:	d404      	bmi.n	80032ee <_fflush_r+0x32>
 80032e4:	0599      	lsls	r1, r3, #22
 80032e6:	d402      	bmi.n	80032ee <_fflush_r+0x32>
 80032e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ea:	f7ff fe68 	bl	8002fbe <__retarget_lock_acquire_recursive>
 80032ee:	4628      	mov	r0, r5
 80032f0:	4621      	mov	r1, r4
 80032f2:	f7ff ff5f 	bl	80031b4 <__sflush_r>
 80032f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032f8:	07da      	lsls	r2, r3, #31
 80032fa:	4605      	mov	r5, r0
 80032fc:	d4e4      	bmi.n	80032c8 <_fflush_r+0xc>
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	059b      	lsls	r3, r3, #22
 8003302:	d4e1      	bmi.n	80032c8 <_fflush_r+0xc>
 8003304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003306:	f7ff fe5b 	bl	8002fc0 <__retarget_lock_release_recursive>
 800330a:	e7dd      	b.n	80032c8 <_fflush_r+0xc>

0800330c <_putc_r>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	460d      	mov	r5, r1
 8003310:	4614      	mov	r4, r2
 8003312:	4606      	mov	r6, r0
 8003314:	b118      	cbz	r0, 800331e <_putc_r+0x12>
 8003316:	6a03      	ldr	r3, [r0, #32]
 8003318:	b90b      	cbnz	r3, 800331e <_putc_r+0x12>
 800331a:	f7ff fd55 	bl	8002dc8 <__sinit>
 800331e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003320:	07d8      	lsls	r0, r3, #31
 8003322:	d405      	bmi.n	8003330 <_putc_r+0x24>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	0599      	lsls	r1, r3, #22
 8003328:	d402      	bmi.n	8003330 <_putc_r+0x24>
 800332a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800332c:	f7ff fe47 	bl	8002fbe <__retarget_lock_acquire_recursive>
 8003330:	68a3      	ldr	r3, [r4, #8]
 8003332:	3b01      	subs	r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	60a3      	str	r3, [r4, #8]
 8003338:	da05      	bge.n	8003346 <_putc_r+0x3a>
 800333a:	69a2      	ldr	r2, [r4, #24]
 800333c:	4293      	cmp	r3, r2
 800333e:	db12      	blt.n	8003366 <_putc_r+0x5a>
 8003340:	b2eb      	uxtb	r3, r5
 8003342:	2b0a      	cmp	r3, #10
 8003344:	d00f      	beq.n	8003366 <_putc_r+0x5a>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	6022      	str	r2, [r4, #0]
 800334c:	701d      	strb	r5, [r3, #0]
 800334e:	b2ed      	uxtb	r5, r5
 8003350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003352:	07da      	lsls	r2, r3, #31
 8003354:	d405      	bmi.n	8003362 <_putc_r+0x56>
 8003356:	89a3      	ldrh	r3, [r4, #12]
 8003358:	059b      	lsls	r3, r3, #22
 800335a:	d402      	bmi.n	8003362 <_putc_r+0x56>
 800335c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335e:	f7ff fe2f 	bl	8002fc0 <__retarget_lock_release_recursive>
 8003362:	4628      	mov	r0, r5
 8003364:	bd70      	pop	{r4, r5, r6, pc}
 8003366:	4629      	mov	r1, r5
 8003368:	4622      	mov	r2, r4
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f802 	bl	8003374 <__swbuf_r>
 8003370:	4605      	mov	r5, r0
 8003372:	e7ed      	b.n	8003350 <_putc_r+0x44>

08003374 <__swbuf_r>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	460e      	mov	r6, r1
 8003378:	4614      	mov	r4, r2
 800337a:	4605      	mov	r5, r0
 800337c:	b118      	cbz	r0, 8003386 <__swbuf_r+0x12>
 800337e:	6a03      	ldr	r3, [r0, #32]
 8003380:	b90b      	cbnz	r3, 8003386 <__swbuf_r+0x12>
 8003382:	f7ff fd21 	bl	8002dc8 <__sinit>
 8003386:	69a3      	ldr	r3, [r4, #24]
 8003388:	60a3      	str	r3, [r4, #8]
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	071a      	lsls	r2, r3, #28
 800338e:	d501      	bpl.n	8003394 <__swbuf_r+0x20>
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	b943      	cbnz	r3, 80033a6 <__swbuf_r+0x32>
 8003394:	4621      	mov	r1, r4
 8003396:	4628      	mov	r0, r5
 8003398:	f000 f82a 	bl	80033f0 <__swsetup_r>
 800339c:	b118      	cbz	r0, 80033a6 <__swbuf_r+0x32>
 800339e:	f04f 37ff 	mov.w	r7, #4294967295
 80033a2:	4638      	mov	r0, r7
 80033a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	6922      	ldr	r2, [r4, #16]
 80033aa:	1a98      	subs	r0, r3, r2
 80033ac:	6963      	ldr	r3, [r4, #20]
 80033ae:	b2f6      	uxtb	r6, r6
 80033b0:	4283      	cmp	r3, r0
 80033b2:	4637      	mov	r7, r6
 80033b4:	dc05      	bgt.n	80033c2 <__swbuf_r+0x4e>
 80033b6:	4621      	mov	r1, r4
 80033b8:	4628      	mov	r0, r5
 80033ba:	f7ff ff7f 	bl	80032bc <_fflush_r>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d1ed      	bne.n	800339e <__swbuf_r+0x2a>
 80033c2:	68a3      	ldr	r3, [r4, #8]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	60a3      	str	r3, [r4, #8]
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	6022      	str	r2, [r4, #0]
 80033ce:	701e      	strb	r6, [r3, #0]
 80033d0:	6962      	ldr	r2, [r4, #20]
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d004      	beq.n	80033e2 <__swbuf_r+0x6e>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	07db      	lsls	r3, r3, #31
 80033dc:	d5e1      	bpl.n	80033a2 <__swbuf_r+0x2e>
 80033de:	2e0a      	cmp	r6, #10
 80033e0:	d1df      	bne.n	80033a2 <__swbuf_r+0x2e>
 80033e2:	4621      	mov	r1, r4
 80033e4:	4628      	mov	r0, r5
 80033e6:	f7ff ff69 	bl	80032bc <_fflush_r>
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d0d9      	beq.n	80033a2 <__swbuf_r+0x2e>
 80033ee:	e7d6      	b.n	800339e <__swbuf_r+0x2a>

080033f0 <__swsetup_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4b29      	ldr	r3, [pc, #164]	@ (8003498 <__swsetup_r+0xa8>)
 80033f4:	4605      	mov	r5, r0
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	460c      	mov	r4, r1
 80033fa:	b118      	cbz	r0, 8003404 <__swsetup_r+0x14>
 80033fc:	6a03      	ldr	r3, [r0, #32]
 80033fe:	b90b      	cbnz	r3, 8003404 <__swsetup_r+0x14>
 8003400:	f7ff fce2 	bl	8002dc8 <__sinit>
 8003404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003408:	0719      	lsls	r1, r3, #28
 800340a:	d422      	bmi.n	8003452 <__swsetup_r+0x62>
 800340c:	06da      	lsls	r2, r3, #27
 800340e:	d407      	bmi.n	8003420 <__swsetup_r+0x30>
 8003410:	2209      	movs	r2, #9
 8003412:	602a      	str	r2, [r5, #0]
 8003414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	f04f 30ff 	mov.w	r0, #4294967295
 800341e:	e033      	b.n	8003488 <__swsetup_r+0x98>
 8003420:	0758      	lsls	r0, r3, #29
 8003422:	d512      	bpl.n	800344a <__swsetup_r+0x5a>
 8003424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003426:	b141      	cbz	r1, 800343a <__swsetup_r+0x4a>
 8003428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800342c:	4299      	cmp	r1, r3
 800342e:	d002      	beq.n	8003436 <__swsetup_r+0x46>
 8003430:	4628      	mov	r0, r5
 8003432:	f7ff fdc7 	bl	8002fc4 <_free_r>
 8003436:	2300      	movs	r3, #0
 8003438:	6363      	str	r3, [r4, #52]	@ 0x34
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	2300      	movs	r3, #0
 8003444:	6063      	str	r3, [r4, #4]
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	b94b      	cbnz	r3, 800346a <__swsetup_r+0x7a>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800345c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003460:	d003      	beq.n	800346a <__swsetup_r+0x7a>
 8003462:	4621      	mov	r1, r4
 8003464:	4628      	mov	r0, r5
 8003466:	f000 f84f 	bl	8003508 <__smakebuf_r>
 800346a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800346e:	f013 0201 	ands.w	r2, r3, #1
 8003472:	d00a      	beq.n	800348a <__swsetup_r+0x9a>
 8003474:	2200      	movs	r2, #0
 8003476:	60a2      	str	r2, [r4, #8]
 8003478:	6962      	ldr	r2, [r4, #20]
 800347a:	4252      	negs	r2, r2
 800347c:	61a2      	str	r2, [r4, #24]
 800347e:	6922      	ldr	r2, [r4, #16]
 8003480:	b942      	cbnz	r2, 8003494 <__swsetup_r+0xa4>
 8003482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003486:	d1c5      	bne.n	8003414 <__swsetup_r+0x24>
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	0799      	lsls	r1, r3, #30
 800348c:	bf58      	it	pl
 800348e:	6962      	ldrpl	r2, [r4, #20]
 8003490:	60a2      	str	r2, [r4, #8]
 8003492:	e7f4      	b.n	800347e <__swsetup_r+0x8e>
 8003494:	2000      	movs	r0, #0
 8003496:	e7f7      	b.n	8003488 <__swsetup_r+0x98>
 8003498:	20000018 	.word	0x20000018

0800349c <_sbrk_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4d06      	ldr	r5, [pc, #24]	@ (80034b8 <_sbrk_r+0x1c>)
 80034a0:	2300      	movs	r3, #0
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd fab4 	bl	8000a14 <_sbrk>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_sbrk_r+0x1a>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_sbrk_r+0x1a>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	20000214 	.word	0x20000214

080034bc <__swhatbuf_r>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	460c      	mov	r4, r1
 80034c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c4:	2900      	cmp	r1, #0
 80034c6:	b096      	sub	sp, #88	@ 0x58
 80034c8:	4615      	mov	r5, r2
 80034ca:	461e      	mov	r6, r3
 80034cc:	da0d      	bge.n	80034ea <__swhatbuf_r+0x2e>
 80034ce:	89a3      	ldrh	r3, [r4, #12]
 80034d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	bf14      	ite	ne
 80034da:	2340      	movne	r3, #64	@ 0x40
 80034dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80034e0:	2000      	movs	r0, #0
 80034e2:	6031      	str	r1, [r6, #0]
 80034e4:	602b      	str	r3, [r5, #0]
 80034e6:	b016      	add	sp, #88	@ 0x58
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	466a      	mov	r2, sp
 80034ec:	f000 f848 	bl	8003580 <_fstat_r>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	dbec      	blt.n	80034ce <__swhatbuf_r+0x12>
 80034f4:	9901      	ldr	r1, [sp, #4]
 80034f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80034fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80034fe:	4259      	negs	r1, r3
 8003500:	4159      	adcs	r1, r3
 8003502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003506:	e7eb      	b.n	80034e0 <__swhatbuf_r+0x24>

08003508 <__smakebuf_r>:
 8003508:	898b      	ldrh	r3, [r1, #12]
 800350a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800350c:	079d      	lsls	r5, r3, #30
 800350e:	4606      	mov	r6, r0
 8003510:	460c      	mov	r4, r1
 8003512:	d507      	bpl.n	8003524 <__smakebuf_r+0x1c>
 8003514:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003518:	6023      	str	r3, [r4, #0]
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	2301      	movs	r3, #1
 800351e:	6163      	str	r3, [r4, #20]
 8003520:	b003      	add	sp, #12
 8003522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003524:	ab01      	add	r3, sp, #4
 8003526:	466a      	mov	r2, sp
 8003528:	f7ff ffc8 	bl	80034bc <__swhatbuf_r>
 800352c:	9f00      	ldr	r7, [sp, #0]
 800352e:	4605      	mov	r5, r0
 8003530:	4639      	mov	r1, r7
 8003532:	4630      	mov	r0, r6
 8003534:	f7ff fdb2 	bl	800309c <_malloc_r>
 8003538:	b948      	cbnz	r0, 800354e <__smakebuf_r+0x46>
 800353a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800353e:	059a      	lsls	r2, r3, #22
 8003540:	d4ee      	bmi.n	8003520 <__smakebuf_r+0x18>
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	f043 0302 	orr.w	r3, r3, #2
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	e7e2      	b.n	8003514 <__smakebuf_r+0xc>
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	6020      	str	r0, [r4, #0]
 8003552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	9b01      	ldr	r3, [sp, #4]
 800355a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800355e:	b15b      	cbz	r3, 8003578 <__smakebuf_r+0x70>
 8003560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f81d 	bl	80035a4 <_isatty_r>
 800356a:	b128      	cbz	r0, 8003578 <__smakebuf_r+0x70>
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	81a3      	strh	r3, [r4, #12]
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	431d      	orrs	r5, r3
 800357c:	81a5      	strh	r5, [r4, #12]
 800357e:	e7cf      	b.n	8003520 <__smakebuf_r+0x18>

08003580 <_fstat_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4d07      	ldr	r5, [pc, #28]	@ (80035a0 <_fstat_r+0x20>)
 8003584:	2300      	movs	r3, #0
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	602b      	str	r3, [r5, #0]
 800358e:	f7fd fa18 	bl	80009c2 <_fstat>
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	d102      	bne.n	800359c <_fstat_r+0x1c>
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	b103      	cbz	r3, 800359c <_fstat_r+0x1c>
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	bd38      	pop	{r3, r4, r5, pc}
 800359e:	bf00      	nop
 80035a0:	20000214 	.word	0x20000214

080035a4 <_isatty_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4d06      	ldr	r5, [pc, #24]	@ (80035c0 <_isatty_r+0x1c>)
 80035a8:	2300      	movs	r3, #0
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	f7fd fa17 	bl	80009e2 <_isatty>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_isatty_r+0x1a>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_isatty_r+0x1a>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	20000214 	.word	0x20000214

080035c4 <_init>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr

080035d0 <_fini>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr
