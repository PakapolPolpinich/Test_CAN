
Extend_NodeB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e0  080065e0  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  080065e0  080065e0  000075e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065e8  080065e8  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065ec  080065ec  000075ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080065f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000018  08006608  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08006608  00008188  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116b3  00000000  00000000  0000804e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fb  00000000  00000000  00019701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  0001c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffdc  00000000  00000000  0001ce8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ca9  00000000  00000000  0003ce6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c617d  00000000  00000000  0004db13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113c90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000324c  00000000  00000000  00113cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00116f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000018 	.word	0x20000018
 8000274:	00000000 	.word	0x00000000
 8000278:	08006578 	.word	0x08006578

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000001c 	.word	0x2000001c
 8000294:	08006578 	.word	0x08006578

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SystemClock_Config>:
 */
#include "RCC_clock.h"


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	@ 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2250      	movs	r2, #80	@ 0x50
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 ffae 	bl	8006520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <SystemClock_Config+0xdc>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005de:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xdc>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xdc>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xdc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d1f9      	bne.n	80005f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000626:	230c      	movs	r3, #12
 8000628:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062a:	2300      	movs	r3, #0
 800062c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fecc 	bl	80023d4 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    //Error_Handler();
	while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <SystemClock_Config+0x92>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 faed 	bl	8002c44 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    //Error_Handler();
	while(1);
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <SystemClock_Config+0xc0>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <SystemClock_Config+0xe0>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	@ 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	44020800 	.word	0x44020800
 8000690:	40022000 	.word	0x40022000

08000694 <MX_GPIO_Init>:
 *      Author: Admin
 */
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b47      	ldr	r3, [pc, #284]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a45      	ldr	r2, [pc, #276]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b43      	ldr	r3, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c8:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a3e      	ldr	r2, [pc, #248]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0x134>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000714:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000728:	f001 fdf0 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	4827      	ldr	r0, [pc, #156]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000732:	f001 fdeb 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0x144>)
 800074c:	f001 fc8c 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000768:	f001 fc7e 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076c:	2308      	movs	r3, #8
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 8000784:	f001 fc70 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000788:	2320      	movs	r3, #32
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x140>)
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 800079c:	f001 fc64 	bl	8002068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2010      	movs	r0, #16
 80007a6:	f000 fccd 	bl	8001144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 fce4 	bl	8001178 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2018      	movs	r0, #24
 80007b6:	f000 fcc5 	bl	8001144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80007ba:	2018      	movs	r0, #24
 80007bc:	f000 fcdc 	bl	8001178 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	@ 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	44020c00 	.word	0x44020c00
 80007cc:	42020000 	.word	0x42020000
 80007d0:	42020400 	.word	0x42020400
 80007d4:	10210000 	.word	0x10210000
 80007d8:	42020800 	.word	0x42020800

080007dc <main>:
#endif

volatile uint8_t flag = 0;
//uint8_t extData[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb3a 	bl	8000e58 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f7ff fee4 	bl	80005b0 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff54 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007ec:	f000 f80a 	bl	8000804 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 fabc 	bl	8000d6c <MX_USART3_UART_Init>
 // Timer3_init();
  CAN_Payload.dataTx[0] = 0x0;
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <main+0x24>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <main+0x20>
 8000800:	2000009c 	.word	0x2000009c

08000804 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800080a:	4a29      	ldr	r2, [pc, #164]	@ (80008b0 <MX_FDCAN1_Init+0xac>)
 800080c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800080e:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800081a:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000822:	2200      	movs	r2, #0
 8000824:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000828:	2200      	movs	r2, #0
 800082a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000834:	2219      	movs	r2, #25
 8000836:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800083a:	2201      	movs	r2, #1
 800083c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800083e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000840:	220d      	movs	r2, #13
 8000842:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000846:	2202      	movs	r2, #2
 8000848:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800084c:	2201      	movs	r2, #1
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000852:	2201      	movs	r2, #1
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800085e:	2201      	movs	r2, #1
 8000860:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000864:	2200      	movs	r2, #0
 8000866:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000876:	f000 fde3 	bl	8001440 <HAL_FDCAN_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000880:	f000 f8c2 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 8000886:	f000 ff35 	bl	80016f4 <HAL_FDCAN_Start>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_FDCAN1_Init+0x90>
  	 /* Notification Error */
  	Error_Handler();
 8000890:	f000 f8ba 	bl	8000a08 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_FDCAN1_Init+0xa8>)
 800089a:	f001 f89f 	bl	80019dc <HAL_FDCAN_ActivateNotification>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_FDCAN1_Init+0xa4>
  {
	/* Notification Error */
	Error_Handler();
 80008a4:	f000 f8b0 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000034 	.word	0x20000034
 80008b0:	4000a400 	.word	0x4000a400

080008b4 <Test_Priority>:
	}
}



void Test_Priority(){
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
		CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
		//SetFilter(0x10,0x0);
	#endif

	#ifdef NODE_B
		CAN_Payload.msgID = address[Counter];
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <Test_Priority+0x28>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <Test_Priority+0x2c>)
 80008c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c6:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <Test_Priority+0x30>)
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
		CAN_Payload.TxHeader.IdType = FDCAN_EXTENDED_ID;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <Test_Priority+0x30>)
 80008cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d0:	605a      	str	r2, [r3, #4]
		//SetFilter(0x11,0x0);
	#endif



}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	20000098 	.word	0x20000098
 80008e0:	20000000 	.word	0x20000000
 80008e4:	2000009c 	.word	0x2000009c

080008e8 <TX_Send_CAN>:



void TX_Send_CAN(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

    /* ----- Prepare CAN data --------------------------------------- */
    CAN_Payload.TxHeader.Identifier = CAN_Payload.msgID; //CAN_Payload.msgID
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <TX_Send_CAN+0x60>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f0:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <TX_Send_CAN+0x60>)
 80008f2:	6013      	str	r3, [r2, #0]
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <TX_Send_CAN+0x60>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_1;        // 8-byte payloaD
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <TX_Send_CAN+0x60>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <TX_Send_CAN+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <TX_Send_CAN+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
    CAN_Payload.TxHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Use Classical CAN frame
 800090c:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <TX_Send_CAN+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <TX_Send_CAN+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
    CAN_Payload.TxHeader.MessageMarker = 0;
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <TX_Send_CAN+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]

    CAN_Payload.dataTx[0] ^= 1;
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <TX_Send_CAN+0x60>)
 8000920:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <TX_Send_CAN+0x60>)
 800092c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    //uint8_t extData[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
//    for (uint8_t i = 0; i < 8 ;i++){
//    	CAN_Payload.dataTx[i] = extData[i];
//    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <TX_Send_CAN+0x64>)
 8000932:	4905      	ldr	r1, [pc, #20]	@ (8000948 <TX_Send_CAN+0x60>)
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <TX_Send_CAN+0x68>)
 8000936:	f000 ff05 	bl	8001744 <HAL_FDCAN_AddMessageToTxFifoQ>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <TX_Send_CAN+0x5c>
    {
    	Error_Handler();
 8000940:	f000 f862 	bl	8000a08 <Error_Handler>
    }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000009c 	.word	0x2000009c
 800094c:	200000ec 	.word	0x200000ec
 8000950:	20000034 	.word	0x20000034

08000954 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_5) {
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	2b20      	cmp	r3, #32
 8000962:	d103      	bne.n	800096c <HAL_GPIO_EXTI_Falling_Callback+0x18>
//		 TIM3->CNT = 0;
//		 TIM3->CR1 |= TIM_CR1_CEN;
//		 TIM3->DIER |= TIM_DIER_UIE;

		Test_Priority();
 8000964:	f7ff ffa6 	bl	80008b4 <Test_Priority>
		TX_Send_CAN();
 8000968:	f7ff ffbe 	bl	80008e8 <TX_Send_CAN>

	}
	if(GPIO_Pin == B1_BLUE_USER_BUTTON_Pin){
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000972:	d10e      	bne.n	8000992 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		Counter++;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8000980:	701a      	strb	r2, [r3, #0]
		if (Counter >= sizeof(address)/sizeof(address[0])){
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b02      	cmp	r3, #2
 800098a:	d902      	bls.n	8000992 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
			Counter = 0;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000098 	.word	0x20000098

080009a0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d014      	beq.n	80009de <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80009b6:	4a11      	ldr	r2, [pc, #68]	@ (80009fc <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80009b8:	2140      	movs	r1, #64	@ 0x40
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 ff06 	bl	80017cc <HAL_FDCAN_GetRxMessage>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 80009c6:	f000 f81f 	bl	8000a08 <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80009ca:	2200      	movs	r2, #0
 80009cc:	2101      	movs	r1, #1
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f001 f804 	bl	80019dc <HAL_FDCAN_ActivateNotification>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 80009da:	f000 f815 	bl	8000a08 <Error_Handler>
		}
	}
	if(CAN_Payload.dataRx[0] == 0x1){
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80009e0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d103      	bne.n	80009f0 <HAL_FDCAN_RxFifo0Callback+0x50>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009e8:	2120      	movs	r1, #32
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80009ec:	f001 fca6 	bl	800233c <HAL_GPIO_TogglePin>
	}
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000ee 	.word	0x200000ee
 80009fc:	200000c0 	.word	0x200000c0
 8000a00:	2000009c 	.word	0x2000009c
 8000a04:	42020000 	.word	0x42020000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ac      	sub	sp, #176	@ 0xb0
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2288      	movs	r2, #136	@ 0x88
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f005 fd6b 	bl	8006520 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <HAL_FDCAN_MspInit+0xd4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d14d      	bne.n	8000af0 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	f04f 0304 	mov.w	r3, #4
 8000a5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fc2c 	bl	80032c8 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000a76:	f7ff ffc7 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a80:	4a1e      	ldr	r2, [pc, #120]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a86:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_FDCAN_MspInit+0xd8>)
 8000aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab6:	23c0      	movs	r3, #192	@ 0xc0
 8000ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ace:	2309      	movs	r3, #9
 8000ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <HAL_FDCAN_MspInit+0xdc>)
 8000adc:	f001 fac4 	bl	8002068 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	2027      	movs	r0, #39	@ 0x27
 8000ae6:	f000 fb2d 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aea:	2027      	movs	r0, #39	@ 0x27
 8000aec:	f000 fb44 	bl	8001178 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	37b0      	adds	r7, #176	@ 0xb0
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	4000a400 	.word	0x4000a400
 8000afc:	44020c00 	.word	0x44020c00
 8000b00:	42020800 	.word	0x42020800

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ac      	sub	sp, #176	@ 0xb0
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2288      	movs	r2, #136	@ 0x88
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 fcfb 	bl	8006520 <memset>
  if(huart->Instance==USART3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd8 <HAL_UART_MspInit+0xd4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d14c      	bne.n	8000bce <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b34:	f04f 0204 	mov.w	r2, #4
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fbbd 	bl	80032c8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b54:	f7ff ff58 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b58:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b64:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7c:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_UART_MspInit+0xd8>)
 8000b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000b94:	2318      	movs	r3, #24
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000bac:	230d      	movs	r3, #13
 8000bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <HAL_UART_MspInit+0xdc>)
 8000bba:	f001 fa55 	bl	8002068 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	203c      	movs	r0, #60	@ 0x3c
 8000bc4:	f000 fabe 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bc8:	203c      	movs	r0, #60	@ 0x3c
 8000bca:	f000 fad5 	bl	8001178 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	37b0      	adds	r7, #176	@ 0xb0
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	44020c00 	.word	0x44020c00
 8000be0:	42020000 	.word	0x42020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f9ab 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c46:	2020      	movs	r0, #32
 8000c48:	f001 fb92 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000c54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c58:	f001 fb8a 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c66:	f000 ff9f 	bl	8001ba8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000034 	.word	0x20000034

08000c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <USART3_IRQHandler+0x10>)
 8000c7a:	f004 fc47 	bl	800550c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000f0 	.word	0x200000f0

08000c88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c8e:	4b30      	ldr	r3, [pc, #192]	@ (8000d50 <SystemInit+0xc8>)
 8000c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c94:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <SystemInit+0xc8>)
 8000c96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <SystemInit+0xcc>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <SystemInit+0xcc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000caa:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <SystemInit+0xcc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <SystemInit+0xcc>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4927      	ldr	r1, [pc, #156]	@ (8000d54 <SystemInit+0xcc>)
 8000cb6:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <SystemInit+0xd0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cbc:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <SystemInit+0xcc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000cc2:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <SystemInit+0xcc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <SystemInit+0xcc>)
 8000cca:	4a24      	ldr	r2, [pc, #144]	@ (8000d5c <SystemInit+0xd4>)
 8000ccc:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000cce:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <SystemInit+0xcc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <SystemInit+0xcc>)
 8000cd6:	4a21      	ldr	r2, [pc, #132]	@ (8000d5c <SystemInit+0xd4>)
 8000cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <SystemInit+0xcc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <SystemInit+0xcc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <SystemInit+0xcc>)
 8000ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <SystemInit+0xcc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <SystemInit+0xc8>)
 8000cf4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cf8:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <SystemInit+0xd8>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d02:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d0a:	d003      	beq.n	8000d14 <SystemInit+0x8c>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d12:	d117      	bne.n	8000d44 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <SystemInit+0xd8>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <SystemInit+0xd8>)
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <SystemInit+0xdc>)
 8000d24:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <SystemInit+0xd8>)
 8000d28:	4a0f      	ldr	r2, [pc, #60]	@ (8000d68 <SystemInit+0xe0>)
 8000d2a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <SystemInit+0xd8>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <SystemInit+0xd8>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <SystemInit+0xd8>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <SystemInit+0xd8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	61d3      	str	r3, [r2, #28]
  }
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00
 8000d54:	44020c00 	.word	0x44020c00
 8000d58:	fae2eae3 	.word	0xfae2eae3
 8000d5c:	01010280 	.word	0x01010280
 8000d60:	40022000 	.word	0x40022000
 8000d64:	08192a3b 	.word	0x08192a3b
 8000d68:	4c5d6e7f 	.word	0x4c5d6e7f

08000d6c <MX_USART3_UART_Init>:
#include "uart.h"

UART_HandleTypeDef huart3;

void MX_USART3_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d72:	4a23      	ldr	r2, [pc, #140]	@ (8000e00 <MX_USART3_UART_Init+0x94>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dae:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db4:	4811      	ldr	r0, [pc, #68]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000db6:	f004 fb59 	bl	800546c <HAL_UART_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x58>
  {
	  //Error_Handler();
	  	while(1);
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MX_USART3_UART_Init+0x54>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000dc8:	f005 fadf 	bl	800638a <HAL_UARTEx_SetTxFifoThreshold>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART3_UART_Init+0x6a>
  {
	  //Error_Handler();
	  	while(1);
 8000dd2:	bf00      	nop
 8000dd4:	e7fd      	b.n	8000dd2 <MX_USART3_UART_Init+0x66>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4808      	ldr	r0, [pc, #32]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000dda:	f005 fb14 	bl	8006406 <HAL_UARTEx_SetRxFifoThreshold>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART3_UART_Init+0x7c>
  {
	  //Error_Handler();
	  	while(1);
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <MX_USART3_UART_Init+0x78>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <MX_USART3_UART_Init+0x90>)
 8000dea:	f005 fa95 	bl	8006318 <HAL_UARTEx_DisableFifoMode>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART3_UART_Init+0x8c>
  {
	  //Error_Handler();
	  	while(1);
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <MX_USART3_UART_Init+0x88>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000f0 	.word	0x200000f0
 8000e00:	40004800 	.word	0x40004800

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
	ldr	r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <LoopForever+0x16>)
	cmp	r2, r3
 8000e2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2e:	f7ff ff2b 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f005 fb7d 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fcd1 	bl	80007dc <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e3c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000e40:	080065f0 	.word	0x080065f0
	ldr	r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e48:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000e4c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000e50:	20000188 	.word	0x20000188

08000e54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f966 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e62:	f002 f8a7 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8000e66:	4602      	mov	r2, r0
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_Init+0x44>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	f003 030f 	and.w	r3, r3, #15
 8000e70:	490b      	ldr	r1, [pc, #44]	@ (8000ea0 <HAL_Init+0x48>)
 8000e72:	5ccb      	ldrb	r3, [r1, r3]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_Init+0x4c>)
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f000 f9ab 	bl	80011d8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f810 	bl	8000ea8 <HAL_InitTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e002      	b.n	8000e98 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fdbf 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	44020c00 	.word	0x44020c00
 8000ea0:	08006590 	.word	0x08006590
 8000ea4:	2000000c 	.word	0x2000000c

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000eb4:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <HAL_InitTick+0xdc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e05c      	b.n	8000f7a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ec0:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <HAL_InitTick+0xe0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d10c      	bne.n	8000ee6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <HAL_InitTick+0xe4>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <HAL_InitTick+0xdc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e037      	b.n	8000f56 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000ee6:	f000 f9cf 	bl	8001288 <HAL_SYSTICK_GetCLKSourceConfig>
 8000eea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d023      	beq.n	8000f3a <HAL_InitTick+0x92>
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d82d      	bhi.n	8000f54 <HAL_InitTick+0xac>
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_InitTick+0x5e>
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d00d      	beq.n	8000f20 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000f04:	e026      	b.n	8000f54 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000f06:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <HAL_InitTick+0xe4>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <HAL_InitTick+0xdc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000f14:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1c:	60fb      	str	r3, [r7, #12]
        break;
 8000f1e:	e01a      	b.n	8000f56 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f20:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <HAL_InitTick+0xdc>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f2e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	60fb      	str	r3, [r7, #12]
        break;
 8000f38:	e00d      	b.n	8000f56 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_InitTick+0xdc>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f50:	60fb      	str	r3, [r7, #12]
        break;
 8000f52:	e000      	b.n	8000f56 <HAL_InitTick+0xae>
        break;
 8000f54:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f91c 	bl	8001194 <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e009      	b.n	8000f7a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f66:	2200      	movs	r2, #0
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6e:	f000 f8e9 	bl	8001144 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000f72:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <HAL_InitTick+0xe8>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000014 	.word	0x20000014
 8000f88:	e000e010 	.word	0xe000e010
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000010 	.word	0x20000010

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000014 	.word	0x20000014
 8000fb8:	20000184 	.word	0x20000184

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000184 	.word	0x20000184

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	@ (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001152:	f7ff ff63 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001156:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7ff ffb3 	bl	80010c8 <NVIC_EncodePriority>
 8001162:	4602      	mov	r2, r0
 8001164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff82 	bl	8001074 <__NVIC_SetPriority>
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff56 	bl	8001038 <__NVIC_EnableIRQ>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00d      	b.n	80011c6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011be:	f043 0303 	orr.w	r3, r3, #3
 80011c2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d844      	bhi.n	8001270 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80011e6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	0800120f 	.word	0x0800120f
 80011f0:	0800122d 	.word	0x0800122d
 80011f4:	0800124f 	.word	0x0800124f
 80011f8:	08001271 	.word	0x08001271
 80011fc:	08001201 	.word	0x08001201
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6013      	str	r3, [r2, #0]
      break;
 800120c:	e031      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800121c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001220:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001222:	f023 030c 	bic.w	r3, r3, #12
 8001226:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800122a:	e022      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001232:	f023 0304 	bic.w	r3, r3, #4
 8001236:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800123a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800123e:	f023 030c 	bic.w	r3, r3, #12
 8001242:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800124c:	e011      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800125c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001260:	f023 030c 	bic.w	r3, r3, #12
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800126e:	e000      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001270:	bf00      	nop
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010
 8001284:	44020c00 	.word	0x44020c00

08001288 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800129a:	2304      	movs	r3, #4
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e01e      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80012a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d00f      	beq.n	80012d2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d80f      	bhi.n	80012d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d003      	beq.n	80012cc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80012c4:	e008      	b.n	80012d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
        break;
 80012ca:	e008      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
        break;
 80012d0:	e005      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80012d2:	2302      	movs	r3, #2
 80012d4:	607b      	str	r3, [r7, #4]
        break;
 80012d6:	e002      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
        break;
 80012dc:	bf00      	nop
    }
  }
  return systick_source;
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e010 	.word	0xe000e010
 80012f0:	44020c00 	.word	0x44020c00

080012f4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80012fc:	f7ff fe5e 	bl	8000fbc <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e06b      	b.n	80013e4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d008      	beq.n	800132a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2220      	movs	r2, #32
 800131c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e05c      	b.n	80013e4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0204 	orr.w	r2, r2, #4
 8001338:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2205      	movs	r2, #5
 800133e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001342:	e020      	b.n	8001386 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001344:	f7ff fe3a 	bl	8000fbc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b05      	cmp	r3, #5
 8001350:	d919      	bls.n	8001386 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001376:	2201      	movs	r2, #1
 8001378:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e02e      	b.n	80013e4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0d7      	beq.n	8001344 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0202 	orr.w	r2, r2, #2
 80013a2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2204      	movs	r2, #4
 80013a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80013b4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ce:	2201      	movs	r2, #1
 80013d0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e019      	b.n	8001432 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d004      	beq.n	8001414 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2220      	movs	r2, #32
 800140e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e00e      	b.n	8001432 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2204      	movs	r2, #4
 8001418:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e147      	b.n	80016e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fadc 	bl	8000a24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0210 	bic.w	r2, r2, #16
 800147a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800147c:	f7ff fd9e 	bl	8000fbc <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001482:	e012      	b.n	80014aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001484:	f7ff fd9a 	bl	8000fbc <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b0a      	cmp	r3, #10
 8001490:	d90b      	bls.n	80014aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e11b      	b.n	80016e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d0e5      	beq.n	8001484 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff fd78 	bl	8000fbc <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014ce:	e012      	b.n	80014f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014d0:	f7ff fd74 	bl	8000fbc <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b0a      	cmp	r3, #10
 80014dc:	d90b      	bls.n	80014f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0f5      	b.n	80016e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0e5      	beq.n	80014d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0202 	orr.w	r2, r2, #2
 8001512:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a74      	ldr	r2, [pc, #464]	@ (80016ec <HAL_FDCAN_Init+0x2ac>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d103      	bne.n	8001526 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800151e:	4a74      	ldr	r2, [pc, #464]	@ (80016f0 <HAL_FDCAN_Init+0x2b0>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7c1b      	ldrb	r3, [r3, #16]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d108      	bne.n	8001540 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800153c:	619a      	str	r2, [r3, #24]
 800153e:	e007      	b.n	8001550 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800154e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7c5b      	ldrb	r3, [r3, #17]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d108      	bne.n	800156a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	e007      	b.n	800157a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001578:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7c9b      	ldrb	r3, [r3, #18]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699a      	ldr	r2, [r3, #24]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001590:	619a      	str	r2, [r3, #24]
 8001592:	e007      	b.n	80015a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80015c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0210 	bic.w	r2, r2, #16
 80015d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699a      	ldr	r2, [r3, #24]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0204 	orr.w	r2, r2, #4
 80015f0:	619a      	str	r2, [r3, #24]
 80015f2:	e02c      	b.n	800164e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d028      	beq.n	800164e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d01c      	beq.n	800163e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001612:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0210 	orr.w	r2, r2, #16
 8001622:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d110      	bne.n	800164e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0220 	orr.w	r2, r2, #32
 800163a:	619a      	str	r2, [r3, #24]
 800163c:	e007      	b.n	800164e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0220 	orr.w	r2, r2, #32
 800164c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	3b01      	subs	r3, #1
 8001654:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	3b01      	subs	r3, #1
 800165c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800165e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001666:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	3b01      	subs	r3, #1
 8001670:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001676:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001678:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001682:	d115      	bne.n	80016b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168e:	3b01      	subs	r3, #1
 8001690:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001692:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	3b01      	subs	r3, #1
 800169a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800169c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	3b01      	subs	r3, #1
 80016a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fbfc 	bl	8001ec4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	4000a400 	.word	0x4000a400
 80016f0:	4000a500 	.word	0x4000a500

080016f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d110      	bne.n	800172a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e006      	b.n	8001738 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	f043 0204 	orr.w	r2, r3, #4
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
  }
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d12c      	bne.n	80017b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001770:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e023      	b.n	80017c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fbec 	bl	8001f70 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80017a8:	2201      	movs	r2, #1
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	409a      	lsls	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e006      	b.n	80017c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ba:	f043 0208 	orr.w	r2, r3, #8
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
  }
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	@ 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017e4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80017e6:	7efb      	ldrb	r3, [r7, #27]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f040 80e8 	bne.w	80019be <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b40      	cmp	r3, #64	@ 0x40
 80017f2:	d137      	bne.n	8001864 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001808:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0db      	b.n	80019cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181c:	0e1b      	lsrs	r3, r3, #24
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10a      	bne.n	800183c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800182e:	0a5b      	lsrs	r3, r3, #9
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
 8001862:	e036      	b.n	80018d2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001878:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0a3      	b.n	80019cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800188c:	0e1b      	lsrs	r3, r3, #24
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10a      	bne.n	80018ac <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d107      	bne.n	80018f6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0c9b      	lsrs	r3, r3, #18
 80018ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e005      	b.n	8001902 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	3304      	adds	r3, #4
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	f003 020f 	and.w	r2, r3, #15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0e1b      	lsrs	r3, r3, #24
 8001956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0fda      	lsrs	r2, r3, #31
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	3304      	adds	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	e00a      	b.n	800198e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	441a      	add	r2, r3
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	440b      	add	r3, r1
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	3301      	adds	r3, #1
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	4a11      	ldr	r2, [pc, #68]	@ (80019d8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	461a      	mov	r2, r3
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	4293      	cmp	r3, r2
 800199c:	d3ec      	bcc.n	8001978 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b40      	cmp	r3, #64	@ 0x40
 80019a2:	d105      	bne.n	80019b0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80019ae:	e004      	b.n	80019ba <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e006      	b.n	80019cc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	f043 0208 	orr.w	r2, r3, #8
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	372c      	adds	r7, #44	@ 0x2c
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	080065a8 	.word	0x080065a8

080019dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019ee:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d003      	beq.n	80019fe <HAL_FDCAN_ActivateNotification+0x22>
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f040 80c8 	bne.w	8001b8e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d03b      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d031      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d027      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01d      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d013      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00c      	beq.n	8001aa2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0201 	orr.w	r2, r2, #1
 8001aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d13b      	bne.n	8001b2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d131      	bne.n	8001b2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d127      	bne.n	8001b2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11d      	bne.n	8001b2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d113      	bne.n	8001b2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00c      	beq.n	8001b3e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0202 	orr.w	r2, r2, #2
 8001b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e006      	b.n	8001b9c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	@ 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bdc:	4013      	ands	r3, r2
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bfe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001c02:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0a:	6a3a      	ldr	r2, [r7, #32]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c1a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c36:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2240      	movs	r2, #64	@ 0x40
 8001c52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f916 	bl	8001e86 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d019      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d014      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c76:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8d8 	bl	8001e48 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8a2 	bl	8001df2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fe6e 	bl	80009a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f897 	bl	8001e08 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00c      	beq.n	8001cfe <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f890 	bl	8001e1e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d018      	beq.n	8001d3a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d013      	beq.n	8001d3a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d1a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4013      	ands	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2280      	movs	r2, #128	@ 0x80
 8001d30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f87c 	bl	8001e32 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00c      	beq.n	8001d5e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f880 	bl	8001e5e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00c      	beq.n	8001d82 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f878 	bl	8001e72 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00f      	beq.n	8001dac <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001dba:	69f9      	ldr	r1, [r7, #28]
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f876 	bl	8001eae <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d009      	beq.n	8001ddc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f858 	bl	8001e9a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	@ 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ecc:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001ece:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ede:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee6:	041a      	lsls	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f04:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f0c:	061a      	lsls	r2, r3, #24
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e005      	b.n	8001f52 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3f3      	bcc.n	8001f46 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	4000ac00 	.word	0x4000ac00

08001f70 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	@ 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f8e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e00a      	b.n	8001fb2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001fa4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001faa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001fac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001fb0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001fbc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001fc2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001fc8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e020      	b.n	8002046 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3303      	adds	r3, #3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3302      	adds	r3, #2
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	440b      	add	r3, r1
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800201c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	440b      	add	r3, r1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800202a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	440a      	add	r2, r1
 8002032:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002034:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3304      	adds	r3, #4
 800203e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3304      	adds	r3, #4
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4a06      	ldr	r2, [pc, #24]	@ (8002064 <FDCAN_CopyMessageToRAM+0xf4>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	461a      	mov	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4293      	cmp	r3, r2
 8002054:	d3d6      	bcc.n	8002004 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	3724      	adds	r7, #36	@ 0x24
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	080065a8 	.word	0x080065a8

08002068 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002076:	e136      	b.n	80022e6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8128 	beq.w	80022e0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x38>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b12      	cmp	r3, #18
 800209e:	d125      	bne.n	80020ec <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	08da      	lsrs	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3208      	adds	r2, #8
 80020e6:	6979      	ldr	r1, [r7, #20]
 80020e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0203 	and.w	r2, r3, #3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d00b      	beq.n	8002140 <HAL_GPIO_Init+0xd8>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002134:	2b11      	cmp	r3, #17
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b12      	cmp	r3, #18
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4013      	ands	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4013      	ands	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 0201 	and.w	r2, r3, #1
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d017      	beq.n	80021da <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4013      	ands	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d07c      	beq.n	80022e0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021e6:	4a47      	ldr	r2, [pc, #284]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3318      	adds	r3, #24
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4013      	ands	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0a9a      	lsrs	r2, r3, #10
 800220e:	4b3e      	ldr	r3, [pc, #248]	@ (8002308 <HAL_GPIO_Init+0x2a0>)
 8002210:	4013      	ands	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	00d2      	lsls	r2, r2, #3
 800221a:	4093      	lsls	r3, r2
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002222:	4938      	ldr	r1, [pc, #224]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3318      	adds	r3, #24
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002230:	4b34      	ldr	r3, [pc, #208]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43db      	mvns	r3, r3
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4013      	ands	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002254:	4a2b      	ldr	r2, [pc, #172]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800225a:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4013      	ands	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800227e:	4a21      	ldr	r2, [pc, #132]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002284:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 8002286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800228a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4013      	ands	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80022aa:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 80022b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4013      	ands	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80022d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <HAL_GPIO_Init+0x29c>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	3301      	adds	r3, #1
 80022e4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f47f aec1 	bne.w	8002078 <HAL_GPIO_Init+0x10>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	44022000 	.word	0x44022000
 8002308:	002f7f7f 	.word	0x002f7f7f

0800230c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002328:	e002      	b.n	8002330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4013      	ands	r3, r2
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43d9      	mvns	r1, r3
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	400b      	ands	r3, r1
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002386:	4a0c      	ldr	r2, [pc, #48]	@ (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f814 	bl	80023bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80023a0:	4a05      	ldr	r2, [pc, #20]	@ (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fad3 	bl	8000954 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	44022000 	.word	0x44022000

080023bc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f000 bc28 	b.w	8002c38 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e8:	4b94      	ldr	r3, [pc, #592]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 0318 	and.w	r3, r3, #24
 80023f0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80023f2:	4b92      	ldr	r3, [pc, #584]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05b      	beq.n	80024c0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x46>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b18      	cmp	r3, #24
 8002412:	d114      	bne.n	800243e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d111      	bne.n	800243e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f000 bc08 	b.w	8002c38 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002428:	4b84      	ldr	r3, [pc, #528]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4981      	ldr	r1, [pc, #516]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002438:	4313      	orrs	r3, r2
 800243a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800243c:	e040      	b.n	80024c0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d023      	beq.n	800248e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002446:	4b7d      	ldr	r3, [pc, #500]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7c      	ldr	r2, [pc, #496]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fdb3 	bl	8000fbc <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800245a:	f7fe fdaf 	bl	8000fbc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e3e5      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800246c:	4b73      	ldr	r3, [pc, #460]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002478:	4b70      	ldr	r3, [pc, #448]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	496d      	ldr	r1, [pc, #436]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002488:	4313      	orrs	r3, r2
 800248a:	618b      	str	r3, [r1, #24]
 800248c:	e018      	b.n	80024c0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800248e:	4b6b      	ldr	r3, [pc, #428]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6a      	ldr	r2, [pc, #424]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fd8f 	bl	8000fbc <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80024a2:	f7fe fd8b 	bl	8000fbc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e3c1      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80024b4:	4b61      	ldr	r3, [pc, #388]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a0 	beq.w	800260e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_OscConfig+0x10c>
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b18      	cmp	r3, #24
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 8092 	bne.w	800260e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e3a4      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x132>
 80024f8:	4b50      	ldr	r3, [pc, #320]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e058      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d112      	bne.n	8002534 <HAL_RCC_OscConfig+0x160>
 800250e:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4a      	ldr	r2, [pc, #296]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b48      	ldr	r3, [pc, #288]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a47      	ldr	r2, [pc, #284]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002520:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b45      	ldr	r3, [pc, #276]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a44      	ldr	r2, [pc, #272]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e041      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800253c:	d112      	bne.n	8002564 <HAL_RCC_OscConfig+0x190>
 800253e:	4b3f      	ldr	r3, [pc, #252]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3e      	ldr	r2, [pc, #248]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b3c      	ldr	r3, [pc, #240]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a3b      	ldr	r2, [pc, #236]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002550:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b39      	ldr	r3, [pc, #228]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a38      	ldr	r2, [pc, #224]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e029      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800256c:	d112      	bne.n	8002594 <HAL_RCC_OscConfig+0x1c0>
 800256e:	4b33      	ldr	r3, [pc, #204]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a32      	ldr	r2, [pc, #200]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b30      	ldr	r3, [pc, #192]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2f      	ldr	r2, [pc, #188]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b2d      	ldr	r3, [pc, #180]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2c      	ldr	r2, [pc, #176]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e011      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002594:	4b29      	ldr	r3, [pc, #164]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a28      	ldr	r2, [pc, #160]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b26      	ldr	r3, [pc, #152]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a25      	ldr	r2, [pc, #148]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a22      	ldr	r2, [pc, #136]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80025b2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fcfc 	bl	8000fbc <HAL_GetTick>
 80025c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fcf8 	bl	8000fbc <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e32e      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1f4>
 80025e6:	e012      	b.n	800260e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fce8 	bl	8000fbc <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fce4 	bl	8000fbc <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e31a      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002602:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_RCC_OscConfig+0x268>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 809a 	beq.w	8002750 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x25a>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b18      	cmp	r3, #24
 8002626:	d149      	bne.n	80026bc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d146      	bne.n	80026bc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e2fe      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
 800263a:	bf00      	nop
 800263c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002646:	4b9a      	ldr	r3, [pc, #616]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0218 	and.w	r2, r3, #24
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d014      	beq.n	8002680 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002656:	4b96      	ldr	r3, [pc, #600]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0218 	bic.w	r2, r3, #24
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	4993      	ldr	r1, [pc, #588]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002668:	f000 fdd0 	bl	800320c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800266c:	4b91      	ldr	r3, [pc, #580]	@ (80028b4 <HAL_RCC_OscConfig+0x4e0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fc19 	bl	8000ea8 <HAL_InitTick>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e2db      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fc9c 	bl	8000fbc <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002688:	f7fe fc98 	bl	8000fbc <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e2ce      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800269a:	4b85      	ldr	r3, [pc, #532]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80026a6:	4b82      	ldr	r3, [pc, #520]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	497e      	ldr	r1, [pc, #504]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80026ba:	e049      	b.n	8002750 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02c      	beq.n	800271e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80026c4:	4b7a      	ldr	r3, [pc, #488]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0218 	bic.w	r2, r3, #24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4977      	ldr	r1, [pc, #476]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80026d6:	4b76      	ldr	r3, [pc, #472]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fc6b 	bl	8000fbc <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80026ea:	f7fe fc67 	bl	8000fbc <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e29d      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fc:	4b6c      	ldr	r3, [pc, #432]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002708:	4b69      	ldr	r3, [pc, #420]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	4966      	ldr	r1, [pc, #408]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	610b      	str	r3, [r1, #16]
 800271c:	e018      	b.n	8002750 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271e:	4b64      	ldr	r3, [pc, #400]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a63      	ldr	r2, [pc, #396]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fc47 	bl	8000fbc <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002732:	f7fe fc43 	bl	8000fbc <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e279      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002744:	4b5a      	ldr	r3, [pc, #360]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01c      	beq.n	800279e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002764:	4b52      	ldr	r3, [pc, #328]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800276a:	4a51      	ldr	r2, [pc, #324]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800276c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002770:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fc22 	bl	8000fbc <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800277c:	f7fe fc1e 	bl	8000fbc <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e254      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800278e:	4b48      	ldr	r3, [pc, #288]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <HAL_RCC_OscConfig+0x3a8>
 800279c:	e01b      	b.n	80027d6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279e:	4b44      	ldr	r3, [pc, #272]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80027a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027a4:	4a42      	ldr	r2, [pc, #264]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe fc05 	bl	8000fbc <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80027b6:	f7fe fc01 	bl	8000fbc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e237      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027c8:	4b39      	ldr	r3, [pc, #228]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ef      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80d2 	beq.w	8002988 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027e4:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d118      	bne.n	8002822 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80027f0:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	4a30      	ldr	r2, [pc, #192]	@ (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fbde 	bl	8000fbc <HAL_GetTick>
 8002800:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe fbda 	bl	8000fbc <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e210      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002816:	4b28      	ldr	r3, [pc, #160]	@ (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x468>
 800282a:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800282c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002830:	4a1f      	ldr	r2, [pc, #124]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800283a:	e074      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d118      	bne.n	8002876 <HAL_RCC_OscConfig+0x4a2>
 8002844:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800284a:	4a19      	ldr	r2, [pc, #100]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002854:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800285a:	4a15      	ldr	r2, [pc, #84]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800285c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002860:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002864:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286a:	4a11      	ldr	r2, [pc, #68]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002874:	e057      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d11e      	bne.n	80028bc <HAL_RCC_OscConfig+0x4e8>
 800287e:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002884:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002894:	4a06      	ldr	r2, [pc, #24]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800289a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80028a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a4:	4a02      	ldr	r2, [pc, #8]	@ (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ae:	e03a      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 80028b0:	44020c00 	.word	0x44020c00
 80028b4:	20000010 	.word	0x20000010
 80028b8:	44020800 	.word	0x44020800
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b85      	cmp	r3, #133	@ 0x85
 80028c2:	d118      	bne.n	80028f6 <HAL_RCC_OscConfig+0x522>
 80028c4:	4ba2      	ldr	r3, [pc, #648]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ca:	4aa1      	ldr	r2, [pc, #644]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028d4:	4b9e      	ldr	r3, [pc, #632]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028da:	4a9d      	ldr	r2, [pc, #628]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028e4:	4b9a      	ldr	r3, [pc, #616]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ea:	4a99      	ldr	r2, [pc, #612]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028f4:	e017      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 80028f6:	4b96      	ldr	r3, [pc, #600]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028fc:	4a94      	ldr	r2, [pc, #592]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002906:	4b92      	ldr	r3, [pc, #584]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800290c:	4a90      	ldr	r2, [pc, #576]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002916:	4b8e      	ldr	r3, [pc, #568]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800291c:	4a8c      	ldr	r2, [pc, #560]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800291e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002922:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fb45 	bl	8000fbc <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fb41 	bl	8000fbc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e175      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	4b80      	ldr	r3, [pc, #512]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800294e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ed      	beq.n	8002936 <HAL_RCC_OscConfig+0x562>
 800295a:	e015      	b.n	8002988 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fb2e 	bl	8000fbc <HAL_GetTick>
 8002960:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fb2a 	bl	8000fbc <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e15e      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297a:	4b75      	ldr	r3, [pc, #468]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800297c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ed      	bne.n	8002964 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d036      	beq.n	8002a02 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d019      	beq.n	80029d0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800299c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe fb08 	bl	8000fbc <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80029b0:	f7fe fb04 	bl	8000fbc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e13a      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029c2:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x5dc>
 80029ce:	e018      	b.n	8002a02 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a5e      	ldr	r2, [pc, #376]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe faee 	bl	8000fbc <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80029e4:	f7fe faea 	bl	8000fbc <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e120      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029f6:	4b56      	ldr	r3, [pc, #344]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8115 	beq.w	8002c36 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b18      	cmp	r3, #24
 8002a10:	f000 80af 	beq.w	8002b72 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	f040 8086 	bne.w	8002b2a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4b      	ldr	r2, [pc, #300]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fac7 	bl	8000fbc <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fac3 	bl	8000fbc <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0f9      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a44:	4b42      	ldr	r3, [pc, #264]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002a50:	4b3f      	ldr	r3, [pc, #252]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a58:	f023 0303 	bic.w	r3, r3, #3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a64:	0212      	lsls	r2, r2, #8
 8002a66:	430a      	orrs	r2, r1
 8002a68:	4939      	ldr	r1, [pc, #228]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	3b01      	subs	r3, #1
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a9e:	492c      	ldr	r1, [pc, #176]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	4a29      	ldr	r2, [pc, #164]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aaa:	f023 0310 	bic.w	r3, r3, #16
 8002aae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab4:	4a26      	ldr	r2, [pc, #152]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002aba:	4b25      	ldr	r3, [pc, #148]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	4a24      	ldr	r2, [pc, #144]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002ac6:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	f023 020c 	bic.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	491f      	ldr	r1, [pc, #124]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	f023 0220 	bic.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae4:	491a      	ldr	r1, [pc, #104]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	4a18      	ldr	r2, [pc, #96]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a15      	ldr	r2, [pc, #84]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002afc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe fa5b 	bl	8000fbc <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fa57 	bl	8000fbc <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e08d      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x736>
 8002b28:	e085      	b.n	8002c36 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fa41 	bl	8000fbc <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fa3d 	bl	8000fbc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d903      	bls.n	8002b54 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e073      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
 8002b50:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b54:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002b60:	4b37      	ldr	r3, [pc, #220]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	4a36      	ldr	r2, [pc, #216]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b66:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	6293      	str	r3, [r2, #40]	@ 0x28
 8002b70:	e061      	b.n	8002c36 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b72:	4b33      	ldr	r3, [pc, #204]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b78:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d031      	beq.n	8002bea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d12a      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d122      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bae:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d11a      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	0a5b      	lsrs	r3, r3, #9
 8002bb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d111      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d108      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0e1b      	lsrs	r3, r3, #24
 8002bdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e024      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d01a      	beq.n	8002c36 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	4a0e      	ldr	r2, [pc, #56]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c06:	f023 0310 	bic.w	r3, r3, #16
 8002c0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f9d6 	bl	8000fbc <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002c12:	bf00      	nop
 8002c14:	f7fe f9d2 	bl	8000fbc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d0f9      	beq.n	8002c14 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c24:	4a06      	ldr	r2, [pc, #24]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c30:	f043 0310 	orr.w	r3, r3, #16
 8002c34:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	44020c00 	.word	0x44020c00

08002c44 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e19e      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b83      	ldr	r3, [pc, #524]	@ (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d910      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b80      	ldr	r3, [pc, #512]	@ (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 020f 	bic.w	r2, r3, #15
 8002c6e:	497e      	ldr	r1, [pc, #504]	@ (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b7c      	ldr	r3, [pc, #496]	@ (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e186      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d012      	beq.n	8002cba <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	4b74      	ldr	r3, [pc, #464]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d909      	bls.n	8002cba <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ca6:	4b71      	ldr	r3, [pc, #452]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	496d      	ldr	r1, [pc, #436]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	4b68      	ldr	r3, [pc, #416]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d909      	bls.n	8002cec <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002cd8:	4b64      	ldr	r3, [pc, #400]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4961      	ldr	r1, [pc, #388]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d908      	bls.n	8002d1a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d08:	4b58      	ldr	r3, [pc, #352]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4955      	ldr	r1, [pc, #340]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	4b50      	ldr	r3, [pc, #320]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d908      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d36:	4b4d      	ldr	r3, [pc, #308]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 020f 	bic.w	r2, r3, #15
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	494a      	ldr	r1, [pc, #296]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8093 	beq.w	8002e7c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d5e:	4b43      	ldr	r3, [pc, #268]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d121      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e113      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d76:	4b3d      	ldr	r3, [pc, #244]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e107      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d8e:	4b37      	ldr	r3, [pc, #220]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0fb      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9e:	4b33      	ldr	r3, [pc, #204]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0f3      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002dae:	4b2f      	ldr	r3, [pc, #188]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	492c      	ldr	r1, [pc, #176]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe f8fc 	bl	8000fbc <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d112      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7fe f8f4 	bl	8000fbc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0d7      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de6:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0318 	and.w	r3, r3, #24
 8002dee:	2b18      	cmp	r3, #24
 8002df0:	d1ee      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18c>
 8002df2:	e043      	b.n	8002e7c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f7fe f8dd 	bl	8000fbc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0c0      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 0318 	and.w	r3, r3, #24
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1ba>
 8002e20:	e02c      	b.n	8002e7c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d122      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe f8c6 	bl	8000fbc <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0a9      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0318 	and.w	r3, r3, #24
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d1ee      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
 8002e4e:	e015      	b.n	8002e7c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe f8b4 	bl	8000fbc <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d906      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e097      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
 8002e66:	bf00      	nop
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e70:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 0318 	and.w	r3, r3, #24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e9      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d010      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b44      	ldr	r3, [pc, #272]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d208      	bcs.n	8002eaa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002e98:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 020f 	bic.w	r2, r3, #15
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	493e      	ldr	r1, [pc, #248]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d210      	bcs.n	8002eda <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 020f 	bic.w	r2, r3, #15
 8002ec0:	4938      	ldr	r1, [pc, #224]	@ (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec8:	4b36      	ldr	r3, [pc, #216]	@ (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e05d      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d208      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4927      	ldr	r1, [pc, #156]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	4b21      	ldr	r3, [pc, #132]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d209      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f26:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	491a      	ldr	r1, [pc, #104]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d209      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	490e      	ldr	r1, [pc, #56]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f6c:	f000 f822 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490b      	ldr	r1, [pc, #44]	@ (8002fa8 <HAL_RCC_ClockConfig+0x364>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_RCC_ClockConfig+0x368>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f86:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_RCC_ClockConfig+0x36c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd ff8c 	bl	8000ea8 <HAL_InitTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002f94:	7afb      	ldrb	r3, [r7, #11]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	44020c00 	.word	0x44020c00
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	08006590 	.word	0x08006590
 8002fac:	2000000c 	.word	0x2000000c
 8002fb0:	20000010 	.word	0x20000010

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002fba:	4b8c      	ldr	r3, [pc, #560]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 0318 	and.w	r3, r3, #24
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fc6:	4b8a      	ldr	r3, [pc, #552]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e107      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fcc:	4b87      	ldr	r3, [pc, #540]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f003 0318 	and.w	r3, r3, #24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002fd8:	4b84      	ldr	r3, [pc, #528]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fe4:	4b81      	ldr	r3, [pc, #516]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	4a81      	ldr	r2, [pc, #516]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e0f1      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	e0ee      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0318 	and.w	r3, r3, #24
 8003006:	2b10      	cmp	r3, #16
 8003008:	d102      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800300a:	4b7b      	ldr	r3, [pc, #492]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x244>)
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e0e5      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003010:	4b76      	ldr	r3, [pc, #472]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 0318 	and.w	r3, r3, #24
 8003018:	2b18      	cmp	r3, #24
 800301a:	f040 80dd 	bne.w	80031d8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800301e:	4b73      	ldr	r3, [pc, #460]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003028:	4b70      	ldr	r3, [pc, #448]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003032:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003034:	4b6d      	ldr	r3, [pc, #436]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003040:	4b6a      	ldr	r3, [pc, #424]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80b7 	beq.w	80031d2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0xbe>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d056      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x16a>
 8003070:	e077      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003072:	4b5e      	ldr	r3, [pc, #376]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d02d      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800307e:	4b5b      	ldr	r3, [pc, #364]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	4a5a      	ldr	r2, [pc, #360]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a8:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80030bc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 80030c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80030d8:	e065      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003200 <HAL_RCC_GetSysClockFreq+0x24c>
 80030e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ec:	4b3f      	ldr	r3, [pc, #252]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 80030ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003100:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 8003104:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003108:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800310c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003110:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800311c:	e043      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003128:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003204 <HAL_RCC_GetSysClockFreq+0x250>
 800312c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003130:	4b2e      	ldr	r3, [pc, #184]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003140:	ed97 6a02 	vldr	s12, [r7, #8]
 8003144:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 8003148:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800314c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003154:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003160:	e021      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003208 <HAL_RCC_GetSysClockFreq+0x254>
 8003170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003174:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003184:	ed97 6a02 	vldr	s12, [r7, #8]
 8003188:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 800318c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003190:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003198:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800319c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80031a4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80031a6:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031aa:	0a5b      	lsrs	r3, r3, #9
 80031ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b0:	3301      	adds	r3, #1
 80031b2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031be:	edd7 6a06 	vldr	s13, [r7, #24]
 80031c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ca:	ee17 3a90 	vmov	r3, s15
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e004      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e001      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80031da:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80031dc:	69fb      	ldr	r3, [r7, #28]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	@ 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	44020c00 	.word	0x44020c00
 80031f0:	003d0900 	.word	0x003d0900
 80031f4:	03d09000 	.word	0x03d09000
 80031f8:	016e3600 	.word	0x016e3600
 80031fc:	46000000 	.word	0x46000000
 8003200:	4c742400 	.word	0x4c742400
 8003204:	4bb71b00 	.word	0x4bb71b00
 8003208:	4a742400 	.word	0x4a742400

0800320c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003210:	f7ff fed0 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800321a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800321e:	4907      	ldr	r1, [pc, #28]	@ (800323c <HAL_RCC_GetHCLKFreq+0x30>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003222:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a05      	ldr	r2, [pc, #20]	@ (8003240 <HAL_RCC_GetHCLKFreq+0x34>)
 800322c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800322e:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <HAL_RCC_GetHCLKFreq+0x34>)
 8003230:	681b      	ldr	r3, [r3, #0]
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	44020c00 	.word	0x44020c00
 800323c:	08006590 	.word	0x08006590
 8003240:	2000000c 	.word	0x2000000c

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003248:	f7ff ffe0 	bl	800320c <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4904      	ldr	r1, [pc, #16]	@ (800326c <HAL_RCC_GetPCLK1Freq+0x28>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	44020c00 	.word	0x44020c00
 800326c:	080065a0 	.word	0x080065a0

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003274:	f7ff ffca 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	@ (8003298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	44020c00 	.word	0x44020c00
 8003298:	080065a0 	.word	0x080065a0

0800329c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80032a0:	f7ff ffb4 	bl	800320c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	0b1b      	lsrs	r3, r3, #12
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4904      	ldr	r1, [pc, #16]	@ (80032c4 <HAL_RCC_GetPCLK3Freq+0x28>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	44020c00 	.word	0x44020c00
 80032c4:	080065a0 	.word	0x080065a0

080032c8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b0aa      	sub	sp, #168	@ 0xa8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80032ec:	2500      	movs	r5, #0
 80032ee:	ea54 0305 	orrs.w	r3, r4, r5
 80032f2:	d00b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80032f4:	4bb8      	ldr	r3, [pc, #736]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032fa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80032fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	4ab4      	ldr	r2, [pc, #720]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003306:	430b      	orrs	r3, r1
 8003308:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f002 0801 	and.w	r8, r2, #1
 8003318:	f04f 0900 	mov.w	r9, #0
 800331c:	ea58 0309 	orrs.w	r3, r8, r9
 8003320:	d038      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003322:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003328:	2b05      	cmp	r3, #5
 800332a:	d819      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800332c:	a201      	add	r2, pc, #4	@ (adr r2, 8003334 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003369 	.word	0x08003369
 8003338:	0800334d 	.word	0x0800334d
 800333c:	08003361 	.word	0x08003361
 8003340:	08003369 	.word	0x08003369
 8003344:	08003369 	.word	0x08003369
 8003348:	08003369 	.word	0x08003369
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800334c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003350:	3308      	adds	r3, #8
 8003352:	4618      	mov	r0, r3
 8003354:	f001 fff2 	bl	800533c <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800335e:	e004      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003366:	e000      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003372:	4b99      	ldr	r3, [pc, #612]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003378:	f023 0107 	bic.w	r1, r3, #7
 800337c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003382:	4a95      	ldr	r2, [pc, #596]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003384:	430b      	orrs	r3, r1
 8003386:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800338a:	e003      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003390:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f002 0a02 	and.w	sl, r2, #2
 80033a0:	f04f 0b00 	mov.w	fp, #0
 80033a4:	ea5a 030b 	orrs.w	r3, sl, fp
 80033a8:	d03c      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80033aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	2b28      	cmp	r3, #40	@ 0x28
 80033b2:	d01b      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x124>
 80033b4:	2b28      	cmp	r3, #40	@ 0x28
 80033b6:	d815      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d019      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d811      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033c0:	2b18      	cmp	r3, #24
 80033c2:	d017      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80033c4:	2b18      	cmp	r3, #24
 80033c6:	d80d      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d109      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d4:	3308      	adds	r3, #8
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 ffb0 	bl	800533c <RCCEx_PLL2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80033e2:	e00a      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033ea:	e006      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033ec:	bf00      	nop
 80033ee:	e004      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033f0:	bf00      	nop
 80033f2:	e002      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80033f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003402:	4b75      	ldr	r3, [pc, #468]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003408:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800340c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	4a71      	ldr	r2, [pc, #452]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003414:	430b      	orrs	r3, r1
 8003416:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800341a:	e003      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003420:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003424:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f002 0304 	and.w	r3, r2, #4
 8003430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800343a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800343e:	460b      	mov	r3, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	d040      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800344e:	d01e      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003450:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003454:	d817      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345a:	d01a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800345c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003460:	d811      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003462:	2bc0      	cmp	r3, #192	@ 0xc0
 8003464:	d017      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003466:	2bc0      	cmp	r3, #192	@ 0xc0
 8003468:	d80d      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d015      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	d109      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003476:	3308      	adds	r3, #8
 8003478:	4618      	mov	r0, r3
 800347a:	f001 ff5f 	bl	800533c <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003484:	e00a      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800348e:	bf00      	nop
 8003490:	e004      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800349a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10c      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80034a4:	4b4c      	ldr	r3, [pc, #304]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034aa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	4a48      	ldr	r2, [pc, #288]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034b6:	430b      	orrs	r3, r1
 80034b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034bc:	e003      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034c2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034e0:	460b      	mov	r3, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	d043      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80034e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034f0:	d021      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034f6:	d81a      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034fc:	d01d      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80034fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003502:	d814      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003504:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003508:	d019      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800350a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800350e:	d80e      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d016      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003518:	d109      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800351a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800351e:	3308      	adds	r3, #8
 8003520:	4618      	mov	r0, r3
 8003522:	f001 ff0b 	bl	800533c <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800352c:	e00a      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003534:	e006      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003536:	bf00      	nop
 8003538:	e004      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003544:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10c      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800354c:	4b22      	ldr	r3, [pc, #136]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800354e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003552:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003556:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800355e:	430b      	orrs	r3, r1
 8003560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003564:	e003      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003566:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800356a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800357a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800357c:	2300      	movs	r3, #0
 800357e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003580:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003584:	460b      	mov	r3, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	d03e      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800358a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800358e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003590:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003594:	d01b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003596:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800359a:	d814      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800359c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035a0:	d017      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80035a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035a6:	d80e      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d017      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b0:	d109      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035b6:	3308      	adds	r3, #8
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 febf 	bl	800533c <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80035c4:	e00b      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035cc:	e007      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035ce:	bf00      	nop
 80035d0:	e005      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80035d2:	bf00      	nop
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x316>
 80035d6:	bf00      	nop
 80035d8:	44020c00 	.word	0x44020c00
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80035e6:	4ba5      	ldr	r3, [pc, #660]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	4aa1      	ldr	r2, [pc, #644]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80035fe:	e003      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003604:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003608:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003614:	673b      	str	r3, [r7, #112]	@ 0x70
 8003616:	2300      	movs	r3, #0
 8003618:	677b      	str	r3, [r7, #116]	@ 0x74
 800361a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d03b      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003624:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800362e:	d01b      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003630:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003634:	d814      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003636:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800363a:	d017      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800363c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003640:	d80e      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d014      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003646:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800364a:	d109      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800364c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003650:	3308      	adds	r3, #8
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fe72 	bl	800533c <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003666:	e004      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003668:	bf00      	nop
 800366a:	e002      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800366c:	bf00      	nop
 800366e:	e000      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003672:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800367a:	4b80      	ldr	r3, [pc, #512]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800367c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003680:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003684:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368a:	4a7c      	ldr	r2, [pc, #496]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800368c:	430b      	orrs	r3, r1
 800368e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003692:	e003      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003694:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003698:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800369c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80036a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036aa:	2300      	movs	r3, #0
 80036ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d033      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80036b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c2:	d015      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80036c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c8:	d80e      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d012      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80036ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d2:	d109      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036d8:	3308      	adds	r3, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fe2e 	bl	800533c <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80036e6:	e006      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80036f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80036fe:	4b5f      	ldr	r3, [pc, #380]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003704:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003708:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800370c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370e:	4a5b      	ldr	r2, [pc, #364]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003710:	430b      	orrs	r3, r1
 8003712:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800371c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003720:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	2100      	movs	r1, #0
 800372a:	6639      	str	r1, [r7, #96]	@ 0x60
 800372c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003730:	667b      	str	r3, [r7, #100]	@ 0x64
 8003732:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d033      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 800373c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003746:	d015      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800374c:	d80e      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d012      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003756:	d109      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003758:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800375c:	3308      	adds	r3, #8
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fdec 	bl	800533c <RCCEx_PLL2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800376a:	e006      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003772:	e002      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003778:	bf00      	nop
    }
    if (ret == HAL_OK)
 800377a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003782:	4b3e      	ldr	r3, [pc, #248]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003784:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003788:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800378c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003792:	4a3a      	ldr	r2, [pc, #232]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003794:	430b      	orrs	r3, r1
 8003796:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800379a:	e003      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	2100      	movs	r1, #0
 80037ae:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80037c0:	4b2e      	ldr	r3, [pc, #184]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4a2d      	ldr	r2, [pc, #180]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037ca:	61d3      	str	r3, [r2, #28]
 80037cc:	4b2b      	ldr	r3, [pc, #172]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d8:	4a28      	ldr	r2, [pc, #160]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80037da:	430b      	orrs	r3, r1
 80037dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80037ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ec:	2300      	movs	r3, #0
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80037f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d046      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80037fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003800:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003804:	d021      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003806:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800380a:	d81a      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003810:	d01d      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003816:	d814      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381c:	d019      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800381e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003822:	d80e      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d016      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800382c:	d109      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800382e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003832:	3308      	adds	r3, #8
 8003834:	4618      	mov	r0, r3
 8003836:	f001 fd81 	bl	800533c <RCCEx_PLL2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003840:	e00a      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003848:	e006      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800384a:	bf00      	nop
 800384c:	e004      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003858:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003860:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003862:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003866:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800386a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	4a02      	ldr	r2, [pc, #8]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003872:	430b      	orrs	r3, r1
 8003874:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800387a:	bf00      	nop
 800387c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003884:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003896:	2300      	movs	r3, #0
 8003898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800389e:	460b      	mov	r3, r1
 80038a0:	4313      	orrs	r3, r2
 80038a2:	d043      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80038a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038ae:	d021      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80038b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038b4:	d81a      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038ba:	d01d      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80038bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038c0:	d814      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038c6:	d019      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x634>
 80038c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038cc:	d80e      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x624>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d6:	d109      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038dc:	3308      	adds	r3, #8
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fd2c 	bl	800533c <RCCEx_PLL2_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80038ea:	e00a      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038f2:	e006      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038f4:	bf00      	nop
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800390a:	4bb6      	ldr	r3, [pc, #728]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800390c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003910:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003914:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	4ab2      	ldr	r2, [pc, #712]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800391c:	430b      	orrs	r3, r1
 800391e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003928:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800392c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003938:	643b      	str	r3, [r7, #64]	@ 0x40
 800393a:	2300      	movs	r3, #0
 800393c:	647b      	str	r3, [r7, #68]	@ 0x44
 800393e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003942:	460b      	mov	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	d030      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003948:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800394c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800394e:	2b05      	cmp	r3, #5
 8003950:	d80f      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003952:	2b03      	cmp	r3, #3
 8003954:	d211      	bcs.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003956:	2b01      	cmp	r3, #1
 8003958:	d911      	bls.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800395a:	2b02      	cmp	r3, #2
 800395c:	d109      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800395e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003962:	3308      	adds	r3, #8
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fce9 	bl	800533c <RCCEx_PLL2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003970:	e006      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003978:	e002      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800397e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003980:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10c      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003988:	4b96      	ldr	r3, [pc, #600]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800398a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800398e:	f023 0107 	bic.w	r1, r3, #7
 8003992:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003998:	4a92      	ldr	r2, [pc, #584]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039a6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80039aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	2100      	movs	r1, #0
 80039b4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80039c0:	460b      	mov	r3, r1
 80039c2:	4313      	orrs	r3, r2
 80039c4:	d022      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80039c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x714>
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d005      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039da:	e002      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80039e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80039ea:	4b7e      	ldr	r3, [pc, #504]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039f0:	f023 0108 	bic.w	r1, r3, #8
 80039f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039fa:	4a7a      	ldr	r2, [pc, #488]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80039fc:	430b      	orrs	r3, r1
 80039fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a08:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f000 80b0 	beq.w	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a36:	f7fd fac1 	bl	8000fbc <HAL_GetTick>
 8003a3a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fd fabc 	bl	8000fbc <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d903      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a58:	4b63      	ldr	r3, [pc, #396]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ed      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003a64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f040 808a 	bne.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d022      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d01b      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a92:	4b54      	ldr	r3, [pc, #336]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa0:	4b50      	ldr	r3, [pc, #320]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aa6:	4a4f      	ldr	r2, [pc, #316]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ab6:	4a4b      	ldr	r2, [pc, #300]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003abc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac0:	4a48      	ldr	r2, [pc, #288]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d019      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd fa71 	bl	8000fbc <HAL_GetTick>
 8003ada:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ade:	e00d      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fa6c 	bl	8000fbc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d903      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003afa:	e006      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afc:	4b39      	ldr	r3, [pc, #228]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ea      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003b0a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d132      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b20:	d10f      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003b22:	4b30      	ldr	r3, [pc, #192]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	61d3      	str	r3, [r2, #28]
 8003b40:	e005      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003b42:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4a27      	ldr	r2, [pc, #156]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b4c:	61d3      	str	r3, [r2, #28]
 8003b4e:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b54:	4a23      	ldr	r2, [pc, #140]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b5e:	4b21      	ldr	r3, [pc, #132]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b60:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b76:	e008      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b78:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b7c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b86:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d038      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bac:	2b30      	cmp	r3, #48	@ 0x30
 8003bae:	d014      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003bb0:	2b30      	cmp	r3, #48	@ 0x30
 8003bb2:	d80e      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d012      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d80a      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc4:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	4a06      	ldr	r2, [pc, #24]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bd0:	e00d      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bd8:	e009      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003bda:	bf00      	nop
 8003bdc:	e007      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003bde:	bf00      	nop
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003be2:	bf00      	nop
 8003be4:	44020c00 	.word	0x44020c00
 8003be8:	44020800 	.word	0x44020800
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003bf6:	4bb5      	ldr	r3, [pc, #724]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c06:	49b1      	ldr	r1, [pc, #708]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003c0e:	e003      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003c18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d03c      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d81d      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c59 	.word	0x08003c59
 8003c48:	08003c67 	.word	0x08003c67
 8003c4c:	08003c7b 	.word	0x08003c7b
 8003c50:	08003c83 	.word	0x08003c83
 8003c54:	08003c83 	.word	0x08003c83
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c58:	4b9c      	ldr	r3, [pc, #624]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	4a9b      	ldr	r2, [pc, #620]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c64:	e00e      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fb65 	bl	800533c <RCCEx_PLL2_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c78:	e004      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c84:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c92:	f023 0207 	bic.w	r2, r3, #7
 8003c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9c:	498b      	ldr	r1, [pc, #556]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003caa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d03c      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d01f      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d819      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003cd8:	2b18      	cmp	r3, #24
 8003cda:	d01d      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003cdc:	2b18      	cmp	r3, #24
 8003cde:	d815      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d007      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ce8:	e010      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cea:	4b78      	ldr	r3, [pc, #480]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	4a77      	ldr	r2, [pc, #476]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003cf6:	e010      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f001 fb1c 	bl	800533c <RCCEx_PLL2_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003d0a:	e006      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d28:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4966      	ldr	r1, [pc, #408]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d40:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	d03e      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003d60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d6a:	d020      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d70:	d819      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d74:	d01d      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d78:	d815      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d007      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003d82:	e010      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d84:	4b51      	ldr	r3, [pc, #324]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	4a50      	ldr	r2, [pc, #320]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d8e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003d90:	e010      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d96:	3308      	adds	r3, #8
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 facf 	bl	800533c <RCCEx_PLL2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10c      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003dbc:	4b43      	ldr	r3, [pc, #268]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dc2:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dcc:	493f      	ldr	r1, [pc, #252]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003dda:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	2100      	movs	r1, #0
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d038      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e04:	d00e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0a:	d815      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e14:	d110      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e22:	e00e      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e28:	3308      	adds	r3, #8
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 fa86 	bl	800533c <RCCEx_PLL2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003e4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	491c      	ldr	r1, [pc, #112]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003e62:	e003      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	2100      	movs	r1, #0
 8003e76:	6039      	str	r1, [r7, #0]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d039      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e8e:	2b30      	cmp	r3, #48	@ 0x30
 8003e90:	d01e      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003e92:	2b30      	cmp	r3, #48	@ 0x30
 8003e94:	d815      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d007      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003e9e:	e010      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	4a09      	ldr	r2, [pc, #36]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eaa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003eac:	e011      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003eae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fa41 	bl	800533c <RCCEx_PLL2_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003ec0:	e007      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003eca:	bf00      	nop
 8003ecc:	44020c00 	.word	0x44020c00
        break;
 8003ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003eda:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ee0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003ef2:	e003      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ef8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003efc:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	37a8      	adds	r7, #168	@ 0xa8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0a:	bf00      	nop
 8003f0c:	44020c00 	.word	0x44020c00

08003f10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b08b      	sub	sp, #44	@ 0x2c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003f18:	4bae      	ldr	r3, [pc, #696]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003f22:	4bac      	ldr	r3, [pc, #688]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003f2c:	4ba9      	ldr	r3, [pc, #676]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f36:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003f38:	4ba6      	ldr	r3, [pc, #664]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f44:	4ba3      	ldr	r3, [pc, #652]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	fb02 f303 	mul.w	r3, r2, r3
 8003f54:	ee07 3a90 	vmov	s15, r3
 8003f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8126 	beq.w	80041b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d053      	beq.n	8004016 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d86f      	bhi.n	8004054 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d003      	beq.n	8003f82 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d02b      	beq.n	8003fd8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003f80:	e068      	b.n	8004054 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f82:	4b94      	ldr	r3, [pc, #592]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	08db      	lsrs	r3, r3, #3
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	4a92      	ldr	r2, [pc, #584]	@ (80041d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80041dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003fd6:	e068      	b.n	80040aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80041e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff4:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ff8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004010:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004014:	e049      	b.n	80040aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004020:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80041e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004032:	ed97 6a04 	vldr	s12, [r7, #16]
 8004036:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80041dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800403a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004052:	e02a      	b.n	80040aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004054:	4b5f      	ldr	r3, [pc, #380]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	08db      	lsrs	r3, r3, #3
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	4a5e      	ldr	r2, [pc, #376]	@ (80041d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	ee07 3a90 	vmov	s15, r3
 8004084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004088:	ed97 6a04 	vldr	s12, [r7, #16]
 800408c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80041dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800409c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80040a8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040aa:	4b4a      	ldr	r3, [pc, #296]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040b6:	d121      	bne.n	80040fc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80040b8:	4b46      	ldr	r3, [pc, #280]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040c4:	4b43      	ldr	r3, [pc, #268]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80040c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c8:	0a5b      	lsrs	r3, r3, #9
 80040ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80040d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040da:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80040de:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e006      	b.n	8004102 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004102:	4b34      	ldr	r3, [pc, #208]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800410e:	d121      	bne.n	8004154 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004110:	4b30      	ldr	r3, [pc, #192]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d017      	beq.n	800414c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800411c:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800411e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800412e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004132:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004136:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800413a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004142:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	e006      	b.n	800415a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	e002      	b.n	800415a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004166:	d121      	bne.n	80041ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004168:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004174:	4b17      	ldr	r3, [pc, #92]	@ (80041d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004178:	0e1b      	lsrs	r3, r3, #24
 800417a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800418a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800418e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80041a2:	e010      	b.n	80041c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
}
 80041aa:	e00c      	b.n	80041c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
}
 80041b2:	e008      	b.n	80041c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	372c      	adds	r7, #44	@ 0x2c
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	44020c00 	.word	0x44020c00
 80041d8:	03d09000 	.word	0x03d09000
 80041dc:	46000000 	.word	0x46000000
 80041e0:	4a742400 	.word	0x4a742400
 80041e4:	4bb71b00 	.word	0x4bb71b00

080041e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b08b      	sub	sp, #44	@ 0x2c
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80041f0:	4bae      	ldr	r3, [pc, #696]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80041fa:	4bac      	ldr	r3, [pc, #688]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004204:	4ba9      	ldr	r3, [pc, #676]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	0a1b      	lsrs	r3, r3, #8
 800420a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800420e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004210:	4ba6      	ldr	r3, [pc, #664]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800421c:	4ba3      	ldr	r3, [pc, #652]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	08db      	lsrs	r3, r3, #3
 8004222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	ee07 3a90 	vmov	s15, r3
 8004230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004234:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8126 	beq.w	800448c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d053      	beq.n	80042ee <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d86f      	bhi.n	800432c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d003      	beq.n	800425a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d02b      	beq.n	80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004258:	e068      	b.n	800432c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800425a:	4b94      	ldr	r3, [pc, #592]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	08db      	lsrs	r3, r3, #3
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	4a92      	ldr	r2, [pc, #584]	@ (80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004292:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800429a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80042ae:	e068      	b.n	8004382 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80042d0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80042d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80042ec:	e049      	b.n	8004382 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80042fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430a:	ed97 6a04 	vldr	s12, [r7, #16]
 800430e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800431e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800432a:	e02a      	b.n	8004382 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800432c:	4b5f      	ldr	r3, [pc, #380]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	08db      	lsrs	r3, r3, #3
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	4a5e      	ldr	r2, [pc, #376]	@ (80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004360:	ed97 6a04 	vldr	s12, [r7, #16]
 8004364:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004370:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004380:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004382:	4b4a      	ldr	r3, [pc, #296]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438e:	d121      	bne.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004390:	4b46      	ldr	r3, [pc, #280]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800439c:	4b43      	ldr	r3, [pc, #268]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	0a5b      	lsrs	r3, r3, #9
 80043a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80043ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043b2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80043b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e006      	b.n	80043da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e002      	b.n	80043da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043da:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043e6:	d121      	bne.n	800442c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80043e8:	4b30      	ldr	r3, [pc, #192]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d017      	beq.n	8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043f4:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800440a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800440e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e006      	b.n	8004432 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	e002      	b.n	8004432 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004432:	4b1e      	ldr	r3, [pc, #120]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800443e:	d121      	bne.n	8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004440:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d017      	beq.n	800447c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800444c:	4b17      	ldr	r3, [pc, #92]	@ (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	0e1b      	lsrs	r3, r3, #24
 8004452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800445e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004462:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004466:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800446a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004472:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800447a:	e010      	b.n	800449e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
}
 8004482:	e00c      	b.n	800449e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	e008      	b.n	800449e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
}
 800449e:	bf00      	nop
 80044a0:	372c      	adds	r7, #44	@ 0x2c
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	44020c00 	.word	0x44020c00
 80044b0:	03d09000 	.word	0x03d09000
 80044b4:	46000000 	.word	0x46000000
 80044b8:	4a742400 	.word	0x4a742400
 80044bc:	4bb71b00 	.word	0x4bb71b00

080044c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	@ 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80044ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044ce:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80044d2:	430b      	orrs	r3, r1
 80044d4:	d14b      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044d6:	4bc4      	ldr	r3, [pc, #784]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80044e2:	4bc1      	ldr	r3, [pc, #772]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80044e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d108      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f6:	d104      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80044f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fe:	f000 bf14 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004502:	4bb9      	ldr	r3, [pc, #740]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800450c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004510:	d108      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004518:	d104      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800451a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004520:	f000 bf03 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004524:	4bb0      	ldr	r3, [pc, #704]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004530:	d119      	bne.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004538:	d115      	bne.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800453a:	4bab      	ldr	r3, [pc, #684]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004546:	d30a      	bcc.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004548:	4ba7      	ldr	r3, [pc, #668]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004552:	4aa6      	ldr	r2, [pc, #664]	@ (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800455a:	f000 bee6 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004562:	f000 bee2 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456a:	f000 bede 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800456e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004572:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004576:	ea52 0301 	orrs.w	r3, r2, r1
 800457a:	f000 838e 	beq.w	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800457e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004582:	2a01      	cmp	r2, #1
 8004584:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004588:	f080 86cc 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800458c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004590:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004594:	ea52 0301 	orrs.w	r3, r2, r1
 8004598:	f000 82aa 	beq.w	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800459c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a0:	2a01      	cmp	r2, #1
 80045a2:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80045a6:	f080 86bd 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ae:	f1a3 0110 	sub.w	r1, r3, #16
 80045b2:	ea52 0301 	orrs.w	r3, r2, r1
 80045b6:	f000 8681 	beq.w	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80045ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045be:	2a01      	cmp	r2, #1
 80045c0:	f173 0310 	sbcs.w	r3, r3, #16
 80045c4:	f080 86ae 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045cc:	1f19      	subs	r1, r3, #4
 80045ce:	ea52 0301 	orrs.w	r3, r2, r1
 80045d2:	f000 84b1 	beq.w	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80045d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045da:	2a01      	cmp	r2, #1
 80045dc:	f173 0304 	sbcs.w	r3, r3, #4
 80045e0:	f080 86a0 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80045e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80045ec:	430b      	orrs	r3, r1
 80045ee:	f000 85aa 	beq.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80045f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f6:	497e      	ldr	r1, [pc, #504]	@ (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80045f8:	428a      	cmp	r2, r1
 80045fa:	f173 0300 	sbcs.w	r3, r3, #0
 80045fe:	f080 8691 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004606:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800460a:	430b      	orrs	r3, r1
 800460c:	f000 8532 	beq.w	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004614:	4977      	ldr	r1, [pc, #476]	@ (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8004616:	428a      	cmp	r2, r1
 8004618:	f173 0300 	sbcs.w	r3, r3, #0
 800461c:	f080 8682 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004624:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004628:	430b      	orrs	r3, r1
 800462a:	f000 84bc 	beq.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800462e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004632:	4971      	ldr	r1, [pc, #452]	@ (80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004634:	428a      	cmp	r2, r1
 8004636:	f173 0300 	sbcs.w	r3, r3, #0
 800463a:	f080 8673 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800463e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004642:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004646:	430b      	orrs	r3, r1
 8004648:	f000 85f2 	beq.w	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 800464c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004650:	496a      	ldr	r1, [pc, #424]	@ (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004652:	428a      	cmp	r2, r1
 8004654:	f173 0300 	sbcs.w	r3, r3, #0
 8004658:	f080 8664 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800465c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004660:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004664:	430b      	orrs	r3, r1
 8004666:	f000 81e5 	beq.w	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800466a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800466e:	4964      	ldr	r1, [pc, #400]	@ (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004670:	428a      	cmp	r2, r1
 8004672:	f173 0300 	sbcs.w	r3, r3, #0
 8004676:	f080 8655 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800467a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004682:	430b      	orrs	r3, r1
 8004684:	f000 83cc 	beq.w	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800468c:	495d      	ldr	r1, [pc, #372]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800468e:	428a      	cmp	r2, r1
 8004690:	f173 0300 	sbcs.w	r3, r3, #0
 8004694:	f080 8646 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80046a0:	430b      	orrs	r3, r1
 80046a2:	f000 8331 	beq.w	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80046a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046aa:	4957      	ldr	r1, [pc, #348]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80046ac:	428a      	cmp	r2, r1
 80046ae:	f173 0300 	sbcs.w	r3, r3, #0
 80046b2:	f080 8637 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ba:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80046be:	430b      	orrs	r3, r1
 80046c0:	f000 82bb 	beq.w	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80046c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c8:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80046cc:	f173 0300 	sbcs.w	r3, r3, #0
 80046d0:	f080 8628 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80046dc:	430b      	orrs	r3, r1
 80046de:	f000 826d 	beq.w	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80046e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80046ea:	428a      	cmp	r2, r1
 80046ec:	f173 0300 	sbcs.w	r3, r3, #0
 80046f0:	f080 8618 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80046f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80046fc:	430b      	orrs	r3, r1
 80046fe:	f000 821e 	beq.w	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004706:	f242 0101 	movw	r1, #8193	@ 0x2001
 800470a:	428a      	cmp	r2, r1
 800470c:	f173 0300 	sbcs.w	r3, r3, #0
 8004710:	f080 8608 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004718:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800471c:	430b      	orrs	r3, r1
 800471e:	f000 8137 	beq.w	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004726:	f241 0101 	movw	r1, #4097	@ 0x1001
 800472a:	428a      	cmp	r2, r1
 800472c:	f173 0300 	sbcs.w	r3, r3, #0
 8004730:	f080 85f8 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004738:	1f11      	subs	r1, r2, #4
 800473a:	430b      	orrs	r3, r1
 800473c:	f000 80d2 	beq.w	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004744:	2a05      	cmp	r2, #5
 8004746:	f173 0300 	sbcs.w	r3, r3, #0
 800474a:	f080 85eb 	bcs.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800474e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004752:	1e51      	subs	r1, r2, #1
 8004754:	430b      	orrs	r3, r1
 8004756:	d006      	beq.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800475c:	1e91      	subs	r1, r2, #2
 800475e:	430b      	orrs	r3, r1
 8004760:	d06c      	beq.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004762:	f000 bddf 	b.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004766:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fd7a 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 800477c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800477e:	f000 bdd4 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004782:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800478a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800478e:	d10a      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004796:	f107 030c 	add.w	r3, r7, #12
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fd24 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a4:	e048      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80047a6:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d10c      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d109      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	4a12      	ldr	r2, [pc, #72]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ca:	e035      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80047cc:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d8:	d11c      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d119      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e4:	e028      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80047e6:	bf00      	nop
 80047e8:	44020c00 	.word	0x44020c00
 80047ec:	016e3600 	.word	0x016e3600
 80047f0:	20000001 	.word	0x20000001
 80047f4:	10000001 	.word	0x10000001
 80047f8:	08000001 	.word	0x08000001
 80047fc:	04000001 	.word	0x04000001
 8004800:	00200001 	.word	0x00200001
 8004804:	00040001 	.word	0x00040001
 8004808:	00020001 	.word	0x00020001
 800480c:	03d09000 	.word	0x03d09000
 8004810:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004814:	4b9f      	ldr	r3, [pc, #636]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d106      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004824:	2b05      	cmp	r3, #5
 8004826:	d103      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004828:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004834:	f000 bd79 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004838:	f000 bd77 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800483c:	4b95      	ldr	r3, [pc, #596]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800483e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004846:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800484e:	f7fe fcf9 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004852:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004854:	f000 bd69 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004858:	4b8e      	ldr	r3, [pc, #568]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004864:	d10a      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	2b08      	cmp	r3, #8
 800486a:	d107      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fcb9 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487a:	e031      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800487c:	4b85      	ldr	r3, [pc, #532]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d10c      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488a:	2b18      	cmp	r3, #24
 800488c:	d109      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800488e:	4b81      	ldr	r3, [pc, #516]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	4a7f      	ldr	r2, [pc, #508]	@ (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a0:	e01e      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80048a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ae:	d105      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d102      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80048b6:	4b79      	ldr	r3, [pc, #484]	@ (8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ba:	e011      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80048bc:	4b75      	ldr	r3, [pc, #468]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d106      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	2b28      	cmp	r3, #40	@ 0x28
 80048ce:	d103      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80048d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048dc:	f000 bd25 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048e0:	f000 bd23 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80048e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80048ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048f6:	f7fe fca5 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 80048fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80048fc:	f000 bd15 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004900:	4b64      	ldr	r3, [pc, #400]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d107      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004914:	f107 030c 	add.w	r3, r7, #12
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fc65 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004922:	e033      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004924:	4b5b      	ldr	r3, [pc, #364]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b02      	cmp	r3, #2
 800492e:	d10c      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	2bc0      	cmp	r3, #192	@ 0xc0
 8004934:	d109      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004936:	4b57      	ldr	r3, [pc, #348]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	4a55      	ldr	r2, [pc, #340]	@ (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004948:	e020      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800494a:	4b52      	ldr	r3, [pc, #328]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004956:	d106      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800495e:	d102      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004960:	4b4e      	ldr	r3, [pc, #312]	@ (8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004964:	e012      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004966:	4b4b      	ldr	r3, [pc, #300]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d107      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800497a:	d103      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 800497c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004982:	e003      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004988:	f000 bccf 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800498c:	f000 bccd 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004990:	4b40      	ldr	r3, [pc, #256]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004996:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800499a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80049a2:	f7fe fc7b 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 80049a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80049a8:	f000 bcbf 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b2:	d108      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049b4:	f107 030c 	add.w	r3, r7, #12
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fc15 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049c2:	f000 bcb2 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80049c6:	4b33      	ldr	r3, [pc, #204]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d10d      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80049d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049d8:	d109      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049da:	4b2e      	ldr	r3, [pc, #184]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	08db      	lsrs	r3, r3, #3
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ec:	e020      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80049ee:	4b29      	ldr	r3, [pc, #164]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049fa:	d106      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a02:	d102      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004a04:	4b25      	ldr	r3, [pc, #148]	@ (8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a08:	e012      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004a0a:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d107      	bne.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a1e:	d103      	bne.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004a20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a2c:	f000 bc7d 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a30:	f000 bc7b 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004a34:	4b17      	ldr	r3, [pc, #92]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004a46:	f7fe fbe1 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8004a4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004a4c:	f000 bc6d 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d104      	bne.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fe faad 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8004a5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004a5c:	f000 bc65 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d108      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a66:	f107 030c 	add.w	r3, r7, #12
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fbbc 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a74:	f000 bc59 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a84:	d10e      	bne.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004a8c:	4b04      	ldr	r3, [pc, #16]	@ (8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a90:	e02c      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004a92:	bf00      	nop
 8004a94:	44020c00 	.word	0x44020c00
 8004a98:	03d09000 	.word	0x03d09000
 8004a9c:	003d0900 	.word	0x003d0900
 8004aa0:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004aa4:	4b95      	ldr	r3, [pc, #596]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d10c      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d109      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ab6:	4b91      	ldr	r3, [pc, #580]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	08db      	lsrs	r3, r3, #3
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	4a8f      	ldr	r2, [pc, #572]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac8:	e010      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004aca:	4b8c      	ldr	r3, [pc, #560]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	2b05      	cmp	r3, #5
 8004adc:	d102      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004ade:	4b89      	ldr	r3, [pc, #548]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae2:	e003      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ae8:	f000 bc1f 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004aec:	f000 bc1d 	b.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004af0:	4b82      	ldr	r3, [pc, #520]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004afc:	4b7f      	ldr	r3, [pc, #508]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d106      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b16:	e011      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004b18:	4b78      	ldr	r3, [pc, #480]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b26:	d106      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d103      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004b2e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004b3a:	e3f6      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b3c:	e3f5      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7fe fb78 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004b54:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b56:	e3e8      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b60:	f107 030c 	add.w	r3, r7, #12
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fb3f 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b6e:	e3dc      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004b70:	4b62      	ldr	r3, [pc, #392]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d10d      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b82:	d109      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b84:	4b5d      	ldr	r3, [pc, #372]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
 8004b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b96:	e010      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004b98:	4b58      	ldr	r3, [pc, #352]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bac:	d102      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004bae:	4b55      	ldr	r3, [pc, #340]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	e002      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bb8:	e3b7      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004bba:	e3b6      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bc2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bce:	f7fe fb39 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004bd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004bd4:	e3a9      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bdc:	d107      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bde:	f107 030c 	add.w	r3, r7, #12
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fb00 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bec:	e39d      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004bee:	4b43      	ldr	r3, [pc, #268]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d10d      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c00:	d109      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c02:	4b3e      	ldr	r3, [pc, #248]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c14:	e010      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004c16:	4b39      	ldr	r3, [pc, #228]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c22:	d106      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004c2c:	4b35      	ldr	r3, [pc, #212]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c36:	e378      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c38:	e377      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004c3a:	4b30      	ldr	r3, [pc, #192]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c40:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7fe fafa 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004c50:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c52:	e36a      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c5c:	f107 030c 	add.w	r3, r7, #12
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fac1 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c6a:	e35e      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004c6c:	4b23      	ldr	r3, [pc, #140]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d10d      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c7e:	d109      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c80:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c92:	e34a      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c98:	e347      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004c9a:	4b18      	ldr	r3, [pc, #96]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ca0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004cac:	f7fe faf6 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8004cb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004cb2:	e33a      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cba:	d107      	bne.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cbc:	f107 030c 	add.w	r3, r7, #12
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fa91 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cca:	e32e      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d10d      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ce0:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	08db      	lsrs	r3, r3, #3
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	4a05      	ldr	r2, [pc, #20]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cf2:	e31a      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cf8:	e317      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004cfa:	bf00      	nop
 8004cfc:	44020c00 	.word	0x44020c00
 8004d00:	03d09000 	.word	0x03d09000
 8004d04:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004d08:	4b9b      	ldr	r3, [pc, #620]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d0e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d16:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d1a:	d044      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d22:	d879      	bhi.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d2a:	d02d      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d32:	d871      	bhi.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d3a:	d017      	beq.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d42:	d869      	bhi.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d50:	d004      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004d52:	e061      	b.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004d54:	f7fe faa2 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8004d58:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004d5a:	e060      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d5c:	f107 030c 	add.w	r3, r7, #12
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fa41 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d6a:	e058      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d6c:	4b82      	ldr	r3, [pc, #520]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d103      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d80:	e04d      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d86:	e04a      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004d88:	4b7b      	ldr	r3, [pc, #492]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d96:	d103      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004d98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d9e:	e03e      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004da4:	e03b      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004da6:	4b74      	ldr	r3, [pc, #464]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004db2:	4b71      	ldr	r3, [pc, #452]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	08db      	lsrs	r3, r3, #3
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	4a6b      	ldr	r2, [pc, #428]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dd6:	e01e      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dd8:	4b67      	ldr	r3, [pc, #412]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de4:	d106      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dec:	d102      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004dee:	4b64      	ldr	r3, [pc, #400]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df2:	e010      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004df4:	4b60      	ldr	r3, [pc, #384]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e00:	d106      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e08:	d102      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e0e:	e002      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004e14:	e003      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004e16:	e002      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e1c:	bf00      	nop
          }
        }
        break;
 8004e1e:	e284      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004e20:	4b55      	ldr	r3, [pc, #340]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e26:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e32:	d044      	beq.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e3a:	d879      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e42:	d02d      	beq.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e4a:	d871      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e52:	d017      	beq.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e5a:	d869      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e68:	d004      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004e6a:	e061      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f7fe f9ea 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004e70:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004e72:	e060      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff f9b5 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e82:	e058      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e84:	4b3c      	ldr	r3, [pc, #240]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e98:	e04d      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e9e:	e04a      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004ea0:	4b35      	ldr	r3, [pc, #212]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eae:	d103      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004eb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004eb6:	e03e      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ebc:	e03b      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ec8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004eca:	4b2b      	ldr	r3, [pc, #172]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004edc:	4b26      	ldr	r3, [pc, #152]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	4a25      	ldr	r2, [pc, #148]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eee:	e01e      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ef0:	4b21      	ldr	r3, [pc, #132]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004efc:	d106      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f04:	d102      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004f06:	4b1e      	ldr	r3, [pc, #120]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f0a:	e010      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f18:	d106      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f20:	d102      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004f22:	4b18      	ldr	r3, [pc, #96]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f26:	e002      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004f2c:	e003      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004f2e:	e002      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004f34:	bf00      	nop
          }
        }
        break;
 8004f36:	e1f8      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004f38:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004f44:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f50:	d105      	bne.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004f5c:	e1e5      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f64:	d110      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f66:	f107 0318 	add.w	r3, r7, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe ffd0 	bl	8003f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f74:	e1d9      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f76:	bf00      	nop
 8004f78:	44020c00 	.word	0x44020c00
 8004f7c:	03d09000 	.word	0x03d09000
 8004f80:	003d0900 	.word	0x003d0900
 8004f84:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f90:	f107 030c 	add.w	r3, r7, #12
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff f927 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f9e:	e1c4      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fa4:	e1c1      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004fa6:	4b9d      	ldr	r3, [pc, #628]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d859      	bhi.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fd5 	.word	0x08004fd5
 8004fc4:	08004fe5 	.word	0x08004fe5
 8004fc8:	0800506d 	.word	0x0800506d
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffb 	.word	0x08004ffb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fd4:	f107 0318 	add.w	r3, r7, #24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe ff99 	bl	8003f10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fe2:	e046      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff f8fd 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ff2:	e03e      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004ff4:	4b8a      	ldr	r3, [pc, #552]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ff8:	e03b      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ffa:	4b88      	ldr	r3, [pc, #544]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005000:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005006:	4b85      	ldr	r3, [pc, #532]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d10c      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005018:	4b80      	ldr	r3, [pc, #512]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	08db      	lsrs	r3, r3, #3
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	4a80      	ldr	r2, [pc, #512]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
 8005028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502a:	e01e      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800502c:	4b7b      	ldr	r3, [pc, #492]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005038:	d106      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005040:	d102      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005042:	4b79      	ldr	r3, [pc, #484]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005046:	e010      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005048:	4b74      	ldr	r3, [pc, #464]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005054:	d106      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800505c:	d102      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800505e:	4b73      	ldr	r3, [pc, #460]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005062:	e002      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800506a:	e002      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005070:	bf00      	nop
          }
        }
        break;
 8005072:	e15a      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005074:	4b69      	ldr	r3, [pc, #420]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800507a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800507e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	2b20      	cmp	r3, #32
 8005084:	d022      	beq.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	2b20      	cmp	r3, #32
 800508a:	d858      	bhi.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	2b18      	cmp	r3, #24
 8005090:	d019      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	2b18      	cmp	r3, #24
 8005096:	d852      	bhi.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d008      	beq.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80050a4:	e04b      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050a6:	f107 0318 	add.w	r3, r7, #24
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe ff30 	bl	8003f10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050b4:	e046      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b6:	f107 030c 	add.w	r3, r7, #12
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff f894 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050c4:	e03e      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80050c6:	4b56      	ldr	r3, [pc, #344]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80050c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050ca:	e03b      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050cc:	4b53      	ldr	r3, [pc, #332]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050d2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050d8:	4b50      	ldr	r3, [pc, #320]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d10c      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050ea:	4b4c      	ldr	r3, [pc, #304]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	08db      	lsrs	r3, r3, #3
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fc:	e01e      	b.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050fe:	4b47      	ldr	r3, [pc, #284]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800510a:	d106      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005112:	d102      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005114:	4b44      	ldr	r3, [pc, #272]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005118:	e010      	b.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800511a:	4b40      	ldr	r3, [pc, #256]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005126:	d106      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512e:	d102      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005130:	4b3e      	ldr	r3, [pc, #248]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005134:	e002      	b.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800513a:	e003      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800513c:	e002      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005142:	bf00      	nop
          }
        }
        break;
 8005144:	e0f1      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005146:	4b35      	ldr	r3, [pc, #212]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800514c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005158:	d023      	beq.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005160:	d858      	bhi.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	2bc0      	cmp	r3, #192	@ 0xc0
 8005166:	d019      	beq.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516a:	2bc0      	cmp	r3, #192	@ 0xc0
 800516c:	d852      	bhi.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800516e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005176:	2b40      	cmp	r3, #64	@ 0x40
 8005178:	d008      	beq.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800517a:	e04b      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800517c:	f107 0318 	add.w	r3, r7, #24
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fec5 	bl	8003f10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800518a:	e046      	b.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff f829 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800519a:	e03e      	b.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800519c:	4b20      	ldr	r3, [pc, #128]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051a0:	e03b      	b.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051a2:	4b1e      	ldr	r3, [pc, #120]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051ae:	4b1b      	ldr	r3, [pc, #108]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051c0:	4b16      	ldr	r3, [pc, #88]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	08db      	lsrs	r3, r3, #3
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	4a16      	ldr	r2, [pc, #88]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d2:	e01e      	b.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051d4:	4b11      	ldr	r3, [pc, #68]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e0:	d106      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e8:	d102      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80051ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ee:	e010      	b.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051f0:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051fc:	d106      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005204:	d102      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520a:	e002      	b.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005210:	e003      	b.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005212:	e002      	b.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005218:	bf00      	nop
          }
        }
        break;
 800521a:	e086      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800521c:	44020c00 	.word	0x44020c00
 8005220:	00bb8000 	.word	0x00bb8000
 8005224:	03d09000 	.word	0x03d09000
 8005228:	003d0900 	.word	0x003d0900
 800522c:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005230:	4b40      	ldr	r3, [pc, #256]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005236:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800523a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800523c:	4b3d      	ldr	r3, [pc, #244]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005248:	d105      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005250:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005254:	e031      	b.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005256:	4b37      	ldr	r3, [pc, #220]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005262:	d10a      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	2b10      	cmp	r3, #16
 8005268:	d107      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800526a:	f107 0318 	add.w	r3, r7, #24
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fe4e 	bl	8003f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005278:	e01f      	b.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800527a:	4b2e      	ldr	r3, [pc, #184]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800527c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d106      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	2b20      	cmp	r3, #32
 800528c:	d103      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800528e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005294:	e011      	b.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005296:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800529c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052a4:	d106      	bne.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	2b30      	cmp	r3, #48	@ 0x30
 80052aa:	d103      	bne.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80052ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80052b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052b2:	e002      	b.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80052b8:	e037      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80052ba:	e036      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80052bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d107      	bne.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052ce:	f107 0318 	add.w	r3, r7, #24
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe fe1c 	bl	8003f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80052dc:	e025      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ea:	d10a      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d107      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052f2:	f107 030c 	add.w	r3, r7, #12
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe ff76 	bl	80041e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005300:	e00f      	b.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800530a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800530e:	d105      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	2b30      	cmp	r3, #48	@ 0x30
 8005314:	d102      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8005316:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800531a:	e002      	b.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8005320:	e003      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005322:	e002      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005328:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800532c:	4618      	mov	r0, r3
 800532e:	3730      	adds	r7, #48	@ 0x30
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	44020c00 	.word	0x44020c00
 8005338:	02dc6c00 	.word	0x02dc6c00

0800533c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005344:	4b48      	ldr	r3, [pc, #288]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a47      	ldr	r2, [pc, #284]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 800534a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800534e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005350:	f7fb fe34 	bl	8000fbc <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005356:	e008      	b.n	800536a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005358:	f7fb fe30 	bl	8000fbc <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e07a      	b.n	8005460 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800536a:	4b3f      	ldr	r3, [pc, #252]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005376:	4b3c      	ldr	r3, [pc, #240]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6811      	ldr	r1, [r2, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6852      	ldr	r2, [r2, #4]
 800538a:	0212      	lsls	r2, r2, #8
 800538c:	430a      	orrs	r2, r1
 800538e:	4936      	ldr	r1, [pc, #216]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005390:	4313      	orrs	r3, r2
 8005392:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	3b01      	subs	r3, #1
 800539a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	025b      	lsls	r3, r3, #9
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	3b01      	subs	r3, #1
 80053be:	061b      	lsls	r3, r3, #24
 80053c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053c4:	4928      	ldr	r1, [pc, #160]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80053ca:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	f023 020c 	bic.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	4924      	ldr	r1, [pc, #144]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80053dc:	4b22      	ldr	r3, [pc, #136]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	f023 0220 	bic.w	r2, r3, #32
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	491f      	ldr	r1, [pc, #124]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80053ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	491c      	ldr	r1, [pc, #112]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80053fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005408:	4b17      	ldr	r3, [pc, #92]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005410:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6a12      	ldr	r2, [r2, #32]
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	4913      	ldr	r1, [pc, #76]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005420:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	4a10      	ldr	r2, [pc, #64]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005426:	f043 0310 	orr.w	r3, r3, #16
 800542a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800542c:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0d      	ldr	r2, [pc, #52]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005432:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005436:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005438:	f7fb fdc0 	bl	8000fbc <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800543e:	e008      	b.n	8005452 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005440:	f7fb fdbc 	bl	8000fbc <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e006      	b.n	8005460 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005452:	4b05      	ldr	r3, [pc, #20]	@ (8005468 <RCCEx_PLL2_Config+0x12c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0

}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	44020c00 	.word	0x44020c00

0800546c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e042      	b.n	8005504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fb fb37 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2224      	movs	r2, #36	@ 0x24
 800549a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fcb4 	bl	8005e24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb33 	bl	8005b28 <UART_SetConfig>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e01b      	b.n	8005504 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fd33 	bl	8005f68 <UART_CheckIdleState>
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b0ae      	sub	sp, #184	@ 0xb8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005536:	f640 030f 	movw	r3, #2063	@ 0x80f
 800553a:	4013      	ands	r3, r2
 800553c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11b      	bne.n	8005580 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d015      	beq.n	8005580 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 82ac 	beq.w	8005ace <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
      }
      return;
 800557e:	e2a6      	b.n	8005ace <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80fd 	beq.w	8005784 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800558a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800558e:	4b7a      	ldr	r3, [pc, #488]	@ (8005778 <HAL_UART_IRQHandler+0x26c>)
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800559a:	4b78      	ldr	r3, [pc, #480]	@ (800577c <HAL_UART_IRQHandler+0x270>)
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80f0 	beq.w	8005784 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <HAL_UART_IRQHandler+0xc8>
 80055b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80055b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2201      	movs	r2, #1
 80055c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_UART_IRQHandler+0xf8>
 80055e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2202      	movs	r2, #2
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_UART_IRQHandler+0x128>
 8005610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2204      	movs	r2, #4
 8005622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562a:	f043 0202 	orr.w	r2, r3, #2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d017      	beq.n	8005670 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800564c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005650:	4b49      	ldr	r3, [pc, #292]	@ (8005778 <HAL_UART_IRQHandler+0x26c>)
 8005652:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2208      	movs	r2, #8
 800565e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	f043 0208 	orr.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <HAL_UART_IRQHandler+0x196>
 800567c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005680:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005698:	f043 0220 	orr.w	r2, r3, #32
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8212 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d013      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b40      	cmp	r3, #64	@ 0x40
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02e      	beq.n	8005764 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fd45 	bl	8006196 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005716:	2b40      	cmp	r3, #64	@ 0x40
 8005718:	d120      	bne.n	800575c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800572a:	4a15      	ldr	r2, [pc, #84]	@ (8005780 <HAL_UART_IRQHandler+0x274>)
 800572c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005734:	4618      	mov	r0, r3
 8005736:	f7fb fe59 	bl	80013ec <HAL_DMA_Abort_IT>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d019      	beq.n	8005774 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800574e:	4610      	mov	r0, r2
 8005750:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005752:	e00f      	b.n	8005774 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f9d1 	bl	8005afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575a:	e00b      	b.n	8005774 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f9cd 	bl	8005afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005762:	e007      	b.n	8005774 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9c9 	bl	8005afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005772:	e1ae      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005774:	bf00      	nop
    return;
 8005776:	e1ac      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5c6>
 8005778:	10000001 	.word	0x10000001
 800577c:	04000120 	.word	0x04000120
 8005780:	08006263 	.word	0x08006263

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005788:	2b01      	cmp	r3, #1
 800578a:	f040 8142 	bne.w	8005a12 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800578e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 813b 	beq.w	8005a12 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800579c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8134 	beq.w	8005a12 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2210      	movs	r2, #16
 80057b0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057bc:	2b40      	cmp	r3, #64	@ 0x40
 80057be:	f040 80aa 	bne.w	8005916 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057cc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80057d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8084 	beq.w	80058e2 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057e0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d27c      	bcs.n	80058e2 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80057ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fa:	2b81      	cmp	r3, #129	@ 0x81
 80057fc:	d060      	beq.n	80058c0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	677b      	str	r3, [r7, #116]	@ 0x74
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800580c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800580e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005824:	67fa      	str	r2, [r7, #124]	@ 0x7c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005828:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005832:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e2      	bne.n	80057fe <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005848:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3308      	adds	r3, #8
 8005858:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800585c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800585e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005862:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800586a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e3      	bne.n	8005838 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800588c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800588e:	f023 0310 	bic.w	r3, r3, #16
 8005892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e4      	bne.n	800587e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fb fd1a 	bl	80012f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f918 	bl	8005b10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058e0:	e0f9      	b.n	8005ad6 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058e8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80058ec:	429a      	cmp	r2, r3
 80058ee:	f040 80f2 	bne.w	8005ad6 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fa:	2b81      	cmp	r3, #129	@ 0x81
 80058fc:	f040 80eb 	bne.w	8005ad6 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8fe 	bl	8005b10 <HAL_UARTEx_RxEventCallback>
      return;
 8005914:	e0df      	b.n	8005ad6 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005922:	b29b      	uxth	r3, r3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80d1 	beq.w	8005ada <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8005938:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80cc 	beq.w	8005ada <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005964:	647b      	str	r3, [r7, #68]	@ 0x44
 8005966:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800596a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e4      	bne.n	8005942 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	623b      	str	r3, [r7, #32]
   return(result);
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80059a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80059a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e1      	bne.n	8005978 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f023 0310 	bic.w	r3, r3, #16
 80059dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	69b9      	ldr	r1, [r7, #24]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	617b      	str	r3, [r7, #20]
   return(result);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e4      	bne.n	80059c8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2202      	movs	r2, #2
 8005a02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a04:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f880 	bl	8005b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a10:	e063      	b.n	8005ada <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00e      	beq.n	8005a3c <HAL_UART_IRQHandler+0x530>
 8005a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fc51 	bl	80062dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a3a:	e051      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d014      	beq.n	8005a72 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d03a      	beq.n	8005ade <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
    }
    return;
 8005a70:	e035      	b.n	8005ade <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_UART_IRQHandler+0x586>
 8005a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fbfb 	bl	8006286 <UART_EndTransmit_IT>
    return;
 8005a90:	e026      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x5a6>
 8005a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005aa2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fc2a 	bl	8006304 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ab0:	e016      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d010      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
 8005abe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da0c      	bge.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fc12 	bl	80062f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005acc:	e008      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005ace:	bf00      	nop
 8005ad0:	e006      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005ad2:	bf00      	nop
 8005ad4:	e004      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005ad6:	bf00      	nop
 8005ad8:	e002      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005ade:	bf00      	nop
  }
}
 8005ae0:	37b8      	adds	r7, #184	@ 0xb8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop

08005ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b2c:	b094      	sub	sp, #80	@ 0x50
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	498a      	ldr	r1, [pc, #552]	@ (8005d80 <UART_SetConfig+0x258>)
 8005b58:	4019      	ands	r1, r3
 8005b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	ea40 0301 	orr.w	r3, r0, r1
 8005b7a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b7f      	ldr	r3, [pc, #508]	@ (8005d84 <UART_SetConfig+0x25c>)
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d004      	beq.n	8005b96 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	6a1a      	ldr	r2, [r3, #32]
 8005b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b92:	4313      	orrs	r3, r2
 8005b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005ba0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb4:	f023 000f 	bic.w	r0, r3, #15
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	ea40 0301 	orr.w	r3, r0, r1
 8005bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b6f      	ldr	r3, [pc, #444]	@ (8005d88 <UART_SetConfig+0x260>)
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d102      	bne.n	8005bd6 <UART_SetConfig+0xae>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd4:	e01a      	b.n	8005c0c <UART_SetConfig+0xe4>
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b6c      	ldr	r3, [pc, #432]	@ (8005d8c <UART_SetConfig+0x264>)
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d102      	bne.n	8005be6 <UART_SetConfig+0xbe>
 8005be0:	2302      	movs	r3, #2
 8005be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be4:	e012      	b.n	8005c0c <UART_SetConfig+0xe4>
 8005be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b69      	ldr	r3, [pc, #420]	@ (8005d90 <UART_SetConfig+0x268>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d102      	bne.n	8005bf6 <UART_SetConfig+0xce>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf4:	e00a      	b.n	8005c0c <UART_SetConfig+0xe4>
 8005bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b62      	ldr	r3, [pc, #392]	@ (8005d84 <UART_SetConfig+0x25c>)
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d103      	bne.n	8005c08 <UART_SetConfig+0xe0>
 8005c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c06:	e001      	b.n	8005c0c <UART_SetConfig+0xe4>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b5c      	ldr	r3, [pc, #368]	@ (8005d84 <UART_SetConfig+0x25c>)
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d171      	bne.n	8005cfa <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c18:	2200      	movs	r2, #0
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005c22:	f7fe fc4d 	bl	80044c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c26:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80e2 	beq.w	8005df4 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	4a57      	ldr	r2, [pc, #348]	@ (8005d94 <UART_SetConfig+0x26c>)
 8005c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c42:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d305      	bcc.n	8005c60 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d903      	bls.n	8005c68 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005c66:	e0c5      	b.n	8005df4 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	61fa      	str	r2, [r7, #28]
 8005c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	4a47      	ldr	r2, [pc, #284]	@ (8005d94 <UART_SetConfig+0x26c>)
 8005c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	617a      	str	r2, [r7, #20]
 8005c82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c8a:	f7fa fb05 	bl	8000298 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4610      	mov	r0, r2
 8005c94:	4619      	mov	r1, r3
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	020b      	lsls	r3, r1, #8
 8005ca0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ca4:	0202      	lsls	r2, r0, #8
 8005ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca8:	6849      	ldr	r1, [r1, #4]
 8005caa:	0849      	lsrs	r1, r1, #1
 8005cac:	2000      	movs	r0, #0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	eb12 0804 	adds.w	r8, r2, r4
 8005cb6:	eb43 0905 	adc.w	r9, r3, r5
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	60fa      	str	r2, [r7, #12]
 8005cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4649      	mov	r1, r9
 8005ccc:	f7fa fae4 	bl	8000298 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cde:	d308      	bcc.n	8005cf2 <UART_SetConfig+0x1ca>
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ce6:	d204      	bcs.n	8005cf2 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	e080      	b.n	8005df4 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005cf8:	e07c      	b.n	8005df4 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d02:	d149      	bne.n	8005d98 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d06:	2200      	movs	r2, #0
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d10:	f7fe fbd6 	bl	80044c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d14:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d06b      	beq.n	8005df4 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	4a1c      	ldr	r2, [pc, #112]	@ (8005d94 <UART_SetConfig+0x26c>)
 8005d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d26:	461a      	mov	r2, r3
 8005d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d2e:	005a      	lsls	r2, r3, #1
 8005d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	441a      	add	r2, r3
 8005d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b0f      	cmp	r3, #15
 8005d46:	d916      	bls.n	8005d76 <UART_SetConfig+0x24e>
 8005d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4e:	d212      	bcs.n	8005d76 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f023 030f 	bic.w	r3, r3, #15
 8005d58:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	e03e      	b.n	8005df4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005d7c:	e03a      	b.n	8005df4 <UART_SetConfig+0x2cc>
 8005d7e:	bf00      	nop
 8005d80:	cfff69f3 	.word	0xcfff69f3
 8005d84:	44002400 	.word	0x44002400
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	40004400 	.word	0x40004400
 8005d90:	40004800 	.word	0x40004800
 8005d94:	080065b8 	.word	0x080065b8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	469a      	mov	sl, r3
 8005d9e:	4693      	mov	fp, r2
 8005da0:	4650      	mov	r0, sl
 8005da2:	4659      	mov	r1, fp
 8005da4:	f7fe fb8c 	bl	80044c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005da8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d021      	beq.n	8005df4 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e20 <UART_SetConfig+0x2f8>)
 8005db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	441a      	add	r2, r3
 8005dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d909      	bls.n	8005dee <UART_SetConfig+0x2c6>
 8005dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de0:	d205      	bcs.n	8005dee <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60da      	str	r2, [r3, #12]
 8005dec:	e002      	b.n	8005df4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	2201      	movs	r2, #1
 8005df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	2200      	movs	r2, #0
 8005e08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3750      	adds	r7, #80	@ 0x50
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e1e:	bf00      	nop
 8005e20:	080065b8 	.word	0x080065b8

08005e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01a      	beq.n	8005f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f22:	d10a      	bne.n	8005f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b098      	sub	sp, #96	@ 0x60
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f78:	f7fb f820 	bl	8000fbc <HAL_GetTick>
 8005f7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d12f      	bne.n	8005fec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f94:	2200      	movs	r2, #0
 8005f96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f88e 	bl	80060bc <UART_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d022      	beq.n	8005fec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e6      	bne.n	8005fa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e063      	b.n	80060b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d149      	bne.n	800608e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ffa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006002:	2200      	movs	r2, #0
 8006004:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f857 	bl	80060bc <UART_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d03c      	beq.n	800608e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	623b      	str	r3, [r7, #32]
   return(result);
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006032:	633b      	str	r3, [r7, #48]	@ 0x30
 8006034:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	60fb      	str	r3, [r7, #12]
   return(result);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006066:	61fa      	str	r2, [r7, #28]
 8006068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	69b9      	ldr	r1, [r7, #24]
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	617b      	str	r3, [r7, #20]
   return(result);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e012      	b.n	80060b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3758      	adds	r7, #88	@ 0x58
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060cc:	e04f      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d04b      	beq.n	800616e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d6:	f7fa ff71 	bl	8000fbc <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <UART_WaitOnFlagUntilTimeout+0x30>
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e04e      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d037      	beq.n	800616e <UART_WaitOnFlagUntilTimeout+0xb2>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b80      	cmp	r3, #128	@ 0x80
 8006102:	d034      	beq.n	800616e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b40      	cmp	r3, #64	@ 0x40
 8006108:	d031      	beq.n	800616e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b08      	cmp	r3, #8
 8006116:	d110      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2208      	movs	r2, #8
 800611e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f838 	bl	8006196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2208      	movs	r2, #8
 800612a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e029      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006148:	d111      	bne.n	800616e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f81e 	bl	8006196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e00f      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4013      	ands	r3, r2
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	bf0c      	ite	eq
 800617e:	2301      	moveq	r3, #1
 8006180:	2300      	movne	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	429a      	cmp	r2, r3
 800618a:	d0a0      	beq.n	80060ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006196:	b480      	push	{r7}
 8006198:	b095      	sub	sp, #84	@ 0x54
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80061be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e6      	bne.n	800619e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3308      	adds	r3, #8
 80061d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e3      	bne.n	80061d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d118      	bne.n	8006242 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	60bb      	str	r3, [r7, #8]
   return(result);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f023 0310 	bic.w	r3, r3, #16
 8006224:	647b      	str	r3, [r7, #68]	@ 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6979      	ldr	r1, [r7, #20]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	613b      	str	r3, [r7, #16]
   return(result);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e6      	bne.n	8006210 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006256:	bf00      	nop
 8006258:	3754      	adds	r7, #84	@ 0x54
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fc3f 	bl	8005afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b088      	sub	sp, #32
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	60bb      	str	r3, [r7, #8]
   return(result);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6979      	ldr	r1, [r7, #20]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e6      	bne.n	800628e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fc0a 	bl	8005ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d4:	bf00      	nop
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UARTEx_DisableFifoMode+0x16>
 800632a:	2302      	movs	r3, #2
 800632c:	e027      	b.n	800637e <HAL_UARTEx_DisableFifoMode+0x66>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	@ 0x24
 800633a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800635c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800639e:	2302      	movs	r3, #2
 80063a0:	e02d      	b.n	80063fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2224      	movs	r2, #36	@ 0x24
 80063ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f850 	bl	8006484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800641a:	2302      	movs	r3, #2
 800641c:	e02d      	b.n	800647a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2224      	movs	r2, #36	@ 0x24
 800642a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f812 	bl	8006484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006490:	2b00      	cmp	r3, #0
 8006492:	d108      	bne.n	80064a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064a4:	e031      	b.n	800650a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064a6:	2308      	movs	r3, #8
 80064a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064aa:	2308      	movs	r3, #8
 80064ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	0e5b      	lsrs	r3, r3, #25
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	0f5b      	lsrs	r3, r3, #29
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	7b3a      	ldrb	r2, [r7, #12]
 80064d2:	4911      	ldr	r1, [pc, #68]	@ (8006518 <UARTEx_SetNbDataToProcess+0x94>)
 80064d4:	5c8a      	ldrb	r2, [r1, r2]
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064da:	7b3a      	ldrb	r2, [r7, #12]
 80064dc:	490f      	ldr	r1, [pc, #60]	@ (800651c <UARTEx_SetNbDataToProcess+0x98>)
 80064de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	7b7a      	ldrb	r2, [r7, #13]
 80064f0:	4909      	ldr	r1, [pc, #36]	@ (8006518 <UARTEx_SetNbDataToProcess+0x94>)
 80064f2:	5c8a      	ldrb	r2, [r1, r2]
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064f8:	7b7a      	ldrb	r2, [r7, #13]
 80064fa:	4908      	ldr	r1, [pc, #32]	@ (800651c <UARTEx_SetNbDataToProcess+0x98>)
 80064fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	080065d0 	.word	0x080065d0
 800651c:	080065d8 	.word	0x080065d8

08006520 <memset>:
 8006520:	4402      	add	r2, r0
 8006522:	4603      	mov	r3, r0
 8006524:	4293      	cmp	r3, r2
 8006526:	d100      	bne.n	800652a <memset+0xa>
 8006528:	4770      	bx	lr
 800652a:	f803 1b01 	strb.w	r1, [r3], #1
 800652e:	e7f9      	b.n	8006524 <memset+0x4>

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4d0d      	ldr	r5, [pc, #52]	@ (8006568 <__libc_init_array+0x38>)
 8006534:	2600      	movs	r6, #0
 8006536:	4c0d      	ldr	r4, [pc, #52]	@ (800656c <__libc_init_array+0x3c>)
 8006538:	1b64      	subs	r4, r4, r5
 800653a:	10a4      	asrs	r4, r4, #2
 800653c:	42a6      	cmp	r6, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	4d0b      	ldr	r5, [pc, #44]	@ (8006570 <__libc_init_array+0x40>)
 8006542:	2600      	movs	r6, #0
 8006544:	4c0b      	ldr	r4, [pc, #44]	@ (8006574 <__libc_init_array+0x44>)
 8006546:	f000 f817 	bl	8006578 <_init>
 800654a:	1b64      	subs	r4, r4, r5
 800654c:	10a4      	asrs	r4, r4, #2
 800654e:	42a6      	cmp	r6, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f855 3b04 	ldr.w	r3, [r5], #4
 8006558:	3601      	adds	r6, #1
 800655a:	4798      	blx	r3
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006562:	3601      	adds	r6, #1
 8006564:	4798      	blx	r3
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	080065e8 	.word	0x080065e8
 800656c:	080065e8 	.word	0x080065e8
 8006570:	080065e8 	.word	0x080065e8
 8006574:	080065ec 	.word	0x080065ec

08006578 <_init>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr

08006584 <_fini>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr
