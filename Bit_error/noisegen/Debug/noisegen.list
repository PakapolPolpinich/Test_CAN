
noisegen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080058d0  080058d0  000068d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005910  08005910  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005910  08005910  00006910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005918  08005918  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005918  08005918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800591c  0800591c  0000691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005920  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  0800592c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800592c  000070c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8fe  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dba  00000000  00000000  00016940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00018700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a7  00000000  00000000  000190f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f197  00000000  00000000  0001989f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e02b  00000000  00000000  00038a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c12df  00000000  00000000  00046a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107d40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002864  00000000  00000000  00107d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080058b8 	.word	0x080058b8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080058b8 	.word	0x080058b8

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	@ (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	@ (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	@ (800063c <__NVIC_SetPriority+0x50>)
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Timer2_init>:

#include "Timer.h"

uint16_t count = 0;

void Timer2_init(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <Timer2_init+0x58>)
 8000646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <Timer2_init+0x58>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c


	 TIM2->PSC = 199;
 8000654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000658:	22c7      	movs	r2, #199	@ 0xc7
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
	 TIM2->ARR = 59;
 800065c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000660:	223b      	movs	r2, #59	@ 0x3b
 8000662:	62da      	str	r2, [r3, #44]	@ 0x2c

	 // Enable update interrupt
	 TIM2->DIER |= TIM_DIER_UIE;
 8000664:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	60d3      	str	r3, [r2, #12]

	 // Enable TIM16
	// TIM2->CR1 |= TIM_CR1_CEN;
	 TIM2->CR1 &= ~TIM_CR1_CEN;
 8000674:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]

	 NVIC_EnableIRQ(TIM2_IRQn);
 8000684:	202d      	movs	r0, #45	@ 0x2d
 8000686:	f7ff ff93 	bl	80005b0 <__NVIC_EnableIRQ>
	 NVIC_SetPriority(TIM2_IRQn,1);
 800068a:	2101      	movs	r1, #1
 800068c:	202d      	movs	r0, #45	@ 0x2d
 800068e:	f7ff ffad 	bl	80005ec <__NVIC_SetPriority>

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	44020c00 	.word	0x44020c00

0800069c <Timer3_init>:

void Timer3_init(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <Timer3_init+0x4c>)
 80006a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80006a6:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <Timer3_init+0x4c>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
//	 TIM3->ARR = 39;

//	TIM3->PSC = 0;
//	TIM3->ARR = 260;

	TIM3->PSC = 0;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <Timer3_init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 350;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <Timer3_init+0x50>)
 80006b8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80006bc:	62da      	str	r2, [r3, #44]	@ 0x2c


	 // Enable update interrupt
	 TIM3->DIER |= TIM_DIER_UIE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <Timer3_init+0x50>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <Timer3_init+0x50>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	60d3      	str	r3, [r2, #12]

	 // Enable TIM16
	// TIM2->CR1 |= TIM_CR1_CEN;
	 TIM3->CR1 &= ~TIM_CR1_CEN;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <Timer3_init+0x50>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <Timer3_init+0x50>)
 80006d0:	f023 0301 	bic.w	r3, r3, #1
 80006d4:	6013      	str	r3, [r2, #0]

	 NVIC_EnableIRQ(TIM3_IRQn);
 80006d6:	202e      	movs	r0, #46	@ 0x2e
 80006d8:	f7ff ff6a 	bl	80005b0 <__NVIC_EnableIRQ>
	 NVIC_SetPriority(TIM3_IRQn,1);
 80006dc:	2101      	movs	r1, #1
 80006de:	202e      	movs	r0, #46	@ 0x2e
 80006e0:	f7ff ff84 	bl	80005ec <__NVIC_SetPriority>

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	44020c00 	.word	0x44020c00
 80006ec:	40000400 	.word	0x40000400

080006f0 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void) {
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d022      	beq.n	8000748 <TIM2_IRQHandler+0x58>
        TIM2->SR &= ~TIM_SR_UIF;
 8000702:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	6113      	str	r3, [r2, #16]

        GPIOC->ODR &= ~(1<<7);
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <TIM2_IRQHandler+0x64>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a0f      	ldr	r2, [pc, #60]	@ (8000754 <TIM2_IRQHandler+0x64>)
 8000718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800071c:	6153      	str	r3, [r2, #20]

        TIM3->CNT = 0;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <TIM2_IRQHandler+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	@ 0x24
        TIM3->CR1 |= TIM_CR1_CEN;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <TIM2_IRQHandler+0x68>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <TIM2_IRQHandler+0x68>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6013      	str	r3, [r2, #0]

        TIM2->CNT = 0;
 8000730:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	@ 0x24
        TIM2->CR1 &= ~TIM_CR1_CEN;
 8000738:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]

    }
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	42020800 	.word	0x42020800
 8000758:	40000400 	.word	0x40000400

0800075c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	 if (TIM3->SR & TIM_SR_UIF) {
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <TIM3_IRQHandler+0x44>)
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d014      	beq.n	8000796 <TIM3_IRQHandler+0x3a>
		 TIM3->SR &= ~TIM_SR_UIF;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <TIM3_IRQHandler+0x44>)
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <TIM3_IRQHandler+0x44>)
 8000772:	f023 0301 	bic.w	r3, r3, #1
 8000776:	6113      	str	r3, [r2, #16]

	     GPIOC->ODR |= (1<<7);
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <TIM3_IRQHandler+0x48>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	4a09      	ldr	r2, [pc, #36]	@ (80007a4 <TIM3_IRQHandler+0x48>)
 800077e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000782:	6153      	str	r3, [r2, #20]

	     TIM3->CNT = 0;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <TIM3_IRQHandler+0x44>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	@ 0x24
	     TIM3->CR1 &= ~TIM_CR1_CEN;
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <TIM3_IRQHandler+0x44>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <TIM3_IRQHandler+0x44>)
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	6013      	str	r3, [r2, #0]
	 }
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40000400 	.word	0x40000400
 80007a4:	42020800 	.word	0x42020800

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fb22 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f812 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f8d0 	bl	8000958 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007b8:	f000 f882 	bl	80008c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Timer2_init();
 80007bc:	f7ff ff40 	bl	8000640 <Timer2_init>
  Timer3_init();
 80007c0:	f7ff ff6c 	bl	800069c <Timer3_init>
  GPIOC->ODR |= (1<<7);
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <main+0x2c>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a02      	ldr	r2, [pc, #8]	@ (80007d4 <main+0x2c>)
 80007ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ce:	6153      	str	r3, [r2, #20]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <main+0x28>
 80007d4:	42020800 	.word	0x42020800

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	@ 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2250      	movs	r2, #80	@ 0x50
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 f83a 	bl	8005860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <SystemClock_Config+0xe0>)
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000806:	4a2c      	ldr	r2, [pc, #176]	@ (80008b8 <SystemClock_Config+0xe0>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	6113      	str	r3, [r2, #16]
 800080e:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <SystemClock_Config+0xe0>)
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081a:	bf00      	nop
 800081c:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <SystemClock_Config+0xe0>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	2b08      	cmp	r3, #8
 8000826:	d1f9      	bne.n	800081c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000828:	2310      	movs	r3, #16
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800082c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000832:	2320      	movs	r3, #32
 8000834:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000842:	2364      	movs	r3, #100	@ 0x64
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000852:	2308      	movs	r3, #8
 8000854:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4618      	mov	r0, r3
 8000864:	f000 ff56 	bl	8001714 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 f95f 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	231f      	movs	r3, #31
 8000874:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2105      	movs	r1, #5
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fb77 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800089c:	f000 f948 	bl	8000b30 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemClock_Config+0xe4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <SystemClock_Config+0xe4>)
 80008aa:	f043 0320 	orr.w	r3, r3, #32
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3770      	adds	r7, #112	@ 0x70
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	44020800 	.word	0x44020800
 80008bc:	40022000 	.word	0x40022000

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	@ (8000954 <MX_USART3_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800090a:	f003 ff4f 	bl	80047ac <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f90c 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800091c:	f004 fed5 	bl	80056ca <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f903 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800092e:	f004 ff0a 	bl	8005746 <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f8fa 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_USART3_UART_Init+0x90>)
 800093e:	f004 fe8b 	bl	8005658 <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f8f2 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000028 	.word	0x20000028
 8000954:	40004800 	.word	0x40004800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 8000970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000974:	4a4b      	ldr	r2, [pc, #300]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097e:	4b49      	ldr	r3, [pc, #292]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098c:	4b45      	ldr	r3, [pc, #276]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 800098e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000992:	4a44      	ldr	r2, [pc, #272]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000998:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800099c:	4b41      	ldr	r3, [pc, #260]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b0:	4a3c      	ldr	r2, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ba:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 80009ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ce:	4a35      	ldr	r2, [pc, #212]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d8:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 80009da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	482f      	ldr	r0, [pc, #188]	@ (8000aa8 <MX_GPIO_Init+0x150>)
 80009ec:	f000 fe48 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	482d      	ldr	r0, [pc, #180]	@ (8000aac <MX_GPIO_Init+0x154>)
 80009f6:	f000 fe43 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 80009fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <MX_GPIO_Init+0x158>)
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4827      	ldr	r0, [pc, #156]	@ (8000aac <MX_GPIO_Init+0x154>)
 8000a10:	f000 fce4 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000a14:	2320      	movs	r3, #32
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481f      	ldr	r0, [pc, #124]	@ (8000aa8 <MX_GPIO_Init+0x150>)
 8000a2c:	f000 fcd6 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a30:	2340      	movs	r3, #64	@ 0x40
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	481a      	ldr	r0, [pc, #104]	@ (8000aac <MX_GPIO_Init+0x154>)
 8000a44:	f000 fcca 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4813      	ldr	r0, [pc, #76]	@ (8000aac <MX_GPIO_Init+0x154>)
 8000a60:	f000 fcbc 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a64:	2320      	movs	r3, #32
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_GPIO_Init+0x158>)
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	480f      	ldr	r0, [pc, #60]	@ (8000ab4 <MX_GPIO_Init+0x15c>)
 8000a78:	f000 fcb0 	bl	80013dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2010      	movs	r0, #16
 8000a82:	f000 fb2d 	bl	80010e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000a86:	2010      	movs	r0, #16
 8000a88:	f000 fb44 	bl	8001114 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2018      	movs	r0, #24
 8000a92:	f000 fb25 	bl	80010e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000a96:	2018      	movs	r0, #24
 8000a98:	f000 fb3c 	bl	8001114 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	44020c00 	.word	0x44020c00
 8000aa8:	42020000 	.word	0x42020000
 8000aac:	42020800 	.word	0x42020800
 8000ab0:	10210000 	.word	0x10210000
 8000ab4:	42020400 	.word	0x42020400

08000ab8 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_5) {
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	2b20      	cmp	r3, #32
 8000ac6:	d116      	bne.n	8000af6 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		if(flag == 0){
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d111      	bne.n	8000af6 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
			TIM2->CNT = 0;
 8000ad2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
			TIM2->CR1 |= TIM_CR1_CEN;
 8000ada:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6013      	str	r3, [r2, #0]
			GPIOA->ODR &= ~(1<<5);
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a0f      	ldr	r2, [pc, #60]	@ (8000b2c <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8000af0:	f023 0320 	bic.w	r3, r3, #32
 8000af4:	6153      	str	r3, [r2, #20]
		}
		}

	if(GPIO_Pin == B1_BLUE_USER_BUTTON_Pin){
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000afc:	d10d      	bne.n	8000b1a <HAL_GPIO_EXTI_Falling_Callback+0x62>
		flag ^= 1;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000b0c:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR |= (1<<5);
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8000b14:	f043 0320 	orr.w	r3, r3, #32
 8000b18:	6153      	str	r3, [r2, #20]
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000bc 	.word	0x200000bc
 8000b2c:	42020000 	.word	0x42020000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2288      	movs	r2, #136	@ 0x88
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fe77 	bl	8005860 <memset>
  if(huart->Instance==USART3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a2a      	ldr	r2, [pc, #168]	@ (8000c20 <HAL_UART_MspInit+0xd4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d14c      	bne.n	8000c16 <HAL_UART_MspInit+0xca>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b7c:	f04f 0204 	mov.w	r2, #4
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fd39 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b9c:	f7ff ffc8 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba0:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <HAL_UART_MspInit+0xd8>)
 8000ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c24 <HAL_UART_MspInit+0xd8>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <HAL_UART_MspInit+0xd8>)
 8000bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_UART_MspInit+0xd8>)
 8000bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc4:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <HAL_UART_MspInit+0xd8>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_UART_MspInit+0xd8>)
 8000bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000bdc:	2318      	movs	r3, #24
 8000bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000bf4:	230d      	movs	r3, #13
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <HAL_UART_MspInit+0xdc>)
 8000c02:	f000 fbeb 	bl	80013dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	203c      	movs	r0, #60	@ 0x3c
 8000c0c:	f000 fa68 	bl	80010e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c10:	203c      	movs	r0, #60	@ 0x3c
 8000c12:	f000 fa7f 	bl	8001114 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	37b0      	adds	r7, #176	@ 0xb0
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004800 	.word	0x40004800
 8000c24:	44020c00 	.word	0x44020c00
 8000c28:	42020000 	.word	0x42020000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 f955 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c8e:	2020      	movs	r0, #32
 8000c90:	f000 fd0e 	bl	80016b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 8000c9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ca0:	f000 fd06 	bl	80016b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <USART3_IRQHandler+0x10>)
 8000cae:	f003 fdcd 	bl	800484c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000028 	.word	0x20000028

08000cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc2:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <SystemInit+0xc8>)
 8000cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8000d84 <SystemInit+0xc8>)
 8000cca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <SystemInit+0xcc>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <SystemInit+0xcc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <SystemInit+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ce4:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <SystemInit+0xcc>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4927      	ldr	r1, [pc, #156]	@ (8000d88 <SystemInit+0xcc>)
 8000cea:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <SystemInit+0xd0>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <SystemInit+0xcc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <SystemInit+0xcc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <SystemInit+0xcc>)
 8000cfe:	4a24      	ldr	r2, [pc, #144]	@ (8000d90 <SystemInit+0xd4>)
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <SystemInit+0xcc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <SystemInit+0xcc>)
 8000d0a:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <SystemInit+0xd4>)
 8000d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <SystemInit+0xcc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <SystemInit+0xcc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <SystemInit+0xcc>)
 8000d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <SystemInit+0xcc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <SystemInit+0xc8>)
 8000d28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d2c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <SystemInit+0xd8>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d36:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d3e:	d003      	beq.n	8000d48 <SystemInit+0x8c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d46:	d117      	bne.n	8000d78 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <SystemInit+0xd8>)
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <SystemInit+0xd8>)
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <SystemInit+0xdc>)
 8000d58:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <SystemInit+0xd8>)
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <SystemInit+0xe0>)
 8000d5e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <SystemInit+0xd8>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <SystemInit+0xd8>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <SystemInit+0xd8>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <SystemInit+0xd8>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	61d3      	str	r3, [r2, #28]
  }
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	44020c00 	.word	0x44020c00
 8000d8c:	fae2eae3 	.word	0xfae2eae3
 8000d90:	01010280 	.word	0x01010280
 8000d94:	40022000 	.word	0x40022000
 8000d98:	08192a3b 	.word	0x08192a3b
 8000d9c:	4c5d6e7f 	.word	0x4c5d6e7f

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000da4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000db6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
	ldr	r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <LoopForever+0x16>)
	cmp	r2, r3
 8000dc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dca:	f7ff ff77 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 fd4f 	bl	8005870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fce9 	bl	80007a8 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000dd8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000ddc:	08005920 	.word	0x08005920
	ldr	r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000de4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000de8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000dec:	200000c4 	.word	0x200000c4

08000df0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f966 	bl	80010ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000dfe:	f001 fa79 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <HAL_Init+0x44>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	490b      	ldr	r1, [pc, #44]	@ (8000e3c <HAL_Init+0x48>)
 8000e0e:	5ccb      	ldrb	r3, [r1, r3]
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x4c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e18:	2004      	movs	r0, #4
 8000e1a:	f000 f9ab 	bl	8001174 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f000 f810 	bl	8000e44 <HAL_InitTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e002      	b.n	8000e34 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2e:	f7ff fe85 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	44020c00 	.word	0x44020c00
 8000e3c:	080058d0 	.word	0x080058d0
 8000e40:	20000000 	.word	0x20000000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e50:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <HAL_InitTick+0xdc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e05c      	b.n	8000f16 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000e5c:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <HAL_InitTick+0xe0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d10c      	bne.n	8000e82 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <HAL_InitTick+0xe4>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <HAL_InitTick+0xdc>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e037      	b.n	8000ef2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000e82:	f000 f9cf 	bl	8001224 <HAL_SYSTICK_GetCLKSourceConfig>
 8000e86:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d023      	beq.n	8000ed6 <HAL_InitTick+0x92>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d82d      	bhi.n	8000ef0 <HAL_InitTick+0xac>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_InitTick+0x5e>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d00d      	beq.n	8000ebc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ea0:	e026      	b.n	8000ef0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <HAL_InitTick+0xe4>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <HAL_InitTick+0xdc>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000eb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb8:	60fb      	str	r3, [r7, #12]
        break;
 8000eba:	e01a      	b.n	8000ef2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_InitTick+0xdc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eca:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	60fb      	str	r3, [r7, #12]
        break;
 8000ed4:	e00d      	b.n	8000ef2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0xdc>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ee4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	60fb      	str	r3, [r7, #12]
        break;
 8000eee:	e000      	b.n	8000ef2 <HAL_InitTick+0xae>
        break;
 8000ef0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f000 f91c 	bl	8001130 <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e009      	b.n	8000f16 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f02:	2200      	movs	r2, #0
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	f000 f8e9 	bl	80010e0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000f0e:	4a07      	ldr	r2, [pc, #28]	@ (8000f2c <HAL_InitTick+0xe8>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	e000e010 	.word	0xe000e010
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	200000c0 	.word	0x200000c0

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200000c0 	.word	0x200000c0

08000f70 <__NVIC_SetPriorityGrouping>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff4c 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ee:	f7ff ff63 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	6978      	ldr	r0, [r7, #20]
 80010fa:	f7ff ffb3 	bl	8001064 <NVIC_EncodePriority>
 80010fe:	4602      	mov	r2, r0
 8001100:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff82 	bl	8001010 <__NVIC_SetPriority>
}
 800110c:	bf00      	nop
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff56 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001142:	2301      	movs	r3, #1
 8001144:	e00d      	b.n	8001162 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_SYSTICK_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_SYSTICK_Config+0x40>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_SYSTICK_Config+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_SYSTICK_Config+0x40>)
 800115a:	f043 0303 	orr.w	r3, r3, #3
 800115e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d844      	bhi.n	800120c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001182:	a201      	add	r2, pc, #4	@ (adr r2, 8001188 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001188:	080011ab 	.word	0x080011ab
 800118c:	080011c9 	.word	0x080011c9
 8001190:	080011eb 	.word	0x080011eb
 8001194:	0800120d 	.word	0x0800120d
 8001198:	0800119d 	.word	0x0800119d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1e      	ldr	r2, [pc, #120]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6013      	str	r3, [r2, #0]
      break;
 80011a8:	e031      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011b0:	f023 0304 	bic.w	r3, r3, #4
 80011b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011bc:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011be:	f023 030c 	bic.w	r3, r3, #12
 80011c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80011c6:	e022      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a13      	ldr	r2, [pc, #76]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ce:	f023 0304 	bic.w	r3, r3, #4
 80011d2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011da:	f023 030c 	bic.w	r3, r3, #12
 80011de:	4a10      	ldr	r2, [pc, #64]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80011e8:	e011      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fc:	f023 030c 	bic.w	r3, r3, #12
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800120a:	e000      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800120c:	bf00      	nop
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010
 8001220:	44020c00 	.word	0x44020c00

08001224 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001236:	2304      	movs	r3, #4
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	e01e      	b.n	800127a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800123e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d00f      	beq.n	800126e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d80f      	bhi.n	8001274 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d003      	beq.n	8001268 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001260:	e008      	b.n	8001274 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
        break;
 8001266:	e008      	b.n	800127a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001268:	2301      	movs	r3, #1
 800126a:	607b      	str	r3, [r7, #4]
        break;
 800126c:	e005      	b.n	800127a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800126e:	2302      	movs	r3, #2
 8001270:	607b      	str	r3, [r7, #4]
        break;
 8001272:	e002      	b.n	800127a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
        break;
 8001278:	bf00      	nop
    }
  }
  return systick_source;
 800127a:	687b      	ldr	r3, [r7, #4]
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e010 	.word	0xe000e010
 800128c:	44020c00 	.word	0x44020c00

08001290 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001298:	f7ff fe5e 	bl	8000f58 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e06b      	b.n	8001380 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d008      	beq.n	80012c6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2220      	movs	r2, #32
 80012b8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e05c      	b.n	8001380 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2205      	movs	r2, #5
 80012da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012de:	e020      	b.n	8001322 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80012e0:	f7ff fe3a 	bl	8000f58 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d919      	bls.n	8001322 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2203      	movs	r2, #3
 80012fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001312:	2201      	movs	r2, #1
 8001314:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e02e      	b.n	8001380 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0d7      	beq.n	80012e0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0202 	orr.w	r2, r2, #2
 800133e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2204      	movs	r2, #4
 8001344:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001350:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800136a:	2201      	movs	r2, #1
 800136c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2200      	movs	r2, #0
 8001374:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e019      	b.n	80013ce <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2220      	movs	r2, #32
 80013aa:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e00e      	b.n	80013ce <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2204      	movs	r2, #4
 80013b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013ea:	e136      	b.n	800165a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8128 	beq.w	8001654 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x38>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b12      	cmp	r3, #18
 8001412:	d125      	bne.n	8001460 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f003 020f 	and.w	r2, r3, #15
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	6979      	ldr	r1, [r7, #20]
 800145c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0203 	and.w	r2, r3, #3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	4313      	orrs	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d00b      	beq.n	80014b4 <HAL_GPIO_Init+0xd8>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a8:	2b11      	cmp	r3, #17
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b12      	cmp	r3, #18
 80014b2:	d130      	bne.n	8001516 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4013      	ands	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4313      	orrs	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ea:	2201      	movs	r2, #1
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4013      	ands	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f003 0201 	and.w	r2, r3, #1
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d017      	beq.n	800154e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4013      	ands	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4313      	orrs	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d07c      	beq.n	8001654 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800155a:	4a47      	ldr	r2, [pc, #284]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3318      	adds	r3, #24
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	4013      	ands	r3, r2
 800157c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	0a9a      	lsrs	r2, r3, #10
 8001582:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <HAL_GPIO_Init+0x2a0>)
 8001584:	4013      	ands	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	00d2      	lsls	r2, r2, #3
 800158e:	4093      	lsls	r3, r2
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	4313      	orrs	r3, r2
 8001594:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001596:	4938      	ldr	r1, [pc, #224]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3318      	adds	r3, #24
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80015a4:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80015c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	4013      	ands	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80015f2:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 80015fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4013      	ands	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800161e:	4a16      	ldr	r2, [pc, #88]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 8001628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800162c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4013      	ands	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800164c:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_GPIO_Init+0x29c>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	3301      	adds	r3, #1
 8001658:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f aec1 	bne.w	80013ec <HAL_GPIO_Init+0x10>
  }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	44022000 	.word	0x44022000
 800167c:	002f7f7f 	.word	0x002f7f7f

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d006      	beq.n	80016d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80016c6:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f814 	bl	80016fc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80016e0:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f9e5 	bl	8000ab8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	44022000 	.word	0x44022000

080016fc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	f000 bc28 	b.w	8001f78 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001728:	4b94      	ldr	r3, [pc, #592]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f003 0318 	and.w	r3, r3, #24
 8001730:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001732:	4b92      	ldr	r3, [pc, #584]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d05b      	beq.n	8001800 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b08      	cmp	r3, #8
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x46>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b18      	cmp	r3, #24
 8001752:	d114      	bne.n	800177e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d111      	bne.n	800177e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f000 bc08 	b.w	8001f78 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001768:	4b84      	ldr	r3, [pc, #528]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	4981      	ldr	r1, [pc, #516]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001778:	4313      	orrs	r3, r2
 800177a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800177c:	e040      	b.n	8001800 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d023      	beq.n	80017ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001786:	4b7d      	ldr	r3, [pc, #500]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7c      	ldr	r2, [pc, #496]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fbe1 	bl	8000f58 <HAL_GetTick>
 8001796:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800179a:	f7ff fbdd 	bl	8000f58 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e3e5      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017ac:	4b73      	ldr	r3, [pc, #460]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80017b8:	4b70      	ldr	r3, [pc, #448]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	496d      	ldr	r1, [pc, #436]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	618b      	str	r3, [r1, #24]
 80017cc:	e018      	b.n	8001800 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017ce:	4b6b      	ldr	r3, [pc, #428]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6a      	ldr	r2, [pc, #424]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80017d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fbbd 	bl	8000f58 <HAL_GetTick>
 80017de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80017e2:	f7ff fbb9 	bl	8000f58 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e3c1      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80017f4:	4b61      	ldr	r3, [pc, #388]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a0 	beq.w	800194e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	2b10      	cmp	r3, #16
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x10c>
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b18      	cmp	r3, #24
 8001818:	d109      	bne.n	800182e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f040 8092 	bne.w	800194e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e3a4      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x132>
 8001838:	4b50      	ldr	r3, [pc, #320]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a4f      	ldr	r2, [pc, #316]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e058      	b.n	80018f8 <HAL_RCC_OscConfig+0x1e4>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d112      	bne.n	8001874 <HAL_RCC_OscConfig+0x160>
 800184e:	4b4b      	ldr	r3, [pc, #300]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a4a      	ldr	r2, [pc, #296]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b48      	ldr	r3, [pc, #288]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a47      	ldr	r2, [pc, #284]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001860:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b45      	ldr	r3, [pc, #276]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a44      	ldr	r2, [pc, #272]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e041      	b.n	80018f8 <HAL_RCC_OscConfig+0x1e4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800187c:	d112      	bne.n	80018a4 <HAL_RCC_OscConfig+0x190>
 800187e:	4b3f      	ldr	r3, [pc, #252]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a3e      	ldr	r2, [pc, #248]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b3c      	ldr	r3, [pc, #240]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3b      	ldr	r2, [pc, #236]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001890:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b39      	ldr	r3, [pc, #228]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a38      	ldr	r2, [pc, #224]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e029      	b.n	80018f8 <HAL_RCC_OscConfig+0x1e4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80018ac:	d112      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1c0>
 80018ae:	4b33      	ldr	r3, [pc, #204]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a32      	ldr	r2, [pc, #200]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b30      	ldr	r3, [pc, #192]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2f      	ldr	r2, [pc, #188]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b2d      	ldr	r3, [pc, #180]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2c      	ldr	r2, [pc, #176]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e011      	b.n	80018f8 <HAL_RCC_OscConfig+0x1e4>
 80018d4:	4b29      	ldr	r3, [pc, #164]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a28      	ldr	r2, [pc, #160]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b26      	ldr	r3, [pc, #152]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a25      	ldr	r2, [pc, #148]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b23      	ldr	r3, [pc, #140]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 80018f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fb2a 	bl	8000f58 <HAL_GetTick>
 8001904:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001908:	f7ff fb26 	bl	8000f58 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e32e      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x1f4>
 8001926:	e012      	b.n	800194e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb16 	bl	8000f58 <HAL_GetTick>
 800192c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001930:	f7ff fb12 	bl	8000f58 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e31a      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_RCC_OscConfig+0x268>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 809a 	beq.w	8001a90 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x25a>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b18      	cmp	r3, #24
 8001966:	d149      	bne.n	80019fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d146      	bne.n	80019fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e2fe      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
 800197a:	bf00      	nop
 800197c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001986:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0218 	and.w	r2, r3, #24
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	429a      	cmp	r2, r3
 8001994:	d014      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001996:	4b96      	ldr	r3, [pc, #600]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0218 	bic.w	r2, r3, #24
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	4993      	ldr	r1, [pc, #588]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80019a8:	f000 fdd0 	bl	800254c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019ac:	4b91      	ldr	r3, [pc, #580]	@ (8001bf4 <HAL_RCC_OscConfig+0x4e0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fa47 	bl	8000e44 <HAL_InitTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e2db      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff faca 	bl	8000f58 <HAL_GetTick>
 80019c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019c8:	f7ff fac6 	bl	8000f58 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e2ce      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	4b85      	ldr	r3, [pc, #532]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80019e6:	4b82      	ldr	r3, [pc, #520]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	497e      	ldr	r1, [pc, #504]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80019fa:	e049      	b.n	8001a90 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d02c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a04:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 0218 	bic.w	r2, r3, #24
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	4977      	ldr	r1, [pc, #476]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001a16:	4b76      	ldr	r3, [pc, #472]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fa99 	bl	8000f58 <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fa95 	bl	8000f58 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e29d      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a48:	4b69      	ldr	r3, [pc, #420]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	4966      	ldr	r1, [pc, #408]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	610b      	str	r3, [r1, #16]
 8001a5c:	e018      	b.n	8001a90 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b64      	ldr	r3, [pc, #400]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a63      	ldr	r2, [pc, #396]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fa75 	bl	8000f58 <HAL_GetTick>
 8001a6e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a72:	f7ff fa71 	bl	8000f58 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e279      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01c      	beq.n	8001ade <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa4:	4b52      	ldr	r3, [pc, #328]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aaa:	4a51      	ldr	r2, [pc, #324]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001aac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fa50 	bl	8000f58 <HAL_GetTick>
 8001ab8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fa4c 	bl	8000f58 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e254      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ace:	4b48      	ldr	r3, [pc, #288]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ef      	beq.n	8001abc <HAL_RCC_OscConfig+0x3a8>
 8001adc:	e01b      	b.n	8001b16 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b44      	ldr	r3, [pc, #272]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ae4:	4a42      	ldr	r2, [pc, #264]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001aea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff fa33 	bl	8000f58 <HAL_GetTick>
 8001af2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001af6:	f7ff fa2f 	bl	8000f58 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e237      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b08:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ef      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80d2 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b24:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <HAL_RCC_OscConfig+0x4e4>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d118      	bne.n	8001b62 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001b30:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <HAL_RCC_OscConfig+0x4e4>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	4a30      	ldr	r2, [pc, #192]	@ (8001bf8 <HAL_RCC_OscConfig+0x4e4>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fa0c 	bl	8000f58 <HAL_GetTick>
 8001b40:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7ff fa08 	bl	8000f58 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e210      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b56:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <HAL_RCC_OscConfig+0x4e4>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d108      	bne.n	8001b7c <HAL_RCC_OscConfig+0x468>
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b70:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b7a:	e074      	b.n	8001c66 <HAL_RCC_OscConfig+0x552>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d118      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x4a2>
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b8a:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b9a:	4a15      	ldr	r2, [pc, #84]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001baa:	4a11      	ldr	r2, [pc, #68]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bb4:	e057      	b.n	8001c66 <HAL_RCC_OscConfig+0x552>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d11e      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4e8>
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bde:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001be4:	4a02      	ldr	r2, [pc, #8]	@ (8001bf0 <HAL_RCC_OscConfig+0x4dc>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x552>
 8001bf0:	44020c00 	.word	0x44020c00
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	44020800 	.word	0x44020800
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b85      	cmp	r3, #133	@ 0x85
 8001c02:	d118      	bne.n	8001c36 <HAL_RCC_OscConfig+0x522>
 8001c04:	4ba2      	ldr	r3, [pc, #648]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c0a:	4aa1      	ldr	r2, [pc, #644]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c14:	4b9e      	ldr	r3, [pc, #632]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c1a:	4a9d      	ldr	r2, [pc, #628]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c24:	4b9a      	ldr	r3, [pc, #616]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c2a:	4a99      	ldr	r2, [pc, #612]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c34:	e017      	b.n	8001c66 <HAL_RCC_OscConfig+0x552>
 8001c36:	4b96      	ldr	r3, [pc, #600]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c3c:	4a94      	ldr	r2, [pc, #592]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c46:	4b92      	ldr	r3, [pc, #584]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c4c:	4a90      	ldr	r2, [pc, #576]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c4e:	f023 0304 	bic.w	r3, r3, #4
 8001c52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c56:	4b8e      	ldr	r3, [pc, #568]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c5c:	4a8c      	ldr	r2, [pc, #560]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f973 	bl	8000f58 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff f96f 	bl	8000f58 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e175      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8c:	4b80      	ldr	r3, [pc, #512]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ed      	beq.n	8001c76 <HAL_RCC_OscConfig+0x562>
 8001c9a:	e015      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f95c 	bl	8000f58 <HAL_GetTick>
 8001ca0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f958 	bl	8000f58 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e15e      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cba:	4b75      	ldr	r3, [pc, #468]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ed      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d036      	beq.n	8001d42 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d019      	beq.n	8001d10 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001ce2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f936 	bl	8000f58 <HAL_GetTick>
 8001cec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001cf0:	f7ff f932 	bl	8000f58 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e13a      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d02:	4b63      	ldr	r3, [pc, #396]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x5dc>
 8001d0e:	e018      	b.n	8001d42 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d10:	4b5f      	ldr	r3, [pc, #380]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a5e      	ldr	r2, [pc, #376]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f91c 	bl	8000f58 <HAL_GetTick>
 8001d20:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d24:	f7ff f918 	bl	8000f58 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e120      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d36:	4b56      	ldr	r3, [pc, #344]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8115 	beq.w	8001f76 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b18      	cmp	r3, #24
 8001d50:	f000 80af 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	f040 8086 	bne.w	8001e6a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f8f5 	bl	8000f58 <HAL_GetTick>
 8001d6e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001d72:	f7ff f8f1 	bl	8000f58 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0f9      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d84:	4b42      	ldr	r3, [pc, #264]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001d90:	4b3f      	ldr	r3, [pc, #252]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d98:	f023 0303 	bic.w	r3, r3, #3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001da4:	0212      	lsls	r2, r2, #8
 8001da6:	430a      	orrs	r2, r1
 8001da8:	4939      	ldr	r1, [pc, #228]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	628b      	str	r3, [r1, #40]	@ 0x28
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	025b      	lsls	r3, r3, #9
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001dde:	492c      	ldr	r1, [pc, #176]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001de4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	4a29      	ldr	r2, [pc, #164]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001dea:	f023 0310 	bic.w	r3, r3, #16
 8001dee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df4:	4a26      	ldr	r2, [pc, #152]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001e06:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	f023 020c 	bic.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	491f      	ldr	r1, [pc, #124]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	f023 0220 	bic.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e24:	491a      	ldr	r1, [pc, #104]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a15      	ldr	r2, [pc, #84]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f889 	bl	8000f58 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff f885 	bl	8000f58 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e08d      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x736>
 8001e68:	e085      	b.n	8001f76 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <HAL_RCC_OscConfig+0x77c>)
 8001e70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff f86f 	bl	8000f58 <HAL_GetTick>
 8001e7a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff f86b 	bl	8000f58 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d903      	bls.n	8001e94 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e073      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
 8001e90:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e94:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ea0:	4b37      	ldr	r3, [pc, #220]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea4:	4a36      	ldr	r2, [pc, #216]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001ea6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	6293      	str	r3, [r2, #40]	@ 0x28
 8001eb0:	e061      	b.n	8001f76 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001eb2:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d031      	beq.n	8001f2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d12a      	bne.n	8001f2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d122      	bne.n	8001f2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d11a      	bne.n	8001f2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	0a5b      	lsrs	r3, r3, #9
 8001ef8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d111      	bne.n	8001f2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d108      	bne.n	8001f2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0e1b      	lsrs	r3, r3, #24
 8001f1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e024      	b.n	8001f78 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f32:	08db      	lsrs	r3, r3, #3
 8001f34:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d01a      	beq.n	8001f76 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	4a0e      	ldr	r2, [pc, #56]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001f46:	f023 0310 	bic.w	r3, r3, #16
 8001f4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f804 	bl	8000f58 <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001f52:	bf00      	nop
 8001f54:	f7ff f800 	bl	8000f58 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d0f9      	beq.n	8001f54 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6e:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <HAL_RCC_OscConfig+0x86c>)
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	44020c00 	.word	0x44020c00

08001f84 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e19e      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b83      	ldr	r3, [pc, #524]	@ (80021a8 <HAL_RCC_ClockConfig+0x224>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d910      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b80      	ldr	r3, [pc, #512]	@ (80021a8 <HAL_RCC_ClockConfig+0x224>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 020f 	bic.w	r2, r3, #15
 8001fae:	497e      	ldr	r1, [pc, #504]	@ (80021a8 <HAL_RCC_ClockConfig+0x224>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80021a8 <HAL_RCC_ClockConfig+0x224>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e186      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	4b74      	ldr	r3, [pc, #464]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d909      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001fe6:	4b71      	ldr	r3, [pc, #452]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	496d      	ldr	r1, [pc, #436]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	4b68      	ldr	r3, [pc, #416]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002014:	429a      	cmp	r2, r3
 8002016:	d909      	bls.n	800202c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002018:	4b64      	ldr	r3, [pc, #400]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4961      	ldr	r1, [pc, #388]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8002028:	4313      	orrs	r3, r2
 800202a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	4b5b      	ldr	r3, [pc, #364]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002044:	429a      	cmp	r2, r3
 8002046:	d908      	bls.n	800205a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002048:	4b58      	ldr	r3, [pc, #352]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4955      	ldr	r1, [pc, #340]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8002056:	4313      	orrs	r3, r2
 8002058:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4b50      	ldr	r3, [pc, #320]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	429a      	cmp	r2, r3
 8002074:	d908      	bls.n	8002088 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002076:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	494a      	ldr	r1, [pc, #296]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8002084:	4313      	orrs	r3, r2
 8002086:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8093 	beq.w	80021bc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800209e:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e113      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e107      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020ce:	4b37      	ldr	r3, [pc, #220]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0fb      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020de:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0f3      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80020ee:	4b2f      	ldr	r3, [pc, #188]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	492c      	ldr	r1, [pc, #176]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002100:	f7fe ff2a 	bl	8000f58 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d112      	bne.n	8002134 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe ff22 	bl	8000f58 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0d7      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002126:	4b21      	ldr	r3, [pc, #132]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0318 	and.w	r3, r3, #24
 800212e:	2b18      	cmp	r3, #24
 8002130:	d1ee      	bne.n	8002110 <HAL_RCC_ClockConfig+0x18c>
 8002132:	e043      	b.n	80021bc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d112      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800213e:	f7fe ff0b 	bl	8000f58 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0c0      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002154:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 0318 	and.w	r3, r3, #24
 800215c:	2b10      	cmp	r3, #16
 800215e:	d1ee      	bne.n	800213e <HAL_RCC_ClockConfig+0x1ba>
 8002160:	e02c      	b.n	80021bc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d122      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7fe fef4 	bl	8000f58 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0a9      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002182:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <HAL_RCC_ClockConfig+0x228>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0318 	and.w	r3, r3, #24
 800218a:	2b08      	cmp	r3, #8
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_ClockConfig+0x1e8>
 800218e:	e015      	b.n	80021bc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7fe fee2 	bl	8000f58 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d906      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e097      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000
 80021ac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b0:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 0318 	and.w	r3, r3, #24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e9      	bne.n	8002190 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d010      	beq.n	80021ea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b44      	ldr	r3, [pc, #272]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d208      	bcs.n	80021ea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80021d8:	4b41      	ldr	r3, [pc, #260]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f023 020f 	bic.w	r2, r3, #15
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	493e      	ldr	r1, [pc, #248]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ea:	4b3e      	ldr	r3, [pc, #248]	@ (80022e4 <HAL_RCC_ClockConfig+0x360>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d210      	bcs.n	800221a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f8:	4b3a      	ldr	r3, [pc, #232]	@ (80022e4 <HAL_RCC_ClockConfig+0x360>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 020f 	bic.w	r2, r3, #15
 8002200:	4938      	ldr	r1, [pc, #224]	@ (80022e4 <HAL_RCC_ClockConfig+0x360>)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002208:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <HAL_RCC_ClockConfig+0x360>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e05d      	b.n	80022d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002232:	429a      	cmp	r2, r3
 8002234:	d208      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002236:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4927      	ldr	r1, [pc, #156]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d012      	beq.n	800227a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002262:	429a      	cmp	r2, r3
 8002264:	d209      	bcs.n	800227a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	491a      	ldr	r1, [pc, #104]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002294:	429a      	cmp	r2, r3
 8002296:	d209      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	490e      	ldr	r1, [pc, #56]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80022ac:	f000 f822 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_RCC_ClockConfig+0x35c>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	490b      	ldr	r1, [pc, #44]	@ (80022e8 <HAL_RCC_ClockConfig+0x364>)
 80022bc:	5ccb      	ldrb	r3, [r1, r3]
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
 80022c2:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <HAL_RCC_ClockConfig+0x368>)
 80022c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_RCC_ClockConfig+0x36c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fdba 	bl	8000e44 <HAL_InitTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80022d4:	7afb      	ldrb	r3, [r7, #11]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	44020c00 	.word	0x44020c00
 80022e4:	40022000 	.word	0x40022000
 80022e8:	080058d0 	.word	0x080058d0
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80022fa:	4b8c      	ldr	r3, [pc, #560]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 0318 	and.w	r3, r3, #24
 8002302:	2b08      	cmp	r3, #8
 8002304:	d102      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002306:	4b8a      	ldr	r3, [pc, #552]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e107      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230c:	4b87      	ldr	r3, [pc, #540]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 0318 	and.w	r3, r3, #24
 8002314:	2b00      	cmp	r3, #0
 8002316:	d112      	bne.n	800233e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002318:	4b84      	ldr	r3, [pc, #528]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002324:	4b81      	ldr	r3, [pc, #516]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	08db      	lsrs	r3, r3, #3
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	4a81      	ldr	r2, [pc, #516]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x240>)
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e0f1      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002338:	4b7e      	ldr	r3, [pc, #504]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x240>)
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	e0ee      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800233e:	4b7b      	ldr	r3, [pc, #492]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0318 	and.w	r3, r3, #24
 8002346:	2b10      	cmp	r3, #16
 8002348:	d102      	bne.n	8002350 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800234a:	4b7b      	ldr	r3, [pc, #492]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x244>)
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e0e5      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002350:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 0318 	and.w	r3, r3, #24
 8002358:	2b18      	cmp	r3, #24
 800235a:	f040 80dd 	bne.w	8002518 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800235e:	4b73      	ldr	r3, [pc, #460]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002368:	4b70      	ldr	r3, [pc, #448]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002372:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002374:	4b6d      	ldr	r3, [pc, #436]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002380:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 8002382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002398:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80b7 	beq.w	8002512 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0xbe>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d056      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x16a>
 80023b0:	e077      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80023b2:	4b5e      	ldr	r3, [pc, #376]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02d      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80023be:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x240>)
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 80023ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800253c <HAL_RCC_GetSysClockFreq+0x248>
 8002400:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002404:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800240c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002414:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002418:	e065      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002424:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x24c>
 8002428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242c:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800243c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002440:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800253c <HAL_RCC_GetSysClockFreq+0x248>
 8002444:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002448:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800244c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002450:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002458:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800245c:	e043      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002468:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002544 <HAL_RCC_GetSysClockFreq+0x250>
 800246c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002470:	4b2e      	ldr	r3, [pc, #184]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 8002472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002480:	ed97 6a02 	vldr	s12, [r7, #8]
 8002484:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800253c <HAL_RCC_GetSysClockFreq+0x248>
 8002488:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800248c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002494:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80024a0:	e021      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x254>
 80024b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b4:	4b1d      	ldr	r3, [pc, #116]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800253c <HAL_RCC_GetSysClockFreq+0x248>
 80024cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80024e4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_RCC_GetSysClockFreq+0x238>)
 80024e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ea:	0a5b      	lsrs	r3, r3, #9
 80024ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024f0:	3301      	adds	r3, #1
 80024f2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250a:	ee17 3a90 	vmov	r3, s15
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	e004      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e001      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x240>)
 800251a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800251c:	69fb      	ldr	r3, [r7, #28]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	44020c00 	.word	0x44020c00
 8002530:	003d0900 	.word	0x003d0900
 8002534:	03d09000 	.word	0x03d09000
 8002538:	016e3600 	.word	0x016e3600
 800253c:	46000000 	.word	0x46000000
 8002540:	4c742400 	.word	0x4c742400
 8002544:	4bb71b00 	.word	0x4bb71b00
 8002548:	4a742400 	.word	0x4a742400

0800254c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002550:	f7ff fed0 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800255a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800255e:	4907      	ldr	r1, [pc, #28]	@ (800257c <HAL_RCC_GetHCLKFreq+0x30>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002562:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	4a05      	ldr	r2, [pc, #20]	@ (8002580 <HAL_RCC_GetHCLKFreq+0x34>)
 800256c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <HAL_RCC_GetHCLKFreq+0x34>)
 8002570:	681b      	ldr	r3, [r3, #0]
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	44020c00 	.word	0x44020c00
 800257c:	080058d0 	.word	0x080058d0
 8002580:	20000000 	.word	0x20000000

08002584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002588:	f7ff ffe0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4904      	ldr	r1, [pc, #16]	@ (80025ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	44020c00 	.word	0x44020c00
 80025ac:	080058e0 	.word	0x080058e0

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80025b4:	f7ff ffca 	bl	800254c <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4904      	ldr	r1, [pc, #16]	@ (80025d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	44020c00 	.word	0x44020c00
 80025d8:	080058e0 	.word	0x080058e0

080025dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80025e0:	f7ff ffb4 	bl	800254c <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_GetPCLK3Freq+0x24>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	0b1b      	lsrs	r3, r3, #12
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4904      	ldr	r1, [pc, #16]	@ (8002604 <HAL_RCC_GetPCLK3Freq+0x28>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	44020c00 	.word	0x44020c00
 8002604:	080058e0 	.word	0x080058e0

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b0aa      	sub	sp, #168	@ 0xa8
 800260e:	af00      	add	r7, sp, #0
 8002610:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002614:	2300      	movs	r3, #0
 8002616:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800261a:	2300      	movs	r3, #0
 800261c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002620:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800262c:	2500      	movs	r5, #0
 800262e:	ea54 0305 	orrs.w	r3, r4, r5
 8002632:	d00b      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002634:	4bb8      	ldr	r3, [pc, #736]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800263a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800263e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	4ab4      	ldr	r2, [pc, #720]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002646:	430b      	orrs	r3, r1
 8002648:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800264c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f002 0801 	and.w	r8, r2, #1
 8002658:	f04f 0900 	mov.w	r9, #0
 800265c:	ea58 0309 	orrs.w	r3, r8, r9
 8002660:	d038      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002662:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002668:	2b05      	cmp	r3, #5
 800266a:	d819      	bhi.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800266c:	a201      	add	r2, pc, #4	@ (adr r2, 8002674 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	080026a9 	.word	0x080026a9
 8002678:	0800268d 	.word	0x0800268d
 800267c:	080026a1 	.word	0x080026a1
 8002680:	080026a9 	.word	0x080026a9
 8002684:	080026a9 	.word	0x080026a9
 8002688:	080026a9 	.word	0x080026a9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800268c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002690:	3308      	adds	r3, #8
 8002692:	4618      	mov	r0, r3
 8002694:	f001 fff2 	bl	800467c <RCCEx_PLL2_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800269e:	e004      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80026a6:	e000      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80026a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80026b2:	4b99      	ldr	r3, [pc, #612]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80026b8:	f023 0107 	bic.w	r1, r3, #7
 80026bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c2:	4a95      	ldr	r2, [pc, #596]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026c4:	430b      	orrs	r3, r1
 80026c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80026ca:	e003      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80026d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f002 0a02 	and.w	sl, r2, #2
 80026e0:	f04f 0b00 	mov.w	fp, #0
 80026e4:	ea5a 030b 	orrs.w	r3, sl, fp
 80026e8:	d03c      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80026ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f0:	2b28      	cmp	r3, #40	@ 0x28
 80026f2:	d01b      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x124>
 80026f4:	2b28      	cmp	r3, #40	@ 0x28
 80026f6:	d815      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d019      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d811      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002700:	2b18      	cmp	r3, #24
 8002702:	d017      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002704:	2b18      	cmp	r3, #24
 8002706:	d80d      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800270c:	2b08      	cmp	r3, #8
 800270e:	d109      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002710:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002714:	3308      	adds	r3, #8
 8002716:	4618      	mov	r0, r3
 8002718:	f001 ffb0 	bl	800467c <RCCEx_PLL2_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002722:	e00a      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800272a:	e006      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800272c:	bf00      	nop
 800272e:	e004      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002730:	bf00      	nop
 8002732:	e002      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800273a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002742:	4b75      	ldr	r3, [pc, #468]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002748:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800274c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002752:	4a71      	ldr	r2, [pc, #452]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002754:	430b      	orrs	r3, r1
 8002756:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800275a:	e003      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002760:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f002 0304 	and.w	r3, r2, #4
 8002770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800277a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800277e:	460b      	mov	r3, r1
 8002780:	4313      	orrs	r3, r2
 8002782:	d040      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002784:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800278e:	d01e      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002790:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002794:	d817      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800279a:	d01a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800279c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a0:	d811      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80027a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80027a4:	d017      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80027a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80027a8:	d80d      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d015      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d109      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027b6:	3308      	adds	r3, #8
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 ff5f 	bl	800467c <RCCEx_PLL2_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80027c4:	e00a      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80027cc:	e006      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80027ce:	bf00      	nop
 80027d0:	e004      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10c      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80027e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027ea:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80027ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	4a48      	ldr	r2, [pc, #288]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027f6:	430b      	orrs	r3, r1
 80027f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027fc:	e003      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002802:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002806:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800281c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002820:	460b      	mov	r3, r1
 8002822:	4313      	orrs	r3, r2
 8002824:	d043      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002826:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002830:	d021      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002832:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002836:	d81a      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800283c:	d01d      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800283e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002842:	d814      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002848:	d019      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800284a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800284e:	d80e      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d016      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002858:	d109      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800285a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800285e:	3308      	adds	r3, #8
 8002860:	4618      	mov	r0, r3
 8002862:	f001 ff0b 	bl	800467c <RCCEx_PLL2_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800286c:	e00a      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002874:	e006      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002876:	bf00      	nop
 8002878:	e004      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002884:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10c      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800288c:	4b22      	ldr	r3, [pc, #136]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002892:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002896:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	4a1e      	ldr	r2, [pc, #120]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800289e:	430b      	orrs	r3, r1
 80028a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028a4:	e003      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80028aa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80028ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028bc:	2300      	movs	r3, #0
 80028be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80028c4:	460b      	mov	r3, r1
 80028c6:	4313      	orrs	r3, r2
 80028c8:	d03e      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80028ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028d4:	d01b      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x306>
 80028d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028da:	d814      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80028dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028e0:	d017      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80028e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028e6:	d80e      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x314>
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f0:	d109      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028f6:	3308      	adds	r3, #8
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 febf 	bl	800467c <RCCEx_PLL2_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002904:	e00b      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800290c:	e007      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800290e:	bf00      	nop
 8002910:	e005      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002912:	bf00      	nop
 8002914:	e003      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002916:	bf00      	nop
 8002918:	44020c00 	.word	0x44020c00
        break;
 800291c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002926:	4ba5      	ldr	r3, [pc, #660]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002928:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800292c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002930:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	4aa1      	ldr	r2, [pc, #644]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002938:	430b      	orrs	r3, r1
 800293a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800293e:	e003      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002940:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002944:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002948:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002954:	673b      	str	r3, [r7, #112]	@ 0x70
 8002956:	2300      	movs	r3, #0
 8002958:	677b      	str	r3, [r7, #116]	@ 0x74
 800295a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800295e:	460b      	mov	r3, r1
 8002960:	4313      	orrs	r3, r2
 8002962:	d03b      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002964:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800296e:	d01b      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002970:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002974:	d814      	bhi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002976:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800297a:	d017      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800297c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002980:	d80e      	bhi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d014      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002986:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800298a:	d109      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800298c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002990:	3308      	adds	r3, #8
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fe72 	bl	800467c <RCCEx_PLL2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800299e:	e008      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80029a6:	e004      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80029a8:	bf00      	nop
 80029aa:	e002      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80029ac:	bf00      	nop
 80029ae:	e000      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80029b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80029ba:	4b80      	ldr	r3, [pc, #512]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80029bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80029c0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80029c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ca:	4a7c      	ldr	r2, [pc, #496]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80029cc:	430b      	orrs	r3, r1
 80029ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80029d2:	e003      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80029d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80029dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80029e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ea:	2300      	movs	r3, #0
 80029ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80029f2:	460b      	mov	r3, r1
 80029f4:	4313      	orrs	r3, r2
 80029f6:	d033      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80029f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a02:	d015      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002a04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a08:	d80e      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a12:	d109      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a18:	3308      	adds	r3, #8
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fe2e 	bl	800467c <RCCEx_PLL2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002a26:	e006      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a44:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a50:	430b      	orrs	r3, r1
 8002a52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002a56:	e003      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002a5c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	6639      	str	r1, [r7, #96]	@ 0x60
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a70:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002a76:	460b      	mov	r3, r1
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	d033      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a8c:	d80e      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a96:	d109      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fdec 	bl	800467c <RCCEx_PLL2_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002aaa:	e006      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002ab4:	bf00      	nop
 8002ab6:	e000      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002ab8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002aba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ac8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002acc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad2:	4a3a      	ldr	r2, [pc, #232]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002ada:	e003      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002adc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ae0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	2100      	movs	r1, #0
 8002aee:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002af6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002afa:	460b      	mov	r3, r1
 8002afc:	4313      	orrs	r3, r2
 8002afe:	d00e      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b0a:	61d3      	str	r3, [r2, #28]
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b0e:	69d9      	ldr	r1, [r3, #28]
 8002b10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b18:	4a28      	ldr	r2, [pc, #160]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b30:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002b34:	460b      	mov	r3, r1
 8002b36:	4313      	orrs	r3, r2
 8002b38:	d046      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b40:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002b44:	d021      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002b46:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002b4a:	d81a      	bhi.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b50:	d01d      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b56:	d814      	bhi.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b5c:	d019      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b62:	d80e      	bhi.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d016      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b72:	3308      	adds	r3, #8
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 fd81 	bl	800467c <RCCEx_PLL2_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002b80:	e00a      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002b88:	e006      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002b8a:	bf00      	nop
 8002b8c:	e004      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002b8e:	bf00      	nop
 8002b90:	e002      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b98:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ba2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002ba6:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002baa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	4a02      	ldr	r2, [pc, #8]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002bba:	bf00      	nop
 8002bbc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002bc4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002bde:	460b      	mov	r3, r1
 8002be0:	4313      	orrs	r3, r2
 8002be2:	d043      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002bee:	d021      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002bf0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002bf4:	d81a      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002bf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bfa:	d01d      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c00:	d814      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002c02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c06:	d019      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x634>
 8002c08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c0c:	d80e      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c16:	d109      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 fd2c 	bl	800467c <RCCEx_PLL2_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002c32:	e006      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002c34:	bf00      	nop
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002c38:	bf00      	nop
 8002c3a:	e002      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002c4a:	4bb6      	ldr	r3, [pc, #728]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002c50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	4ab2      	ldr	r2, [pc, #712]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002c62:	e003      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002c6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8002c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002c82:	460b      	mov	r3, r1
 8002c84:	4313      	orrs	r3, r2
 8002c86:	d030      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002c88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d80f      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d211      	bcs.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d911      	bls.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 fce9 	bl	800467c <RCCEx_PLL2_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002cb0:	e006      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002cc8:	4b96      	ldr	r3, [pc, #600]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cce:	f023 0107 	bic.w	r1, r3, #7
 8002cd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd8:	4a92      	ldr	r2, [pc, #584]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ce0:	e003      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ce6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cfc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002d00:	460b      	mov	r3, r1
 8002d02:	4313      	orrs	r3, r2
 8002d04:	d022      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x714>
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d005      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d22:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002d2a:	4b7e      	ldr	r3, [pc, #504]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d30:	f023 0108 	bic.w	r1, r3, #8
 8002d34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d48:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002d62:	460b      	mov	r3, r1
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f000 80b0 	beq.w	8002eca <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d76:	f7fe f8ef 	bl	8000f58 <HAL_GetTick>
 8002d7a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d80:	f7fe f8ea 	bl	8000f58 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d903      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002d98:	4b63      	ldr	r3, [pc, #396]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ed      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8002da4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f040 808a 	bne.w	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dae:	4b5d      	ldr	r3, [pc, #372]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d022      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d01b      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dd2:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002de0:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002de6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002df0:	4b4c      	ldr	r3, [pc, #304]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002df6:	4a4b      	ldr	r2, [pc, #300]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e00:	4a48      	ldr	r2, [pc, #288]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe f89f 	bl	8000f58 <HAL_GetTick>
 8002e1a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1e:	e00d      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe f89a 	bl	8000f58 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d903      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8002e3a:	e006      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3c:	4b39      	ldr	r3, [pc, #228]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ea      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8002e4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d132      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e60:	d10f      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002e62:	4b30      	ldr	r3, [pc, #192]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	61d3      	str	r3, [r2, #28]
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8002e82:	4b28      	ldr	r3, [pc, #160]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4a27      	ldr	r2, [pc, #156]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e8c:	61d3      	str	r3, [r2, #28]
 8002e8e:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e94:	4a23      	ldr	r2, [pc, #140]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e9e:	4b21      	ldr	r3, [pc, #132]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ea0:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8002ea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eae:	4a1d      	ldr	r2, [pc, #116]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002eb6:	e008      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eb8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ebc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8002ec0:	e003      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ec6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002edc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	d038      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eec:	2b30      	cmp	r3, #48	@ 0x30
 8002eee:	d014      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002ef0:	2b30      	cmp	r3, #48	@ 0x30
 8002ef2:	d80e      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d012      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x916>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d80a      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d106      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f04:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	4a06      	ldr	r2, [pc, #24]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8002f10:	e00d      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002f18:	e009      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002f1a:	bf00      	nop
 8002f1c:	e007      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002f1e:	bf00      	nop
 8002f20:	e005      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x926>
 8002f22:	bf00      	nop
 8002f24:	44020c00 	.word	0x44020c00
 8002f28:	44020800 	.word	0x44020800
        break;
 8002f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002f36:	4bb5      	ldr	r3, [pc, #724]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f46:	49b1      	ldr	r1, [pc, #708]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8002f4e:	e003      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f54:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	d03c      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8002f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d81d      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8002f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002f99 	.word	0x08002f99
 8002f88:	08002fa7 	.word	0x08002fa7
 8002f8c:	08002fbb 	.word	0x08002fbb
 8002f90:	08002fc3 	.word	0x08002fc3
 8002f94:	08002fc3 	.word	0x08002fc3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f98:	4b9c      	ldr	r3, [pc, #624]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	4a9b      	ldr	r2, [pc, #620]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002faa:	3308      	adds	r3, #8
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 fb65 	bl	800467c <RCCEx_PLL2_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002fb8:	e004      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8002fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fdc:	498b      	ldr	r1, [pc, #556]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8002fe4:	e003      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fea:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003004:	460b      	mov	r3, r1
 8003006:	4313      	orrs	r3, r2
 8003008:	d03c      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800300a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	2b20      	cmp	r3, #32
 8003012:	d01f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d819      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003018:	2b18      	cmp	r3, #24
 800301a:	d01d      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800301c:	2b18      	cmp	r3, #24
 800301e:	d815      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003024:	2b08      	cmp	r3, #8
 8003026:	d007      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003028:	e010      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302a:	4b78      	ldr	r3, [pc, #480]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	4a77      	ldr	r2, [pc, #476]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003034:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003036:	e010      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003038:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800303c:	3308      	adds	r3, #8
 800303e:	4618      	mov	r0, r3
 8003040:	f001 fb1c 	bl	800467c <RCCEx_PLL2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800304a:	e006      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003052:	e002      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003062:	4b6a      	ldr	r3, [pc, #424]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003068:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800306c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4966      	ldr	r1, [pc, #408]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800307a:	e003      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003080:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003084:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800309a:	460b      	mov	r3, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	d03e      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80030a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030aa:	d020      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80030ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b0:	d819      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80030b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80030b4:	d01d      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80030b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80030b8:	d815      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80030be:	2b40      	cmp	r3, #64	@ 0x40
 80030c0:	d007      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80030c2:	e010      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c4:	4b51      	ldr	r3, [pc, #324]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	4a50      	ldr	r2, [pc, #320]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80030d0:	e010      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d6:	3308      	adds	r3, #8
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 facf 	bl	800467c <RCCEx_PLL2_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80030f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80030fc:	4b43      	ldr	r3, [pc, #268]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003102:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003106:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800310a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310c:	493f      	ldr	r1, [pc, #252]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003114:	e003      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003116:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800311a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800311e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	2100      	movs	r1, #0
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003134:	460b      	mov	r3, r1
 8003136:	4313      	orrs	r3, r2
 8003138:	d038      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800313a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003144:	d00e      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800314a:	d815      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d017      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003154:	d110      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003156:	4b2d      	ldr	r3, [pc, #180]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	4a2c      	ldr	r2, [pc, #176]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800315c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003160:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003162:	e00e      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003164:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003168:	3308      	adds	r3, #8
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fa86 	bl	800467c <RCCEx_PLL2_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800318c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003194:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319a:	491c      	ldr	r1, [pc, #112]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80031a2:	e003      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	2100      	movs	r1, #0
 80031b6:	6039      	str	r1, [r7, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031c2:	460b      	mov	r3, r1
 80031c4:	4313      	orrs	r3, r2
 80031c6:	d039      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80031c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ce:	2b30      	cmp	r3, #48	@ 0x30
 80031d0:	d01e      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80031d2:	2b30      	cmp	r3, #48	@ 0x30
 80031d4:	d815      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d002      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d007      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80031de:	e010      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e0:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80031ec:	e011      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031f2:	3308      	adds	r3, #8
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fa41 	bl	800467c <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003200:	e007      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800320a:	bf00      	nop
 800320c:	44020c00 	.word	0x44020c00
        break;
 8003210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003212:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800321a:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800321c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003220:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003224:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800322a:	4908      	ldr	r1, [pc, #32]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003238:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 800323c:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003240:	4618      	mov	r0, r3
 8003242:	37a8      	adds	r7, #168	@ 0xa8
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	44020c00 	.word	0x44020c00

08003250 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003250:	b480      	push	{r7}
 8003252:	b08b      	sub	sp, #44	@ 0x2c
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003258:	4bae      	ldr	r3, [pc, #696]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800325a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003262:	4bac      	ldr	r3, [pc, #688]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800326c:	4ba9      	ldr	r3, [pc, #676]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003276:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003278:	4ba6      	ldr	r3, [pc, #664]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003284:	4ba3      	ldr	r3, [pc, #652]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8126 	beq.w	80034f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d053      	beq.n	8003356 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d86f      	bhi.n	8003394 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d003      	beq.n	80032c2 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d02b      	beq.n	8003318 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80032c0:	e068      	b.n	8003394 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80032c2:	4b94      	ldr	r3, [pc, #592]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	08db      	lsrs	r3, r3, #3
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	4a92      	ldr	r2, [pc, #584]	@ (8003518 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80032fa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800351c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003316:	e068      	b.n	80033ea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003520 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	ee07 3a90 	vmov	s15, r3
 8003330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003334:	ed97 6a04 	vldr	s12, [r7, #16]
 8003338:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800351c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800333c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003350:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003354:	e049      	b.n	80033ea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003360:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003524 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a04 	vldr	s12, [r7, #16]
 8003376:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800351c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003392:	e02a      	b.n	80033ea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003394:	4b5f      	ldr	r3, [pc, #380]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	4a5e      	ldr	r2, [pc, #376]	@ (8003518 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80033cc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800351c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80033d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80033e8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80033ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033f6:	d121      	bne.n	800343c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80033f8:	4b46      	ldr	r3, [pc, #280]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d017      	beq.n	8003434 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003404:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003408:	0a5b      	lsrs	r3, r3, #9
 800340a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800341a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800341e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e006      	b.n	8003442 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e002      	b.n	8003442 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003442:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800344e:	d121      	bne.n	8003494 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003450:	4b30      	ldr	r3, [pc, #192]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800345c:	4b2d      	ldr	r3, [pc, #180]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800346e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003472:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003476:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800347a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800347e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003482:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e006      	b.n	800349a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e002      	b.n	800349a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800349a:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034a6:	d121      	bne.n	80034ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d017      	beq.n	80034e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80034b4:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80034b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b8:	0e1b      	lsrs	r3, r3, #24
 80034ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80034c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80034ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80034d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034da:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80034e2:	e010      	b.n	8003506 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
}
 80034ea:	e00c      	b.n	8003506 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
}
 80034f2:	e008      	b.n	8003506 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
}
 8003506:	bf00      	nop
 8003508:	372c      	adds	r7, #44	@ 0x2c
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	44020c00 	.word	0x44020c00
 8003518:	03d09000 	.word	0x03d09000
 800351c:	46000000 	.word	0x46000000
 8003520:	4a742400 	.word	0x4a742400
 8003524:	4bb71b00 	.word	0x4bb71b00

08003528 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003528:	b480      	push	{r7}
 800352a:	b08b      	sub	sp, #44	@ 0x2c
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003530:	4bae      	ldr	r3, [pc, #696]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003538:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800353a:	4bac      	ldr	r3, [pc, #688]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003544:	4ba9      	ldr	r3, [pc, #676]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800354e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003550:	4ba6      	ldr	r3, [pc, #664]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800355c:	4ba3      	ldr	r3, [pc, #652]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003574:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8126 	beq.w	80037cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d053      	beq.n	800362e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d86f      	bhi.n	800366c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d003      	beq.n	800359a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d02b      	beq.n	80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003598:	e068      	b.n	800366c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800359a:	4b94      	ldr	r3, [pc, #592]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	08db      	lsrs	r3, r3, #3
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	4a92      	ldr	r2, [pc, #584]	@ (80037f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80035d2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80037f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80035ee:	e068      	b.n	80036c2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80037f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003610:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80037f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003628:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800362c:	e049      	b.n	80036c2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003638:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80037fc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800363c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 6a04 	vldr	s12, [r7, #16]
 800364e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80037f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800365e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800366a:	e02a      	b.n	80036c2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800366c:	4b5f      	ldr	r3, [pc, #380]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	08db      	lsrs	r3, r3, #3
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	4a5e      	ldr	r2, [pc, #376]	@ (80037f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80036a4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80037f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80036a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80036c0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80036c2:	4b4a      	ldr	r3, [pc, #296]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ce:	d121      	bne.n	8003714 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80036d0:	4b46      	ldr	r3, [pc, #280]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80036dc:	4b43      	ldr	r3, [pc, #268]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	0a5b      	lsrs	r3, r3, #9
 80036e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80036ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80036f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80036fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003702:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e006      	b.n	800371a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e002      	b.n	800371a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800371a:	4b34      	ldr	r3, [pc, #208]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003726:	d121      	bne.n	800376c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003728:	4b30      	ldr	r3, [pc, #192]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d017      	beq.n	8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003734:	4b2d      	ldr	r3, [pc, #180]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800374a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800374e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	e006      	b.n	8003772 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e002      	b.n	8003772 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003772:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800377a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800377e:	d121      	bne.n	80037c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003780:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d017      	beq.n	80037bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800378c:	4b17      	ldr	r3, [pc, #92]	@ (80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800378e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003790:	0e1b      	lsrs	r3, r3, #24
 8003792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800379e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80037a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80037aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80037ba:	e010      	b.n	80037de <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	e00c      	b.n	80037de <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
}
 80037ca:	e008      	b.n	80037de <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
}
 80037de:	bf00      	nop
 80037e0:	372c      	adds	r7, #44	@ 0x2c
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	44020c00 	.word	0x44020c00
 80037f0:	03d09000 	.word	0x03d09000
 80037f4:	46000000 	.word	0x46000000
 80037f8:	4a742400 	.word	0x4a742400
 80037fc:	4bb71b00 	.word	0x4bb71b00

08003800 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800380a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8003812:	430b      	orrs	r3, r1
 8003814:	d14b      	bne.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003816:	4bc4      	ldr	r3, [pc, #784]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800381c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003822:	4bc1      	ldr	r3, [pc, #772]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d108      	bne.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003836:	d104      	bne.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800383e:	f000 bf14 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003842:	4bb9      	ldr	r3, [pc, #740]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800384c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003850:	d108      	bne.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003858:	d104      	bne.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800385a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003860:	f000 bf03 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003864:	4bb0      	ldr	r3, [pc, #704]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003870:	d119      	bne.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003874:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003878:	d115      	bne.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800387a:	4bab      	ldr	r3, [pc, #684]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003886:	d30a      	bcc.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003888:	4ba7      	ldr	r3, [pc, #668]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003892:	4aa6      	ldr	r2, [pc, #664]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800389a:	f000 bee6 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80038a2:	f000 bee2 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038aa:	f000 bede 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80038ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b2:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80038b6:	ea52 0301 	orrs.w	r3, r2, r1
 80038ba:	f000 838e 	beq.w	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80038be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c2:	2a01      	cmp	r2, #1
 80038c4:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80038c8:	f080 86cc 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d0:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80038d4:	ea52 0301 	orrs.w	r3, r2, r1
 80038d8:	f000 82aa 	beq.w	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80038dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038e0:	2a01      	cmp	r2, #1
 80038e2:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80038e6:	f080 86bd 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ee:	f1a3 0110 	sub.w	r1, r3, #16
 80038f2:	ea52 0301 	orrs.w	r3, r2, r1
 80038f6:	f000 8681 	beq.w	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80038fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fe:	2a01      	cmp	r2, #1
 8003900:	f173 0310 	sbcs.w	r3, r3, #16
 8003904:	f080 86ae 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390c:	1f19      	subs	r1, r3, #4
 800390e:	ea52 0301 	orrs.w	r3, r2, r1
 8003912:	f000 84b1 	beq.w	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8003916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800391a:	2a01      	cmp	r2, #1
 800391c:	f173 0304 	sbcs.w	r3, r3, #4
 8003920:	f080 86a0 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003928:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800392c:	430b      	orrs	r3, r1
 800392e:	f000 85aa 	beq.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8003932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003936:	497e      	ldr	r1, [pc, #504]	@ (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003938:	428a      	cmp	r2, r1
 800393a:	f173 0300 	sbcs.w	r3, r3, #0
 800393e:	f080 8691 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003946:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800394a:	430b      	orrs	r3, r1
 800394c:	f000 8532 	beq.w	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8003950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003954:	4977      	ldr	r1, [pc, #476]	@ (8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8003956:	428a      	cmp	r2, r1
 8003958:	f173 0300 	sbcs.w	r3, r3, #0
 800395c:	f080 8682 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003964:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8003968:	430b      	orrs	r3, r1
 800396a:	f000 84bc 	beq.w	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800396e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003972:	4971      	ldr	r1, [pc, #452]	@ (8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8003974:	428a      	cmp	r2, r1
 8003976:	f173 0300 	sbcs.w	r3, r3, #0
 800397a:	f080 8673 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800397e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003982:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8003986:	430b      	orrs	r3, r1
 8003988:	f000 85f2 	beq.w	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 800398c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003990:	496a      	ldr	r1, [pc, #424]	@ (8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8003992:	428a      	cmp	r2, r1
 8003994:	f173 0300 	sbcs.w	r3, r3, #0
 8003998:	f080 8664 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800399c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039a0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80039a4:	430b      	orrs	r3, r1
 80039a6:	f000 81e5 	beq.w	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80039aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ae:	4964      	ldr	r1, [pc, #400]	@ (8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80039b0:	428a      	cmp	r2, r1
 80039b2:	f173 0300 	sbcs.w	r3, r3, #0
 80039b6:	f080 8655 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039be:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f000 83cc 	beq.w	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80039c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039cc:	495d      	ldr	r1, [pc, #372]	@ (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80039ce:	428a      	cmp	r2, r1
 80039d0:	f173 0300 	sbcs.w	r3, r3, #0
 80039d4:	f080 8646 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039dc:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80039e0:	430b      	orrs	r3, r1
 80039e2:	f000 8331 	beq.w	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80039e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ea:	4957      	ldr	r1, [pc, #348]	@ (8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80039ec:	428a      	cmp	r2, r1
 80039ee:	f173 0300 	sbcs.w	r3, r3, #0
 80039f2:	f080 8637 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039fa:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80039fe:	430b      	orrs	r3, r1
 8003a00:	f000 82bb 	beq.w	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8003a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a08:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8003a0c:	f173 0300 	sbcs.w	r3, r3, #0
 8003a10:	f080 8628 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a18:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	f000 826d 	beq.w	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8003a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a26:	f244 0101 	movw	r1, #16385	@ 0x4001
 8003a2a:	428a      	cmp	r2, r1
 8003a2c:	f173 0300 	sbcs.w	r3, r3, #0
 8003a30:	f080 8618 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a38:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	f000 821e 	beq.w	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8003a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a46:	f242 0101 	movw	r1, #8193	@ 0x2001
 8003a4a:	428a      	cmp	r2, r1
 8003a4c:	f173 0300 	sbcs.w	r3, r3, #0
 8003a50:	f080 8608 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a58:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	f000 8137 	beq.w	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a66:	f241 0101 	movw	r1, #4097	@ 0x1001
 8003a6a:	428a      	cmp	r2, r1
 8003a6c:	f173 0300 	sbcs.w	r3, r3, #0
 8003a70:	f080 85f8 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a78:	1f11      	subs	r1, r2, #4
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	f000 80d2 	beq.w	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8003a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a84:	2a05      	cmp	r2, #5
 8003a86:	f173 0300 	sbcs.w	r3, r3, #0
 8003a8a:	f080 85eb 	bcs.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a92:	1e51      	subs	r1, r2, #1
 8003a94:	430b      	orrs	r3, r1
 8003a96:	d006      	beq.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8003a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9c:	1e91      	subs	r1, r2, #2
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	d06c      	beq.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003aa2:	f000 bddf 	b.w	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003aa6:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fd7a 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8003abc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003abe:	f000 bdd4 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8003ac2:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ace:	d10a      	bne.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fd24 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ae4:	e048      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003ae6:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d109      	bne.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003af8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	08db      	lsrs	r3, r3, #3
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b0a:	e035      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d119      	bne.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b24:	e028      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003b26:	bf00      	nop
 8003b28:	44020c00 	.word	0x44020c00
 8003b2c:	016e3600 	.word	0x016e3600
 8003b30:	20000001 	.word	0x20000001
 8003b34:	10000001 	.word	0x10000001
 8003b38:	08000001 	.word	0x08000001
 8003b3c:	04000001 	.word	0x04000001
 8003b40:	00200001 	.word	0x00200001
 8003b44:	00040001 	.word	0x00040001
 8003b48:	00020001 	.word	0x00020001
 8003b4c:	03d09000 	.word	0x03d09000
 8003b50:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003b54:	4b9f      	ldr	r3, [pc, #636]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d106      	bne.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d103      	bne.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8003b68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b6e:	e003      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b74:	f000 bd79 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003b78:	f000 bd77 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003b7c:	4b95      	ldr	r3, [pc, #596]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b8e:	f7fe fcf9 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8003b92:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b94:	f000 bd69 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003b98:	4b8e      	ldr	r3, [pc, #568]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d107      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fcb9 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bba:	e031      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003bbc:	4b85      	ldr	r3, [pc, #532]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bca:	2b18      	cmp	r3, #24
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bce:	4b81      	ldr	r3, [pc, #516]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	08db      	lsrs	r3, r3, #3
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	4a7f      	ldr	r2, [pc, #508]	@ (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be0:	e01e      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003be2:	4b7c      	ldr	r3, [pc, #496]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bee:	d105      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8003bf6:	4b79      	ldr	r3, [pc, #484]	@ (8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfa:	e011      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003bfc:	4b75      	ldr	r3, [pc, #468]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d106      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	2b28      	cmp	r3, #40	@ 0x28
 8003c0e:	d103      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8003c10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c1c:	f000 bd25 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003c20:	f000 bd23 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003c24:	4b6b      	ldr	r3, [pc, #428]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c2a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c36:	f7fe fca5 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8003c3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003c3c:	f000 bd15 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003c40:	4b64      	ldr	r3, [pc, #400]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c4c:	d10a      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8003c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d107      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fc65 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c62:	e033      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003c64:	4b5b      	ldr	r3, [pc, #364]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c74:	d109      	bne.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c76:	4b57      	ldr	r3, [pc, #348]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	4a55      	ldr	r2, [pc, #340]	@ (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c88:	e020      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003c8a:	4b52      	ldr	r3, [pc, #328]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c9e:	d102      	bne.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca4:	e012      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003cba:	d103      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8003cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cc8:	f000 bccf 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003ccc:	f000 bccd 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003cd0:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003ce2:	f7fe fc7b 	bl	80025dc <HAL_RCC_GetPCLK3Freq>
 8003ce6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ce8:	f000 bcbf 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cf2:	d108      	bne.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cf4:	f107 030c 	add.w	r3, r7, #12
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fc15 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d02:	f000 bcb2 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003d06:	4b33      	ldr	r3, [pc, #204]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d10d      	bne.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8003d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d18:	d109      	bne.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	08db      	lsrs	r3, r3, #3
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003d26:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d2c:	e020      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8003d2e:	4b29      	ldr	r3, [pc, #164]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8003d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d42:	d102      	bne.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8003d44:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d48:	e012      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003d4a:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d107      	bne.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003d5e:	d103      	bne.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d66:	e003      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d6c:	f000 bc7d 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003d70:	f000 bc7b 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003d74:	4b17      	ldr	r3, [pc, #92]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003d86:	f7fe fbe1 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8003d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003d8c:	f000 bc6d 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d104      	bne.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d96:	f7fe faad 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8003d9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8003d9c:	f000 bc65 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d108      	bne.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fbbc 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003db4:	f000 bc59 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003db8:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dc4:	d10e      	bne.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d10b      	bne.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd0:	e02c      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8003dd2:	bf00      	nop
 8003dd4:	44020c00 	.word	0x44020c00
 8003dd8:	03d09000 	.word	0x03d09000
 8003ddc:	003d0900 	.word	0x003d0900
 8003de0:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003de4:	4b95      	ldr	r3, [pc, #596]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d109      	bne.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003df6:	4b91      	ldr	r3, [pc, #580]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	08db      	lsrs	r3, r3, #3
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	4a8f      	ldr	r2, [pc, #572]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e08:	e010      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8003e0a:	4b8c      	ldr	r3, [pc, #560]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e16:	d105      	bne.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d102      	bne.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8003e1e:	4b89      	ldr	r3, [pc, #548]	@ (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e22:	e003      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e28:	f000 bc1f 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003e2c:	f000 bc1d 	b.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003e30:	4b82      	ldr	r3, [pc, #520]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8003e3c:	4b7f      	ldr	r3, [pc, #508]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d106      	bne.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003e50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e56:	e011      	b.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003e58:	4b78      	ldr	r3, [pc, #480]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e66:	d106      	bne.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d103      	bne.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8003e6e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8003e7a:	e3f6      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003e7c:	e3f5      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fb78 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8003e94:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e96:	e3e8      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fb3f 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003eae:	e3dc      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003eb0:	4b62      	ldr	r3, [pc, #392]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec2:	d109      	bne.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	08db      	lsrs	r3, r3, #3
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	4a5c      	ldr	r2, [pc, #368]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed6:	e010      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003ed8:	4b58      	ldr	r3, [pc, #352]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003eec:	d102      	bne.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8003eee:	4b55      	ldr	r3, [pc, #340]	@ (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef2:	e002      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ef8:	e3b7      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003efa:	e3b6      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003efc:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003efe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f02:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f0e:	f7fe fb39 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8003f12:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f14:	e3a9      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f1e:	f107 030c 	add.w	r3, r7, #12
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fb00 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f2c:	e39d      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003f2e:	4b43      	ldr	r3, [pc, #268]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d10d      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f40:	d109      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f42:	4b3e      	ldr	r3, [pc, #248]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f54:	e010      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8003f56:	4b39      	ldr	r3, [pc, #228]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f62:	d106      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f6a:	d102      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8003f6c:	4b35      	ldr	r3, [pc, #212]	@ (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f76:	e378      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003f78:	e377      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003f7a:	4b30      	ldr	r3, [pc, #192]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f80:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003f84:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe fafa 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8003f90:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f92:	e36a      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8003f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f9a:	d107      	bne.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fac1 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003faa:	e35e      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8003fac:	4b23      	ldr	r3, [pc, #140]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d10d      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	4a1d      	ldr	r2, [pc, #116]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fd2:	e34a      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fd8:	e347      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003fda:	4b18      	ldr	r3, [pc, #96]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fe0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d103      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003fec:	f7fe faf6 	bl	80025dc <HAL_RCC_GetPCLK3Freq>
 8003ff0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ff2:	e33a      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8003ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ffa:	d107      	bne.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fa91 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800400a:	e32e      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b02      	cmp	r3, #2
 8004016:	d10d      	bne.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800401e:	d109      	bne.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	08db      	lsrs	r3, r3, #3
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	4a05      	ldr	r2, [pc, #20]	@ (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004032:	e31a      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004038:	e317      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800403a:	bf00      	nop
 800403c:	44020c00 	.word	0x44020c00
 8004040:	03d09000 	.word	0x03d09000
 8004044:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004048:	4b9b      	ldr	r3, [pc, #620]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800404a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800404e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800405a:	d044      	beq.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004062:	d879      	bhi.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d02d      	beq.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800406c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004072:	d871      	bhi.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800407a:	d017      	beq.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004082:	d869      	bhi.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800408a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004090:	d004      	beq.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004092:	e061      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004094:	f7fe faa2 	bl	80025dc <HAL_RCC_GetPCLK3Freq>
 8004098:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800409a:	e060      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fa41 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80040aa:	e058      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040ac:	4b82      	ldr	r3, [pc, #520]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d103      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80040c0:	e04d      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80040c6:	e04a      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80040c8:	4b7b      	ldr	r3, [pc, #492]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040d6:	d103      	bne.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 80040d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80040dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80040de:	e03e      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80040e4:	e03b      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80040e6:	4b74      	ldr	r3, [pc, #464]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80040f2:	4b71      	ldr	r3, [pc, #452]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d10c      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004104:	4b6c      	ldr	r3, [pc, #432]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	4a6b      	ldr	r2, [pc, #428]	@ (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004116:	e01e      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004118:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004124:	d106      	bne.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d102      	bne.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800412e:	4b64      	ldr	r3, [pc, #400]	@ (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004132:	e010      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004134:	4b60      	ldr	r3, [pc, #384]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004140:	d106      	bne.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004148:	d102      	bne.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800414a:	4b5e      	ldr	r3, [pc, #376]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800414e:	e002      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004154:	e003      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004156:	e002      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800415c:	bf00      	nop
          }
        }
        break;
 800415e:	e284      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004160:	4b55      	ldr	r3, [pc, #340]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004162:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004166:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004172:	d044      	beq.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800417a:	d879      	bhi.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004182:	d02d      	beq.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800418a:	d871      	bhi.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800418c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004192:	d017      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800419a:	d869      	bhi.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a8:	d004      	beq.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80041aa:	e061      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80041ac:	f7fe f9ea 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 80041b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80041b2:	e060      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff f9b5 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80041c2:	e058      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041c4:	4b3c      	ldr	r3, [pc, #240]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d103      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 80041d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80041d8:	e04d      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80041de:	e04a      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80041e0:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ee:	d103      	bne.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 80041f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80041f6:	e03e      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80041fc:	e03b      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80041fe:	4b2e      	ldr	r3, [pc, #184]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004204:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800420a:	4b2b      	ldr	r3, [pc, #172]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d10c      	bne.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800421c:	4b26      	ldr	r3, [pc, #152]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	08db      	lsrs	r3, r3, #3
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	4a25      	ldr	r2, [pc, #148]	@ (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800422e:	e01e      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004230:	4b21      	ldr	r3, [pc, #132]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800423c:	d106      	bne.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004244:	d102      	bne.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004246:	4b1e      	ldr	r3, [pc, #120]	@ (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800424a:	e010      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800424c:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004258:	d106      	bne.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004260:	d102      	bne.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004262:	4b18      	ldr	r3, [pc, #96]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004266:	e002      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800426e:	e002      	b.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004274:	bf00      	nop
          }
        }
        break;
 8004276:	e1f8      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004278:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800427a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800427e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004282:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004290:	d105      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004298:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800429a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800429c:	e1e5      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a4:	d110      	bne.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042a6:	f107 0318 	add.w	r3, r7, #24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe ffd0 	bl	8003250 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042b4:	e1d9      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80042b6:	bf00      	nop
 80042b8:	44020c00 	.word	0x44020c00
 80042bc:	03d09000 	.word	0x03d09000
 80042c0:	003d0900 	.word	0x003d0900
 80042c4:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ce:	d107      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f927 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042de:	e1c4      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042e4:	e1c1      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80042e6:	4b9d      	ldr	r3, [pc, #628]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80042e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d859      	bhi.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80042f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004300 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004315 	.word	0x08004315
 8004304:	08004325 	.word	0x08004325
 8004308:	080043ad 	.word	0x080043ad
 800430c:	08004335 	.word	0x08004335
 8004310:	0800433b 	.word	0x0800433b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004314:	f107 0318 	add.w	r3, r7, #24
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe ff99 	bl	8003250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004322:	e046      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004324:	f107 030c 	add.w	r3, r7, #12
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff f8fd 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004332:	e03e      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004334:	4b8a      	ldr	r3, [pc, #552]	@ (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004338:	e03b      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800433a:	4b88      	ldr	r3, [pc, #544]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800433c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004340:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004346:	4b85      	ldr	r3, [pc, #532]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004358:	4b80      	ldr	r3, [pc, #512]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	4a80      	ldr	r2, [pc, #512]	@ (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800436a:	e01e      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800436c:	4b7b      	ldr	r3, [pc, #492]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004378:	d106      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004380:	d102      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004382:	4b79      	ldr	r3, [pc, #484]	@ (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004386:	e010      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004388:	4b74      	ldr	r3, [pc, #464]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004394:	d106      	bne.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800439c:	d102      	bne.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800439e:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a2:	e002      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80043aa:	e002      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80043b0:	bf00      	nop
          }
        }
        break;
 80043b2:	e15a      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80043b4:	4b69      	ldr	r3, [pc, #420]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80043b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d022      	beq.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d858      	bhi.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	2b18      	cmp	r3, #24
 80043d0:	d019      	beq.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	2b18      	cmp	r3, #24
 80043d6:	d852      	bhi.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80043e4:	e04b      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043e6:	f107 0318 	add.w	r3, r7, #24
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe ff30 	bl	8003250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80043f4:	e046      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f894 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004404:	e03e      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004406:	4b56      	ldr	r3, [pc, #344]	@ (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800440a:	e03b      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800440c:	4b53      	ldr	r3, [pc, #332]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800440e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004412:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004418:	4b50      	ldr	r3, [pc, #320]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d10c      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800442a:	4b4c      	ldr	r3, [pc, #304]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	08db      	lsrs	r3, r3, #3
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	4a4b      	ldr	r2, [pc, #300]	@ (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004436:	fa22 f303 	lsr.w	r3, r2, r3
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443c:	e01e      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800443e:	4b47      	ldr	r3, [pc, #284]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800444a:	d106      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004452:	d102      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004454:	4b44      	ldr	r3, [pc, #272]	@ (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004458:	e010      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800445a:	4b40      	ldr	r3, [pc, #256]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004466:	d106      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800446e:	d102      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004470:	4b3e      	ldr	r3, [pc, #248]	@ (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004474:	e002      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800447c:	e002      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004482:	bf00      	nop
          }
        }
        break;
 8004484:	e0f1      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004486:	4b35      	ldr	r3, [pc, #212]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800448c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004498:	d023      	beq.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800449a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a0:	d858      	bhi.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80044a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80044a6:	d019      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80044ac:	d852      	bhi.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	2b40      	cmp	r3, #64	@ 0x40
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 80044ba:	e04b      	b.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044bc:	f107 0318 	add.w	r3, r7, #24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fec5 	bl	8003250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80044ca:	e046      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff f829 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80044da:	e03e      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80044dc:	4b20      	ldr	r3, [pc, #128]	@ (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80044de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80044e0:	e03b      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044ee:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d10c      	bne.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004500:	4b16      	ldr	r3, [pc, #88]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	08db      	lsrs	r3, r3, #3
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	4a16      	ldr	r2, [pc, #88]	@ (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
 8004510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004512:	e01e      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004514:	4b11      	ldr	r3, [pc, #68]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004520:	d106      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004528:	d102      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800452a:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800452e:	e010      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800453c:	d106      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004544:	d102      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004546:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454a:	e002      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004550:	e003      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004552:	e002      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004558:	bf00      	nop
          }
        }
        break;
 800455a:	e086      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800455c:	44020c00 	.word	0x44020c00
 8004560:	00bb8000 	.word	0x00bb8000
 8004564:	03d09000 	.word	0x03d09000
 8004568:	003d0900 	.word	0x003d0900
 800456c:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004570:	4b40      	ldr	r3, [pc, #256]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004576:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800457c:	4b3d      	ldr	r3, [pc, #244]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004588:	d105      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004590:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004594:	e031      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004596:	4b37      	ldr	r3, [pc, #220]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045a2:	d10a      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	d107      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045aa:	f107 0318 	add.w	r3, r7, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fe4e 	bl	8003250 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b8:	e01f      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80045ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80045bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d106      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d103      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d4:	e011      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80045d6:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80045d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e4:	d106      	bne.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	2b30      	cmp	r3, #48	@ 0x30
 80045ea:	d103      	bne.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80045ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f2:	e002      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80045f8:	e037      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80045fa:	e036      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80045fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80045fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004602:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	2b10      	cmp	r3, #16
 800460c:	d107      	bne.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800460e:	f107 0318 	add.w	r3, r7, #24
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fe1c 	bl	8003250 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 800461c:	e025      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d10a      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	2b20      	cmp	r3, #32
 8004630:	d107      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004632:	f107 030c 	add.w	r3, r7, #12
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe ff76 	bl	8003528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004640:	e00f      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004642:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800464a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464e:	d105      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	2b30      	cmp	r3, #48	@ 0x30
 8004654:	d102      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004656:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800465a:	e002      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8004660:	e003      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004662:	e002      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004668:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800466c:	4618      	mov	r0, r3
 800466e:	3730      	adds	r7, #48	@ 0x30
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	44020c00 	.word	0x44020c00
 8004678:	02dc6c00 	.word	0x02dc6c00

0800467c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004684:	4b48      	ldr	r3, [pc, #288]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a47      	ldr	r2, [pc, #284]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800468a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800468e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004690:	f7fc fc62 	bl	8000f58 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004696:	e008      	b.n	80046aa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004698:	f7fc fc5e 	bl	8000f58 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e07a      	b.n	80047a0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046aa:	4b3f      	ldr	r3, [pc, #252]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80046b6:	4b3c      	ldr	r3, [pc, #240]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6852      	ldr	r2, [r2, #4]
 80046ca:	0212      	lsls	r2, r2, #8
 80046cc:	430a      	orrs	r2, r1
 80046ce:	4936      	ldr	r1, [pc, #216]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	3b01      	subs	r3, #1
 80046da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	025b      	lsls	r3, r3, #9
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004704:	4928      	ldr	r1, [pc, #160]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800470a:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	f023 020c 	bic.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	4924      	ldr	r1, [pc, #144]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800471c:	4b22      	ldr	r3, [pc, #136]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	f023 0220 	bic.w	r2, r3, #32
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	491f      	ldr	r1, [pc, #124]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800472e:	4b1e      	ldr	r3, [pc, #120]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	491c      	ldr	r1, [pc, #112]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800473c:	4b1a      	ldr	r3, [pc, #104]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004742:	f023 0310 	bic.w	r3, r3, #16
 8004746:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004748:	4b17      	ldr	r3, [pc, #92]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004750:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6a12      	ldr	r2, [r2, #32]
 8004758:	00d2      	lsls	r2, r2, #3
 800475a:	4913      	ldr	r1, [pc, #76]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004760:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004766:	f043 0310 	orr.w	r3, r3, #16
 800476a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800476c:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0d      	ldr	r2, [pc, #52]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004772:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004776:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004778:	f7fc fbee 	bl	8000f58 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800477e:	e008      	b.n	8004792 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004780:	f7fc fbea 	bl	8000f58 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e006      	b.n	80047a0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004792:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <RCCEx_PLL2_Config+0x12c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0

}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	44020c00 	.word	0x44020c00

080047ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e042      	b.n	8004844 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fc f9bb 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2224      	movs	r2, #36	@ 0x24
 80047da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fcb4 	bl	8005164 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb33 	bl	8004e68 <UART_SetConfig>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e01b      	b.n	8004844 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800481a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800482a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fd33 	bl	80052a8 <UART_CheckIdleState>
 8004842:	4603      	mov	r3, r0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b0ae      	sub	sp, #184	@ 0xb8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004876:	f640 030f 	movw	r3, #2063	@ 0x80f
 800487a:	4013      	ands	r3, r2
 800487c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8004880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11b      	bne.n	80048c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 82ac 	beq.w	8004e0e <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
      }
      return;
 80048be:	e2a6      	b.n	8004e0e <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80fd 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048ce:	4b7a      	ldr	r3, [pc, #488]	@ (8004ab8 <HAL_UART_IRQHandler+0x26c>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048da:	4b78      	ldr	r3, [pc, #480]	@ (8004abc <HAL_UART_IRQHandler+0x270>)
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80f0 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d011      	beq.n	8004914 <HAL_UART_IRQHandler+0xc8>
 80048f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2201      	movs	r2, #1
 8004902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d011      	beq.n	8004944 <HAL_UART_IRQHandler+0xf8>
 8004920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2202      	movs	r2, #2
 8004932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493a:	f043 0204 	orr.w	r2, r3, #4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004944:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d011      	beq.n	8004974 <HAL_UART_IRQHandler+0x128>
 8004950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2204      	movs	r2, #4
 8004962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f043 0202 	orr.w	r2, r3, #2
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d017      	beq.n	80049b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800498c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004990:	4b49      	ldr	r3, [pc, #292]	@ (8004ab8 <HAL_UART_IRQHandler+0x26c>)
 8004992:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2208      	movs	r2, #8
 800499e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f043 0208 	orr.w	r2, r3, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <HAL_UART_IRQHandler+0x196>
 80049bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00c      	beq.n	80049e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8212 	beq.w	8004e12 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d013      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d105      	bne.n	8004a12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b40      	cmp	r3, #64	@ 0x40
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02e      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fd45 	bl	80054d6 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d120      	bne.n	8004a9c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d017      	beq.n	8004a94 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <HAL_UART_IRQHandler+0x274>)
 8004a6c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fc fc87 	bl	8001388 <HAL_DMA_Abort_IT>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d019      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a92:	e00f      	b.n	8004ab4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9d1 	bl	8004e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9a:	e00b      	b.n	8004ab4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f9cd 	bl	8004e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa2:	e007      	b.n	8004ab4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f9c9 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004ab2:	e1ae      	b.n	8004e12 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	bf00      	nop
    return;
 8004ab6:	e1ac      	b.n	8004e12 <HAL_UART_IRQHandler+0x5c6>
 8004ab8:	10000001 	.word	0x10000001
 8004abc:	04000120 	.word	0x04000120
 8004ac0:	080055a3 	.word	0x080055a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f040 8142 	bne.w	8004d52 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ace:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 813b 	beq.w	8004d52 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8134 	beq.w	8004d52 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b40      	cmp	r3, #64	@ 0x40
 8004afe:	f040 80aa 	bne.w	8004c56 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b0c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8004b10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8084 	beq.w	8004c22 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b20:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d27c      	bcs.n	8004c22 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8004b2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3a:	2b81      	cmp	r3, #129	@ 0x81
 8004b3c:	d060      	beq.n	8004c00 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b64:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e2      	bne.n	8004b3e <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004b9c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ba2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e3      	bne.n	8004b78 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004be0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004be2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004be6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e4      	bne.n	8004bbe <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fc fb48 	bl	8001290 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f918 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004c20:	e0f9      	b.n	8004e16 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c28:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	f040 80f2 	bne.w	8004e16 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	2b81      	cmp	r3, #129	@ 0x81
 8004c3c:	f040 80eb 	bne.w	8004e16 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f8fe 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
      return;
 8004c54:	e0df      	b.n	8004e16 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80d1 	beq.w	8004e1a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8004c78:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80cc 	beq.w	8004e1a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e4      	bne.n	8004c82 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004ce0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e1      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f023 0310 	bic.w	r3, r3, #16
 8004d1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	69b9      	ldr	r1, [r7, #24]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	617b      	str	r3, [r7, #20]
   return(result);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e4      	bne.n	8004d08 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d44:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f880 	bl	8004e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d50:	e063      	b.n	8004e1a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00e      	beq.n	8004d7c <HAL_UART_IRQHandler+0x530>
 8004d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fc51 	bl	800561c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d7a:	e051      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d014      	beq.n	8004db2 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d03a      	beq.n	8004e1e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
    }
    return;
 8004db0:	e035      	b.n	8004e1e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x586>
 8004dbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fbfb 	bl	80055c6 <UART_EndTransmit_IT>
    return;
 8004dd0:	e026      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_UART_IRQHandler+0x5a6>
 8004dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004de2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fc2a 	bl	8005644 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df0:	e016      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d010      	beq.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
 8004dfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da0c      	bge.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fc12 	bl	8005630 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e0c:	e008      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
      return;
 8004e0e:	bf00      	nop
 8004e10:	e006      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
    return;
 8004e12:	bf00      	nop
 8004e14:	e004      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
      return;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
      return;
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <HAL_UART_IRQHandler+0x5d4>
    return;
 8004e1e:	bf00      	nop
  }
}
 8004e20:	37b8      	adds	r7, #184	@ 0xb8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop

08004e28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e6c:	b094      	sub	sp, #80	@ 0x50
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	498a      	ldr	r1, [pc, #552]	@ (80050c0 <UART_SetConfig+0x258>)
 8004e98:	4019      	ands	r1, r3
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	68d9      	ldr	r1, [r3, #12]
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	ea40 0301 	orr.w	r3, r0, r1
 8004eba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80050c4 <UART_SetConfig+0x25c>)
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d004      	beq.n	8004ed6 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8004ee0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8004ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eea:	430b      	orrs	r3, r1
 8004eec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	f023 000f 	bic.w	r0, r3, #15
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	ea40 0301 	orr.w	r3, r0, r1
 8004f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80050c8 <UART_SetConfig+0x260>)
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d102      	bne.n	8004f16 <UART_SetConfig+0xae>
 8004f10:	2301      	movs	r3, #1
 8004f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f14:	e01a      	b.n	8004f4c <UART_SetConfig+0xe4>
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80050cc <UART_SetConfig+0x264>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d102      	bne.n	8004f26 <UART_SetConfig+0xbe>
 8004f20:	2302      	movs	r3, #2
 8004f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f24:	e012      	b.n	8004f4c <UART_SetConfig+0xe4>
 8004f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b69      	ldr	r3, [pc, #420]	@ (80050d0 <UART_SetConfig+0x268>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d102      	bne.n	8004f36 <UART_SetConfig+0xce>
 8004f30:	2304      	movs	r3, #4
 8004f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f34:	e00a      	b.n	8004f4c <UART_SetConfig+0xe4>
 8004f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b62      	ldr	r3, [pc, #392]	@ (80050c4 <UART_SetConfig+0x25c>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d103      	bne.n	8004f48 <UART_SetConfig+0xe0>
 8004f40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f46:	e001      	b.n	8004f4c <UART_SetConfig+0xe4>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b5c      	ldr	r3, [pc, #368]	@ (80050c4 <UART_SetConfig+0x25c>)
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d171      	bne.n	800503a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f58:	2200      	movs	r2, #0
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f62:	f7fe fc4d 	bl	8003800 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f66:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80e2 	beq.w	8005134 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	4a57      	ldr	r2, [pc, #348]	@ (80050d4 <UART_SetConfig+0x26c>)
 8004f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d305      	bcc.n	8004fa0 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d903      	bls.n	8004fa8 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004fa6:	e0c5      	b.n	8005134 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004faa:	2200      	movs	r2, #0
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	61fa      	str	r2, [r7, #28]
 8004fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	4a47      	ldr	r2, [pc, #284]	@ (80050d4 <UART_SetConfig+0x26c>)
 8004fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	617a      	str	r2, [r7, #20]
 8004fc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004fca:	f7fb f965 	bl	8000298 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	020b      	lsls	r3, r1, #8
 8004fe0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fe4:	0202      	lsls	r2, r0, #8
 8004fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fe8:	6849      	ldr	r1, [r1, #4]
 8004fea:	0849      	lsrs	r1, r1, #1
 8004fec:	2000      	movs	r0, #0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	eb12 0804 	adds.w	r8, r2, r4
 8004ff6:	eb43 0905 	adc.w	r9, r3, r5
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	60fa      	str	r2, [r7, #12]
 8005004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005008:	4640      	mov	r0, r8
 800500a:	4649      	mov	r1, r9
 800500c:	f7fb f944 	bl	8000298 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4613      	mov	r3, r2
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800501e:	d308      	bcc.n	8005032 <UART_SetConfig+0x1ca>
 8005020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005026:	d204      	bcs.n	8005032 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e080      	b.n	8005134 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005038:	e07c      	b.n	8005134 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005042:	d149      	bne.n	80050d8 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005046:	2200      	movs	r2, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005050:	f7fe fbd6 	bl	8003800 <HAL_RCCEx_GetPeriphCLKFreq>
 8005054:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d06b      	beq.n	8005134 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800505c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	4a1c      	ldr	r2, [pc, #112]	@ (80050d4 <UART_SetConfig+0x26c>)
 8005062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005066:	461a      	mov	r2, r3
 8005068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800506a:	fbb3 f3f2 	udiv	r3, r3, r2
 800506e:	005a      	lsls	r2, r3, #1
 8005070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	441a      	add	r2, r3
 8005078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005084:	2b0f      	cmp	r3, #15
 8005086:	d916      	bls.n	80050b6 <UART_SetConfig+0x24e>
 8005088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508e:	d212      	bcs.n	80050b6 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005092:	b29b      	uxth	r3, r3
 8005094:	f023 030f 	bic.w	r3, r3, #15
 8005098:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800509a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80050a8:	4313      	orrs	r3, r2
 80050aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80050ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	e03e      	b.n	8005134 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80050bc:	e03a      	b.n	8005134 <UART_SetConfig+0x2cc>
 80050be:	bf00      	nop
 80050c0:	cfff69f3 	.word	0xcfff69f3
 80050c4:	44002400 	.word	0x44002400
 80050c8:	40013800 	.word	0x40013800
 80050cc:	40004400 	.word	0x40004400
 80050d0:	40004800 	.word	0x40004800
 80050d4:	080058e8 	.word	0x080058e8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80050d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050da:	2200      	movs	r2, #0
 80050dc:	469a      	mov	sl, r3
 80050de:	4693      	mov	fp, r2
 80050e0:	4650      	mov	r0, sl
 80050e2:	4659      	mov	r1, fp
 80050e4:	f7fe fb8c 	bl	8003800 <HAL_RCCEx_GetPeriphCLKFreq>
 80050e8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80050ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d021      	beq.n	8005134 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005160 <UART_SetConfig+0x2f8>)
 80050f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050fa:	461a      	mov	r2, r3
 80050fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	441a      	add	r2, r3
 800510a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d909      	bls.n	800512e <UART_SetConfig+0x2c6>
 800511a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005120:	d205      	bcs.n	800512e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005124:	b29a      	uxth	r2, r3
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	e002      	b.n	8005134 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005136:	2201      	movs	r2, #1
 8005138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	2201      	movs	r2, #1
 8005140:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005146:	2200      	movs	r2, #0
 8005148:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800514a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514c:	2200      	movs	r2, #0
 800514e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005150:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005154:	4618      	mov	r0, r3
 8005156:	3750      	adds	r7, #80	@ 0x50
 8005158:	46bd      	mov	sp, r7
 800515a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515e:	bf00      	nop
 8005160:	080058e8 	.word	0x080058e8

08005164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01a      	beq.n	800527a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005262:	d10a      	bne.n	800527a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b098      	sub	sp, #96	@ 0x60
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052b8:	f7fb fe4e 	bl	8000f58 <HAL_GetTick>
 80052bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d12f      	bne.n	800532c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f88e 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d022      	beq.n	800532c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005304:	647b      	str	r3, [r7, #68]	@ 0x44
 8005306:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800530a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e063      	b.n	80053f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d149      	bne.n	80053ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	2200      	movs	r2, #0
 8005344:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f857 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d03c      	beq.n	80053ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	623b      	str	r3, [r7, #32]
   return(result);
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005372:	633b      	str	r3, [r7, #48]	@ 0x30
 8005374:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e6      	bne.n	8005354 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	60fb      	str	r3, [r7, #12]
   return(result);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053a6:	61fa      	str	r2, [r7, #28]
 80053a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	69b9      	ldr	r1, [r7, #24]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	617b      	str	r3, [r7, #20]
   return(result);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e012      	b.n	80053f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3758      	adds	r7, #88	@ 0x58
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540c:	e04f      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d04b      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fb fd9f 	bl	8000f58 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <UART_WaitOnFlagUntilTimeout+0x30>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e04e      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d037      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b80      	cmp	r3, #128	@ 0x80
 8005442:	d034      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b40      	cmp	r3, #64	@ 0x40
 8005448:	d031      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d110      	bne.n	800547a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2208      	movs	r2, #8
 800545e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f838 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2208      	movs	r2, #8
 800546a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e029      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005488:	d111      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f81e 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d0a0      	beq.n	800540e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b095      	sub	sp, #84	@ 0x54
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80054fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800553a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e3      	bne.n	8005510 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d118      	bne.n	8005582 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	60bb      	str	r3, [r7, #8]
   return(result);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f023 0310 	bic.w	r3, r3, #16
 8005564:	647b      	str	r3, [r7, #68]	@ 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	613b      	str	r3, [r7, #16]
   return(result);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005596:	bf00      	nop
 8005598:	3754      	adds	r7, #84	@ 0x54
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fc3f 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	60bb      	str	r3, [r7, #8]
   return(result);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6979      	ldr	r1, [r7, #20]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	613b      	str	r3, [r7, #16]
   return(result);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e6      	bne.n	80055ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff fc0a 	bl	8004e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005614:	bf00      	nop
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_UARTEx_DisableFifoMode+0x16>
 800566a:	2302      	movs	r3, #2
 800566c:	e027      	b.n	80056be <HAL_UARTEx_DisableFifoMode+0x66>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2224      	movs	r2, #36	@ 0x24
 800567a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800569c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056de:	2302      	movs	r3, #2
 80056e0:	e02d      	b.n	800573e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2224      	movs	r2, #36	@ 0x24
 80056ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f850 	bl	80057c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800575a:	2302      	movs	r3, #2
 800575c:	e02d      	b.n	80057ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2224      	movs	r2, #36	@ 0x24
 800576a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f812 	bl	80057c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d108      	bne.n	80057e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057e4:	e031      	b.n	800584a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057e6:	2308      	movs	r3, #8
 80057e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057ea:	2308      	movs	r3, #8
 80057ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	0e5b      	lsrs	r3, r3, #25
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	0f5b      	lsrs	r3, r3, #29
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	7b3a      	ldrb	r2, [r7, #12]
 8005812:	4911      	ldr	r1, [pc, #68]	@ (8005858 <UARTEx_SetNbDataToProcess+0x94>)
 8005814:	5c8a      	ldrb	r2, [r1, r2]
 8005816:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800581a:	7b3a      	ldrb	r2, [r7, #12]
 800581c:	490f      	ldr	r1, [pc, #60]	@ (800585c <UARTEx_SetNbDataToProcess+0x98>)
 800581e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005820:	fb93 f3f2 	sdiv	r3, r3, r2
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	7b7a      	ldrb	r2, [r7, #13]
 8005830:	4909      	ldr	r1, [pc, #36]	@ (8005858 <UARTEx_SetNbDataToProcess+0x94>)
 8005832:	5c8a      	ldrb	r2, [r1, r2]
 8005834:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005838:	7b7a      	ldrb	r2, [r7, #13]
 800583a:	4908      	ldr	r1, [pc, #32]	@ (800585c <UARTEx_SetNbDataToProcess+0x98>)
 800583c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800583e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	08005900 	.word	0x08005900
 800585c:	08005908 	.word	0x08005908

08005860 <memset>:
 8005860:	4402      	add	r2, r0
 8005862:	4603      	mov	r3, r0
 8005864:	4293      	cmp	r3, r2
 8005866:	d100      	bne.n	800586a <memset+0xa>
 8005868:	4770      	bx	lr
 800586a:	f803 1b01 	strb.w	r1, [r3], #1
 800586e:	e7f9      	b.n	8005864 <memset+0x4>

08005870 <__libc_init_array>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	4d0d      	ldr	r5, [pc, #52]	@ (80058a8 <__libc_init_array+0x38>)
 8005874:	2600      	movs	r6, #0
 8005876:	4c0d      	ldr	r4, [pc, #52]	@ (80058ac <__libc_init_array+0x3c>)
 8005878:	1b64      	subs	r4, r4, r5
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	42a6      	cmp	r6, r4
 800587e:	d109      	bne.n	8005894 <__libc_init_array+0x24>
 8005880:	4d0b      	ldr	r5, [pc, #44]	@ (80058b0 <__libc_init_array+0x40>)
 8005882:	2600      	movs	r6, #0
 8005884:	4c0b      	ldr	r4, [pc, #44]	@ (80058b4 <__libc_init_array+0x44>)
 8005886:	f000 f817 	bl	80058b8 <_init>
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	42a6      	cmp	r6, r4
 8005890:	d105      	bne.n	800589e <__libc_init_array+0x2e>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	f855 3b04 	ldr.w	r3, [r5], #4
 8005898:	3601      	adds	r6, #1
 800589a:	4798      	blx	r3
 800589c:	e7ee      	b.n	800587c <__libc_init_array+0xc>
 800589e:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a2:	3601      	adds	r6, #1
 80058a4:	4798      	blx	r3
 80058a6:	e7f2      	b.n	800588e <__libc_init_array+0x1e>
 80058a8:	08005918 	.word	0x08005918
 80058ac:	08005918 	.word	0x08005918
 80058b0:	08005918 	.word	0x08005918
 80058b4:	0800591c 	.word	0x0800591c

080058b8 <_init>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr

080058c4 <_fini>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	bf00      	nop
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr
