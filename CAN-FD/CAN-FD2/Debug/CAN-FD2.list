
CAN-FD2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f0  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003948  08003948  00004948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003968  08003968  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003968  08003968  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003968  08003968  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003968  08003968  00004968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800396c  0800396c  0000496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003970  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  0800397c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800397c  00005120  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f0f  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015c8  00000000  00000000  0000ef51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00010520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000614  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e851  00000000  00000000  00011364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096cc  00000000  00000000  0002fbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0088  00000000  00000000  00039281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002118  00000000  00000000  000f934c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fb464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08003930 	.word	0x08003930

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08003930 	.word	0x08003930

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fb29 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f817 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 f8e3 	bl	8000470 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002aa:	f000 f887 	bl	80003bc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 32; i++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	e008      	b.n	80002c6 <main+0x2e>
      CAN_Payload.dataTx[i] = 0xAA;
 80002b4:	4a06      	ldr	r2, [pc, #24]	@ (80002d0 <main+0x38>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4413      	add	r3, r2
 80002ba:	3350      	adds	r3, #80	@ 0x50
 80002bc:	22aa      	movs	r2, #170	@ 0xaa
 80002be:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 32; i++) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2b1f      	cmp	r3, #31
 80002ca:	ddf3      	ble.n	80002b4 <main+0x1c>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <main+0x34>
 80002d0:	2000008c 	.word	0x2000008c

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b09c      	sub	sp, #112	@ 0x70
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0320 	add.w	r3, r7, #32
 80002de:	2250      	movs	r2, #80	@ 0x50
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 faf8 	bl	80038d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0308 	add.w	r3, r7, #8
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002fa:	4b2e      	ldr	r3, [pc, #184]	@ (80003b4 <SystemClock_Config+0xe0>)
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	4a2d      	ldr	r2, [pc, #180]	@ (80003b4 <SystemClock_Config+0xe0>)
 8000300:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000304:	6113      	str	r3, [r2, #16]
 8000306:	4b2b      	ldr	r3, [pc, #172]	@ (80003b4 <SystemClock_Config+0xe0>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000312:	bf00      	nop
 8000314:	4b27      	ldr	r3, [pc, #156]	@ (80003b4 <SystemClock_Config+0xe0>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	2b08      	cmp	r3, #8
 800031e:	d1f9      	bne.n	8000314 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000320:	2302      	movs	r3, #2
 8000322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2340      	movs	r3, #64	@ 0x40
 800032e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8000334:	2301      	movs	r3, #1
 8000336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000338:	2304      	movs	r3, #4
 800033a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800033c:	230c      	movs	r3, #12
 800033e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000340:	2302      	movs	r3, #2
 8000342:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000344:	2304      	movs	r3, #4
 8000346:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000348:	2302      	movs	r3, #2
 800034a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800034c:	230c      	movs	r3, #12
 800034e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000350:	2300      	movs	r3, #0
 8000352:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000358:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0320 	add.w	r3, r7, #32
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fcc6 	bl	8001cf0 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800036a:	f000 f968 	bl	800063e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	231f      	movs	r3, #31
 8000370:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2303      	movs	r3, #3
 8000374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000376:	2308      	movs	r3, #8
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	2104      	movs	r1, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f002 f8e7 	bl	8002560 <HAL_RCC_ClockConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000398:	f000 f951 	bl	800063e <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <SystemClock_Config+0xe4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003a4:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <SystemClock_Config+0xe4>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	3770      	adds	r7, #112	@ 0x70
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	44020800 	.word	0x44020800
 80003b8:	40022000 	.word	0x40022000

080003bc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003c0:	4b29      	ldr	r3, [pc, #164]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003c2:	4a2a      	ldr	r2, [pc, #168]	@ (800046c <MX_FDCAN1_Init+0xb0>)
 80003c4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003c6:	4b28      	ldr	r3, [pc, #160]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003cc:	4b26      	ldr	r3, [pc, #152]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003d2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003d4:	4b24      	ldr	r3, [pc, #144]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003da:	4b23      	ldr	r3, [pc, #140]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003dc:	2200      	movs	r2, #0
 80003de:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003e0:	4b21      	ldr	r3, [pc, #132]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003e6:	4b20      	ldr	r3, [pc, #128]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 27;
 80003f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003f4:	221b      	movs	r2, #27
 80003f6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 72;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 80003fa:	2248      	movs	r2, #72	@ 0x48
 80003fc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 27;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000400:	221b      	movs	r2, #27
 8000402:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000404:	4b18      	ldr	r3, [pc, #96]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000406:	2202      	movs	r2, #2
 8000408:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 6;
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 800040c:	2206      	movs	r2, #6
 800040e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 8000410:	4b15      	ldr	r3, [pc, #84]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000412:	2212      	movs	r2, #18
 8000414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000416:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000418:	2203      	movs	r2, #3
 800041a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800041c:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 800041e:	2200      	movs	r2, #0
 8000420:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000424:	2200      	movs	r2, #0
 8000426:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000428:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 800042a:	2200      	movs	r2, #0
 800042c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800042e:	480e      	ldr	r0, [pc, #56]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000430:	f000 fcae 	bl	8000d90 <HAL_FDCAN_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800043a:	f000 f900 	bl	800063e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800043e:	480a      	ldr	r0, [pc, #40]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000440:	f000 fe00 	bl	8001044 <HAL_FDCAN_Start>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_FDCAN1_Init+0x92>
    {
  	  Error_Handler();
 800044a:	f000 f8f8 	bl	800063e <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800044e:	2200      	movs	r2, #0
 8000450:	2101      	movs	r1, #1
 8000452:	4805      	ldr	r0, [pc, #20]	@ (8000468 <MX_FDCAN1_Init+0xac>)
 8000454:	f000 ff6a 	bl	800132c <HAL_FDCAN_ActivateNotification>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_FDCAN1_Init+0xa6>
    {
      /* Notification Error */
      Error_Handler();
 800045e:	f000 f8ee 	bl	800063e <Error_Handler>
    }
  /* USER CODE END FDCAN1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000028 	.word	0x20000028
 800046c:	4000a400 	.word	0x4000a400

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b34      	ldr	r3, [pc, #208]	@ (8000558 <MX_GPIO_Init+0xe8>)
 8000488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800048c:	4a32      	ldr	r2, [pc, #200]	@ (8000558 <MX_GPIO_Init+0xe8>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000496:	4b30      	ldr	r3, [pc, #192]	@ (8000558 <MX_GPIO_Init+0xe8>)
 8000498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000558 <MX_GPIO_Init+0xe8>)
 80004a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000558 <MX_GPIO_Init+0xe8>)
 80004ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004b4:	4b28      	ldr	r3, [pc, #160]	@ (8000558 <MX_GPIO_Init+0xe8>)
 80004b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b25      	ldr	r3, [pc, #148]	@ (8000558 <MX_GPIO_Init+0xe8>)
 80004c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004c8:	4a23      	ldr	r2, [pc, #140]	@ (8000558 <MX_GPIO_Init+0xe8>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004d2:	4b21      	ldr	r3, [pc, #132]	@ (8000558 <MX_GPIO_Init+0xe8>)
 80004d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2120      	movs	r1, #32
 80004e4:	481d      	ldr	r0, [pc, #116]	@ (800055c <MX_GPIO_Init+0xec>)
 80004e6:	f001 fbb9 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 80004ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000560 <MX_GPIO_Init+0xf0>)
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	4819      	ldr	r0, [pc, #100]	@ (8000564 <MX_GPIO_Init+0xf4>)
 8000500:	f001 fa5a 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_TX_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000504:	2318      	movs	r3, #24
 8000506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000514:	230d      	movs	r3, #13
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	4619      	mov	r1, r3
 800051e:	480f      	ldr	r0, [pc, #60]	@ (800055c <MX_GPIO_Init+0xec>)
 8000520:	f001 fa4a 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000524:	2320      	movs	r3, #32
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	4808      	ldr	r0, [pc, #32]	@ (800055c <MX_GPIO_Init+0xec>)
 800053c:	f001 fa3c 	bl	80019b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2018      	movs	r0, #24
 8000546:	f000 fb4b 	bl	8000be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800054a:	2018      	movs	r0, #24
 800054c:	f000 fb62 	bl	8000c14 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	44020c00 	.word	0x44020c00
 800055c:	42020000 	.word	0x42020000
 8000560:	10210000 	.word	0x10210000
 8000564:	42020800 	.word	0x42020800

08000568 <TX_Send_CAN>:

/* USER CODE BEGIN 4 */
void TX_Send_CAN(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

    /* ----- Prepare CAN data --------------------------------------- */
    CAN_Payload.TxHeader.IdType = FDCAN_STANDARD_ID;
 800056c:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <TX_Send_CAN+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
    CAN_Payload.TxHeader.Identifier = 0x11; //CAN_Payload.msgID
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <TX_Send_CAN+0x5c>)
 8000574:	2211      	movs	r2, #17
 8000576:	601a      	str	r2, [r3, #0]
    CAN_Payload.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <TX_Send_CAN+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
    CAN_Payload.TxHeader.DataLength = FDCAN_DLC_BYTES_32;        // 8-byte payloaD
 800057e:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <TX_Send_CAN+0x5c>)
 8000580:	220d      	movs	r2, #13
 8000582:	60da      	str	r2, [r3, #12]
    CAN_Payload.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <TX_Send_CAN+0x5c>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
    CAN_Payload.TxHeader.BitRateSwitch = FDCAN_BRS_OFF;         // Disable BRS
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <TX_Send_CAN+0x5c>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
    CAN_Payload.TxHeader.FDFormat = FDCAN_FD_CAN;          // Use Classical CAN frame
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <TX_Send_CAN+0x5c>)
 8000592:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000596:	619a      	str	r2, [r3, #24]
    CAN_Payload.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <TX_Send_CAN+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
    CAN_Payload.TxHeader.MessageMarker = 0;
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <TX_Send_CAN+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]

    CAN_Payload.dataTx[0] ^= 1;
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <TX_Send_CAN+0x5c>)
 80005a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <TX_Send_CAN+0x5c>)
 80005b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Payload.TxHeader,CAN_Payload.dataTx)!= HAL_OK)
 80005b6:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <TX_Send_CAN+0x60>)
 80005b8:	4902      	ldr	r1, [pc, #8]	@ (80005c4 <TX_Send_CAN+0x5c>)
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <TX_Send_CAN+0x64>)
 80005bc:	f000 fd6a 	bl	8001094 <HAL_FDCAN_AddMessageToTxFifoQ>
    {
      /*do not thing */
    }

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000008c 	.word	0x2000008c
 80005c8:	200000dc 	.word	0x200000dc
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d014      	beq.n	800060e <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0,&CAN_Payload.RxHeader,CAN_Payload.dataRx) != HAL_OK)
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80005e6:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80005e8:	2140      	movs	r1, #64	@ 0x40
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 fd96 	bl	800111c <HAL_FDCAN_GetRxMessage>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 80005f6:	f000 f822 	bl	800063e <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fe94 	bl	800132c <HAL_FDCAN_ActivateNotification>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 800060a:	f000 f818 	bl	800063e <Error_Handler>
		}
	}
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000fc 	.word	0x200000fc
 800061c:	200000b0 	.word	0x200000b0

08000620 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_BLUE_USER_BUTTON_Pin){
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000630:	d101      	bne.n	8000636 <HAL_GPIO_EXTI_Falling_Callback+0x16>
		TX_Send_CAN();
 8000632:	f7ff ff99 	bl	8000568 <TX_Send_CAN>
	}
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000642:	b672      	cpsid	i
}
 8000644:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <Error_Handler+0x8>

0800064a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0ac      	sub	sp, #176	@ 0xb0
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	2288      	movs	r2, #136	@ 0x88
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f92d 	bl	80038d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a2a      	ldr	r2, [pc, #168]	@ (800072c <HAL_FDCAN_MspInit+0xd4>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d14d      	bne.n	8000724 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000688:	f04f 0200 	mov.w	r2, #0
 800068c:	f04f 0304 	mov.w	r3, #4
 8000690:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000698:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fa5e 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80006aa:	f7ff ffc8 	bl	800063e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006ae:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <HAL_FDCAN_MspInit+0xd8>)
 80006b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80006b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000730 <HAL_FDCAN_MspInit+0xd8>)
 80006b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006ba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80006be:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <HAL_FDCAN_MspInit+0xd8>)
 80006c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80006c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <HAL_FDCAN_MspInit+0xd8>)
 80006ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <HAL_FDCAN_MspInit+0xd8>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <HAL_FDCAN_MspInit+0xd8>)
 80006de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC6     ------> FDCAN1_RX
    PC7     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ea:	23c0      	movs	r3, #192	@ 0xc0
 80006ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000702:	2309      	movs	r3, #9
 8000704:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800070c:	4619      	mov	r1, r3
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <HAL_FDCAN_MspInit+0xdc>)
 8000710:	f001 f952 	bl	80019b8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2027      	movs	r0, #39	@ 0x27
 800071a:	f000 fa61 	bl	8000be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800071e:	2027      	movs	r0, #39	@ 0x27
 8000720:	f000 fa78 	bl	8000c14 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000724:	bf00      	nop
 8000726:	37b0      	adds	r7, #176	@ 0xb0
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	4000a400 	.word	0x4000a400
 8000730:	44020c00 	.word	0x44020c00
 8000734:	42020800 	.word	0x42020800

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <NMI_Handler+0x4>

08000740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <MemManage_Handler+0x4>

08000750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <UsageFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f94f 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}

08000796 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_BLUE_USER_BUTTON_Pin);
 800079a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800079e:	f001 fa75 	bl	8001c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80007ac:	4802      	ldr	r0, [pc, #8]	@ (80007b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80007ae:	f000 fea3 	bl	80014f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028

080007bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007c2:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <SystemInit+0xc8>)
 80007c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c8:	4a2e      	ldr	r2, [pc, #184]	@ (8000884 <SystemInit+0xc8>)
 80007ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <SystemInit+0xcc>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <SystemInit+0xcc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <SystemInit+0xcc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <SystemInit+0xcc>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4927      	ldr	r1, [pc, #156]	@ (8000888 <SystemInit+0xcc>)
 80007ea:	4b28      	ldr	r3, [pc, #160]	@ (800088c <SystemInit+0xd0>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <SystemInit+0xcc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <SystemInit+0xcc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <SystemInit+0xcc>)
 80007fe:	4a24      	ldr	r2, [pc, #144]	@ (8000890 <SystemInit+0xd4>)
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <SystemInit+0xcc>)
 8000804:	2200      	movs	r2, #0
 8000806:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <SystemInit+0xcc>)
 800080a:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <SystemInit+0xd4>)
 800080c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <SystemInit+0xcc>)
 8000810:	2200      	movs	r2, #0
 8000812:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <SystemInit+0xcc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <SystemInit+0xcc>)
 800081a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800081e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <SystemInit+0xcc>)
 8000822:	2200      	movs	r2, #0
 8000824:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <SystemInit+0xc8>)
 8000828:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800082c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <SystemInit+0xd8>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000836:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800083e:	d003      	beq.n	8000848 <SystemInit+0x8c>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000846:	d117      	bne.n	8000878 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <SystemInit+0xd8>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d005      	beq.n	8000860 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <SystemInit+0xd8>)
 8000856:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <SystemInit+0xdc>)
 8000858:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <SystemInit+0xd8>)
 800085c:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <SystemInit+0xe0>)
 800085e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <SystemInit+0xd8>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <SystemInit+0xd8>)
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <SystemInit+0xd8>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <SystemInit+0xd8>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	61d3      	str	r3, [r2, #28]
  }
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00
 8000888:	44020c00 	.word	0x44020c00
 800088c:	fae2eae3 	.word	0xfae2eae3
 8000890:	01010280 	.word	0x01010280
 8000894:	40022000 	.word	0x40022000
 8000898:	08192a3b 	.word	0x08192a3b
 800089c:	4c5d6e7f 	.word	0x4c5d6e7f

080008a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008a6:	e003      	b.n	80008b0 <LoopCopyDataInit>

080008a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008ae:	3104      	adds	r1, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008b0:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008b8:	d3f6      	bcc.n	80008a8 <CopyDataInit>
	ldr	r2, =_sbss
 80008ba:	4a0b      	ldr	r2, [pc, #44]	@ (80008e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008bc:	e002      	b.n	80008c4 <LoopFillZerobss>

080008be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008c0:	f842 3b04 	str.w	r3, [r2], #4

080008c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <LoopForever+0x16>)
	cmp	r2, r3
 80008c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008c8:	d3f9      	bcc.n	80008be <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ca:	f7ff ff77 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ce:	f003 f80b 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d2:	f7ff fce1 	bl	8000298 <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80008d8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80008dc:	08003970 	.word	0x08003970
	ldr	r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008e4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80008e8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80008ec:	20000120 	.word	0x20000120

080008f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f966 	bl	8000bca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80008fe:	f001 ffe7 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8000902:	4602      	mov	r2, r0
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_Init+0x44>)
 8000906:	6a1b      	ldr	r3, [r3, #32]
 8000908:	f003 030f 	and.w	r3, r3, #15
 800090c:	490b      	ldr	r1, [pc, #44]	@ (800093c <HAL_Init+0x48>)
 800090e:	5ccb      	ldrb	r3, [r1, r3]
 8000910:	fa22 f303 	lsr.w	r3, r2, r3
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_Init+0x4c>)
 8000916:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000918:	2004      	movs	r0, #4
 800091a:	f000 f9ab 	bl	8000c74 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091e:	200f      	movs	r0, #15
 8000920:	f000 f810 	bl	8000944 <HAL_InitTick>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e002      	b.n	8000934 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800092e:	f7ff fe8c 	bl	800064a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	bd80      	pop	{r7, pc}
 8000938:	44020c00 	.word	0x44020c00
 800093c:	08003948 	.word	0x08003948
 8000940:	20000000 	.word	0x20000000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000950:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <HAL_InitTick+0xdc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	e05c      	b.n	8000a16 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800095c:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <HAL_InitTick+0xe0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	2b04      	cmp	r3, #4
 8000966:	d10c      	bne.n	8000982 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000968:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <HAL_InitTick+0xe4>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <HAL_InitTick+0xdc>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e037      	b.n	80009f2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000982:	f000 f9cf 	bl	8000d24 <HAL_SYSTICK_GetCLKSourceConfig>
 8000986:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d023      	beq.n	80009d6 <HAL_InitTick+0x92>
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d82d      	bhi.n	80009f0 <HAL_InitTick+0xac>
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <HAL_InitTick+0x5e>
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d00d      	beq.n	80009bc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80009a0:	e026      	b.n	80009f0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <HAL_InitTick+0xe4>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <HAL_InitTick+0xdc>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80009b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b8:	60fb      	str	r3, [r7, #12]
        break;
 80009ba:	e01a      	b.n	80009f2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <HAL_InitTick+0xdc>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80009ca:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	60fb      	str	r3, [r7, #12]
        break;
 80009d4:	e00d      	b.n	80009f2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0xdc>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80009e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ec:	60fb      	str	r3, [r7, #12]
        break;
 80009ee:	e000      	b.n	80009f2 <HAL_InitTick+0xae>
        break;
 80009f0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 f91c 	bl	8000c30 <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e009      	b.n	8000a16 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a02:	2200      	movs	r2, #0
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0a:	f000 f8e9 	bl	8000be0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000a0e:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_InitTick+0xe8>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	e000e010 	.word	0xe000e010
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	2000011c 	.word	0x2000011c

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	2000011c 	.word	0x2000011c

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	@ (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	@ (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	@ (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	@ 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	@ 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff4c 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff63 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ffb3 	bl	8000b64 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff82 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff56 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00d      	b.n	8000c62 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_SYSTICK_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_SYSTICK_Config+0x40>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_SYSTICK_Config+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <HAL_SYSTICK_Config+0x40>)
 8000c5a:	f043 0303 	orr.w	r3, r3, #3
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d844      	bhi.n	8000d0c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000c82:	a201      	add	r2, pc, #4	@ (adr r2, 8000c88 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000cab 	.word	0x08000cab
 8000c8c:	08000cc9 	.word	0x08000cc9
 8000c90:	08000ceb 	.word	0x08000ceb
 8000c94:	08000d0d 	.word	0x08000d0d
 8000c98:	08000c9d 	.word	0x08000c9d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6013      	str	r3, [r2, #0]
      break;
 8000ca8:	e031      	b.n	8000d0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cb0:	f023 0304 	bic.w	r3, r3, #4
 8000cb4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cbc:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cbe:	f023 030c 	bic.w	r3, r3, #12
 8000cc2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000cc6:	e022      	b.n	8000d0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a13      	ldr	r2, [pc, #76]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cce:	f023 0304 	bic.w	r3, r3, #4
 8000cd2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cda:	f023 030c 	bic.w	r3, r3, #12
 8000cde:	4a10      	ldr	r2, [pc, #64]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ce8:	e011      	b.n	8000d0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cf0:	f023 0304 	bic.w	r3, r3, #4
 8000cf4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cfc:	f023 030c 	bic.w	r3, r3, #12
 8000d00:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d0a:	e000      	b.n	8000d0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000d0c:	bf00      	nop
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010
 8000d20:	44020c00 	.word	0x44020c00

08000d24 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000d2a:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000d36:	2304      	movs	r3, #4
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	e01e      	b.n	8000d7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000d3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d00f      	beq.n	8000d6e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d80f      	bhi.n	8000d74 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d003      	beq.n	8000d68 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000d60:	e008      	b.n	8000d74 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
        break;
 8000d66:	e008      	b.n	8000d7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
        break;
 8000d6c:	e005      	b.n	8000d7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	607b      	str	r3, [r7, #4]
        break;
 8000d72:	e002      	b.n	8000d7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
        break;
 8000d78:	bf00      	nop
    }
  }
  return systick_source;
 8000d7a:	687b      	ldr	r3, [r7, #4]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e010 	.word	0xe000e010
 8000d8c:	44020c00 	.word	0x44020c00

08000d90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e147      	b.n	8001032 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fc4e 	bl	8000658 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0210 	bic.w	r2, r2, #16
 8000dca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dcc:	f7ff fe44 	bl	8000a58 <HAL_GetTick>
 8000dd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dd2:	e012      	b.n	8000dfa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dd4:	f7ff fe40 	bl	8000a58 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b0a      	cmp	r3, #10
 8000de0:	d90b      	bls.n	8000dfa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2203      	movs	r2, #3
 8000df2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e11b      	b.n	8001032 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d0e5      	beq.n	8000dd4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0201 	orr.w	r2, r2, #1
 8000e16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e18:	f7ff fe1e 	bl	8000a58 <HAL_GetTick>
 8000e1c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e1e:	e012      	b.n	8000e46 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e20:	f7ff fe1a 	bl	8000a58 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b0a      	cmp	r3, #10
 8000e2c:	d90b      	bls.n	8000e46 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e0f5      	b.n	8001032 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0e5      	beq.n	8000e20 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0202 	orr.w	r2, r2, #2
 8000e62:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a74      	ldr	r2, [pc, #464]	@ (800103c <HAL_FDCAN_Init+0x2ac>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d103      	bne.n	8000e76 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e6e:	4a74      	ldr	r2, [pc, #464]	@ (8001040 <HAL_FDCAN_Init+0x2b0>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7c1b      	ldrb	r3, [r3, #16]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d108      	bne.n	8000e90 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	699a      	ldr	r2, [r3, #24]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e8c:	619a      	str	r2, [r3, #24]
 8000e8e:	e007      	b.n	8000ea0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e9e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7c5b      	ldrb	r3, [r3, #17]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d108      	bne.n	8000eba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	699a      	ldr	r2, [r3, #24]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000eb6:	619a      	str	r2, [r3, #24]
 8000eb8:	e007      	b.n	8000eca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	699a      	ldr	r2, [r3, #24]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000ec8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7c9b      	ldrb	r3, [r3, #18]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d108      	bne.n	8000ee4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ee0:	619a      	str	r2, [r3, #24]
 8000ee2:	e007      	b.n	8000ef4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ef2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	699a      	ldr	r2, [r3, #24]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000f18:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0210 	bic.w	r2, r2, #16
 8000f28:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d108      	bne.n	8000f44 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	699a      	ldr	r2, [r3, #24]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f042 0204 	orr.w	r2, r2, #4
 8000f40:	619a      	str	r2, [r3, #24]
 8000f42:	e02c      	b.n	8000f9e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d028      	beq.n	8000f9e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d01c      	beq.n	8000f8e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699a      	ldr	r2, [r3, #24]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f62:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0210 	orr.w	r2, r2, #16
 8000f72:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d110      	bne.n	8000f9e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	699a      	ldr	r2, [r3, #24]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0220 	orr.w	r2, r2, #32
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	e007      	b.n	8000f9e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	699a      	ldr	r2, [r3, #24]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fb6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fc6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fc8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000fd2:	d115      	bne.n	8001000 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fe2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ffc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ffe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 fbfc 	bl	8001814 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	4000a400 	.word	0x4000a400
 8001040:	4000a500 	.word	0x4000a500

08001044 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d110      	bne.n	800107a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2202      	movs	r2, #2
 800105c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e006      	b.n	8001088 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107e:	f043 0204 	orr.w	r2, r3, #4
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
  }
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d12c      	bne.n	8001106 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e023      	b.n	8001114 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 fbec 	bl	80018c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80010f8:	2201      	movs	r2, #1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	409a      	lsls	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e006      	b.n	8001114 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110a:	f043 0208 	orr.w	r2, r3, #8
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
  }
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800111c:	b480      	push	{r7}
 800111e:	b08b      	sub	sp, #44	@ 0x2c
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001134:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001136:	7efb      	ldrb	r3, [r7, #27]
 8001138:	2b02      	cmp	r3, #2
 800113a:	f040 80e8 	bne.w	800130e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2b40      	cmp	r3, #64	@ 0x40
 8001142:	d137      	bne.n	80011b4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001158:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0db      	b.n	800131c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800116c:	0e1b      	lsrs	r3, r3, #24
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10a      	bne.n	800118c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117e:	0a5b      	lsrs	r3, r3, #9
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	4413      	add	r3, r2
 800119e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b2:	e036      	b.n	8001222 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d107      	bne.n	80011d4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0a3      	b.n	800131c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011dc:	0e1b      	lsrs	r3, r3, #24
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d10a      	bne.n	80011fc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4413      	add	r3, r2
 800120e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d107      	bne.n	8001246 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e005      	b.n	8001252 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	3304      	adds	r3, #4
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	f003 020f 	and.w	r2, r3, #15
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0e1b      	lsrs	r3, r3, #24
 80012a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	0fda      	lsrs	r2, r3, #31
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	3304      	adds	r3, #4
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	e00a      	b.n	80012de <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	441a      	add	r2, r3
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	440b      	add	r3, r1
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	3301      	adds	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <HAL_FDCAN_GetRxMessage+0x20c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d3ec      	bcc.n	80012c8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b40      	cmp	r3, #64	@ 0x40
 80012f2:	d105      	bne.n	8001300 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80012fe:	e004      	b.n	800130a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e006      	b.n	800131c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	f043 0208 	orr.w	r2, r3, #8
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
  }
}
 800131c:	4618      	mov	r0, r3
 800131e:	372c      	adds	r7, #44	@ 0x2c
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	08003958 	.word	0x08003958

0800132c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800133e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0x22>
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80c8 	bne.w	80014de <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001354:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03b      	beq.n	80013e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d031      	beq.n	80013e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d027      	beq.n	80013e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01d      	beq.n	80013e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d013      	beq.n	80013e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 0201 	orr.w	r2, r2, #1
 80013f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d13b      	bne.n	800147e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d131      	bne.n	800147e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d127      	bne.n	800147e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11d      	bne.n	800147e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	d113      	bne.n	800147e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00c      	beq.n	800148e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0202 	orr.w	r2, r2, #2
 800148c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d009      	beq.n	80014ca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e006      	b.n	80014ec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e2:	f043 0202 	orr.w	r2, r3, #2
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
  }
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001506:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001514:	4013      	ands	r3, r2
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800152a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800152c:	4013      	ands	r3, r2
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001544:	4013      	ands	r3, r2
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800154e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001552:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155a:	6a3a      	ldr	r2, [r7, #32]
 800155c:	4013      	ands	r3, r2
 800155e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001566:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800156a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	4013      	ands	r3, r2
 8001576:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001586:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2240      	movs	r2, #64	@ 0x40
 80015a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f916 	bl	80017d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d019      	beq.n	80015e8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d014      	beq.n	80015e8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015c6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f8d8 	bl	8001798 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80015e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80015f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f8a2 	bl	8001742 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80015fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800160a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800160c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7fe ffde 	bl	80005d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001620:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f897 	bl	8001758 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00c      	beq.n	800164e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001646:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f890 	bl	800176e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d018      	beq.n	800168a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165e:	2b00      	cmp	r3, #0
 8001660:	d013      	beq.n	800168a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800166a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2280      	movs	r2, #128	@ 0x80
 8001680:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001682:	68f9      	ldr	r1, [r7, #12]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f87c 	bl	8001782 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00c      	beq.n	80016ae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f880 	bl	80017ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00c      	beq.n	80016d2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f878 	bl	80017c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00f      	beq.n	80016fc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00a      	beq.n	80016fc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800170a:	69f9      	ldr	r1, [r7, #28]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f876 	bl	80017fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6a3a      	ldr	r2, [r7, #32]
 800171e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f858 	bl	80017ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800173a:	bf00      	nop
 800173c:	3730      	adds	r7, #48	@ 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800181e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800182e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001854:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185c:	061a      	lsls	r2, r3, #24
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e005      	b.n	80018a2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3304      	adds	r3, #4
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3f3      	bcc.n	8001896 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	4000ac00 	.word	0x4000ac00

080018c0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80018de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e00a      	b.n	8001902 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80018f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80018fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80018fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001900:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800190c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001912:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001918:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	3304      	adds	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	3304      	adds	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e020      	b.n	8001996 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3303      	adds	r3, #3
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3302      	adds	r3, #2
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	440b      	add	r3, r1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800196c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	440b      	add	r3, r1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800197a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	440a      	add	r2, r1
 8001982:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001984:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	3304      	adds	r3, #4
 800198e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3304      	adds	r3, #4
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <FDCAN_CopyMessageToRAM+0xf4>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	461a      	mov	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d3d6      	bcc.n	8001954 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3724      	adds	r7, #36	@ 0x24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	08003958 	.word	0x08003958

080019b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019c6:	e136      	b.n	8001c36 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8128 	beq.w	8001c30 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x38>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d125      	bne.n	8001a3c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 020f 	and.w	r2, r3, #15
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d00b      	beq.n	8001a90 <HAL_GPIO_Init+0xd8>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b12      	cmp	r3, #18
 8001a8e:	d130      	bne.n	8001af2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 0201 	and.w	r2, r3, #1
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d017      	beq.n	8001b2a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d07c      	beq.n	8001c30 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001b36:	4a47      	ldr	r2, [pc, #284]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4013      	ands	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0a9a      	lsrs	r2, r3, #10
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c58 <HAL_GPIO_Init+0x2a0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	00d2      	lsls	r2, r2, #3
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b72:	4938      	ldr	r1, [pc, #224]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3318      	adds	r3, #24
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001b80:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4013      	ands	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001bfa:	4a16      	ldr	r2, [pc, #88]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_GPIO_Init+0x29c>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	3301      	adds	r3, #1
 8001c34:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f47f aec1 	bne.w	80019c8 <HAL_GPIO_Init+0x10>
  }
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	44022000 	.word	0x44022000
 8001c58:	002f7f7f 	.word	0x002f7f7f

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f814 	bl	8001cd8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001cbc:	4a05      	ldr	r2, [pc, #20]	@ (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fcab 	bl	8000620 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	44022000 	.word	0x44022000

08001cd8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f000 bc28 	b.w	8002554 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d04:	4b94      	ldr	r3, [pc, #592]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f003 0318 	and.w	r3, r3, #24
 8001d0c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001d0e:	4b92      	ldr	r3, [pc, #584]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d05b      	beq.n	8001ddc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x46>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2b18      	cmp	r3, #24
 8001d2e:	d114      	bne.n	8001d5a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d111      	bne.n	8001d5a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f000 bc08 	b.w	8002554 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001d44:	4b84      	ldr	r3, [pc, #528]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	4981      	ldr	r1, [pc, #516]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001d58:	e040      	b.n	8001ddc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d023      	beq.n	8001daa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d62:	4b7d      	ldr	r3, [pc, #500]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7c      	ldr	r2, [pc, #496]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fe73 	bl	8000a58 <HAL_GetTick>
 8001d72:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001d76:	f7fe fe6f 	bl	8000a58 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e3e5      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001d88:	4b73      	ldr	r3, [pc, #460]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001d94:	4b70      	ldr	r3, [pc, #448]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	496d      	ldr	r1, [pc, #436]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	618b      	str	r3, [r1, #24]
 8001da8:	e018      	b.n	8001ddc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001daa:	4b6b      	ldr	r3, [pc, #428]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6a      	ldr	r2, [pc, #424]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7fe fe4f 	bl	8000a58 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001dbe:	f7fe fe4b 	bl	8000a58 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e3c1      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001dd0:	4b61      	ldr	r3, [pc, #388]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a0 	beq.w	8001f2a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_OscConfig+0x10c>
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b18      	cmp	r3, #24
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 8092 	bne.w	8001f2a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e3a4      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x132>
 8001e14:	4b50      	ldr	r3, [pc, #320]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4f      	ldr	r2, [pc, #316]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e058      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1e4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d112      	bne.n	8001e50 <HAL_RCC_OscConfig+0x160>
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b48      	ldr	r3, [pc, #288]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b45      	ldr	r3, [pc, #276]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a44      	ldr	r2, [pc, #272]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e041      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1e4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x190>
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b3c      	ldr	r3, [pc, #240]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b39      	ldr	r3, [pc, #228]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a38      	ldr	r2, [pc, #224]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e029      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1c0>
 8001e8a:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a32      	ldr	r2, [pc, #200]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e011      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1e4>
 8001eb0:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a28      	ldr	r2, [pc, #160]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001ece:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe fdbc 	bl	8000a58 <HAL_GetTick>
 8001ee0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe fdb8 	bl	8000a58 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e32e      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x1f4>
 8001f02:	e012      	b.n	8001f2a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe fda8 	bl	8000a58 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fda4 	bl	8000a58 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e31a      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_RCC_OscConfig+0x268>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 809a 	beq.w	800206c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x25a>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b18      	cmp	r3, #24
 8001f42:	d149      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d146      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d104      	bne.n	8001f5c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e2fe      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
 8001f56:	bf00      	nop
 8001f58:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001f62:	4b9a      	ldr	r3, [pc, #616]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0218 	and.w	r2, r3, #24
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d014      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001f72:	4b96      	ldr	r3, [pc, #600]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0218 	bic.w	r2, r3, #24
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	4993      	ldr	r1, [pc, #588]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001f84:	f000 fdd0 	bl	8002b28 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f88:	4b91      	ldr	r3, [pc, #580]	@ (80021d0 <HAL_RCC_OscConfig+0x4e0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fcd9 	bl	8000944 <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e2db      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fd5c 	bl	8000a58 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001fa4:	f7fe fd58 	bl	8000a58 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e2ce      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb6:	4b85      	ldr	r3, [pc, #532]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001fc2:	4b82      	ldr	r3, [pc, #520]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	497e      	ldr	r1, [pc, #504]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001fd6:	e049      	b.n	800206c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d02c      	beq.n	800203a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 0218 	bic.w	r2, r3, #24
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4977      	ldr	r1, [pc, #476]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001ff2:	4b76      	ldr	r3, [pc, #472]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fd2b 	bl	8000a58 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002006:	f7fe fd27 	bl	8000a58 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e29d      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002018:	4b6c      	ldr	r3, [pc, #432]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002024:	4b69      	ldr	r3, [pc, #420]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	4966      	ldr	r1, [pc, #408]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	610b      	str	r3, [r1, #16]
 8002038:	e018      	b.n	800206c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b64      	ldr	r3, [pc, #400]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a63      	ldr	r2, [pc, #396]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7fe fd07 	bl	8000a58 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800204e:	f7fe fd03 	bl	8000a58 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e279      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002060:	4b5a      	ldr	r3, [pc, #360]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d03c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01c      	beq.n	80020ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002080:	4b52      	ldr	r3, [pc, #328]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002086:	4a51      	ldr	r2, [pc, #324]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002088:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800208c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7fe fce2 	bl	8000a58 <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002098:	f7fe fcde 	bl	8000a58 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e254      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80020aa:	4b48      	ldr	r3, [pc, #288]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80020ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ef      	beq.n	8002098 <HAL_RCC_OscConfig+0x3a8>
 80020b8:	e01b      	b.n	80020f2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	4b44      	ldr	r3, [pc, #272]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80020bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020c0:	4a42      	ldr	r2, [pc, #264]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80020c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe fcc5 	bl	8000a58 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020d2:	f7fe fcc1 	bl	8000a58 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e237      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80020e4:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80020e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ef      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80d2 	beq.w	80022a4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002100:	4b34      	ldr	r3, [pc, #208]	@ (80021d4 <HAL_RCC_OscConfig+0x4e4>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d118      	bne.n	800213e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800210c:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HAL_RCC_OscConfig+0x4e4>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	4a30      	ldr	r2, [pc, #192]	@ (80021d4 <HAL_RCC_OscConfig+0x4e4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002118:	f7fe fc9e 	bl	8000a58 <HAL_GetTick>
 800211c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe fc9a 	bl	8000a58 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e210      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <HAL_RCC_OscConfig+0x4e4>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d108      	bne.n	8002158 <HAL_RCC_OscConfig+0x468>
 8002146:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800214c:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002156:	e074      	b.n	8002242 <HAL_RCC_OscConfig+0x552>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d118      	bne.n	8002192 <HAL_RCC_OscConfig+0x4a2>
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002166:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002176:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800217c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002186:	4a11      	ldr	r2, [pc, #68]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002190:	e057      	b.n	8002242 <HAL_RCC_OscConfig+0x552>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d11e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4e8>
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 800219c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021a0:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80021ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021b0:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80021b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021ba:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80021bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c0:	4a02      	ldr	r2, [pc, #8]	@ (80021cc <HAL_RCC_OscConfig+0x4dc>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x552>
 80021cc:	44020c00 	.word	0x44020c00
 80021d0:	20000004 	.word	0x20000004
 80021d4:	44020800 	.word	0x44020800
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b85      	cmp	r3, #133	@ 0x85
 80021de:	d118      	bne.n	8002212 <HAL_RCC_OscConfig+0x522>
 80021e0:	4ba2      	ldr	r3, [pc, #648]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80021e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e6:	4aa1      	ldr	r2, [pc, #644]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021f0:	4b9e      	ldr	r3, [pc, #632]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80021f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021f6:	4a9d      	ldr	r2, [pc, #628]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002200:	4b9a      	ldr	r3, [pc, #616]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002206:	4a99      	ldr	r2, [pc, #612]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002210:	e017      	b.n	8002242 <HAL_RCC_OscConfig+0x552>
 8002212:	4b96      	ldr	r3, [pc, #600]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002218:	4a94      	ldr	r2, [pc, #592]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002222:	4b92      	ldr	r3, [pc, #584]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002228:	4a90      	ldr	r2, [pc, #576]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002232:	4b8e      	ldr	r3, [pc, #568]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002238:	4a8c      	ldr	r2, [pc, #560]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800223a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800223e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7fe fc05 	bl	8000a58 <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fc01 	bl	8000a58 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e175      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002268:	4b80      	ldr	r3, [pc, #512]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800226a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ed      	beq.n	8002252 <HAL_RCC_OscConfig+0x562>
 8002276:	e015      	b.n	80022a4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7fe fbee 	bl	8000a58 <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7fe fbea 	bl	8000a58 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e15e      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002296:	4b75      	ldr	r3, [pc, #468]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ed      	bne.n	8002280 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d036      	beq.n	800231e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d019      	beq.n	80022ec <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022b8:	4b6c      	ldr	r3, [pc, #432]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6b      	ldr	r2, [pc, #428]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80022be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fbc8 	bl	8000a58 <HAL_GetTick>
 80022c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80022cc:	f7fe fbc4 	bl	8000a58 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e13a      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80022de:	4b63      	ldr	r3, [pc, #396]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x5dc>
 80022ea:	e018      	b.n	800231e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ec:	4b5f      	ldr	r3, [pc, #380]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5e      	ldr	r2, [pc, #376]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80022f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fbae 	bl	8000a58 <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002300:	f7fe fbaa 	bl	8000a58 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e120      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002312:	4b56      	ldr	r3, [pc, #344]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8115 	beq.w	8002552 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b18      	cmp	r3, #24
 800232c:	f000 80af 	beq.w	800248e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 8086 	bne.w	8002446 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800233a:	4b4c      	ldr	r3, [pc, #304]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a4b      	ldr	r2, [pc, #300]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fb87 	bl	8000a58 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800234e:	f7fe fb83 	bl	8000a58 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0f9      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002360:	4b42      	ldr	r3, [pc, #264]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f0      	bne.n	800234e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800236c:	4b3f      	ldr	r3, [pc, #252]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002374:	f023 0303 	bic.w	r3, r3, #3
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002380:	0212      	lsls	r2, r2, #8
 8002382:	430a      	orrs	r2, r1
 8002384:	4939      	ldr	r1, [pc, #228]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	628b      	str	r3, [r1, #40]	@ 0x28
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238e:	3b01      	subs	r3, #1
 8002390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002398:	3b01      	subs	r3, #1
 800239a:	025b      	lsls	r3, r3, #9
 800239c:	b29b      	uxth	r3, r3
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	3b01      	subs	r3, #1
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	3b01      	subs	r3, #1
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023ba:	492c      	ldr	r1, [pc, #176]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80023c0:	4b2a      	ldr	r3, [pc, #168]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	4a29      	ldr	r2, [pc, #164]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023c6:	f023 0310 	bic.w	r3, r3, #16
 80023ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d0:	4a26      	ldr	r2, [pc, #152]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80023d6:	4b25      	ldr	r3, [pc, #148]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	4a24      	ldr	r2, [pc, #144]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023dc:	f043 0310 	orr.w	r3, r3, #16
 80023e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	f023 020c 	bic.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	491f      	ldr	r1, [pc, #124]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f023 0220 	bic.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002400:	491a      	ldr	r1, [pc, #104]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002406:	4b19      	ldr	r3, [pc, #100]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	4a18      	ldr	r2, [pc, #96]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a15      	ldr	r2, [pc, #84]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe fb1b 	bl	8000a58 <HAL_GetTick>
 8002422:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002426:	f7fe fb17 	bl	8000a58 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e08d      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x736>
 8002444:	e085      	b.n	8002552 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a08      	ldr	r2, [pc, #32]	@ (800246c <HAL_RCC_OscConfig+0x77c>)
 800244c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fb01 	bl	8000a58 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800245a:	f7fe fafd 	bl	8000a58 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d903      	bls.n	8002470 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e073      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
 800246c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002470:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800247c:	4b37      	ldr	r3, [pc, #220]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	4a36      	ldr	r2, [pc, #216]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 8002482:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	6293      	str	r3, [r2, #40]	@ 0x28
 800248c:	e061      	b.n	8002552 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800248e:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002494:	4b31      	ldr	r3, [pc, #196]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 8002496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002498:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d031      	beq.n	8002506 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d12a      	bne.n	8002506 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d122      	bne.n	8002506 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ca:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d11a      	bne.n	8002506 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	0a5b      	lsrs	r3, r3, #9
 80024d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024dc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d111      	bne.n	8002506 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d108      	bne.n	8002506 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	0e1b      	lsrs	r3, r3, #24
 80024f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e024      	b.n	8002554 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800250a:	4b14      	ldr	r3, [pc, #80]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 800250c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002518:	429a      	cmp	r2, r3
 800251a:	d01a      	beq.n	8002552 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 8002522:	f023 0310 	bic.w	r3, r3, #16
 8002526:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fa96 	bl	8000a58 <HAL_GetTick>
 800252c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800252e:	bf00      	nop
 8002530:	f7fe fa92 	bl	8000a58 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	4293      	cmp	r3, r2
 800253a:	d0f9      	beq.n	8002530 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002540:	4a06      	ldr	r2, [pc, #24]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002546:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	4a04      	ldr	r2, [pc, #16]	@ (800255c <HAL_RCC_OscConfig+0x86c>)
 800254c:	f043 0310 	orr.w	r3, r3, #16
 8002550:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	44020c00 	.word	0x44020c00

08002560 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e19e      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b83      	ldr	r3, [pc, #524]	@ (8002784 <HAL_RCC_ClockConfig+0x224>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b80      	ldr	r3, [pc, #512]	@ (8002784 <HAL_RCC_ClockConfig+0x224>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	497e      	ldr	r1, [pc, #504]	@ (8002784 <HAL_RCC_ClockConfig+0x224>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b7c      	ldr	r3, [pc, #496]	@ (8002784 <HAL_RCC_ClockConfig+0x224>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e186      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d012      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	4b74      	ldr	r3, [pc, #464]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025be:	429a      	cmp	r2, r3
 80025c0:	d909      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80025c2:	4b71      	ldr	r3, [pc, #452]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	496d      	ldr	r1, [pc, #436]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	4b68      	ldr	r3, [pc, #416]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d909      	bls.n	8002608 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80025f4:	4b64      	ldr	r3, [pc, #400]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4961      	ldr	r1, [pc, #388]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002604:	4313      	orrs	r3, r2
 8002606:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002624:	4b58      	ldr	r3, [pc, #352]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4955      	ldr	r1, [pc, #340]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002632:	4313      	orrs	r3, r2
 8002634:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	4b50      	ldr	r3, [pc, #320]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	429a      	cmp	r2, r3
 8002650:	d908      	bls.n	8002664 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002652:	4b4d      	ldr	r3, [pc, #308]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 020f 	bic.w	r2, r3, #15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	494a      	ldr	r1, [pc, #296]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8093 	beq.w	8002798 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800267a:	4b43      	ldr	r3, [pc, #268]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d121      	bne.n	80026ca <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e113      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002692:	4b3d      	ldr	r3, [pc, #244]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d115      	bne.n	80026ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e107      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80026aa:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0fb      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ba:	4b33      	ldr	r3, [pc, #204]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0f3      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80026ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	492c      	ldr	r1, [pc, #176]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe f9bc 	bl	8000a58 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe f9b4 	bl	8000a58 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0d7      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002702:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 0318 	and.w	r3, r3, #24
 800270a:	2b18      	cmp	r3, #24
 800270c:	d1ee      	bne.n	80026ec <HAL_RCC_ClockConfig+0x18c>
 800270e:	e043      	b.n	8002798 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d112      	bne.n	800273e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7fe f99d 	bl	8000a58 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0c0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002730:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 0318 	and.w	r3, r3, #24
 8002738:	2b10      	cmp	r3, #16
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_ClockConfig+0x1ba>
 800273c:	e02c      	b.n	8002798 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d122      	bne.n	800278c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7fe f986 	bl	8000a58 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0a9      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_RCC_ClockConfig+0x228>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0318 	and.w	r3, r3, #24
 8002766:	2b08      	cmp	r3, #8
 8002768:	d1ee      	bne.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
 800276a:	e015      	b.n	8002798 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe f974 	bl	8000a58 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d906      	bls.n	800278c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e097      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
 8002782:	bf00      	nop
 8002784:	40022000 	.word	0x40022000
 8002788:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800278c:	4b4b      	ldr	r3, [pc, #300]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f003 0318 	and.w	r3, r3, #24
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e9      	bne.n	800276c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4b44      	ldr	r3, [pc, #272]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d208      	bcs.n	80027c6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80027b4:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f023 020f 	bic.w	r2, r3, #15
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	493e      	ldr	r1, [pc, #248]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c6:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <HAL_RCC_ClockConfig+0x360>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d210      	bcs.n	80027f6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d4:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <HAL_RCC_ClockConfig+0x360>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 020f 	bic.w	r2, r3, #15
 80027dc:	4938      	ldr	r1, [pc, #224]	@ (80028c0 <HAL_RCC_ClockConfig+0x360>)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e4:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <HAL_RCC_ClockConfig+0x360>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e05d      	b.n	80028b2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d010      	beq.n	8002824 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800280e:	429a      	cmp	r2, r3
 8002810:	d208      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002812:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4927      	ldr	r1, [pc, #156]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002820:	4313      	orrs	r3, r2
 8002822:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d012      	beq.n	8002856 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	4b21      	ldr	r3, [pc, #132]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800283e:	429a      	cmp	r2, r3
 8002840:	d209      	bcs.n	8002856 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002842:	4b1e      	ldr	r3, [pc, #120]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	491a      	ldr	r1, [pc, #104]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002870:	429a      	cmp	r2, r3
 8002872:	d209      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	490e      	ldr	r1, [pc, #56]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002884:	4313      	orrs	r3, r2
 8002886:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002888:	f000 f822 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	490b      	ldr	r1, [pc, #44]	@ (80028c4 <HAL_RCC_ClockConfig+0x364>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_RCC_ClockConfig+0x368>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_RCC_ClockConfig+0x36c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f84c 	bl	8000944 <HAL_InitTick>
 80028ac:	4603      	mov	r3, r0
 80028ae:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80028b0:	7afb      	ldrb	r3, [r7, #11]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	44020c00 	.word	0x44020c00
 80028c0:	40022000 	.word	0x40022000
 80028c4:	08003948 	.word	0x08003948
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	@ 0x24
 80028d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80028d6:	4b8c      	ldr	r3, [pc, #560]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0318 	and.w	r3, r3, #24
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d102      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80028e2:	4b8a      	ldr	r3, [pc, #552]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x23c>)
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e107      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e8:	4b87      	ldr	r3, [pc, #540]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 0318 	and.w	r3, r3, #24
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d112      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80028f4:	4b84      	ldr	r3, [pc, #528]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002900:	4b81      	ldr	r3, [pc, #516]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	4a81      	ldr	r2, [pc, #516]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x240>)
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e0f1      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002914:	4b7e      	ldr	r3, [pc, #504]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x240>)
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	e0ee      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800291a:	4b7b      	ldr	r3, [pc, #492]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0318 	and.w	r3, r3, #24
 8002922:	2b10      	cmp	r3, #16
 8002924:	d102      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002926:	4b7b      	ldr	r3, [pc, #492]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x244>)
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e0e5      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800292c:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f003 0318 	and.w	r3, r3, #24
 8002934:	2b18      	cmp	r3, #24
 8002936:	f040 80dd 	bne.w	8002af4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800293a:	4b73      	ldr	r3, [pc, #460]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 800293c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002944:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800294e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002950:	4b6d      	ldr	r3, [pc, #436]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800295c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80b7 	beq.w	8002aee <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0xbe>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d056      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x16a>
 800298c:	e077      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800298e:	4b5e      	ldr	r3, [pc, #376]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d02d      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800299a:	4b5b      	ldr	r3, [pc, #364]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	08db      	lsrs	r3, r3, #3
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x240>)
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c4:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 80029c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80029d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80029d8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002b18 <HAL_RCC_GetSysClockFreq+0x248>
 80029dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80029f4:	e065      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002b1c <HAL_RCC_GetSysClockFreq+0x24c>
 8002a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a08:	4b3f      	ldr	r3, [pc, #252]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a18:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a1c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002b18 <HAL_RCC_GetSysClockFreq+0x248>
 8002a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002a38:	e043      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a44:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002b20 <HAL_RCC_GetSysClockFreq+0x250>
 8002a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a60:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002b18 <HAL_RCC_GetSysClockFreq+0x248>
 8002a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a78:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002a7c:	e021      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	ee07 3a90 	vmov	s15, r3
 8002a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a88:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b24 <HAL_RCC_GetSysClockFreq+0x254>
 8002a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a90:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aa4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002b18 <HAL_RCC_GetSysClockFreq+0x248>
 8002aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002ac0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac6:	0a5b      	lsrs	r3, r3, #9
 8002ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002acc:	3301      	adds	r3, #1
 8002ace:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ada:	edd7 6a06 	vldr	s13, [r7, #24]
 8002ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 3a90 	vmov	r3, s15
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	e004      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e001      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x240>)
 8002af6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002af8:	69fb      	ldr	r3, [r7, #28]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	@ 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	44020c00 	.word	0x44020c00
 8002b0c:	003d0900 	.word	0x003d0900
 8002b10:	03d09000 	.word	0x03d09000
 8002b14:	016e3600 	.word	0x016e3600
 8002b18:	46000000 	.word	0x46000000
 8002b1c:	4c742400 	.word	0x4c742400
 8002b20:	4bb71b00 	.word	0x4bb71b00
 8002b24:	4a742400 	.word	0x4a742400

08002b28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b2c:	f7ff fed0 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002b36:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b3a:	4907      	ldr	r1, [pc, #28]	@ (8002b58 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002b3e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <HAL_RCC_GetHCLKFreq+0x34>)
 8002b48:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002b4a:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <HAL_RCC_GetHCLKFreq+0x34>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	44020c00 	.word	0x44020c00
 8002b58:	08003948 	.word	0x08003948
 8002b5c:	20000000 	.word	0x20000000

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b0aa      	sub	sp, #168	@ 0xa8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002b84:	2500      	movs	r5, #0
 8002b86:	ea54 0305 	orrs.w	r3, r4, r5
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002b8c:	4bb8      	ldr	r3, [pc, #736]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b92:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	4ab4      	ldr	r2, [pc, #720]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f002 0801 	and.w	r8, r2, #1
 8002bb0:	f04f 0900 	mov.w	r9, #0
 8002bb4:	ea58 0309 	orrs.w	r3, r8, r9
 8002bb8:	d038      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d819      	bhi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002c01 	.word	0x08002c01
 8002bd0:	08002be5 	.word	0x08002be5
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002c01 	.word	0x08002c01
 8002bdc:	08002c01 	.word	0x08002c01
 8002be0:	08002c01 	.word	0x08002c01
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002be8:	3308      	adds	r3, #8
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fddc 	bl	80037a8 <RCCEx_PLL2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002bf6:	e004      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002bfe:	e000      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c02:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002c0a:	4b99      	ldr	r3, [pc, #612]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c10:	f023 0107 	bic.w	r1, r3, #7
 8002c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	4a95      	ldr	r2, [pc, #596]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c22:	e003      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c28:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f002 0a02 	and.w	sl, r2, #2
 8002c38:	f04f 0b00 	mov.w	fp, #0
 8002c3c:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c40:	d03c      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	2b28      	cmp	r3, #40	@ 0x28
 8002c4a:	d01b      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002c4c:	2b28      	cmp	r3, #40	@ 0x28
 8002c4e:	d815      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d019      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d811      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002c58:	2b18      	cmp	r3, #24
 8002c5a:	d017      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002c5c:	2b18      	cmp	r3, #24
 8002c5e:	d80d      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d109      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fd9a 	bl	80037a8 <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002c82:	e006      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002c84:	bf00      	nop
 8002c86:	e004      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002c88:	bf00      	nop
 8002c8a:	e002      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c92:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002c9a:	4b75      	ldr	r3, [pc, #468]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ca0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	4a71      	ldr	r2, [pc, #452]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cac:	430b      	orrs	r3, r1
 8002cae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002cb2:	e003      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002cb8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f002 0304 	and.w	r3, r2, #4
 8002cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cd2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	d040      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002cdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ce6:	d01e      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002ce8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002cec:	d817      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cf2:	d01a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cf8:	d811      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002cfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cfc:	d017      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002cfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d00:	d80d      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002d06:	2b40      	cmp	r3, #64	@ 0x40
 8002d08:	d109      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d0e:	3308      	adds	r3, #8
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fd49 	bl	80037a8 <RCCEx_PLL2_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002d26:	bf00      	nop
 8002d28:	e004      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d34:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10c      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d42:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4c:	4a48      	ldr	r2, [pc, #288]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d54:	e003      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d56:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d5a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002d6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	d043      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002d88:	d021      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d8a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002d8e:	d81a      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002d90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d94:	d01d      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002d96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d9a:	d814      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002d9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002da0:	d019      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002da2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002da6:	d80e      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002db6:	3308      	adds	r3, #8
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fcf5 	bl	80037a8 <RCCEx_PLL2_Config>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002dce:	bf00      	nop
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002de4:	4b22      	ldr	r3, [pc, #136]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dea:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002df6:	430b      	orrs	r3, r1
 8002df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dfc:	e003      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e02:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002e12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e14:	2300      	movs	r3, #0
 8002e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e18:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d03e      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e2c:	d01b      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8002e2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e32:	d814      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e38:	d017      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e3e:	d80e      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d017      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e48:	d109      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e4e:	3308      	adds	r3, #8
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fca9 	bl	80037a8 <RCCEx_PLL2_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002e5c:	e00b      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002e64:	e007      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002e66:	bf00      	nop
 8002e68:	e005      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002e6a:	bf00      	nop
 8002e6c:	e003      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002e6e:	bf00      	nop
 8002e70:	44020c00 	.word	0x44020c00
        break;
 8002e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e76:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002e7e:	4ba5      	ldr	r3, [pc, #660]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e84:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	4aa1      	ldr	r2, [pc, #644]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e90:	430b      	orrs	r3, r1
 8002e92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e96:	e003      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e9c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002eac:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eae:	2300      	movs	r3, #0
 8002eb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002eb2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	d03b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002ebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ec6:	d01b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002ec8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ecc:	d814      	bhi.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002ece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ed2:	d017      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002ed4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ed8:	d80e      	bhi.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d014      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002ede:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ee8:	3308      	adds	r3, #8
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fc5c 	bl	80037a8 <RCCEx_PLL2_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002ef6:	e008      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002efe:	e004      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002f00:	bf00      	nop
 8002f02:	e002      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002f12:	4b80      	ldr	r3, [pc, #512]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f18:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f22:	4a7c      	ldr	r2, [pc, #496]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f24:	430b      	orrs	r3, r1
 8002f26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f2a:	e003      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f30:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f42:	2300      	movs	r3, #0
 8002f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	d033      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002f50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f5a:	d015      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002f5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f60:	d80e      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d012      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002f66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f70:	3308      	adds	r3, #8
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fc18 	bl	80037a8 <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002f7e:	e006      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002f96:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f9c:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002fae:	e003      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fb4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6639      	str	r1, [r7, #96]	@ 0x60
 8002fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	d033      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002fd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fde:	d015      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fe4:	d80e      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fee:	d109      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fbd6 	bl	80037a8 <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003002:	e006      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800300a:	e002      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800300c:	bf00      	nop
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003010:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003012:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800301a:	4b3e      	ldr	r3, [pc, #248]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800301c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003020:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003024:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302a:	4a3a      	ldr	r2, [pc, #232]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800302c:	430b      	orrs	r3, r1
 800302e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003032:	e003      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003038:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800303c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	2100      	movs	r1, #0
 8003046:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800304c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800304e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003052:	460b      	mov	r3, r1
 8003054:	4313      	orrs	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003058:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4a2d      	ldr	r2, [pc, #180]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800305e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003062:	61d3      	str	r3, [r2, #28]
 8003064:	4b2b      	ldr	r3, [pc, #172]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800306c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003070:	4a28      	ldr	r2, [pc, #160]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003072:	430b      	orrs	r3, r1
 8003074:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003076:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003082:	653b      	str	r3, [r7, #80]	@ 0x50
 8003084:	2300      	movs	r3, #0
 8003086:	657b      	str	r3, [r7, #84]	@ 0x54
 8003088:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800308c:	460b      	mov	r3, r1
 800308e:	4313      	orrs	r3, r2
 8003090:	d046      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003092:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003098:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800309c:	d021      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800309e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80030a2:	d81a      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a8:	d01d      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ae:	d814      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80030b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030b4:	d019      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80030b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ba:	d80e      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d016      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80030c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c4:	d109      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030ca:	3308      	adds	r3, #8
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fb6b 	bl	80037a8 <RCCEx_PLL2_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80030d8:	e00a      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030e0:	e006      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80030e2:	bf00      	nop
 80030e4:	e004      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80030ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80030f8:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80030fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80030fe:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003102:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003108:	4a02      	ldr	r2, [pc, #8]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800310a:	430b      	orrs	r3, r1
 800310c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003110:	e006      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003112:	bf00      	nop
 8003114:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800311c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800312c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800312e:	2300      	movs	r3, #0
 8003130:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003132:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d043      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800313c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003146:	d021      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003148:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800314c:	d81a      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800314e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003152:	d01d      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003158:	d814      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800315a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800315e:	d019      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003164:	d80e      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800316a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800316e:	d109      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003170:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003174:	3308      	adds	r3, #8
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fb16 	bl	80037a8 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003182:	e00a      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800318a:	e006      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800318c:	bf00      	nop
 800318e:	e004      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003190:	bf00      	nop
 8003192:	e002      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80031a2:	4bb6      	ldr	r3, [pc, #728]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80031a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80031a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80031ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	4ab2      	ldr	r2, [pc, #712]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80031b4:	430b      	orrs	r3, r1
 80031b6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031c0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80031c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80031d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031d2:	2300      	movs	r3, #0
 80031d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80031da:	460b      	mov	r3, r1
 80031dc:	4313      	orrs	r3, r2
 80031de:	d030      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80031e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d80f      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d211      	bcs.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d911      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d109      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031fa:	3308      	adds	r3, #8
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fad3 	bl	80037a8 <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003208:	e006      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003210:	e002      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003218:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10c      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003220:	4b96      	ldr	r3, [pc, #600]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003226:	f023 0107 	bic.w	r1, r3, #7
 800322a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800322e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003230:	4a92      	ldr	r2, [pc, #584]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003232:	430b      	orrs	r3, r1
 8003234:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800323e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	2100      	movs	r1, #0
 800324c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800324e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003254:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003258:	460b      	mov	r3, r1
 800325a:	4313      	orrs	r3, r2
 800325c:	d022      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800325e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003268:	2b08      	cmp	r3, #8
 800326a:	d005      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003272:	e002      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003274:	bf00      	nop
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003282:	4b7e      	ldr	r3, [pc, #504]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003288:	f023 0108 	bic.w	r1, r3, #8
 800328c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003292:	4a7a      	ldr	r2, [pc, #488]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003294:	430b      	orrs	r3, r1
 8003296:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800329a:	e003      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80032b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80032ba:	460b      	mov	r3, r1
 80032bc:	4313      	orrs	r3, r2
 80032be:	f000 80b0 	beq.w	8003422 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80032c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ce:	f7fd fbc3 	bl	8000a58 <HAL_GetTick>
 80032d2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80032d6:	e00b      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7fd fbbe 	bl	8000a58 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d903      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032ee:	e005      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80032f0:	4b63      	ldr	r3, [pc, #396]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ed      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80032fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 808a 	bne.w	800341a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003306:	4b5d      	ldr	r3, [pc, #372]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800330c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d022      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800331c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003322:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003326:	429a      	cmp	r2, r3
 8003328:	d01b      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800332a:	4b54      	ldr	r3, [pc, #336]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800332c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003334:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003338:	4b50      	ldr	r3, [pc, #320]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800333a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800333e:	4a4f      	ldr	r2, [pc, #316]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003344:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003348:	4b4c      	ldr	r3, [pc, #304]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800334a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800334e:	4a4b      	ldr	r2, [pc, #300]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003354:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003358:	4a48      	ldr	r2, [pc, #288]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800335a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800335e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d019      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fd fb73 	bl	8000a58 <HAL_GetTick>
 8003372:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	e00d      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd fb6e 	bl	8000a58 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d903      	bls.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003392:	e006      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003394:	4b39      	ldr	r3, [pc, #228]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ea      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80033a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d132      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80033aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033b8:	d10f      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80033ba:	4b30      	ldr	r3, [pc, #192]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80033c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80033d2:	4a2a      	ldr	r2, [pc, #168]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	e005      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80033da:	4b28      	ldr	r3, [pc, #160]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	4a27      	ldr	r2, [pc, #156]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033e4:	61d3      	str	r3, [r2, #28]
 80033e6:	4b25      	ldr	r3, [pc, #148]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ec:	4a23      	ldr	r2, [pc, #140]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033f6:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033f8:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80033fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003406:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003408:	430b      	orrs	r3, r1
 800340a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800340e:	e008      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003410:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003414:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800341e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003422:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800342e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003434:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003438:	460b      	mov	r3, r1
 800343a:	4313      	orrs	r3, r2
 800343c:	d038      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800343e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003444:	2b30      	cmp	r3, #48	@ 0x30
 8003446:	d014      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003448:	2b30      	cmp	r3, #48	@ 0x30
 800344a:	d80e      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d012      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d80a      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d106      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4b07      	ldr	r3, [pc, #28]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	4a06      	ldr	r2, [pc, #24]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003466:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003468:	e00d      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003470:	e009      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003472:	bf00      	nop
 8003474:	e007      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003476:	bf00      	nop
 8003478:	e005      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800347a:	bf00      	nop
 800347c:	44020c00 	.word	0x44020c00
 8003480:	44020800 	.word	0x44020800
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800348e:	4bb5      	ldr	r3, [pc, #724]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003494:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003498:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800349c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349e:	49b1      	ldr	r1, [pc, #708]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80034a6:	e003      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80034b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034c6:	460b      	mov	r3, r1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	d03c      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80034cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d81d      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80034d6:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	080034f1 	.word	0x080034f1
 80034e0:	080034ff 	.word	0x080034ff
 80034e4:	08003513 	.word	0x08003513
 80034e8:	0800351b 	.word	0x0800351b
 80034ec:	0800351b 	.word	0x0800351b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f0:	4b9c      	ldr	r3, [pc, #624]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	4a9b      	ldr	r2, [pc, #620]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80034fc:	e00e      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003502:	3308      	adds	r3, #8
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f94f 	bl	80037a8 <RCCEx_PLL2_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003510:	e004      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003518:	e000      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800351a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10c      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003524:	4b8f      	ldr	r3, [pc, #572]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800352a:	f023 0207 	bic.w	r2, r3, #7
 800352e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003534:	498b      	ldr	r1, [pc, #556]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800353c:	e003      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003542:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003546:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800355c:	460b      	mov	r3, r1
 800355e:	4313      	orrs	r3, r2
 8003560:	d03c      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003568:	2b20      	cmp	r3, #32
 800356a:	d01f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d819      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003570:	2b18      	cmp	r3, #24
 8003572:	d01d      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003574:	2b18      	cmp	r3, #24
 8003576:	d815      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800357c:	2b08      	cmp	r3, #8
 800357e:	d007      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003580:	e010      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003582:	4b78      	ldr	r3, [pc, #480]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	4a77      	ldr	r2, [pc, #476]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800358e:	e010      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003594:	3308      	adds	r3, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f906 	bl	80037a8 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80035a2:	e006      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80035b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80035ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035c0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80035c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	4966      	ldr	r1, [pc, #408]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80035dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d03e      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80035f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003602:	d020      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003608:	d819      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xade>
 800360a:	2bc0      	cmp	r3, #192	@ 0xc0
 800360c:	d01d      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800360e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003610:	d815      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d007      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800361a:	e010      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361c:	4b51      	ldr	r3, [pc, #324]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	4a50      	ldr	r2, [pc, #320]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003626:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003628:	e010      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800362a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800362e:	3308      	adds	r3, #8
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f8b9 	bl	80037a8 <RCCEx_PLL2_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800363c:	e006      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003644:	e002      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800364a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10c      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003654:	4b43      	ldr	r3, [pc, #268]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800365a:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800365e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003664:	493f      	ldr	r1, [pc, #252]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003672:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003676:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	2100      	movs	r1, #0
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800368c:	460b      	mov	r3, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	d038      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003692:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369c:	d00e      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800369e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a2:	d815      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d017      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ac:	d110      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80036ba:	e00e      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c0:	3308      	adds	r3, #8
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f870 	bl	80037a8 <RCCEx_PLL2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80036ce:	e004      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036d6:	e000      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80036d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036da:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80036e2:	4b20      	ldr	r3, [pc, #128]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	491c      	ldr	r1, [pc, #112]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003700:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003704:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	2100      	movs	r1, #0
 800370e:	6039      	str	r1, [r7, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	e9d7 1200 	ldrd	r1, r2, [r7]
 800371a:	460b      	mov	r3, r1
 800371c:	4313      	orrs	r3, r2
 800371e:	d039      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003720:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003726:	2b30      	cmp	r3, #48	@ 0x30
 8003728:	d01e      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800372a:	2b30      	cmp	r3, #48	@ 0x30
 800372c:	d815      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800372e:	2b10      	cmp	r3, #16
 8003730:	d002      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003732:	2b20      	cmp	r3, #32
 8003734:	d007      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003736:	e010      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b0a      	ldr	r3, [pc, #40]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	4a09      	ldr	r2, [pc, #36]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003742:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003744:	e011      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003746:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800374a:	3308      	adds	r3, #8
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f82b 	bl	80037a8 <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003758:	e007      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003762:	bf00      	nop
 8003764:	44020c00 	.word	0x44020c00
        break;
 8003768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003772:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003778:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800377c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003782:	4908      	ldr	r1, [pc, #32]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800378a:	e003      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003790:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003794:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003798:	4618      	mov	r0, r3
 800379a:	37a8      	adds	r7, #168	@ 0xa8
 800379c:	46bd      	mov	sp, r7
 800379e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a2:	bf00      	nop
 80037a4:	44020c00 	.word	0x44020c00

080037a8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80037b0:	4b48      	ldr	r3, [pc, #288]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a47      	ldr	r2, [pc, #284]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 80037b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037bc:	f7fd f94c 	bl	8000a58 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037c2:	e008      	b.n	80037d6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80037c4:	f7fd f948 	bl	8000a58 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e07a      	b.n	80038cc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037d6:	4b3f      	ldr	r3, [pc, #252]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80037e2:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6811      	ldr	r1, [r2, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6852      	ldr	r2, [r2, #4]
 80037f6:	0212      	lsls	r2, r2, #8
 80037f8:	430a      	orrs	r2, r1
 80037fa:	4936      	ldr	r1, [pc, #216]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	3b01      	subs	r3, #1
 8003806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	3b01      	subs	r3, #1
 8003810:	025b      	lsls	r3, r3, #9
 8003812:	b29b      	uxth	r3, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	3b01      	subs	r3, #1
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	3b01      	subs	r3, #1
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003830:	4928      	ldr	r1, [pc, #160]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003832:	4313      	orrs	r3, r2
 8003834:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003836:	4b27      	ldr	r3, [pc, #156]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	f023 020c 	bic.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4924      	ldr	r1, [pc, #144]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003848:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	f023 0220 	bic.w	r2, r3, #32
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	491f      	ldr	r1, [pc, #124]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800385a:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 800385c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	491c      	ldr	r1, [pc, #112]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003864:	4313      	orrs	r3, r2
 8003866:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 800386e:	f023 0310 	bic.w	r3, r3, #16
 8003872:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003874:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800387c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6a12      	ldr	r2, [r2, #32]
 8003884:	00d2      	lsls	r2, r2, #3
 8003886:	4913      	ldr	r1, [pc, #76]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800388c:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 8003892:	f043 0310 	orr.w	r3, r3, #16
 8003896:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8003898:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0d      	ldr	r2, [pc, #52]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 800389e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038a4:	f7fd f8d8 	bl	8000a58 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038aa:	e008      	b.n	80038be <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80038ac:	f7fd f8d4 	bl	8000a58 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e006      	b.n	80038cc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038be:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <RCCEx_PLL2_Config+0x12c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0

}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	44020c00 	.word	0x44020c00

080038d8 <memset>:
 80038d8:	4402      	add	r2, r0
 80038da:	4603      	mov	r3, r0
 80038dc:	4293      	cmp	r3, r2
 80038de:	d100      	bne.n	80038e2 <memset+0xa>
 80038e0:	4770      	bx	lr
 80038e2:	f803 1b01 	strb.w	r1, [r3], #1
 80038e6:	e7f9      	b.n	80038dc <memset+0x4>

080038e8 <__libc_init_array>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003920 <__libc_init_array+0x38>)
 80038ec:	2600      	movs	r6, #0
 80038ee:	4c0d      	ldr	r4, [pc, #52]	@ (8003924 <__libc_init_array+0x3c>)
 80038f0:	1b64      	subs	r4, r4, r5
 80038f2:	10a4      	asrs	r4, r4, #2
 80038f4:	42a6      	cmp	r6, r4
 80038f6:	d109      	bne.n	800390c <__libc_init_array+0x24>
 80038f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003928 <__libc_init_array+0x40>)
 80038fa:	2600      	movs	r6, #0
 80038fc:	4c0b      	ldr	r4, [pc, #44]	@ (800392c <__libc_init_array+0x44>)
 80038fe:	f000 f817 	bl	8003930 <_init>
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	42a6      	cmp	r6, r4
 8003908:	d105      	bne.n	8003916 <__libc_init_array+0x2e>
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003910:	3601      	adds	r6, #1
 8003912:	4798      	blx	r3
 8003914:	e7ee      	b.n	80038f4 <__libc_init_array+0xc>
 8003916:	f855 3b04 	ldr.w	r3, [r5], #4
 800391a:	3601      	adds	r6, #1
 800391c:	4798      	blx	r3
 800391e:	e7f2      	b.n	8003906 <__libc_init_array+0x1e>
 8003920:	08003968 	.word	0x08003968
 8003924:	08003968 	.word	0x08003968
 8003928:	08003968 	.word	0x08003968
 800392c:	0800396c 	.word	0x0800396c

08003930 <_init>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	bf00      	nop
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr

0800393c <_fini>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr
